set global log_bin_trust_function_creators=TRUE;
DROP FUNCTION IF EXISTS HexToBinary;


-- 16进制字符转为2进制字符串
CREATE FUNCTION HexToBinary(v_str CHAR(1))
RETURNS VARCHAR(4)
BEGIN
   DECLARE v_var VARCHAR(4);
   SET v_var = CASE
   WHEN v_str = '0' THEN '0000'
   WHEN v_str = '1' THEN '0001'
   WHEN v_str = '2' THEN '0010'
   WHEN v_str = '3' THEN '0011'
   WHEN v_str = '4' THEN '0100'
   WHEN v_str = '5' THEN '0101'
   WHEN v_str = '6' THEN '0110'
   WHEN v_str = '7' THEN '0111'
   WHEN v_str = '8' THEN '1000'
   WHEN v_str = '9' THEN '1001'
   WHEN v_str = 'A' THEN '1010'
   WHEN v_str = 'B' THEN '1011'
   WHEN v_str = 'C' THEN '1100'
   WHEN v_str = 'D' THEN '1101'
   WHEN v_str = 'E' THEN '1110'
   WHEN v_str = 'F' THEN '1111'
   END;
   RETURN v_var;    
END; 






DROP FUNCTION IF EXISTS IsMask;

CREATE FUNCTION IsMask(v_str VARCHAR(12))
RETURNS INT 
BEGIN
   DECLARE v_MaskValue INT;
   DECLARE v_Hour INT;
   DECLARE v_Minute INT;

   SET v_Hour = EXTRACT(HOUR FROM CURRENT_TIMESTAMP);
   SET v_Minute = EXTRACT(MINUTE FROM CURRENT_TIMESTAMP);



   IF v_Hour = 0 then

      IF  v_Minute <= 30 then

         SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,1,1)),1,1);
      ELSE
         SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,1,1)),2,1);
      end if;
   ELSE 
      IF v_Hour = 1 then

         IF  v_Minute <= 30 then

            SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,1,1)),3,1);
         ELSE
            SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,1,1)),4,1);
         end if;
      ELSE 
         IF v_Hour = 2 then

            IF  v_Minute <= 30 then

               SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,2,1)),1,1);
            ELSE
               SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,2,1)),2,1);
            end if;
         ELSE 
            IF v_Hour = 3 then

               IF  v_Minute <= 30 then

                  SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,2,1)),3,1);
               ELSE
                  SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,2,1)),4,1);
               end if;
            ELSE 
               IF v_Hour = 4 then

                  IF  v_Minute <= 30 then

                     SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,3,1)),1,1);
                  ELSE
                     SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,3,1)),2,1);
                  end if;
               ELSE 
                  IF v_Hour = 5 then

                     IF  v_Minute <= 30 then

                        SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,3,1)),3,1);
                     ELSE
                        SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,3,1)),4,1);
                     end if;
                  ELSE 
                     IF v_Hour = 6 then

                        IF  v_Minute <= 30 then

                           SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,4,1)),1,1);
                        ELSE
                           SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,4,1)),2,1);
                        end if;
                     ELSE 
                        IF v_Hour = 7 then

                           IF  v_Minute <= 30 then

                              SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,4,1)),3,1);
                           ELSE
                              SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,4,1)),4,1);
                           end if;
                        ELSE 
                           IF v_Hour = 8 then

                              IF  v_Minute <= 30 then

                                 SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,5,1)),1,1);
                              ELSE
                                 SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,5,1)),2,1);
                              end if;
                           ELSE 
                              IF v_Hour = 9 then

                                 IF  v_Minute <= 30 then

                                    SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,5,1)),3,1);
                                 ELSE
                                    SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,5,1)),4,1);
                                 end if;
                              ELSE 
                                 IF v_Hour = 10 then

                                    IF  v_Minute <= 30 then

                                       SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,6,1)),1,1);
                                    ELSE
                                       SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,6,1)),2,1);
                                    end if;
                                 ELSE 
                                    IF v_Hour = 11 then

                                       IF  v_Minute <= 30 then

                                          SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,6,1)),3,1);
                                       ELSE
                                          SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,6,1)),4,1);
                                       end if;
                                    ELSE 
                                       IF v_Hour = 12 then

                                          IF  v_Minute <= 30 then

                                             SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,7,1)),1,1);
                                          ELSE
                                             SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,7,1)),2,1);
                                          end if;
                                       ELSE 
                                          IF v_Hour = 13 then

                                             IF  v_Minute <= 30 then

                                                SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,7,1)),3,1);
                                             ELSE
                                                SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,7,1)),4,1);
                                             end if;
                                          ELSE 
                                             IF v_Hour = 14 then

                                                IF  v_Minute <= 30 then

                                                   SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,8,1)),1,1);
                                                ELSE
                                                   SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,8,1)),2,1);
                                                end if;
                                             ELSE 
                                                IF v_Hour = 15 then

                                                   IF  v_Minute <= 30 then

                                                      SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,8,1)),3,1);
                                                   ELSE
                                                      SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,8,1)),4,1);
                                                   end if;
                                                ELSE 
                                                   IF v_Hour = 16 then

                                                      IF  v_Minute <= 30 then

                                                         SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,9,1)),1,1);
                                                      ELSE
                                                         SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,9,1)),2,1);
                                                      end if;
                                                   ELSE 
                                                      IF v_Hour = 17 then

                                                         IF  v_Minute <= 30 then

                                                            SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,9,1)),3,1);
                                                         ELSE
                                                            SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,9,1)),4,1);
                                                         end if;
                                                      ELSE 
                                                         IF v_Hour = 18 then

                                                            IF  v_Minute <= 30 then

                                                               SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,10,1)),1,1);
                                                            ELSE
                                                               SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,10,1)),2,1);
                                                            end if;
                                                         ELSE 
                                                            IF v_Hour = 19 then

                                                               IF  v_Minute <= 30 then

                                                                  SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,10,1)),3,1);
                                                               ELSE
                                                                  SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,10,1)),4,1);
                                                               end if;
                                                            ELSE 
                                                               IF v_Hour = 20 then

                                                                  IF  v_Minute <= 30 then

                                                                     SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,11,1)),1,1);
                                                                  ELSE
                                                                     SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,11,1)),2,1);
                                                                  end if;
                                                               ELSE 
                                                                  IF v_Hour = 21 then

                                                                     IF  v_Minute <= 30 then

                                                                        SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,11,1)),3,1);
                                                                     ELSE
                                                                        SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,11,1)),4,1);
                                                                     end if;
                                                                  ELSE 
                                                                     IF v_Hour = 22 then

                                                                        IF  v_Minute <= 30 then

                                                                           SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,12,1)),1,1);
                                                                        ELSE
                                                                           SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,12,1)),2,1);
                                                                        end if;
                                                                     ELSE 
                                                                        IF v_Hour = 23 then

                                                                           IF  v_Minute <= 30 then

                                                                              SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,12,1)),3,1);
                                                                           ELSE
                                                                              SET v_MaskValue = SUBSTRING(HexToBinary(SUBSTRING(v_str,12,1)),4,1);
                                                                           end if;
                                                                        end if;
                                                                     end if;
                                                                  end if;
                                                               end if;
                                                            end if;
                                                         end if;
                                                      end if;
                                                   end if;
                                                end if;
                                             end if;
                                          end if;
                                       end if;
                                    end if;
                                 end if;
                              end if;
                           end if;
                        end if;
                     end if;
                  end if;
               end if;
            end if;
         end if;
      end if;
   end if;

   RETURN v_MaskValue;
END; 


-- SELECT N'SQLWAYS_EVAL# .[hextoint]...';

DROP FUNCTION IF EXISTS hextoint;

CREATE FUNCTION hextoint(v_Value VARCHAR(8)) 
RETURNS INT 
BEGIN 
   DECLARE v_I BIGINT;
   if v_Value REGEXP 'SQLWAYS_EVAL# .*' then
      RETURN NULL;
   end if; 
   SET v_I = cast(CAST(RIGHT(UPPER(CONCAT('00000000',v_Value)),8) AS BINARY(8)) as SIGNED INTEGER) -cast(0x3030303030303030 as SIGNED INTEGER); 
   SET v_I = v_I -((v_I/16) & cast(0x0101010101010101 as SIGNED INTEGER))*7; 
   RETURN cast(CAST((v_I & 15)+((v_I/16) & 240)+((v_I/256) & 3840)+((v_I/4096) & 61440)+((v_I/65536) & 983040)+((v_I/1048576) & 15728640)+((v_I/16777216) & 251658240)+(v_I/cast(0x0100000000000000 as SIGNED INTEGER)*268435456)
   AS BINARY(4)) as SIGNED INTEGER); 
END; 

DROP PROCEDURE IF EXISTS PAM_AddEventNote;

CREATE PROCEDURE PAM_AddEventNote(v_Events             NATIONAL VARCHAR(4000),
v_UserId             INT         ,
v_Note               NATIONAL VARCHAR(4000))
BEGIN
   DECLARE v_SequenceId VARCHAR(256);
   DECLARE v_I INT; 
   DECLARE v_RecordCount INT; 
   DECLARE v_sql VARCHAR(4000);
   DROP TEMPORARY TABLE IF EXISTS tt_Alarm;
   create TEMPORARY table tt_Alarm 
   (
      IndexId INT   AUTO_INCREMENT PRIMARY KEY,
      SequenceId NATIONAL VARCHAR(128) NOT NULL,
      StationId INT NOT NULL,
      StationName NATIONAL VARCHAR(255),
      EquipmentId INT,
      EquipmentName NATIONAL VARCHAR(128),
      EventId INT,
      EventName NATIONAL VARCHAR(128),
      EventConditionId INT,
      EventSeverityId INT,
      EventSeverity NATIONAL VARCHAR(128),
      StartTime DATETIME,
      EndTime DATETIME,
      CancelTime DATETIME,
      CancelUserId INT,
      CancelUserName NATIONAL VARCHAR(128),
      ConfirmTime DATETIME,
      ConfirmerId INT,
      ConfirmerName NATIONAL VARCHAR(128),
      EventValue FLOAT,
      ReversalNum INT,
      Meanings NATIONAL VARCHAR(255),
      EventFilePath NATIONAL VARCHAR(255),
      Description NATIONAL VARCHAR(255),
      SourceHostId INT,
      InstructionId NATIONAL VARCHAR(255),
      InstructionStatus INT,
      StandardAlarmNameId INT,
      StandardAlarmName NATIONAL VARCHAR(128),
      BaseTypeId NUMERIC(10,0),
      BaseTypeName NATIONAL VARCHAR(128),
      EquipmentCategory INT,
      EquipmentCategoryName NATIONAL VARCHAR(128),
      MaintainState INT NOT NULL,
      SignalId INT,
      RelateSequenceId NATIONAL VARCHAR(128),
      EventCategoryId INT,
      EventStateId INT,
      CenterId INT,
      CenterName NATIONAL VARCHAR(128),
      StructureName NATIONAL VARCHAR(128),
      MonitorUnitName NATIONAL VARCHAR(128),
      StructureId INT,
      StationCategoryId INT,
      EquipmentVendor NATIONAL VARCHAR(128)
   );

   SET v_sql = CONCAT('INSERT INTO tt_Alarm
   SELECT SequenceId, StationId, StationName, EquipmentId, EquipmentName, EventId, EventName,

   EventConditionId, EventSeverityId, EventSeverity, StartTime, EndTime, 
   CancelTime, CancelUserId,
CancelUserName, ConfirmTime, ConfirmerId, ConfirmerName, 
   EventValue, ReversalNum, Meanings, EventFilePath,
Description, SourceHostId, 
   InstructionId, InstructionStatus, StandardAlarmNameId, StandardAlarmName, 
   BaseTypeId,
BaseTypeName, EquipmentCategory, EquipmentCategoryName, 
   MaintainState, SignalId, RelateSequenceId, EventCategoryId, EventStateId,

   CenterId, CenterName, StructureName, MonitorUnitName,StructureId, StationCategoryId, 
   EquipmentVendor
   FROM  TBL_ActiveEvent WHERE SequenceId IN( ',v_Events,' )');

   SET @SWV_Stmt = v_sql;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;

   select   MIN(IndexId), MAX(IndexId) INTO v_I,v_RecordCount FROM tt_Alarm;
   WHILE v_I <= v_RecordCount DO
      select   SequenceId INTO v_SequenceId FROM tt_Alarm WHERE IndexId = v_I;
      UPDATE TBL_ActiveEvent SET Description = v_Note WHERE SequenceId = v_SequenceId;
      INSERT INTO TBL_AlarmChange(SequenceId ,
OperationType ,
StationId ,
StationName ,
EquipmentId ,
EquipmentName ,
EventId ,
EventName ,
EventConditionId ,
EventSeverityId ,
EventSeverity ,
StartTime ,
EndTime ,
CancelTime ,
CancelUserId ,
CancelUserName ,
ConfirmTime ,
ConfirmerId ,
ConfirmerName ,
EventValue ,
ReversalNum ,
Meanings ,
EventFilePath ,
Description ,
SourceHostId ,
InstructionId ,
InstructionStatus ,
StandardAlarmNameId ,
StandardAlarmName ,
BaseTypeId ,
BaseTypeName ,
EquipmentCategory ,
EquipmentCategoryName ,
MaintainState  ,
SignalId ,
RelateSequenceId ,
EventCategoryId ,
EventStateId ,
CenterId ,
CenterName ,
StructureName ,
MonitorUnitName,
StructureId,
StationCategoryId,
EquipmentVendor)
      SELECT  SequenceId,
5,
StationId,
StationName,
EquipmentId,
EquipmentName,
EventId,
EventName,
EventConditionId,
EventSeverityId,
EventSeverity,
StartTime,
EndTime,
CancelTime,
CancelUserId,
CancelUserName,
ConfirmTime,
ConfirmerId,
ConfirmerName,
EventValue,
ReversalNum,
Meanings,
EventFilePath,
v_Note,
SourceHostId,
InstructionId,
InstructionStatus,
StandardAlarmNameId,
StandardAlarmName,
BaseTypeId,
BaseTypeName,
EquipmentCategory,
EquipmentCategoryName,
MaintainState,
SignalId,
RelateSequenceId,
EventCategoryId,
EventStateId,
CenterId,
CenterName,
StructureName,
MonitorUnitName,
StructureId,
StationCategoryId,
EquipmentVendor
      FROM tt_Alarm
      WHERE SequenceId = v_SequenceId;
      SET v_I = v_I+1;
   END WHILE;
END;


-- SELECT N'SQLWAYS_EVAL# .[PAM_GetStandardVer]...';


DROP PROCEDURE IF EXISTS PAM_GetStandardVer;

CREATE PROCEDURE PAM_GetStandardVer(INOUT SWP_Ret_Value INT)
BEGIN
-- 获取标准化类型
   DECLARE v_StandardVer INT;

   select   B.StandardId INTO v_StandardVer FROM TBL_SysConfig A
   INNER JOIN TBL_StandardType B ON A.ConfigValue = B.StandardAlias WHERE A.ConfigKey = 'StandardVer';

   IF v_StandardVer IS NULL then

      SET v_StandardVer = 0;
   end if;
   SET SWP_Ret_Value = v_StandardVer;
END;


-- SELECT N'SQLWAYS_EVAL# M_FilterEquipmentCategory]...';


DROP PROCEDURE IF EXISTS PAM_FilterEquipmentCategory;

CREATE PROCEDURE PAM_FilterEquipmentCategory(v_EquipmentCategory  NATIONAL VARCHAR(4000)    ,
v_EquipmentId        NATIONAL VARCHAR(4000)    ,
v_EquipmentId2       NATIONAL VARCHAR(4000)    ,
v_EquipmentId3       NATIONAL VARCHAR(4000)    ,
v_QueryUserId        NATIONAL VARCHAR(20)      ,
v_StationTableName   NATIONAL VARCHAR(30)   	,
v_EquipmentTableName NATIONAL VARCHAR(30)   ,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_Index INT;
   DECLARE v_RoleId INT;
   DECLARE v_PrivilegeId INT;
   DECLARE v_Admin INT;
   DECLARE v_WhereEquipmentCategory NATIONAL VARCHAR(4000);  
   DECLARE v_WhereEquipmentId1 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereEquipmentId2 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereEquipmentId3 NATIONAL VARCHAR(4000);
   DECLARE SWV_ExecDyn VARCHAR(5000);  

-- 系统管理员
   IF v_EquipmentCategory is null then
      set v_EquipmentCategory = '-1';
   END IF;
   IF v_EquipmentId is null then
      set v_EquipmentId = '-1';
   END IF;
   IF v_EquipmentId2 is null then
      set v_EquipmentId2 = '-1';
   END IF;
   IF v_EquipmentId3 is null then
      set v_EquipmentId3 = '-1';
   END IF;
   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   IF v_StationTableName is null then
      set v_StationTableName = '-1';
   END IF;
   IF v_EquipmentTableName is null then
      set v_EquipmentTableName = '-1';
   END IF;
   SET v_Admin = -1;

-- 设备ID
   SET v_WhereEquipmentId1 = '  ';
   IF IFNULL(v_EquipmentId,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_EquipmentId);
      IF v_Index = 0 then
         SET v_WhereEquipmentId1 = CONCAT('SQLWAYS_EVAL# = ',v_EquipmentId);
      ELSE
         SET v_WhereEquipmentId1 = CONCAT('SQLWAYS_EVAL# IN (',v_EquipmentId,')');
      end if;
   end if;

-- 设备ID2
   SET v_WhereEquipmentId2 = '  ';
   IF IFNULL(v_EquipmentId2,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_EquipmentId2);
      IF v_Index = 0 then
         SET v_WhereEquipmentId2 = CONCAT('SQLWAYS_EVAL# = ',v_EquipmentId2);
      ELSE
         SET v_WhereEquipmentId2 = CONCAT('SQLWAYS_EVAL# IN (',v_EquipmentId2,')');
      end if;
   end if;

-- 设备ID3
   SET v_WhereEquipmentId3 = '  ';
   IF IFNULL(v_EquipmentId3,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_EquipmentId3);
      IF v_Index = 0 then
         SET v_WhereEquipmentId3 = CONCAT('SQLWAYS_EVAL# = ',v_EquipmentId3);
      ELSE
         SET v_WhereEquipmentId3 = CONCAT('SQLWAYS_EVAL# IN (',v_EquipmentId3,')');
      end if;
   end if;

-- 设备类型
   SET v_WhereEquipmentCategory = '  ';
   IF IFNULL(v_EquipmentCategory,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_EquipmentCategory);
      IF v_Index = 0 then
         SET v_WhereEquipmentCategory = CONCAT('SQLWAYS_EVAL# = ',v_EquipmentCategory);
      ELSE
         SET v_WhereEquipmentCategory = CONCAT('SQLWAYS_EVAL# IN (',v_EquipmentCategory,')');
      end if;
   end if;

-- 是否管理员
   select   RoleId INTO v_RoleId FROM TBL_UserRoleMap WHERE UserId = cast(v_QueryUserId as SIGNED INTEGER) AND RoleId = v_Admin;

-- 是否包含所有权限
   select   SpecialtyGroupId INTO v_PrivilegeId FROM   TBL_Account            ul
   INNER JOIN  TBL_UserRoleMap        mp   ON ul.UserId       =   mp.UserId
   INNER JOIN  TBL_UserRole           ur   ON mp.RoleId       =   ur.RoleId
   INNER JOIN  TBL_UserRoleRight      urr  ON ur.RoleId       =   urr.RoleId        AND urr.OperationType = 3
   INNER JOIN  TBL_SpecialtyGroup     a    ON a.SpecialtyGroupId        =   urr.OperationId WHERE ul.UserId = cast(v_QueryUserId as SIGNED INTEGER) AND a.SpecialtyGroupId = v_Admin;

   IF  v_RoleId IS NULL AND v_PrivilegeId IS NULL then

-- 非系统管理员返回结果
      SET SWV_ExecDyn = CONCAT('INSERT INTO ',v_EquipmentTableName,' (CenterId,CenterName,GroupId,GroupName,StationId,StationName,StationState,StationCategory,EquipmentId,EquipmentName,EquipmentTemplateId,EquipmentCategory) SELECT su.CenterId, su.CenterName,
su.GroupId, su.GroupName,
su.StationId, su.StationName,

      su.StationState, su.StationCategory,
ee.EquipmentId, ee.EquipmentName,

      ee.EquipmentTemplateId, ee.EquipmentCategory
      FROM   TBL_Account            ul
      INNER JOIN  TBL_UserRoleMap        mp   ON ul.UserId       =   mp.UserId
      INNER JOIN  TBL_UserRole           ur   ON mp.RoleId       =   ur.RoleId
      INNER JOIN  TBL_UserRoleRight      urr  ON ur.RoleId       =   urr.RoleId        AND urr.OperationType = 3
      INNER JOIN  TBL_SpecialtyGroup     a    ON a.SpecialtyGroupId        =   urr.OperationId
      INNER JOIN  TBL_SpecialtyGroupMap  am   ON a.SpecialtyGroupId        =   am.SpecialtyGroupId
      INNER JOIN	TBL_Equipment          ee	ON am.EntryItemId    =   ee.EquipmentCategory
      INNER JOIN ',v_StationTableName,'su ON ee.StationId = su.StationId  WHERE 1 = 1');
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
      IF IFNULL(v_EquipmentId2,'-1') <> '-1' then

         SET SWV_ExecDyn = CONCAT('INSERT INTO ',v_EquipmentTableName,' (CenterId,CenterName,GroupId,GroupName,StationId,StationName,StationState,StationCategory,EquipmentId,EquipmentName,EquipmentTemplateId,EquipmentCategory) SELECT su.CenterId, su.CenterName,
su.GroupId, su.GroupName,
su.StationId, su.StationName,

         su.StationState, su.StationCategory,
ee.EquipmentId, ee.EquipmentName,

         ee.EquipmentTemplateId, ee.EquipmentCategory
         FROM   TBL_Account            ul
         INNER JOIN  TBL_UserRoleMap        mp   ON ul.UserId       =   mp.UserId
         INNER JOIN  TBL_UserRole           ur   ON mp.RoleId       =   ur.RoleId
         INNER JOIN  TBL_UserRoleRight      urr  ON ur.RoleId       =   urr.RoleId        AND urr.OperationType = 3
         INNER JOIN  TBL_SpecialtyGroup     a    ON a.SpecialtyGroupId        =   urr.OperationId
         INNER JOIN  TBL_SpecialtyGroupMap  am   ON a.SpecialtyGroupId        =   am.SpecialtyGroupId
         INNER JOIN	TBL_Equipment          ee	ON am.EntryItemId    =   ee.EquipmentCategory
         INNER JOIN ',v_StationTableName,'su ON ee.StationId = su.StationId  WHERE 1 = 1');
         SET @SWV_Stmt = SWV_ExecDyn;
         PREPARE SWT_Stmt FROM @SWV_Stmt;
         EXECUTE SWT_Stmt;
         DEALLOCATE PREPARE SWT_Stmt;
      end if;
      IF IFNULL(v_EquipmentId3,'-1') <> '-1' then

         SET SWV_ExecDyn = CONCAT('INSERT INTO ',v_EquipmentTableName,' (CenterId,CenterName,GroupId,GroupName,StationId,StationName,StationState,StationCategory,EquipmentId,EquipmentName,EquipmentTemplateId,EquipmentCategory) SELECT su.CenterId, su.CenterName,
su.GroupId, su.GroupName,
su.StationId, su.StationName,

         su.StationState, su.StationCategory,
ee.EquipmentId, ee.EquipmentName,

         ee.EquipmentTemplateId, ee.EquipmentCategory
         FROM   TBL_Account            ul
         INNER JOIN  TBL_UserRoleMap        mp   ON ul.UserId       =   mp.UserId
         INNER JOIN  TBL_UserRole           ur   ON mp.RoleId       =   ur.RoleId
         INNER JOIN  TBL_UserRoleRight      urr  ON ur.RoleId       =   urr.RoleId        AND urr.OperationType = 3
         INNER JOIN  TBL_SpecialtyGroup     a    ON a.SpecialtyGroupId        =   urr.OperationId
         INNER JOIN  TBL_SpecialtyGroupMap  am   ON a.SpecialtyGroupId        =   am.SpecialtyGroupId
         INNER JOIN	TBL_Equipment          ee	ON am.EntryItemId    =   ee.EquipmentCategory
         INNER JOIN ',v_StationTableName,'su ON ee.StationId = su.StationId  WHERE 1 = 1');
         SET @SWV_Stmt = SWV_ExecDyn;
         PREPARE SWT_Stmt FROM @SWV_Stmt;
         EXECUTE SWT_Stmt;
         DEALLOCATE PREPARE SWT_Stmt;
      end if;
   ELSE
-- 系统管理员返回结果
      SET SWV_ExecDyn = CONCAT('INSERT INTO ',v_EquipmentTableName,' (CenterId,CenterName,GroupId,GroupName,StationId,StationName,StationState,StationCategory,EquipmentId,EquipmentName,EquipmentTemplateId,EquipmentCategory) SELECT su.CenterId, su.CenterName,
su.GroupId, su.GroupName,
su.StationId, su.StationName,

      su.StationState, su.StationCategory,
ee.EquipmentId, ee.EquipmentName,

      ee.EquipmentTemplateId, ee.EquipmentCategory
      FROM TBL_Equipment ee
      INNER JOIN ',v_StationTableName,'su ON ee.StationId = su.StationId   WHERE 1 = 1');
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
      IF IFNULL(v_EquipmentId2,'-1') <> '-1' then

         SET SWV_ExecDyn = CONCAT('INSERT INTO ',v_EquipmentTableName,' (CenterId,CenterName,GroupId,GroupName,StationId,StationName,StationState,StationCategory,EquipmentId,EquipmentName,EquipmentTemplateId,EquipmentCategory) SELECT su.CenterId, su.CenterName,
su.GroupId, su.GroupName,
su.StationId, su.StationName,

         su.StationState, su.StationCategory,
ee.EquipmentId, ee.EquipmentName,

         ee.EquipmentTemplateId, ee.EquipmentCategory
         FROM TBL_Equipment ee
         INNER JOIN ',v_StationTableName,'su ON ee.StationId = su.StationId  WHERE 1 = 1');
         SET @SWV_Stmt = SWV_ExecDyn;
         PREPARE SWT_Stmt FROM @SWV_Stmt;
         EXECUTE SWT_Stmt;
         DEALLOCATE PREPARE SWT_Stmt;
      end if;
      IF IFNULL(v_EquipmentId3,'-1') <> '-1' then

         SET SWV_ExecDyn = CONCAT('INSERT INTO ',v_EquipmentTableName,' (CenterId,CenterName,GroupId,GroupName,StationId,StationName,StationState,StationCategory,EquipmentId,EquipmentName,EquipmentTemplateId,EquipmentCategory) SELECT su.CenterId, su.CenterName,
su.GroupId, su.GroupName,
su.StationId, su.StationName,

         su.StationState, su.StationCategory,
ee.EquipmentId, ee.EquipmentName,

         ee.EquipmentTemplateId, ee.EquipmentCategory
         FROM TBL_Equipment ee
         INNER JOIN ',v_StationTableName,'su ON ee.StationId = su.StationId  WHERE 1 = 1');
         SET @SWV_Stmt = SWV_ExecDyn;
         PREPARE SWT_Stmt FROM @SWV_Stmt;
         EXECUTE SWT_Stmt;
         DEALLOCATE PREPARE SWT_Stmt;
      end if;
   end if;

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# M_FilterStation]...';


DROP PROCEDURE IF EXISTS PAM_FilterStation;

CREATE PROCEDURE PAM_FilterStation(v_CenterId           NATIONAL VARCHAR(4000)    ,
v_GroupId            NATIONAL VARCHAR(4000)    ,
v_StationState       NATIONAL VARCHAR(4000)    ,
v_StationCategory    NATIONAL VARCHAR(4000)    ,
v_StationId          NATIONAL VARCHAR(4000)    ,
v_StationId2         NATIONAL VARCHAR(4000)    ,
v_StationId3         NATIONAL VARCHAR(4000)    ,
v_QueryUserId        NATIONAL VARCHAR(20)      ,
v_TempTableName      NATIONAL VARCHAR(30)   ,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_Index INT;
   DECLARE v_RoleId INT;
   DECLARE v_PrivilegeId INT;
   DECLARE v_Admin INT;
   DECLARE v_WhereStrCenterId NATIONAL VARCHAR(4000);  
   DECLARE v_WhereStrGroupId NATIONAL VARCHAR(4000);  
   DECLARE v_WhereStationState NATIONAL VARCHAR(4000);  
   DECLARE v_WhereStationCategory NATIONAL VARCHAR(4000);  
   DECLARE v_WhereStationId1 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereStationId2 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereStationId3 NATIONAL VARCHAR(4000);          
	DECLARE SWV_ExecDyn VARCHAR(5000); 
-- 系统管理员
   IF v_CenterId is null then
      set v_CenterId = '-1';
   END IF;
   IF v_GroupId is null then
      set v_GroupId = '-1';
   END IF;
   IF v_StationState is null then
      set v_StationState = '-1';
   END IF;
   IF v_StationCategory is null then
      set v_StationCategory = '-1';
   END IF;
   IF v_StationId is null then
      set v_StationId = '-1';
   END IF;
   IF v_StationId2 is null then
      set v_StationId2 = '-1';
   END IF;
   IF v_StationId3 is null then
      set v_StationId3 = '-1';
   END IF;
   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   IF v_TempTableName is null then
      set v_TempTableName = '-1';
   END IF;
   SET v_Admin = -1;

-- 中心
   SET v_WhereStrCenterId = '  ';
   IF IFNULL(v_CenterId,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_CenterId);
      IF v_Index = 0 then
         SET v_WhereStrCenterId = CONCAT('SQLWAYS_EVAL# = ',v_CenterId);
      ELSE
         SET v_WhereStrCenterId = CONCAT('SQLWAYS_EVAL# IN (',v_CenterId,')');
      end if;
   end if;

-- 分组
   SET v_WhereStrGroupId = '  ';
   IF IFNULL(v_GroupId,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_GroupId);
      IF v_Index = 0 then
         SET v_WhereStrGroupId = CONCAT('SQLWAYS_EVAL# = ',v_GroupId);
      ELSE
         SET v_WhereStrGroupId = CONCAT('SQLWAYS_EVAL# IN (',v_GroupId,')');
      end if;
   end if;

-- 局站分类
   SET v_WhereStationCategory = '  ';
   IF IFNULL(v_StationCategory,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_StationCategory);
      IF v_Index = 0 then
         SET v_WhereStationCategory = CONCAT('SQLWAYS_EVAL# = ',v_StationCategory);
      ELSE
         SET v_WhereStationCategory = CONCAT('SQLWAYS_EVAL# IN (',v_StationCategory,')');
      end if;
   end if;

-- 局站状态
   SET v_WhereStationState = '  ';
   IF IFNULL(v_StationState,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_StationState);
      IF v_Index = 0 then
         SET v_WhereStationState = CONCAT('SQLWAYS_EVAL# = ',v_StationState);
      ELSE
         SET v_WhereStationState = CONCAT('SQLWAYS_EVAL# IN (',v_StationState,')');
      end if;
   end if;  

-- 局站ID
   SET v_WhereStationId1 = '   ';
   IF IFNULL(v_StationId,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_StationId);
      IF v_Index = 0 then
         SET v_WhereStationId1 = CONCAT('SQLWAYS_EVAL# = ',v_StationId);
      ELSE
         SET v_WhereStationId1 = CONCAT('SQLWAYS_EVAL# IN (',v_StationId,')');
      end if;
   end if;

-- 局站ID2
   SET v_WhereStationId2 = '  ';
   IF IFNULL(v_StationId2,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_StationId2);
      IF v_Index = 0 then
         SET v_WhereStationId2 = CONCAT('SQLWAYS_EVAL# = ',v_StationId2);
      ELSE
         SET v_WhereStationId2 = CONCAT('SQLWAYS_EVAL# IN (',v_StationId2,')');
      end if;
   end if;

-- 局站ID3
   SET v_WhereStationId3 = '  ';
   IF IFNULL(v_StationId3,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_StationId3);
      IF v_Index = 0 then
         SET v_WhereStationId3 = CONCAT('SQLWAYS_EVAL# = ',v_StationId3);
      ELSE
         SET v_WhereStationId3 = CONCAT('SQLWAYS_EVAL# IN (',v_StationId3,')');
      end if;
   end if;

-- 是否管理员
   select   RoleId INTO v_RoleId FROM TBL_UserRoleMap WHERE UserId = cast(v_QueryUserId as SIGNED INTEGER) AND RoleId = v_Admin;

-- 是否包含所有权限
   select   AreaId INTO v_PrivilegeId FROM   TBL_Account            ul
   INNER JOIN  TBL_UserRoleMap        mp   ON ul.UserId       =   mp.UserId
   INNER JOIN  TBL_UserRole           ur   ON mp.RoleId       =   ur.RoleId
   INNER JOIN  TBL_UserRoleRight      urr  ON ur.RoleId       =   urr.RoleId         AND urr.OperationType = 2
   INNER JOIN  TBL_Area               a    ON a.AreaId        =   urr.OperationId WHERE ul.UserId = cast(v_QueryUserId as SIGNED INTEGER) AND a.AreaId = v_Admin;

   IF  v_RoleId IS NULL AND v_PrivilegeId IS NULL then

-- 非系统管理员返回结果
      SET SWV_ExecDyn = CONCAT('INSERT INTO ',v_TempTableName,' (CenterId,CenterName,GroupId,GroupName,StationId,StationName,StationState,StationCategory,StationGrade) SELECT sc.StructureId AS CenterId, sc.StructureName AS CenterName,
ss.StructureId AS GroupId, 
      ss.StructureName AS GroupName,
su.StationId, su.StationName,

      su.StationState, su.StationCategory,
su.StationGrade
      FROM   TBL_Account            ul
      INNER JOIN  TBL_UserRoleMap        mp   ON ul.UserId       =   mp.UserId
      INNER JOIN  TBL_UserRole           ur   ON mp.RoleId       =   ur.RoleId
      INNER JOIN  TBL_UserRoleRight      urr  ON ur.RoleId       =   urr.RoleId        AND urr.OperationType = 2
      INNER JOIN  TBL_Area               a    ON a.AreaId        =   urr.OperationId
      INNER JOIN  TBL_AreaMap            am   ON a.AreaId        =   am.AreaId
      INNER JOIN  TBL_Station			   su   ON am.StationId    =   su.StationId
      INNER JOIN TBL_StationStructure    sc   ON su.CenterId	   =   sc.StructureId
      INNER JOIN TBL_StationStructureMap sm   ON su.StationId	   =   sm.StationId
      INNER JOIN TBL_StationStructure    ss   ON sm.StructureId  =   ss.StructureId	AND ss.StructureGroupId = 1
      WHERE ul.UserId = ',v_QueryUserId);
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
      IF IFNULL(v_StationId2,'-1') <> '-1' then

         SET SWV_ExecDyn = CONCAT('INSERT INTO ',v_TempTableName,' (CenterId,CenterName,GroupId,GroupName,StationId,StationName,StationState,StationCategory,StationGrade) SELECT sc.StructureId AS CenterId, sc.StructureName AS CenterName,
ss.StructureId AS GroupId, 
         ss.StructureName AS GroupName,
su.StationId, su.StationName,

         su.StationState, su.StationCategory,
su.StationGrade
         FROM   TBL_Account            ul
         INNER JOIN  TBL_UserRoleMap        mp   ON ul.UserId       =   mp.UserId
         INNER JOIN  TBL_UserRole           ur   ON mp.RoleId       =   ur.RoleId
         INNER JOIN  TBL_UserRoleRight      urr  ON ur.RoleId       =   urr.RoleId        AND urr.OperationType = 2
         INNER JOIN  TBL_Area               a    ON a.AreaId        =   urr.OperationId
         INNER JOIN  TBL_AreaMap            am   ON a.AreaId        =   am.AreaId
         INNER JOIN  TBL_Station			   su   ON am.StationId    =   su.StationId
         INNER JOIN TBL_StationStructure    sc   ON su.CenterId	   =   sc.StructureId
         INNER JOIN TBL_StationStructureMap sm   ON su.StationId	   =   sm.StationId
         INNER JOIN TBL_StationStructure    ss   ON sm.StructureId  =   ss.StructureId	AND ss.StructureGroupId = 1
         WHERE ul.UserId = ',v_QueryUserId);
         SET @SWV_Stmt = SWV_ExecDyn;
         PREPARE SWT_Stmt FROM @SWV_Stmt;
         EXECUTE SWT_Stmt;
         DEALLOCATE PREPARE SWT_Stmt;
      end if;
      IF IFNULL(v_StationId3,'-1') <> '-1' then

         SET SWV_ExecDyn = CONCAT('INSERT INTO ',v_TempTableName,' (CenterId,CenterName,GroupId,GroupName,StationId,StationName,StationState,StationCategory,StationGrade) SELECT sc.StructureId AS CenterId, sc.StructureName AS CenterName,
ss.StructureId AS GroupId, 
         ss.StructureName AS GroupName,
su.StationId, su.StationName,

         su.StationState, su.StationCategory,
su.StationGrade
         FROM   TBL_Account            ul
         INNER JOIN  TBL_UserRoleMap        mp   ON ul.UserId       =   mp.UserId
         INNER JOIN  TBL_UserRole           ur   ON mp.RoleId       =   ur.RoleId
         INNER JOIN  TBL_UserRoleRight      urr  ON ur.RoleId       =   urr.RoleId        AND urr.OperationType = 2
         INNER JOIN  TBL_Area               a    ON a.AreaId        =   urr.OperationId
         INNER JOIN  TBL_AreaMap            am   ON a.AreaId        =   am.AreaId
         INNER JOIN  TBL_Station			   su   ON am.StationId    =   su.StationId
         INNER JOIN TBL_StationStructure    sc   ON su.CenterId	   =   sc.StructureId
         INNER JOIN TBL_StationStructureMap sm   ON su.StationId	   =   sm.StationId
         INNER JOIN TBL_StationStructure    ss   ON sm.StructureId  =   ss.StructureId	AND ss.StructureGroupId = 1
         WHERE ul.UserId = ',v_QueryUserId);
         SET @SWV_Stmt = SWV_ExecDyn;
         PREPARE SWT_Stmt FROM @SWV_Stmt;
         EXECUTE SWT_Stmt;
         DEALLOCATE PREPARE SWT_Stmt;
      end if;
   ELSE
-- 系统管理员返回结果
      SET SWV_ExecDyn = CONCAT('INSERT INTO ',v_TempTableName,' (CenterId,CenterName,GroupId,GroupName,StationId,StationName,StationState,StationCategory,StationGrade) SELECT sc.StructureId AS CenterId, sc.StructureName AS CenterName,
ss.StructureId AS GroupId, 
      ss.StructureName AS GroupName,
su.StationId, su.StationName,

      su.StationState, su.StationCategory,
su.StationGrade
      FROM TBL_Station su
      INNER JOIN TBL_StationStructure sc ON su.CenterId = sc.StructureId
      INNER JOIN TBL_StationStructureMap sm ON su.StationId = sm.StationId
      INNER JOIN TBL_StationStructure ss ON sm.StructureId = ss.StructureId AND ss.StructureGroupId IN(0,1)
      WHERE 1 = 1');
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
      IF IFNULL(v_StationId2,'-1') <> '-1' then

         SET SWV_ExecDyn = CONCAT('INSERT INTO ',v_TempTableName,' (CenterId,CenterName,GroupId,GroupName,StationId,StationName,StationState,StationCategory,StationGrade) SELECT sc.StructureId AS CenterId, sc.StructureName AS CenterName,
ss.StructureId AS GroupId, 
         ss.StructureName AS GroupName,
su.StationId, su.StationName,

         su.StationState, su.StationCategory,
su.StationGrade
         FROM TBL_Station su
         INNER JOIN TBL_StationStructure sc ON su.CenterId = sc.StructureId
         INNER JOIN TBL_StationStructureMap sm ON su.StationId = sm.StationId
         INNER JOIN TBL_StationStructure ss ON sm.StructureId = ss.StructureId AND ss.StructureGroupId IN(0,1)
         WHERE 1 = 1');
         SET @SWV_Stmt = SWV_ExecDyn;
         PREPARE SWT_Stmt FROM @SWV_Stmt;
         EXECUTE SWT_Stmt;
         DEALLOCATE PREPARE SWT_Stmt;
      end if;
      IF IFNULL(v_StationId3,'-1') <> '-1' then

         SET SWV_ExecDyn = CONCAT('INSERT INTO ',v_TempTableName,' (CenterId,CenterName,GroupId,GroupName,StationId,StationName,StationState,StationCategory,StationGrade) SELECT sc.StructureId AS CenterId, sc.StructureName AS CenterName,
ss.StructureId AS GroupId, 
         ss.StructureName AS GroupName,
su.StationId, su.StationName,

         su.StationState, su.StationCategory,
su.StationGrade
         FROM TBL_Station su
         INNER JOIN TBL_StationStructure sc ON su.CenterId = sc.StructureId
         INNER JOIN TBL_StationStructureMap sm ON su.StationId = sm.StationId
         INNER JOIN TBL_StationStructure ss ON sm.StructureId = ss.StructureId AND ss.StructureGroupId IN(0,1)
         WHERE 1 = 1');
         SET @SWV_Stmt = SWV_ExecDyn;
         PREPARE SWT_Stmt FROM @SWV_Stmt;
         EXECUTE SWT_Stmt;
         DEALLOCATE PREPARE SWT_Stmt;
      end if;
   end if;

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# M_IsEquipmentPrivilege]...';


DROP PROCEDURE IF EXISTS PAM_IsEquipmentPrivilege;

CREATE PROCEDURE PAM_IsEquipmentPrivilege(v_QueryUserId        INT,
v_StationId			INT,
v_EquipmentId		INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
-- SQLWAYS_EVAL# 、专业(设备类）4、界面权限5.控制命令权限级
-- 用户是否可以浏览该设备
-- 1(可以)
-- 0(不可以)

   DECLARE v_Index INT;            
   DECLARE v_RoleId INT;            
   DECLARE v_Admin INT;    

-- 系统管理员
   SET v_Admin = -1;

-- 是否包含所有权限
   select   RoleId INTO v_RoleId FROM TBL_UserRoleMap WHERE UserId = v_QueryUserId AND RoleId = v_Admin;

-- SELECT @RoleId

   IF  IFNULL(v_RoleId,-3) = -3 then

-- 非系统管理员返回结果
-- 该局站是否可浏览
      SELECT su.StationId, su.StationName
      FROM   TBL_Account            ul
      INNER JOIN  TBL_UserRoleMap        mp   ON ul.UserId       =   mp.UserId
      INNER JOIN  TBL_UserRole           ur   ON mp.RoleId       =   ur.RoleId
      INNER JOIN  TBL_UserRoleRight      urr  ON ur.RoleId       =   urr.RoleId        AND urr.OperationType = 2
      INNER JOIN  TBL_Area               a    ON a.AreaId        =   urr.OperationId
      INNER JOIN  TBL_AreaMap            am   ON a.AreaId        =   am.AreaId
      INNER JOIN  TBL_Station            su   ON am.StationId    =   su.StationId
      WHERE ul.UserId = v_QueryUserId AND su.StationId = v_StationId;
      IF (ROW_COUNT() > 0) then

-- 该设备是否可浏览
         SELECT am.EntryItemId AS EquipmentTypeId, su.ItemValue AS EquipmentTypeName
         FROM   TBL_Account            ul
         INNER JOIN  TBL_UserRoleMap        mp   ON ul.UserId       =   mp.UserId
         INNER JOIN  TBL_UserRole           ur   ON mp.RoleId       =   ur.RoleId
         INNER JOIN  TBL_UserRoleRight      urr  ON ur.RoleId       =   urr.RoleId        AND urr.OperationType = 2
         INNER JOIN  TBL_SpecialtyGroup     a    ON a.SpecialtyGroupId        =   urr.OperationId
         INNER JOIN  TBL_SpecialtyGroupMap  am   ON a.SpecialtyGroupId        =   am.SpecialtyGroupId
         INNER JOIN  TBL_DataItem           su   ON am.EntryItemId    = su.ItemId AND su.EntryId = 7
         INNER JOIN  TBL_Equipment          ee   ON ee.EquipmentId =  v_EquipmentId AND ee.EquipmentCategory = su.ItemId
         WHERE ul.UserId = v_QueryUserId AND ee.EquipmentId = v_EquipmentId;
         IF (ROW_COUNT() > 0) then

-- 该设备可浏览
            SET SWP_Ret_Value = 1;
            LEAVE SWL_return;
         ELSE
-- 该设备不可浏览
            SET SWP_Ret_Value = 0;
            LEAVE SWL_return;
         end if;
      ELSE
-- 该局站不可浏览
         SET SWP_Ret_Value = 0;
         LEAVE SWL_return;
      end if;
   ELSE
-- 系统管理员返回结果
      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# M_ModulePrivilege]...';

DROP PROCEDURE IF EXISTS PAM_ModulePrivilege;

CREATE PROCEDURE PAM_ModulePrivilege(v_ModuleId		   INT,
v_QueryUserId        INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
-- SQLWAYS_EVAL# 、专业(设备类）4、界面权限5.控制命令权限级
-- 用户是否可以浏览模块
-- 1(可以)
-- 0(不可以)

   DECLARE v_Index INT;
   DECLARE v_RoleId INT;
   DECLARE v_PrivilegeId INT;
   DECLARE v_Admin INT;            

-- 系统管理员
   SET v_Admin = -1;

-- 是否管理员
   select   RoleId INTO v_RoleId FROM TBL_UserRoleMap WHERE UserId = v_QueryUserId AND RoleId = v_Admin;

-- 是否包含所有权限
   select   MenusId INTO v_PrivilegeId FROM   TBL_Account            ul
   INNER JOIN  TBL_UserRoleMap        mp   ON ul.UserId       =   mp.UserId
   INNER JOIN  TBL_UserRole           ur   ON mp.RoleId       =   ur.RoleId
   INNER JOIN  TBL_UserRoleRight      urr  ON ur.RoleId       =   urr.RoleId        AND urr.OperationType = 4
   INNER JOIN  TBL_Menus              a    ON a.MenusId       =   urr.OperationId WHERE ul.UserId = v_QueryUserId AND a.MenusId = v_Admin;

   IF  v_RoleId IS NULL AND v_PrivilegeId IS NULL then

-- 非系统管理员返回结果
      SELECT su.MenuItemsName, su.MenuItemsId
      FROM   TBL_Account            ul
      INNER JOIN  TBL_UserRoleMap        mp   ON ul.UserId       =   mp.UserId
      INNER JOIN  TBL_UserRole           ur   ON mp.RoleId       =   ur.RoleId
      INNER JOIN  TBL_UserRoleRight      urr  ON ur.RoleId       =   urr.RoleId        AND urr.OperationType = 4
      INNER JOIN  TBL_Menus              a    ON a.MenusId       =   urr.OperationId
      INNER JOIN  TBL_MenusMap           am   ON a.MenusId       =   am.MenusId
      INNER JOIN  TBL_MenuItems          su   ON am.MenuItemsId  =   su.MenuItemsId
      WHERE ul.UserId = v_QueryUserId AND su.MenuItemsId = v_ModuleId;
      IF (ROW_COUNT() > 0) then

         SET SWP_Ret_Value = 1;
         LEAVE SWL_return;
      ELSE
         SET SWP_Ret_Value = 0;
         LEAVE SWL_return;
      end if;
   ELSE
-- 系统管理员返回结果
      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;
END;


-- SELECT N'SQLWAYS_EVAL# M_OperationPrivilege]...';


DROP PROCEDURE IF EXISTS PAM_OperationPrivilege;

CREATE PROCEDURE PAM_OperationPrivilege(v_OperationId		   INT,
v_QueryUserId        INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
-- SQLWAYS_EVAL# 、专业(设备类）4、界面权限5.控制命令权限级
-- 用户是否可以进行操作
-- 1(可以)
-- 0(不可以)

   DECLARE v_Index INT;
   DECLARE v_RoleId INT;
   DECLARE v_PrivilegeId INT;
   DECLARE v_Admin INT;
   DECLARE v_Total INT;

-- 系统管理员
   SET v_Admin = -1;

-- 是否管理员
   select   RoleId INTO v_RoleId FROM TBL_UserRoleMap WHERE UserId = v_QueryUserId AND RoleId = v_Admin;

-- 是否包含所有权限
   select   OperationId INTO v_PrivilegeId FROM   TBL_Account            ul
   INNER JOIN  TBL_UserRoleMap        mp   ON ul.UserId       =   mp.UserId
   INNER JOIN  TBL_UserRole           ur   ON mp.RoleId       =   ur.RoleId
   INNER JOIN  TBL_UserRoleRight      urr  ON ur.RoleId       =   urr.RoleId         AND urr.OperationType = 1
   INNER JOIN  TBL_OperationGroup		a   ON a.GroupId       =   urr.OperationId WHERE ul.UserId = v_QueryUserId AND a.GroupId = v_Admin;

   IF  v_RoleId IS NULL AND v_PrivilegeId IS NULL then

-- 非系统管理员返回结果
      select   COUNT(*) INTO v_Total FROM   TBL_Account            ul
      INNER JOIN  TBL_UserRoleMap        mp   ON ul.UserId       =   mp.UserId
      INNER JOIN  TBL_UserRole           ur   ON mp.RoleId       =   ur.RoleId
      INNER JOIN  TBL_UserRoleRight      urr  ON ur.RoleId       =   urr.RoleId        AND urr.OperationType = 1
      INNER JOIN  TBL_OperationGroup		a   ON a.GroupId       =   urr.OperationId
      INNER JOIN  TBL_OperationGroupMap  am   ON a.GroupId       =   am.GroupId
      INNER JOIN  TBL_Operation          su   ON am.OperationId  =   su.OperationId WHERE ul.UserId = v_QueryUserId AND su.OperationId = v_OperationId;
      IF (v_Total > 0) then

         SET SWP_Ret_Value = 1;
         LEAVE SWL_return;
      ELSE
         SET SWP_Ret_Value = 0;
         LEAVE SWL_return;
      end if;
   ELSE
-- 系统管理员返回结果
      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;
END;


-- SELECT N'SQLWAYS_EVAL# M_RoleModulePrivilege]...';


DROP PROCEDURE IF EXISTS PAM_RoleModulePrivilege;

CREATE PROCEDURE PAM_RoleModulePrivilege(v_RoleId NATIONAL VARCHAR(4000) ,
v_ReturnCount NATIONAL VARCHAR(20))
BEGIN
-- SQLWAYS_EVAL# 、专业(设备类）4、界面权限5.控制命令权限级
   DECLARE v_Index INT;
   DECLARE v_RowCount INT;
   DECLARE v_Admin INT;
   DECLARE v_SAdmin NATIONAL VARCHAR(20);
   DECLARE v_PrivilegeId INT;
   DECLARE v_Total INT;
   DECLARE v_WhereStrRoleId NATIONAL VARCHAR(4000);
   DECLARE v_sql NATIONAL VARCHAR(4000);
	DECLARE SWV_ExecDyn VARCHAR(5000);
-- 查询结果条数
   IF v_RoleId is null then
      set v_RoleId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SET v_RowCount = cast(v_ReturnCount as SIGNED INTEGER);

-- 系统管理员
   SET v_Admin = -1;	

-- 用户角色
   SET v_WhereStrRoleId = ' AND  1 = 1 ';
   IF  IFNULL(v_RoleId,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_RoleId);
      IF v_Index = 0 then
         SET v_WhereStrRoleId = CONCAT('SQLWAYS_EVAL# =  ',v_RoleId);
      ELSE
         SET v_WhereStrRoleId = CONCAT('SQLWAYS_EVAL# IN (',v_RoleId,')');
      end if;
   end if;

-- 是否管理员
   SET v_SAdmin = CAST(v_Admin AS CHAR(30));
   SET v_Index = LOCATE(v_SAdmin,v_RoleId);

-- 是否包含所有权限
   DROP TEMPORARY TABLE IF EXISTS tt_OperationId;
   CREATE TEMPORARY TABLE tt_OperationId
   (
      OperationId INT
   );
   SET SWV_ExecDyn = CONCAT('INSERT INTO tt_OperationId(OperationId)
   SELECT DISTINCT OperationId
   FROM TBL_UserRoleRight ur
   INNER JOIN TBL_Menus a ON a.MenusId = ur.OperationId
   WHERE ur.OperationType = 4 AND ur.OperationId = ',v_SAdmin,'  ',v_WhereStrRoleId);
   SET @SWV_Stmt = SWV_ExecDyn;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;
   select   COUNT(*) INTO v_Total FROM tt_OperationId;

-- 执行
   SET SQL_SELECT_LIMIT = v_RowCount;

   IF  v_Index = 0 AND v_Total = 0 then

-- 非系统管理员返回结果
      SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL# su.MenuItemsName, su.MenuItemsId
FROM  TBL_UserRole           ur  
INNER JOIN  TBL_UserRoleRight      urr  ON ur.RoleId       =   urr.RoleId        AND urr.OperationType = 4
INNER JOIN  TBL_Menus              a    ON a.MenusId       =   urr.OperationId
INNER JOIN  TBL_MenusMap           am   ON a.MenusId       =   am.MenusId
INNER JOIN  TBL_MenuItems          su   ON am.MenuItemsId  =   su.MenuItemsId
WHERE 1 = 1 ',v_WhereStrRoleId,'SQLWAYS_EVAL# ');
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
   ELSE
-- 系统管理员返回结果
      SELECT MenuItemsName, MenuItemsId
      FROM TBL_MenuItems
      ORDER BY MenuItemsName;
   end if;
END;



-- SELECT N'SQLWAYS_EVAL# L_SaveEndEventByMask]...';


DROP PROCEDURE IF EXISTS PNL_SaveEndEventByMask;

CREATE PROCEDURE PNL_SaveEndEventByMask(
 -- 事件结束时间
v_StationId				INT, -- 局站Id
v_EquipmentId			INT, -- 设备Id
v_EventId				INT, -- 事件Id
v_SequenceId			NATIONAL VARCHAR(128), -- 事件流水号
v_EndTime				DATETIME,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_ConfirmTime DATETIME;
   DECLARE v_ConfirmerId INT;   
   DECLARE v_ConfirmerName NATIONAL VARCHAR(256);
   DECLARE v_OperationType INT; 

   DECLARE v_StructureName NATIONAL VARCHAR(255);
   DECLARE v_MonitorUnitName NATIONAL VARCHAR(255);
   DECLARE v_EquipmentCategoryName NATIONAL VARCHAR(255);
   DECLARE v_BaseTypeName NATIONAL VARCHAR(255);

   DECLARE v_EventConditionId INT;
   DECLARE v_EventValue FLOAT;
   DECLARE v_Meanings NATIONAL VARCHAR(255); 
   DECLARE v_BaseTypeId INT;
   DECLARE v_EquipmentState INT;
   DECLARE v_StandardVer INT;
   DECLARE v_NewEventSeverityId INT;


-- 结束告警，修改告警结束时间
   UPDATE TBL_ActiveEvent SET EndTime = v_EndTime WHERE SequenceId = v_SequenceId;

-- 发送告警状态变化到告警变化表

   SET v_OperationType = 2;

   INSERT INTO TBL_AlarmChange(SequenceId ,
OperationType ,
StationId ,
StationName ,
EquipmentId ,
EquipmentName ,
EventId ,
EventName ,
EventConditionId ,
EventSeverityId ,
EventSeverity ,
StartTime ,
EndTime ,
CancelTime ,
CancelUserId ,
CancelUserName ,
ConfirmTime ,
ConfirmerId ,
ConfirmerName ,
EventValue ,
ReversalNum ,
Meanings ,
EventFilePath ,
Description ,
SourceHostId ,
InstructionId ,
InstructionStatus ,
StandardAlarmNameId ,
StandardAlarmName ,
BaseTypeId ,
BaseTypeName ,
EquipmentCategory ,
EquipmentCategoryName ,
MaintainState  ,
SignalId ,
RelateSequenceId ,
EventCategoryId ,
EventStateId ,
CenterId ,
CenterName ,
StructureName ,
MonitorUnitName,
StructureId,
StationCategoryId,
EquipmentVendor)
   SELECT
   v_SequenceId,
v_OperationType,
StationId,
StationName,
EquipmentId,
EquipmentName,
EventId,
EventName,
EventConditionId,
EventSeverityId,
EventSeverity,
StartTime ,
EndTime ,
CancelTime,
CancelUserId,
CancelUserName,
ConfirmTime,
ConfirmerId,
ConfirmerName,
EventValue ,
ReversalNum,
Meanings ,
EventFilePath,
Description,
SourceHostId,
InstructionId,
InstructionStatus,
StandardAlarmNameId,
StandardAlarmName ,
BaseTypeId,
BaseTypeName,
EquipmentCategory ,
EquipmentCategoryName ,
MaintainState,
SignalId ,
RelateSequenceId ,
EventCategoryId,
EventStateId    ,
CenterId       ,
CenterName     ,
StructureName   ,
MonitorUnitName ,
StructureId,
StationCategoryId,
EquipmentVendor
   FROM TBL_ActiveEvent WHERE SequenceId = v_SequenceId;

   IF NOT EXISTS(SELECT 'X' FROM TBL_EventMaskHistory WHERE SequenceId = v_SequenceId) then

  INSERT INTO TBL_EventMaskHistory(SequenceId, StationId, EquipmentId, EventId, EventConditionId,EventValue, Meanings, BaseTypeId, StartTime)
      SELECT SequenceId, StationId, EquipmentId, EventId, EventConditionId,EventValue, Meanings, BaseTypeId, StartTime FROM TBL_ActiveEvent
      WHERE SequenceId = v_SequenceId;
   end if; 


-- 已结束且确认告警送历史告警表
   IF  v_EndTime IS NOT NULL then

      select   ConfirmTime, ConfirmerId, ConfirmerName INTO v_ConfirmTime,v_ConfirmerId,v_ConfirmerName FROM TBL_ActiveEvent WHERE SequenceId = v_SequenceId;
      IF NOT v_ConfirmTime IS NULL then

         CALL PNL_Ins_MidHistoryEvent(v_SequenceId,v_EndTime,v_ConfirmTime,v_ConfirmerId,v_ConfirmerName);
      end if;
   end if;

-- 所有步骤执行成功，返回0
   SET SWP_Ret_Value = 0;
END;




-- SELECT N'SQLWAYS_EVAL# M_SaveEventMask]...';


DROP PROCEDURE IF EXISTS PAM_SaveEventMask;

CREATE PROCEDURE PAM_SaveEventMask(v_StationId       INT,
v_EquipmentId     INT,
v_EventId         INT,
v_StartTime       DATETIME,
v_EndTime         DATETIME,
v_UserId          INT ,
v_Reason          NATIONAL VARCHAR(256))
BEGIN
   DECLARE v_EventConditionId INT;
   DECLARE v_SequenceId NATIONAL VARCHAR(256);
   DECLARE v_EventStartTime DATETIME;
   DECLARE v_Meanings NATIONAL VARCHAR(256);
   DECLARE v_EventValue FLOAT;
   DECLARE v_BaseTypeId NUMERIC(10,0);
   DECLARE v_Overturn INT;
   DECLARE v_CurrentTime DATETIME;
   DECLARE v_I INT; 
   DECLARE v_RecordCount INT;
   DECLARE v_TimeGroupId INT;
   select   max(TimeGroupId) INTO v_TimeGroupId FROM TBL_EventMask;
   IF v_TimeGroupId IS NULL then

      SET v_TimeGroupId = 0;
   end if; 

   IF EXISTS(SELECT 'X' FROM TBL_EventMask WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId AND EventId = v_EventId) then

      UPDATE TBL_EventMask SET StartTime = v_StartTime,EndTime = v_EndTime,Reason = v_Reason,UserId = v_UserId, 
      v_TimeGroupId = TimeGroupId
      WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId AND EventId = v_EventId;
   ELSE
      SET v_TimeGroupId = v_TimeGroupId+1;
      INSERT INTO TBL_EventMask(StationId,EquipmentId,EventId,TimeGroupId,Reason, UserId, StartTime,EndTime)
VALUES(v_StationId,v_EquipmentId,v_EventId, v_TimeGroupId, v_Reason, v_UserId,v_StartTime,v_EndTime);
   end if;


-- 结束存量活动告警
   DROP TEMPORARY TABLE IF EXISTS tt_ActiveEvent;
   CREATE TEMPORARY TABLE tt_ActiveEvent
   (
      IndexId INT   AUTO_INCREMENT PRIMARY KEY,
      SequenceId NATIONAL VARCHAR(128) NOT NULL,
      EquipmentId INT NOT NULL,
      EventId INT NOT NULL,
      EventConditionId INT NOT NULL,
      StartTime DATETIME,
      Overturn INT NOT NULL,
      Meanings NATIONAL VARCHAR(256),
      EventValue FLOAT,
      BaseTypeId NUMERIC(10,0)
   );
   CREATE UNIQUE INDEX MaskEvent_IDX1 ON tt_ActiveEvent
   (IndexId);

   INSERT INTO tt_ActiveEvent(SequenceId,EquipmentId, EventId, EventConditionId,StartTime,Overturn,Meanings, EventValue, BaseTypeId)
   SELECT SequenceId, EquipmentId, EventId,  EventConditionId, StartTime, ReversalNum,Meanings, EventValue, BaseTypeId FROM TBL_ActiveEvent
   WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId AND EventId = v_EventId
   AND EndTime IS NULL; 


   select   MIN(IndexId), MAX(IndexId) INTO v_I,v_RecordCount FROM tt_ActiveEvent;
   WHILE v_I <= v_RecordCount DO
      select   SequenceId, EventConditionId, StartTime, Overturn, Meanings, EventValue, BaseTypeId INTO v_SequenceId,v_EventConditionId,v_EventStartTime,v_Overturn,v_Meanings,
      v_EventValue,v_BaseTypeId FROM tt_ActiveEvent WHERE IndexId = v_I;
      SET v_CurrentTime = CURRENT_TIMESTAMP;
      CALL PNL_SaveEndEventByMask(v_StationId,v_EquipmentId,v_EventId,v_SequenceId,v_CurrentTime);
      IF NOT EXISTS(SELECT 'X' FROM TBL_EventMaskHistory WHERE SequenceId = v_SequenceId) then

  INSERT INTO TBL_EventMaskHistory(SequenceId, StationId, EquipmentId, EventId, EventConditionId,EventValue, Meanings, BaseTypeId, StartTime)
VALUES(v_SequenceId, v_StationId, v_EquipmentId, v_EventId, v_EventConditionId,v_EventValue, v_Meanings, v_BaseTypeId, v_EventStartTime);
      end if;
      SET v_I = v_I+1;
   END WHILE;

   SELECT v_TimeGroupId;
END;



-- SELECT N'SQLWAYS_EVAL# M_SaveEquipmentMask]...';


DROP PROCEDURE IF EXISTS PAM_SaveEquipmentMask;

CREATE PROCEDURE PAM_SaveEquipmentMask(v_StationId       INT,
v_EquipmentId     INT,
v_TimeGroupId     INT,
v_StartTime       DATETIME,
v_EndTime         DATETIME,
v_UserId			INT ,
v_Reason          NATIONAL VARCHAR(256))
BEGIN
   DECLARE v_EventId INT; 
   DECLARE v_EventConditionId INT;
   DECLARE v_SequenceId NATIONAL VARCHAR(256);
   DECLARE v_EventStartTime DATETIME;
   DECLARE v_Meanings NATIONAL VARCHAR(256);
   DECLARE v_EventValue FLOAT;
   DECLARE v_BaseTypeId NUMERIC(10,0);
   DECLARE v_Overturn INT;
   DECLARE v_CurrentTime DATETIME;
   DECLARE v_I INT; 
   DECLARE v_RecordCount INT;
   IF EXISTS(SELECT 'X' FROM TBL_EquipmentMask WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId) then

      UPDATE TBL_EquipmentMask SET StartTime = v_StartTime,EndTime = v_EndTime,Reason = v_Reason,UserId = v_UserId, 
      TimeGroupId = 11111111
      WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId;
   ELSE
 INSERT INTO TBL_EquipmentMask(StationId, EquipmentId, TimeGroupId, Reason, StartTime, EndTime, UserId)
VALUES(v_StationId, v_EquipmentId, v_TimeGroupId,v_Reason, v_StartTime,v_EndTime, v_UserId);
   end if;


-- 结束存量活动告警
   DROP TEMPORARY TABLE IF EXISTS tt_ActiveEvent;
   CREATE TEMPORARY TABLE tt_ActiveEvent
   (
      IndexId INT   AUTO_INCREMENT PRIMARY KEY,
      SequenceId NATIONAL VARCHAR(128) NOT NULL,
      EquipmentId INT NOT NULL,
      EventId INT NOT NULL,
      EventConditionId INT NOT NULL,
      StartTime DATETIME,
      Overturn INT NOT NULL,
      Meanings NATIONAL VARCHAR(256),
      EventValue FLOAT,
      BaseTypeId NUMERIC(10,0)
   );
   CREATE UNIQUE INDEX MaskEvent_IDX1 ON tt_ActiveEvent
   (IndexId);

   INSERT INTO tt_ActiveEvent(SequenceId,EquipmentId, EventId, EventConditionId,StartTime,Overturn,Meanings, EventValue, BaseTypeId)
   SELECT SequenceId, EquipmentId, EventId,  EventConditionId, StartTime, ReversalNum,Meanings, EventValue, BaseTypeId FROM TBL_ActiveEvent
   WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId
   AND EndTime IS  NULL;  


   select   MIN(IndexId), MAX(IndexId) INTO v_I,v_RecordCount FROM tt_ActiveEvent;
   WHILE v_I <= v_RecordCount DO
      select   SequenceId, EventId, EventConditionId, StartTime, Overturn, Meanings, EventValue, BaseTypeId INTO v_SequenceId,v_EventId,v_EventConditionId,v_EventStartTime,v_Overturn,
      v_Meanings,v_EventValue,v_BaseTypeId FROM tt_ActiveEvent WHERE IndexId = v_I;
      SET v_CurrentTime = CURRENT_TIMESTAMP;
      CALL PNL_SaveEndEventByMask(v_StationId,v_EquipmentId,v_EventId,v_SequenceId,v_CurrentTime);
      INSERT INTO TBL_EventMaskHistory(SequenceId, StationId, EquipmentId, EventId, EventConditionId,EventValue, Meanings, BaseTypeId, StartTime)
VALUES(v_SequenceId, v_StationId, v_EquipmentId, v_EventId, v_EventConditionId,v_EventValue, v_Meanings, v_BaseTypeId, v_EventStartTime);

      SET v_I = v_I+1;
   END WHILE;

   SELECT TimeGroupId FROM TBL_EquipmentMask;
END;



-- SELECT N'SQLWAYS_EVAL# M_SaveLoginInfo]...';


DROP PROCEDURE IF EXISTS PAM_SaveLoginInfo;

CREATE PROCEDURE PAM_SaveLoginInfo(v_UserId			INT,
v_LoginType		INT,
v_IPAddress		NATIONAL VARCHAR(30))
BEGIN
   DECLARE v_CurrentTime DATETIME;

-- 当前时间
   SET v_CurrentTime = CURRENT_TIMESTAMP;

   INSERT INTO TBL_LoginInfo(UserId,
LoginType,
LoginTime,
IPAddress)
VALUES(v_UserId,
v_LoginType,
v_CurrentTime,
v_IPAddress);
END;







-- SELECT N'SQLWAYS_EVAL# M_SaveStationMask]...';


DROP PROCEDURE IF EXISTS PAM_SaveStationMask;

CREATE PROCEDURE PAM_SaveStationMask(v_StationId       INT,
v_TimeGroupId     INT,
v_StartTime       DATETIME,
v_EndTime         DATETIME,
v_UserId			INT ,
v_Reason          NATIONAL VARCHAR(256))
BEGIN
   DECLARE v_EquipmentId INT;			   
   DECLARE v_EventId INT; 
   DECLARE v_EventConditionId INT;
   DECLARE v_SequenceId NATIONAL VARCHAR(256);
   DECLARE v_EventStartTime DATETIME;
   DECLARE v_Meanings NATIONAL VARCHAR(256);
   DECLARE v_EventValue FLOAT;
   DECLARE v_BaseTypeId NUMERIC(10,0);
   DECLARE v_Overturn INT;
   DECLARE v_CurrentTime DATETIME;
   DECLARE v_I INT; 
   DECLARE v_RecordCount INT;
   IF EXISTS(SELECT 'X' FROM TBL_StationMask WHERE StationId = v_StationId) then

      UPDATE TBL_StationMask SET StartTime = v_StartTime,EndTime = v_EndTime,Reason = v_Reason,UserId = v_UserId, 
      TimeGroupId = 11111111
      WHERE StationId = v_StationId;
   ELSE
 INSERT INTO TBL_StationMask(StationId,TimeGroupId, Reason,StartTime,EndTime, UserId)
VALUES(v_StationId, v_TimeGroupId, v_Reason, v_StartTime,v_EndTime, v_UserId);
   end if;

-- 结束存量活动告警
   DROP TEMPORARY TABLE IF EXISTS tt_ActiveEvent;
   CREATE TEMPORARY TABLE tt_ActiveEvent
   (
      IndexId INT   AUTO_INCREMENT PRIMARY KEY,
      SequenceId NATIONAL VARCHAR(128) NOT NULL,
      EquipmentId INT NOT NULL,
      EventId INT NOT NULL,
      EventConditionId INT NOT NULL,
      StartTime DATETIME,
      Overturn INT NOT NULL,
      Meanings NATIONAL VARCHAR(256),
      EventValue FLOAT,
      BaseTypeId NUMERIC(10,0)
   );
   CREATE UNIQUE INDEX MaskEvent_IDX1 ON tt_ActiveEvent
   (IndexId);

   INSERT INTO tt_ActiveEvent(SequenceId,EquipmentId, EventId, EventConditionId,StartTime,Overturn,Meanings, EventValue, BaseTypeId)
   SELECT SequenceId, EquipmentId, EventId,  EventConditionId, StartTime, ReversalNum,Meanings, EventValue, BaseTypeId FROM TBL_ActiveEvent
   WHERE StationId = v_StationId
   AND EndTime IS NULL;  


   select   MIN(IndexId), MAX(IndexId) INTO v_I,v_RecordCount FROM tt_ActiveEvent;
   WHILE v_I <= v_RecordCount DO
      select   SequenceId, EquipmentId, EventId, EventConditionId, StartTime, Overturn, Meanings, EventValue, BaseTypeId INTO v_SequenceId,v_EquipmentId,v_EventId,v_EventConditionId,v_EventStartTime,
      v_Overturn,v_Meanings,v_EventValue,v_BaseTypeId FROM tt_ActiveEvent WHERE IndexId = v_I;
      SET v_CurrentTime = CURRENT_TIMESTAMP;
      CALL PNL_SaveEndEventByMask(v_StationId,v_EquipmentId,v_EventId,v_SequenceId,v_CurrentTime);
      IF NOT EXISTS(SELECT 'X' FROM TBL_EventMaskHistory WHERE SequenceId = v_SequenceId) then

  INSERT INTO TBL_EventMaskHistory(SequenceId, StationId, EquipmentId, EventId, EventConditionId,EventValue, Meanings, BaseTypeId, StartTime)
VALUES(v_SequenceId, v_StationId, v_EquipmentId, v_EventId, v_EventConditionId,v_EventValue, v_Meanings, v_BaseTypeId, v_EventStartTime);
      end if;
      SET v_I = v_I+1;
   END WHILE;

   SELECT TimeGroupId FROM TBL_StationMask;
END;







-- SELECT N'SQLWAYS_EVAL# M_SetDefaultPage]...';


DROP PROCEDURE IF EXISTS PAM_SetDefaultPage;

CREATE PROCEDURE PAM_SetDefaultPage(v_UserId			INT,
v_PageId			INT)
BEGIN
-- 设置用户首页

   DECLARE v_Result INT;
   DECLARE v_Total INT;
   DECLARE v_CurrentDateTime DATETIME;
   select   COUNT(*) INTO v_Total FROM TBL_UserHomePageMap WHERE UserId = v_UserId;

   IF v_Total > 0 then

      UPDATE TBL_UserHomePageMap
      SET PageId = v_PageId
      WHERE UserId = v_UserId;
   ELSE
 INSERT INTO TBL_UserHomePageMap(PageId, UserId)
VALUES(v_PageId, v_UserId);
   end if;
END;


-- SELECT N'SQLWAYS_EVAL# M_StationPrivilege]...';


DROP PROCEDURE IF EXISTS PAM_StationPrivilege;

CREATE PROCEDURE PAM_StationPrivilege(v_StationId		   INT,
v_QueryUserId        INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
-- SQLWAYS_EVAL# 、专业(设备类）4、界面权限5.控制命令权限级
-- 用户是否可以浏览局站
-- 1(可以)
-- 0(不可以)

   DECLARE v_Index INT;
   DECLARE v_RoleId INT;
   DECLARE v_PrivilegeId INT;
   DECLARE v_Admin INT;            

-- 系统管理员
   SET v_Admin = -1;

-- 是否管理员
   select   RoleId INTO v_RoleId FROM TBL_UserRoleMap WHERE UserId = v_QueryUserId AND RoleId = v_Admin;

-- 是否包含所有权限
   select   AreaId INTO v_PrivilegeId FROM   TBL_Account            ul
   INNER JOIN  TBL_UserRoleMap        mp   ON ul.UserId       =   mp.UserId
   INNER JOIN  TBL_UserRole           ur   ON mp.RoleId       =   ur.RoleId
   INNER JOIN  TBL_UserRoleRight      urr  ON ur.RoleId       =   urr.RoleId         AND urr.OperationType = 2
   INNER JOIN  TBL_Area               a    ON a.AreaId        =   urr.OperationId WHERE ul.UserId = v_QueryUserId AND a.AreaId = v_Admin;

   IF  v_RoleId IS NULL AND v_PrivilegeId IS NULL then

-- 非系统管理员返回结果
      SELECT su.StationId, su.StationName
      FROM   TBL_Account            ul
      INNER JOIN  TBL_UserRoleMap        mp   ON ul.UserId       =   mp.UserId
      INNER JOIN  TBL_UserRole           ur   ON mp.RoleId       =   ur.RoleId
      INNER JOIN  TBL_UserRoleRight      urr  ON ur.RoleId       =   urr.RoleId        AND urr.OperationType = 2
      INNER JOIN  TBL_Area               a    ON a.AreaId        =   urr.OperationId
      INNER JOIN  TBL_AreaMap            am   ON a.AreaId        =   am.AreaId
      INNER JOIN  TBL_Station            su   ON am.StationId    =   su.StationId
      WHERE ul.UserId = v_QueryUserId AND su.StationId = v_StationId;
      IF (ROW_COUNT() > 0) then

         SET SWP_Ret_Value = 1;
         LEAVE SWL_return;
      ELSE
         SET SWP_Ret_Value = 0;
         LEAVE SWL_return;
      end if;
   ELSE
-- 系统管理员返回结果
      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;
END;


-- SELECT N'SQLWAYS_EVAL# M_UptDateTimeRMU]...';


DROP PROCEDURE IF EXISTS PAM_UptDateTimeRMU;

CREATE PROCEDURE PAM_UptDateTimeRMU(v_DataServerId  INT ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
-- 更新RMU的更新时间
-- SQLWAYS_EVAL# 时间
-- SQLWAYS_EVAL# 间，则更新

   DECLARE v_CurrentDateTime DATETIME;
   DECLARE v_DefaultValue INT;
   DECLARE v_WorkStationType INT;
   DECLARE v_MinIndex INT;
   DECLARE v_MaxIndex INT;
   DECLARE v_TotalOfMU INT;
   DECLARE v_WorkStationId INT;
   DECLARE v_TotalOfOnlineMU INT;
   DECLARE v_MaxHeartbeatTime DATETIME;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 预设值
	/*liangyj
   IF v_DataServerId is null then
      set v_DataServerId = 0;
   END IF;*/
   SET v_DefaultValue = -1;
   SET v_WorkStationType = 8;

-- RMU临时表
   CREATE TEMPORARY TABLE tt_TempRMU
   (
      Idx INT   AUTO_INCREMENT PRIMARY KEY,
      WorkStationId INT,
      UpdateTime DATETIME,
      TotalOfMU INT
   );

   INSERT INTO tt_TempRMU(WorkStationId,
UpdateTime,
TotalOfMU)
   SELECT
   ws.WorkStationId,
ws.UpdateTime,
(SELECT COUNT(*) FROM TSL_MonitorUnit WHERE WorkStationId = ws.WorkStationId)
   FROM TBL_WorkStation ws
   WHERE ws.WorkStationType = v_WorkStationType;

-- 循环计算状态
   select   Min(Idx), Max(Idx) INTO v_MinIndex,v_MaxIndex FROM tt_TempRMU;
   WHILE(v_MinIndex <= v_MaxIndex) DO
-- 获取RMU信息
      select   WorkStationId, UpdateTime, TotalOfMU INTO v_WorkStationId,v_CurrentDateTime,v_TotalOfMU FROM tt_TempRMU WHERE Idx = v_MinIndex;

-- SQLWAYS_EVAL# 心跳时间
      select   MAX(mu.HeartbeatTime) INTO v_MaxHeartbeatTime FROM TSL_MonitorUnit mu WHERE mu.WorkStationId = v_WorkStationId;

-- 是否可以更新RMU时间
      IF v_MaxHeartbeatTime IS NOT NULL AND v_MaxHeartbeatTime > v_CurrentDateTime then

         UPDATE TBL_WorkStation
         SET UpdateTime = v_MaxHeartbeatTime
         WHERE WorkStationId = v_WorkStationId;
      end if;
      SET v_MinIndex = v_MinIndex+1;
   END WHILE;

   SET @SWV_Error = 0;
   DROP TEMPORARY TABLE IF EXISTS tt_TempRMU;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;                                                                       

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# M_UptDateTimeWorkStation]...';


DROP PROCEDURE IF EXISTS PAM_UptDateTimeWorkStation;

CREATE PROCEDURE PAM_UptDateTimeWorkStation(v_WorkStationId      INT,
v_WorkStationType    INT,
v_CPU				   FLOAT ,
v_Memory			   FLOAT ,
v_ThreadCount     INT,
v_DiskFreeSpaceInGb      FLOAT)
BEGIN
-- 更新工作站的更新时间

   DECLARE v_CurrentDateTime DATETIME;
   DECLARE v_DefaultValue INT;

-- 当前时间
   IF v_CPU is null then
      set v_CPU = 0;
   END IF;
   IF v_Memory is null then
      set v_Memory = 0;
   END IF;
   SET v_CurrentDateTime = CURRENT_TIMESTAMP;
-- 预设值
   SET v_DefaultValue = -1;

   IF v_WorkStationId <> v_DefaultValue AND v_WorkStationType <> v_DefaultValue then

      UPDATE TBL_WorkStation
      SET UpdateTime = v_CurrentDateTime,CPU = v_CPU,Memory = v_Memory,ThreadCount = v_ThreadCount, 
      DiskFreeSpace = v_DiskFreeSpaceInGb
      WHERE WorkStationId = v_WorkStationId AND WorkStationType = v_WorkStationType;
   ELSE 
      IF v_WorkStationId = v_DefaultValue then

         UPDATE TBL_WorkStation
         SET UpdateTime = v_CurrentDateTime,CPU = v_CPU,Memory = v_Memory,ThreadCount = v_ThreadCount, 
         DiskFreeSpace = v_DiskFreeSpaceInGb
         WHERE WorkStationType = v_WorkStationType;
      ELSE
         UPDATE TBL_WorkStation
         SET UpdateTime = v_CurrentDateTime,CPU = v_CPU,Memory = v_Memory,ThreadCount = v_ThreadCount, 
         DiskFreeSpace = v_DiskFreeSpaceInGb
         WHERE WorkStationId = v_WorkStationId;
      end if;
   end if;
END;


-- SELECT N'SQLWAYS_EVAL# M_UserEquipTypePrivilege]...';


DROP PROCEDURE IF EXISTS PAM_UserEquipTypePrivilege;

CREATE PROCEDURE PAM_UserEquipTypePrivilege(v_QueryUserId        INT,INOUT SWP_Ret_Value INT)
BEGIN
-- SQLWAYS_EVAL# 、专业(设备类）4、界面权限5.控制命令权限级
   DECLARE v_Index INT;
   DECLARE v_RoleId INT;
   DECLARE v_PrivilegeId INT;
   DECLARE v_Admin INT;    

-- 系统管理员
   SET v_Admin = -1;

-- 是否管理员
   select   RoleId INTO v_RoleId FROM TBL_UserRoleMap WHERE UserId = v_QueryUserId AND RoleId = v_Admin;

-- 是否包含所有权限
   select   SpecialtyGroupId INTO v_PrivilegeId FROM   TBL_Account            ul
   INNER JOIN  TBL_UserRoleMap        mp   ON ul.UserId       =   mp.UserId
   INNER JOIN  TBL_UserRole           ur   ON mp.RoleId       =   ur.RoleId
   INNER JOIN  TBL_UserRoleRight      urr  ON ur.RoleId       =   urr.RoleId        AND urr.OperationType = 3
   INNER JOIN  TBL_SpecialtyGroup     a    ON a.SpecialtyGroupId        =   urr.OperationId WHERE ul.UserId = v_QueryUserId AND a.SpecialtyGroupId = v_Admin;

   IF  v_RoleId IS NULL AND v_PrivilegeId IS NULL then

      SELECT DISTINCT
      am.EntryItemId AS EquipmentTypeId, su.ItemValue AS EquipmentTypeName
      FROM   TBL_Account            ul
      INNER JOIN  TBL_UserRoleMap        mp   ON ul.UserId       =   mp.UserId
      INNER JOIN  TBL_UserRole           ur   ON mp.RoleId       =   ur.RoleId
      INNER JOIN  TBL_UserRoleRight      urr  ON ur.RoleId       =   urr.RoleId        AND urr.OperationType = 3
      INNER JOIN  TBL_SpecialtyGroup     a    ON a.SpecialtyGroupId        =   urr.OperationId
      INNER JOIN  TBL_SpecialtyGroupMap  am   ON a.SpecialtyGroupId        =   am.SpecialtyGroupId
      INNER JOIN  TBL_DataItem           su    ON am.EntryItemId    =   su.ItemId AND su.EntryId = 7
      WHERE ul.UserId = v_QueryUserId
      ORDER BY su.ItemValue;
   ELSE
      SELECT ItemId AS EquipmentTypeId, ItemValue AS EquipmentTypeName
      FROM  TBL_DataItem where EntryId = 7
      ORDER BY ItemValue;
   end if;

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# M_UserModulePrivilege]...';


DROP PROCEDURE IF EXISTS PAM_UserModulePrivilege;

CREATE PROCEDURE PAM_UserModulePrivilege(v_QueryUserId        INT,INOUT SWP_Ret_Value INT)
BEGIN
-- SQLWAYS_EVAL# 、专业(设备类）4、界面权限5.控制命令权限级
   DECLARE v_Index INT;
   DECLARE v_RoleId INT;
   DECLARE v_PrivilegeId INT;
   DECLARE v_Admin INT;    

-- 系统管理员
   SET v_Admin = -1;

-- 是否管理员
   select   RoleId INTO v_RoleId FROM TBL_UserRoleMap WHERE UserId = v_QueryUserId AND RoleId = v_Admin;

-- 是否包含所有权限
   select   MenusId INTO v_PrivilegeId FROM   TBL_Account            ul
   INNER JOIN  TBL_UserRoleMap        mp   ON ul.UserId       =   mp.UserId
   INNER JOIN  TBL_UserRole           ur   ON mp.RoleId       =   ur.RoleId
   INNER JOIN  TBL_UserRoleRight      urr  ON ur.RoleId       =   urr.RoleId        AND urr.OperationType = 4
   INNER JOIN  TBL_Menus              a    ON a.MenusId       =   urr.OperationId WHERE ul.UserId = v_QueryUserId AND a.MenusId = v_Admin;

   IF  v_RoleId IS NULL AND v_PrivilegeId IS NULL then

-- 非系统管理员返回结果
      SELECT DISTINCT
      su.MenuItemsName, su.MenuItemsId
      FROM   TBL_Account            ul
      INNER JOIN  TBL_UserRoleMap        mp   ON ul.UserId       =   mp.UserId
      INNER JOIN  TBL_UserRole           ur   ON mp.RoleId       =   ur.RoleId
      INNER JOIN  TBL_UserRoleRight      urr  ON ur.RoleId       =   urr.RoleId        AND urr.OperationType = 4
      INNER JOIN  TBL_Menus              a    ON a.MenusId       =   urr.OperationId
      INNER JOIN  TBL_MenusMap           am   ON a.MenusId       =   am.MenusId
      INNER JOIN  TBL_MenuItems          su   ON am.MenuItemsId  =   su.MenuItemsId
      WHERE ul.UserId = v_QueryUserId
      ORDER BY su.MenuItemsName;
   ELSE
-- 系统管理员返回结果
      SELECT DISTINCT
      MenuItemsName, MenuItemsId
      FROM TBL_MenuItems
      ORDER BY MenuItemsName;
   end if;

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# M_UserOperaPrivilege]...';


DROP PROCEDURE IF EXISTS PAM_UserOperaPrivilege;

CREATE PROCEDURE PAM_UserOperaPrivilege(v_QueryUserId        INT,INOUT SWP_Ret_Value INT)
BEGIN
-- SQLWAYS_EVAL# 、专业(设备类）4、界面权限5.控制命令权限级
   DECLARE v_Index INT;
   DECLARE v_RoleId INT;
   DECLARE v_PrivilegeId INT;
   DECLARE v_Admin INT;    

-- 系统管理员
   SET v_Admin = -1;

-- 是否管理员
   select   RoleId INTO v_RoleId FROM TBL_UserRoleMap WHERE UserId = v_QueryUserId AND RoleId = v_Admin;

-- 是否包含所有权限
   select   OperationId INTO v_PrivilegeId FROM   TBL_Account            ul
   INNER JOIN  TBL_UserRoleMap        mp   ON ul.UserId       =   mp.UserId
   INNER JOIN  TBL_UserRole           ur   ON mp.RoleId       =   ur.RoleId
   INNER JOIN  TBL_UserRoleRight      urr  ON ur.RoleId       =   urr.RoleId         AND urr.OperationType = 1
   INNER JOIN  TBL_OperationGroup		a   ON a.GroupId       =   urr.OperationId WHERE ul.UserId = v_QueryUserId AND a.GroupId = v_Admin;

   IF  v_RoleId IS NULL AND v_PrivilegeId IS NULL then

-- 非系统管理员返回结果
      SELECT DISTINCT
      su.OperationName, su.OperationId
      FROM   TBL_Account            ul
      INNER JOIN  TBL_UserRoleMap        mp   ON ul.UserId       =   mp.UserId
      INNER JOIN  TBL_UserRole           ur   ON mp.RoleId       =   ur.RoleId
      INNER JOIN  TBL_UserRoleRight      urr  ON ur.RoleId       =   urr.RoleId        AND urr.OperationType = 1
      INNER JOIN  TBL_OperationGroup		a   ON a.GroupId       =   urr.OperationId
      INNER JOIN  TBL_OperationGroupMap  am   ON a.GroupId       =   am.GroupId
      INNER JOIN  TBL_Operation          su   ON am.OperationId  =   su.OperationId
      WHERE ul.UserId = v_QueryUserId
      ORDER BY OperationName;
   ELSE
-- 系统管理员返回结果
      SELECT DISTINCT
      OperationName, OperationId
      FROM TBL_Operation
      ORDER BY OperationName;
   end if;

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# M_UserStationPrivilege]...';


DROP PROCEDURE IF EXISTS PAM_UserStationPrivilege;

CREATE PROCEDURE PAM_UserStationPrivilege(v_QueryUserId        INT,INOUT SWP_Ret_Value INT)
BEGIN
-- SQLWAYS_EVAL# 、专业(设备类）4、界面权限5.控制命令权限级
   DECLARE v_Index INT;
   DECLARE v_RoleId INT;
   DECLARE v_PrivilegeId INT;
   DECLARE v_Admin INT;            

-- 系统管理员
   SET v_Admin = -1;

-- 是否管理员
   select   RoleId INTO v_RoleId FROM TBL_UserRoleMap WHERE UserId = v_QueryUserId AND RoleId = v_Admin;

-- 是否包含所有权限
   select   AreaId INTO v_PrivilegeId FROM   TBL_Account            ul
   INNER JOIN  TBL_UserRoleMap        mp   ON ul.UserId       =   mp.UserId
   INNER JOIN  TBL_UserRole           ur   ON mp.RoleId       =   ur.RoleId
   INNER JOIN  TBL_UserRoleRight      urr  ON ur.RoleId       =   urr.RoleId         AND urr.OperationType = 2
   INNER JOIN  TBL_Area               a    ON a.AreaId        =   urr.OperationId WHERE ul.UserId = v_QueryUserId AND a.AreaId = v_Admin;

   IF  v_RoleId IS NULL AND v_PrivilegeId IS NULL then

-- 非系统管理员返回结果
      SELECT DISTINCT
      su.StationId,
su.StationName
      FROM   TBL_Account            ul
      INNER JOIN  TBL_UserRoleMap        mp   ON ul.UserId       =   mp.UserId
      INNER JOIN  TBL_UserRole           ur   ON mp.RoleId       =   ur.RoleId
      INNER JOIN  TBL_UserRoleRight      urr  ON ur.RoleId       =   urr.RoleId        AND urr.OperationType = 2
      INNER JOIN  TBL_Area               a    ON a.AreaId        =   urr.OperationId
      INNER JOIN  TBL_AreaMap            am   ON a.AreaId        =   am.AreaId
      INNER JOIN  TBL_Station			   su   ON am.StationId    =   su.StationId
      INNER JOIN  TBL_StationStructureMap sp  ON su.StationId	   =   sp.StationId
      WHERE ul.UserId = v_QueryUserId
      ORDER BY StationName;
   ELSE
-- 系统管理员返回结果
      SELECT DISTINCT
      su.StationId,
su.StationName
      FROM  TBL_Station su
      INNER JOIN TBL_StationStructureMap sp ON su.StationId =  sp.StationId
      ORDER BY StationName;
   end if;

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# M_ValidUser]...';





DROP PROCEDURE IF EXISTS PAM_ValidUser;

CREATE PROCEDURE PAM_ValidUser(v_LoginId		NATIONAL VARCHAR(20),
v_Password		NATIONAL VARCHAR(128),
v_HexPassword	NATIONAL VARCHAR(128) ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
-- 	验证用户
-- 0 密码即将过期 
-- 1 登录成功 
-- 2 登录Id为空 
-- 3 登录Id错误 
-- 4 超出最大允许错误次数 
-- 5 错误的密码  
-- 6 登录Id即将过期 
-- 7 过期用户
-- 8 服务未启动 
-- 9 超过最大连接数
-- 11 账户被锁定
-- 12 账户已经无效
-- SQLWAYS_EVAL# 登录修改密码

   DECLARE v_Enable BOOLEAN;
   DECLARE v_UserEnable BOOLEAN;
   DECLARE v_Locked BOOLEAN;
   DECLARE v_MaxError INT;
   DECLARE v_ValidTime DATETIME;
   DECLARE v_DBPassword NATIONAL VARCHAR(128);
   DECLARE v_CurrentTime DATETIME;
   DECLARE v_UserId INT;
   DECLARE v_Total INT;
   DECLARE v_ErrorType INT;

-- 当前时间
   IF v_HexPassword is null then
      set v_HexPassword = '';
   END IF;
   SET v_CurrentTime = CURRENT_TIMESTAMP;

-- 错误标志
   SET v_ErrorType = -999;

-- 2 登录Id为空
   IF v_LoginId IS NULL then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;

-- 3 登录Id错误 
   select   Enable, Locked, MaxError, ValidTime, Password, UserId INTO v_Enable,v_Locked,v_MaxError,v_ValidTime,v_DBPassword,v_UserId FROM TBL_Account WHERE LogonId = v_LoginId;
   IF (ROW_COUNT() <> 1) then

      SET SWP_Ret_Value = 3;
      LEAVE SWL_return;
   end if;

   select   Enable INTO v_UserEnable FROM TBL_Employee WHERE EmployeeId = v_UserId;


-- 12 账户已经无效
   IF (v_Enable <> 1 OR v_UserEnable <> 1) then

      SET SWP_Ret_Value = 12;
      LEAVE SWL_return;
   end if;

-- 11 账户被锁定
   IF (v_Locked <> 0) then

      SET SWP_Ret_Value = 11;
      LEAVE SWL_return;
   end if;

-- SQLWAYS_EVAL# 
   IF v_MaxError IS NOT NULL then

      select   COUNT(*) INTO v_Total FROM TBL_LoginInfo WHERE UserId = v_UserId AND LoginType = v_ErrorType
      AND TIMESTAMPDIFF(MINUTE,LoginTime,v_CurrentTime) <= 3;
      IF v_Total > v_MaxError then

         SET SWP_Ret_Value = 4;
         LEAVE SWL_return;
      end if;
   end if;

-- 5 密码为空
   IF v_Password IS NULL OR v_HexPassword IS NULL then

      CALL PAM_SaveLoginInfo(v_UserId,v_ErrorType,'127.0.0.1');
      SET SWP_Ret_Value = 5;
      LEAVE SWL_return;
   end if;

-- 5 错误的密码
   IF v_Password != v_DBPassword AND v_HexPassword != v_DBPassword then

      CALL PAM_SaveLoginInfo(v_UserId,v_ErrorType,'127.0.0.1');
      SET SWP_Ret_Value = 5;
      LEAVE SWL_return;
   end if;

-- 删除错误登陆信息
   DELETE FROM TBL_LoginInfo WHERE UserId = v_UserId AND LoginType = v_ErrorType;

-- 过期时间为空，代表永不过期
   IF (v_ValidTime IS NULL) then

-- 1 登录成功 
      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

   IF (TIMESTAMPDIFF(SECOND,v_CurrentTime,v_ValidTime) > 0) then

      IF (TIMESTAMPDIFF(DAY,v_CurrentTime,v_ValidTime) <= 7) then

-- 时间在7天之内
-- 0 密码即将过期 
         SET SWP_Ret_Value = 0;
         LEAVE SWL_return;
      ELSE
-- 1 登录成功 
         SET SWP_Ret_Value = 1;
         LEAVE SWL_return;
      end if;
   ELSE
      IF (TIMESTAMPDIFF(DAY,v_ValidTime,v_CurrentTime) <= 0) then

-- 过期在一天之内
-- SQLWAYS_EVAL# 登录修改密码
         SET SWP_Ret_Value = 13;
         LEAVE SWL_return;
      ELSE
-- 7 过期用户
         SET SWP_Ret_Value = 7;
         LEAVE SWL_return;
      end if;
   end if;
END;

-- SELECT N'SQLWAYS_EVAL# L_BackupHistoryBattery]...';





DROP PROCEDURE IF EXISTS PBL_BackupHistoryBattery;

CREATE PROCEDURE PBL_BackupHistoryBattery(v_StartTime   DATETIME           ,
v_EndTime     DATETIME           ,
INOUT v_RowCount    INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL# 结束时间获取历史蓄电池数据暂存到HistoryBatteryMid中,同时返回备份记录数.
*/
   DECLARE v_IndexTime DATETIME;       
   DECLARE v_Index INT;            
   DECLARE v_Month INT;            
   DECLARE v_ErrorCode INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   TRUNCATE TABLE TBL_HistoryBatteryMid;
   START TRANSACTION;

-- 初始化
   SET v_IndexTime = v_StartTime;
   SET v_Index = TIMESTAMPDIFF(month,v_StartTime,v_EndTime);
   SET v_RowCount = 0;

-- 准备备份数据
   WHILE(v_Index >= 0) DO
      SET v_Month = EXTRACT(month FROM v_IndexTime);
      IF v_Month   = 1 then

         SET @SWV_Error = 0;
         INSERT INTO TBL_HistoryBatteryMid(StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
FloatValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType,
EquipmentState)
         SELECT
         StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
FloatValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType,
EquipmentState
         FROM  TBL_HistoryBattery1
         WHERE SampleTime   >=  v_StartTime
         AND   SampleTime   <    v_EndTime;

-- 记录备份记录数
         SET v_RowCount = v_RowCount+ROW_COUNT();
         SET v_ErrorCode = @SWV_Error;
         IF v_ErrorCode <> 0 then

            SELECT  1;
            ROLLBACK;
            LEAVE SWL_return;
         end if;
      ELSE 
         IF v_Month = 2 then

            SET @SWV_Error = 0;
            INSERT INTO TBL_HistoryBatteryMid(StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
FloatValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType,
EquipmentState)
            SELECT
            StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
FloatValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType,
EquipmentState
            SignalSeverity
            FROM  TBL_HistoryBattery2
            WHERE SampleTime   >=  v_StartTime
            AND   SampleTime   <    v_EndTime;

-- 记录备份记录数
            SET v_RowCount = v_RowCount+ROW_COUNT();
            SET v_ErrorCode = @SWV_Error;
            IF v_ErrorCode <> 0 then

               SELECT  2;
               ROLLBACK;
               LEAVE SWL_return;
            end if;
         ELSE 
            IF v_Month = 3 then

               SET @SWV_Error = 0;
               INSERT INTO TBL_HistoryBatteryMid(StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
FloatValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType,
EquipmentState)
               SELECT
               StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
FloatValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType,
EquipmentState
               FROM  TBL_HistoryBattery3
               WHERE SampleTime   >=  v_StartTime
               AND   SampleTime   <    v_EndTime;

-- 记录备份记录数
               SET v_RowCount = v_RowCount+ROW_COUNT();
               SET v_ErrorCode = @SWV_Error;
               IF v_ErrorCode <> 0 then

                  SELECT  3;
                  ROLLBACK;
                  LEAVE SWL_return;
               end if;
            ELSE 
               IF v_Month = 4 then

                  SET @SWV_Error = 0;
                  INSERT INTO TBL_HistoryBatteryMid(StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
FloatValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType,
EquipmentState)
                  SELECT
                  StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
FloatValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType,
EquipmentState
                  FROM  TBL_HistoryBattery4
                  WHERE SampleTime   >=  v_StartTime
                  AND   SampleTime   <    v_EndTime;

-- 记录备份记录数
                  SET v_RowCount = v_RowCount+ROW_COUNT();
                  SET v_ErrorCode = @SWV_Error;
                  IF v_ErrorCode <> 0 then

                     SELECT  4;
                     ROLLBACK;
                     LEAVE SWL_return;
                  end if;
               ELSE 
                  IF v_Month = 5 then

                     SET @SWV_Error = 0;
                     INSERT INTO TBL_HistoryBatteryMid(StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
FloatValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType,
EquipmentState)
                     SELECT
                     StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
FloatValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType,
EquipmentState
                     FROM  TBL_HistoryBattery5
                     WHERE SampleTime   >=  v_StartTime
                     AND   SampleTime   <    v_EndTime;

-- 记录备份记录数
                     SET v_RowCount = v_RowCount+ROW_COUNT();
                     SET v_ErrorCode = @SWV_Error;
                     IF v_ErrorCode <> 0 then

                        SELECT  5;
                        ROLLBACK;
                        LEAVE SWL_return;
                     end if;
                  ELSE 
                     IF v_Month = 6 then

                        SET @SWV_Error = 0;
                        INSERT INTO TBL_HistoryBatteryMid(StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
FloatValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType,
EquipmentState)
                        SELECT
                        StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
FloatValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType,
EquipmentState
                        FROM  TBL_HistoryBattery6
                        WHERE SampleTime   >=  v_StartTime
                        AND   SampleTime   <    v_EndTime;

-- 记录备份记录数
                        SET v_RowCount = v_RowCount+ROW_COUNT();
                        SET v_ErrorCode = @SWV_Error;
                        IF v_ErrorCode <> 0 then

                           SELECT  6;
                           ROLLBACK;
                           LEAVE SWL_return;
                        end if;
                     ELSE 
                        IF v_Month = 7 then

                           SET @SWV_Error = 0;
                           INSERT INTO TBL_HistoryBatteryMid(StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
FloatValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType,
EquipmentState)
                           SELECT
                           StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
FloatValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType,
EquipmentState
                           FROM  TBL_HistoryBattery7
                           WHERE SampleTime   >=  v_StartTime
                           AND   SampleTime   <    v_EndTime;

-- 记录备份记录数
                           SET v_RowCount = v_RowCount+ROW_COUNT();
                           SET v_ErrorCode = @SWV_Error;
                           IF v_ErrorCode <> 0 then

                              SELECT  7;
                              ROLLBACK;
                              LEAVE SWL_return;
                           end if;
                        ELSE 
                           IF v_Month = 8 then

                              SET @SWV_Error = 0;
                              INSERT INTO TBL_HistoryBatteryMid(StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
FloatValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType,
EquipmentState)
                              SELECT
                              StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
FloatValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType,
EquipmentState
                              FROM  TBL_HistoryBattery8
                              WHERE SampleTime   >=  v_StartTime
                              AND   SampleTime   <    v_EndTime;

-- 记录备份记录数
                              SET v_RowCount = v_RowCount+ROW_COUNT();
                              SET v_ErrorCode = @SWV_Error;
                              IF v_ErrorCode <> 0 then

                                 SELECT  8;
                                 ROLLBACK;
                                 LEAVE SWL_return;
                              end if;
                           ELSE 
                              IF v_Month = 9 then

                                 SET @SWV_Error = 0;
                                 INSERT INTO TBL_HistoryBatteryMid(StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
FloatValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType,
EquipmentState)
                                 SELECT
                                 StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
FloatValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType,
EquipmentState
                                 FROM  TBL_HistoryBattery9
                                 WHERE SampleTime   >=  v_StartTime
                                 AND   SampleTime   <    v_EndTime;

-- 记录备份记录数
                                 SET v_RowCount = v_RowCount+ROW_COUNT();
                                 SET v_ErrorCode = @SWV_Error;
                                 IF v_ErrorCode <> 0 then

                                    SELECT  9;
                                    ROLLBACK;
                                    LEAVE SWL_return;
                                 end if;
                              ELSE 
                                 IF v_Month = 10 then

                                    SET @SWV_Error = 0;
                                    INSERT INTO TBL_HistoryBatteryMid(StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
FloatValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType,
EquipmentState)
                                    SELECT
                                    StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
FloatValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType,
EquipmentState
                                    FROM  TBL_HistoryBattery10
                                    WHERE SampleTime   >=  v_StartTime
                                    AND   SampleTime   <    v_EndTime;

-- 记录备份记录数
                                    SET v_RowCount = v_RowCount+ROW_COUNT();
                                    SET v_ErrorCode = @SWV_Error;
                                    IF v_ErrorCode <> 0 then

                                       SELECT  10;
                                       LEAVE SWL_return;
                                    end if;
                                 ELSE 
                                    IF v_Month = 11 then

                                       SET @SWV_Error = 0;
                                       INSERT INTO TBL_HistoryBatteryMid(StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
FloatValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType,
EquipmentState)
                                       SELECT
                                       StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
FloatValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType,
EquipmentState
                                       FROM  TBL_HistoryBattery11
                                       WHERE SampleTime   >=  v_StartTime
                                       AND   SampleTime   <    v_EndTime;

-- 记录备份记录数
                                       SET v_RowCount = v_RowCount+ROW_COUNT();
                                       SET v_ErrorCode = @SWV_Error;
                                       IF v_ErrorCode <> 0 then

                                          SELECT  11;
                                          ROLLBACK;
                                          LEAVE SWL_return;
                                       end if;
                                    ELSE 
                                       IF v_Month = 12 then

                                          SET @SWV_Error = 0;
                                          INSERT INTO TBL_HistoryBatteryMid(StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
FloatValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType,
EquipmentState)
                                          SELECT
                                          StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
FloatValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType,
EquipmentState
                                          FROM  TBL_HistoryBattery12
                                          WHERE SampleTime   >=  v_StartTime
                                          AND   SampleTime   <    v_EndTime;

-- 记录备份记录数
                                          SET v_RowCount = v_RowCount+ROW_COUNT();
                                          SET v_ErrorCode = @SWV_Error;
                                          IF v_ErrorCode <> 0 then

                                             SELECT  12;
                                             ROLLBACK;
                                             LEAVE SWL_return;
                                          end if;
                                       end if;
                                    end if;
                                 end if;
                              end if;
                           end if;
                        end if;
                     end if;
                  end if;
               end if;
            end if;
         end if;
      end if;
-- 准备下一个月备份
      SET v_IndexTime = TIMESTAMPADD(month,1,v_IndexTime);
      SET v_Index = TIMESTAMPDIFF(month,v_IndexTime,v_EndTime);
   END WHILE;

   COMMIT;
   SELECT 0;
   LEAVE SWL_return;
END;

-- SELECT N'SQLWAYS_EVAL# L_BackupHistoryControl]...';





DROP PROCEDURE IF EXISTS PBL_BackupHistoryControl;

CREATE PROCEDURE PBL_BackupHistoryControl(v_StartTime   DATETIME           ,
v_EndTime     DATETIME           ,
INOUT v_RowCount    INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL# 结束时间获取历史控制命令数据暂存到HistoryCommandMid中,同时返回备份记录数.
*/
   DECLARE v_ErrorCode INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   TRUNCATE TABLE TBL_HistoryControlMid;
   START TRANSACTION;

-- 初始化
   SET v_RowCount = 0;

-- 准备备份数据

   SET @SWV_Error = 0;
   INSERT INTO  TBL_HistoryControlMid(StationId,
StationName,
EquipmentId,
EquipmentName,
ControlId,
ControlName,
SerialNo,
ControlSeverity,
CmdToken,
ControlPhase,
StartTime,
EndTime,
ConfirmTime,
ConfirmerId,
ConfirmerName,
ControlResultType,
ControlResult,
ControlExecuterId,
ControlExecuterIdName,
ControlType,
ActionId,
Description,
Retry,
BaseTypeId,
BaseTypeName,
ParameterValues,
BaseCondId)
   SELECT
   StationId,
StationName,
EquipmentId,
EquipmentName,
ControlId,
ControlName,
SerialNo,
ControlSeverity,
CmdToken,
ControlPhase,
StartTime,
EndTime,
ConfirmTime,
ConfirmerId,
ConfirmerName,
ControlResultType,
ControlResult,
ControlExecuterId,
ControlExecuterIdName,
ControlType,
ActionId,
Description,
Retry,
BaseTypeId,
BaseTypeName,
ParameterValues,
BaseCondId
   FROM  TBL_HistoryControl
   WHERE StartTime     >=  v_StartTime
   AND   StartTime     <   v_EndTime;

-- 记录备份记录数
   SET v_RowCount = ROW_COUNT();
   SET v_ErrorCode = @SWV_Error;

   IF v_ErrorCode <> 0 then

      SELECT  1;
      ROLLBACK;
      LEAVE SWL_return;
   end if;

   COMMIT;
   SELECT 0;
   LEAVE SWL_return;
END;

-- SELECT N'SQLWAYS_EVAL# L_BackupHistoryEvent]...';





DROP PROCEDURE IF EXISTS PBL_BackupHistoryEvent;

CREATE PROCEDURE PBL_BackupHistoryEvent(v_StartTime   DATETIME           ,
v_EndTime     DATETIME           ,
INOUT v_RowCount    INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL# 结束时间获取历史事件数据暂存到HistoryEventMid中,同时返回备份记录数.
*/
   DECLARE v_ErrorCode INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 初始化暂存表
   SET @SWV_Error = 0;
   TRUNCATE TABLE TBL_HistoryEventMid;
   START TRANSACTION;

-- 初始化
   SET @SWV_Error = 0;
   INSERT INTO  TBL_HistoryEventMid(SequenceId,
StationId,
StationName,
EquipmentId,
EquipmentName,
EventId,
EventName,
EventConditionId,
EventSeverityId,
EventSeverity,
StartTime,
EndTime,
CancelTime,
CancelUserId,
CancelUserName,
ConfirmTime,
ConfirmerId,
ConfirmerName,
EventValue,
ReversalNum,
Meanings,
EventFilePath,
Description,
SourceHostId,
InstructionId,
InstructionStatus,
StandardAlarmNameId,
StandardAlarmName,
BaseTypeId,
BaseTypeName,
EquipmentCategory,
EquipmentCategoryName,
MaintainState,
SignalId,
RelateSequenceId,
EventCategoryId,
EventStateId,
CenterId,
CenterName,
StructureName,
MonitorUnitName,
StructureId,
StationCategoryId,
EquipmentVendor)
   SELECT
   SequenceId,
StationId,
StationName,
EquipmentId,
EquipmentName,
EventId,
EventName,
EventConditionId,
EventSeverityId,
EventSeverity,
StartTime,
EndTime,
CancelTime,
CancelUserId,
CancelUserName,
ConfirmTime,
ConfirmerId,
ConfirmerName,
EventValue,
ReversalNum,
Meanings,
EventFilePath,
Description,
SourceHostId,
InstructionId,
InstructionStatus,
StandardAlarmNameId,
StandardAlarmName,
BaseTypeId,
BaseTypeName,
EquipmentCategory,
EquipmentCategoryName,
MaintainState,
SignalId,
RelateSequenceId,
EventCategoryId,
EventStateId,
CenterId,
CenterName,
StructureName,
MonitorUnitName,
StructureId,
StationCategoryId,
EquipmentVendor
   FROM  TBL_HistoryEvent
   WHERE StartTime     >=  v_StartTime
   AND   StartTime     <   v_EndTime;

-- 记录备份记录数
   SET v_RowCount = ROW_COUNT();
   SET v_ErrorCode = @SWV_Error;

   IF v_ErrorCode <> 0 then

      SELECT  1;
      ROLLBACK;
      LEAVE SWL_return;
   end if;

   COMMIT;
   SELECT 0;
   LEAVE SWL_return;
END;

-- SELECT N'SQLWAYS_EVAL# L_BackupHistorySignal]...';





DROP PROCEDURE IF EXISTS PBL_BackupHistorySignal;

CREATE PROCEDURE PBL_BackupHistorySignal(v_StartTime   DATETIME           ,
v_EndTime     DATETIME           ,
INOUT v_RowCount    INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL# 结束时间获取历史信号数据暂存到TBL_HistorySignalMid中,同时返回备份记录数.
*/
   DECLARE v_IndexTime DATETIME;       
   DECLARE v_Index INT;            
   DECLARE v_Month INT;            
   DECLARE v_ErrorCode INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   TRUNCATE TABLE TBL_HistorySignalMid;
   START TRANSACTION;
-- 初始化暂存表
-- SQLWAYS_EVAL# BL_HistorySignalMid

-- 初始化
   SET v_IndexTime = v_StartTime;
   SET v_Index = TIMESTAMPDIFF(month,v_StartTime,v_EndTime);
   SET v_RowCount = 0;

-- 准备备份数据
   WHILE(v_Index >= 0) DO
      SET v_Month = EXTRACT(month FROM v_IndexTime);
      IF v_Month   = 1 then

         SET @SWV_Error = 0;
         INSERT INTO TBL_HistorySignalMid(StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
DataType,
FloatValue,
StringValue,
DateTimeValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType,
BaseCondId,
BaseMeaning)
         SELECT
         StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
DataType,
FloatValue,
StringValue,
DateTimeValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType,
BaseCondId,
BaseMeaning
         FROM  TBL_HistorySignal1
         WHERE SampleTime   >=  v_StartTime
         AND   SampleTime   <    v_EndTime;

-- 记录备份记录数
         SET v_RowCount = v_RowCount+ROW_COUNT();
         SET v_ErrorCode = @SWV_Error;
         IF v_ErrorCode <> 0 then

            SELECT  1;
            ROLLBACK;
            LEAVE SWL_return;
         end if;
      ELSE 
         IF v_Month = 2 then

            SET @SWV_Error = 0;
            INSERT INTO TBL_HistorySignalMid(StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
DataType,
FloatValue,
StringValue,
DateTimeValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType)
            SELECT
            StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
DataType,
FloatValue,
StringValue,
DateTimeValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType
            FROM  TBL_HistorySignal2
            WHERE SampleTime   >=  v_StartTime
            AND   SampleTime   <    v_EndTime;

-- 记录备份记录数
            SET v_RowCount = v_RowCount+ROW_COUNT();
            SET v_ErrorCode = @SWV_Error;
            IF v_ErrorCode <> 0 then

               SELECT  2;
               ROLLBACK;
               LEAVE SWL_return;
            end if;
         ELSE 
            IF v_Month = 3 then

               SET @SWV_Error = 0;
               INSERT INTO TBL_HistorySignalMid(StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
DataType,
FloatValue,
StringValue,
DateTimeValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType)
               SELECT
               StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
DataType,
FloatValue,
StringValue,
DateTimeValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType
               FROM  TBL_HistorySignal3
               WHERE SampleTime   >=  v_StartTime
               AND   SampleTime   <    v_EndTime;

-- 记录备份记录数
               SET v_RowCount = v_RowCount+ROW_COUNT();
               SET v_ErrorCode = @SWV_Error;
               IF v_ErrorCode <> 0 then

                  SELECT  3;
                  ROLLBACK;
                  LEAVE SWL_return;
               end if;
            ELSE 
               IF v_Month = 4 then

                  SET @SWV_Error = 0;
                  INSERT INTO TBL_HistorySignalMid(StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
DataType,
FloatValue,
StringValue,
DateTimeValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType)
                  SELECT
                  StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
DataType,
FloatValue,
StringValue,
DateTimeValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType
                  FROM  TBL_HistorySignal4
                  WHERE SampleTime   >=  v_StartTime
                  AND   SampleTime   <    v_EndTime;

-- 记录备份记录数
                  SET v_RowCount = v_RowCount+ROW_COUNT();
                  SET v_ErrorCode = @SWV_Error;
                  IF v_ErrorCode <> 0 then

                     SELECT  4;
                     ROLLBACK;
                     LEAVE SWL_return;
                  end if;
               ELSE 
                  IF v_Month = 5 then

                     SET @SWV_Error = 0;
                     INSERT INTO TBL_HistorySignalMid(StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
DataType,
FloatValue,
StringValue,
DateTimeValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType)
                     SELECT
                     StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
DataType,
FloatValue,
StringValue,
DateTimeValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType
                     FROM  TBL_HistorySignal5
                     WHERE SampleTime   >=  v_StartTime
                     AND   SampleTime   <    v_EndTime;

-- 记录备份记录数
                     SET v_RowCount = v_RowCount+ROW_COUNT();
                     SET v_ErrorCode = @SWV_Error;
                     IF v_ErrorCode <> 0 then

                        SELECT  5;
                        ROLLBACK;
                        LEAVE SWL_return;
                     end if;
                  ELSE 
                     IF v_Month = 6 then

                        SET @SWV_Error = 0;
                        INSERT INTO TBL_HistorySignalMid(StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
DataType,
FloatValue,
StringValue,
DateTimeValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType)
                        SELECT
                        StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
DataType,
FloatValue,
StringValue,
DateTimeValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType
                        FROM  TBL_HistorySignal6
                        WHERE SampleTime   >=  v_StartTime
                        AND   SampleTime   <   v_EndTime;

-- 记录备份记录数
                        SET v_RowCount = v_RowCount+ROW_COUNT();
                        SET v_ErrorCode = @SWV_Error;
                        IF v_ErrorCode <> 0 then

                           SELECT  6;
                           ROLLBACK;
                           LEAVE SWL_return;
                        end if;
                     ELSE 
                        IF v_Month = 7 then

                           SET @SWV_Error = 0;
                           INSERT INTO TBL_HistorySignalMid(StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
DataType,
FloatValue,
StringValue,
DateTimeValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType)
                           SELECT
                           StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
DataType,
FloatValue,
StringValue,
DateTimeValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType
                           FROM  TBL_HistorySignal7
                           WHERE SampleTime   >=  v_StartTime
                           AND   SampleTime   <   v_EndTime;

-- 记录备份记录数
                           SET v_RowCount = v_RowCount+ROW_COUNT();
                           SET v_ErrorCode = @SWV_Error;
                           IF v_ErrorCode <> 0 then

                              SELECT  7;
                              ROLLBACK;
                              LEAVE SWL_return;
                           end if;
                        ELSE 
                           IF v_Month = 8 then

                              SET @SWV_Error = 0;
                              INSERT INTO TBL_HistorySignalMid(StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
DataType,
FloatValue,
StringValue,
DateTimeValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType)
                              SELECT
                              StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
DataType,
FloatValue,
StringValue,
DateTimeValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType
                              FROM  TBL_HistorySignal8
                              WHERE SampleTime   >=  v_StartTime
                              AND   SampleTime   <   v_EndTime;

-- 记录备份记录数
                              SET v_RowCount = v_RowCount+ROW_COUNT();
                              SET v_ErrorCode = @SWV_Error;
                              IF v_ErrorCode <> 0 then

                                 SELECT  8;
                                 ROLLBACK;
                                 LEAVE SWL_return;
                              end if;
                           ELSE 
                              IF v_Month = 9 then

                                 SET @SWV_Error = 0;
                                 INSERT INTO TBL_HistorySignalMid(StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
DataType,
FloatValue,
StringValue,
DateTimeValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType)
                                 SELECT
                                 StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
DataType,
FloatValue,
StringValue,
DateTimeValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType
                                 FROM  TBL_HistorySignal9
                                 WHERE SampleTime   >=  v_StartTime
                                 AND   SampleTime   <   v_EndTime;

-- 记录备份记录数
                                 SET v_RowCount = v_RowCount+ROW_COUNT();
                                 SET v_ErrorCode = @SWV_Error;
                                 IF v_ErrorCode <> 0 then

                                    SELECT  9;
                                    ROLLBACK;
                                    LEAVE SWL_return;
                                 end if;
                              ELSE 
                                 IF v_Month = 10 then

                                    SET @SWV_Error = 0;
                                    INSERT INTO TBL_HistorySignalMid(StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
DataType,
FloatValue,
StringValue,
DateTimeValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType)
                                    SELECT
                                    StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
DataType,
FloatValue,
StringValue,
DateTimeValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType
                                    FROM  TBL_HistorySignal10
                                    WHERE SampleTime   >=  v_StartTime
                                    AND   SampleTime   <   v_EndTime;

-- 记录备份记录数
                                    SET v_RowCount = v_RowCount+ROW_COUNT();
                                    SET v_ErrorCode = @SWV_Error;
                                    IF v_ErrorCode <> 0 then

                                       SELECT  10;
                                       ROLLBACK;
                                       LEAVE SWL_return;
                                    end if;
                                 ELSE 
                                    IF v_Month = 11 then

                                       SET @SWV_Error = 0;
                                       INSERT INTO TBL_HistorySignalMid(StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
DataType,
FloatValue,
StringValue,
DateTimeValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType)
                                       SELECT
                                       StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
DataType,
FloatValue,
StringValue,
DateTimeValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType
                                       FROM  TBL_HistorySignal11
                                       WHERE SampleTime   >=  v_StartTime
                                       AND   SampleTime   <   v_EndTime;

-- 记录备份记录数
                                       SET v_RowCount = v_RowCount+ROW_COUNT();
                                       SET v_ErrorCode = @SWV_Error;
                                       IF v_ErrorCode <> 0 then

                                          SELECT  11;
                                          ROLLBACK;
                                          LEAVE SWL_return;
                                       end if;
                                    ELSE 
                                       IF v_Month = 12 then

                                          SET @SWV_Error = 0;
                                          INSERT INTO TBL_HistorySignalMid(StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
DataType,
FloatValue,
StringValue,
DateTimeValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType)
                                          SELECT
                                          StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
DataType,
FloatValue,
StringValue,
DateTimeValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType
                                          FROM  TBL_HistorySignal12
                                          WHERE SampleTime   >=  v_StartTime
                                          AND   SampleTime   <   v_EndTime;

-- 记录备份记录数
                                          SET v_RowCount = v_RowCount+ROW_COUNT();
                                          SET v_ErrorCode = @SWV_Error;
                                          IF v_ErrorCode <> 0 then

                                             SELECT  12;
                                             ROLLBACK;
                                             LEAVE SWL_return;
                                          end if;
                                       end if;
                                    end if;
                                 end if;
                              end if;
                           end if;
                        end if;
                     end if;
                  end if;
               end if;
            end if;
         end if;
      end if;
-- 准备下一个月备份
      SET v_IndexTime = TIMESTAMPADD(month,1,v_IndexTime);
      SET v_Index = TIMESTAMPDIFF(month,v_IndexTime,v_EndTime);
   END WHILE;

   COMMIT;

   SELECT 0;
   LEAVE SWL_return;
END;

-- SELECT N'SQLWAYS_EVAL# L_BackupOperationRecord]...';





DROP PROCEDURE IF EXISTS PBL_BackupOperationRecord;

CREATE PROCEDURE PBL_BackupOperationRecord(v_StartTime DATETIME,
v_EndTime DATETIME,
INOUT v_RowCount INT ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL# 结束时间获取历史操作记录数据暂存到OperationRecordMid中,同时返回备份记录数.
*/
   DECLARE v_ErrorCode INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   TRUNCATE TABLE TBL_OperationRecordMid;
   START TRANSACTION;

-- 初始化
   SET v_RowCount = 0;

-- 准备备份数据
   SET @SWV_Error = 0;
   INSERT INTO  TBL_OperationRecordMid(UserId,
StationId,
StationName,
Operation,
OperationTime,
OperationType,
OperationContent)
   SELECT
   UserId,
StationId,
StationName,
Operation,
OperationTime,
OperationType,
OperationContent
   FROM  TBL_OperationRecord
   WHERE OperationTime >= v_StartTime AND OperationTime < v_EndTime;

-- 记录备份记录数
   SET v_RowCount = ROW_COUNT();
   SET v_ErrorCode = @SWV_Error;

   IF v_ErrorCode <> 0 then

      ROLLBACK;
      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

   COMMIT;
   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_BackupSignalStatistics]...';





DROP PROCEDURE IF EXISTS PBL_BackupSignalStatistics;

CREATE PROCEDURE PBL_BackupSignalStatistics(v_StartTime DATETIME,
v_EndTime DATETIME,
INOUT v_RowCount INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL# 结束时间获取历史信号统计数据暂存到TBL_SignalStatisticsMid中,同时返回备份记录数.
*/
   DECLARE v_ErrorCode INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   TRUNCATE TABLE TBL_SignalStatisticsMid;

   START TRANSACTION;

-- 初始化
   SET v_RowCount = 0;

-- 准备备份数据
   SET @SWV_Error = 0;
   INSERT INTO TBL_SignalStatisticsMid(StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
StatisticsTime,
MinValue,
MinTime,
MaxValue,
MaxTime,
AvgValue,
AvgTime,
BaseTypeId,
BaseTypeName)
   SELECT
   StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
StatisticsTime,
MinValue,
MinTime,
MaxValue,
MaxTime,
AvgValue,
AvgTime,
BaseTypeId,
BaseTypeName
   FROM TBL_SignalStatistics
   WHERE StatisticsTime >= v_StartTime	AND StatisticsTime < v_EndTime;

-- 记录备份记录数
   SET v_RowCount = ROW_COUNT();
   SET v_ErrorCode = @SWV_Error;

   IF v_ErrorCode <> 0 then

      SELECT  1;
      ROLLBACK;
      LEAVE SWL_return;
   end if;

   COMMIT;
   SELECT 0;
   LEAVE SWL_return;
END;

-- SELECT N'SQLWAYS_EVAL# L_BackupSwapCardRecord]...';





DROP PROCEDURE IF EXISTS PBL_BackupSwapCardRecord;

CREATE PROCEDURE PBL_BackupSwapCardRecord(v_StartTime DATETIME,
v_EndTime DATETIME,
INOUT v_RowCount INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL# 
*/ 
   DECLARE v_ErrorCode INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   TRUNCATE TABLE TBL_SwapCardRecordMid;
   START TRANSACTION;

-- 初始化
   SET v_RowCount = 0;

-- 准备备份数据
   SET @SWV_Error = 0;
   INSERT INTO TBL_SwapCardRecordMid(StationId,
StationName,
EquipmentId,
EquipmentName,
CardStationId,
CardStationName,
CardId,
CardCode,
CardName,
CardUserId,
CardUserName,
CardCategory,
CardCategoryName,
CardGroup,
CardGroupName,
CardStatus,
CardStatusName,
DoorId,
DoorNo,
DoorName,
DoorCategory,
DoorCategoryName,
Valid,
ValidName,
Enter,
RecordTime)
   SELECT
   StationId,
StationName,
EquipmentId,
EquipmentName,
CardStationId,
CardStationName,
CardId,
CardCode,
CardName,
CardUserId,
CardUserName,
CardCategory,
CardCategoryName,
CardGroup,
CardGroupName,
CardStatus,
CardStatusName,
DoorId,
DoorNo,
DoorName,
DoorCategory,
DoorCategoryName,
Valid,
ValidName,
Enter,
RecordTime
   FROM  TBL_SwapCardRecord
   WHERE RecordTime >= v_StartTime AND RecordTime < v_EndTime;

-- 记录备份记录数
   SET v_RowCount = ROW_COUNT();
   SET v_ErrorCode = @SWV_Error;

   IF v_ErrorCode <> 0 then

      SELECT  1;
      ROLLBACK;
      LEAVE SWL_return;
   end if;

   COMMIT;
   SELECT 0;
   LEAVE SWL_return;
END;

-- SELECT N'SQLWAYS_EVAL# L_BatchSaveHeartbeatTime]...';





DROP PROCEDURE IF EXISTS PBL_BatchSaveHeartbeatTime;

CREATE PROCEDURE PBL_BatchSaveHeartbeatTime(v_MonitorUnitTotal	 	INT		    ,
v_BMonitorUnitId			NATIONAL VARCHAR(4000),
v_DataServerId	 	INT ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_Index INT;			
   DECLARE v_MinIndex INT;			
   DECLARE v_MaxIndex INT;			
   DECLARE v_TempValue NATIONAL VARCHAR(255);
   DECLARE v_MonitorUnitId INT;        	
   DECLARE v_Return INT;			
   DECLARE v_Current DATETIME;	
   DECLARE v_Spliter NATIONAL VARCHAR(255);
   DECLARE SWV_BMonitorUnitId_Str NATIONAL VARCHAR(4000);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 当前时间
/*liangyj
   IF v_DataServerId is null then
      set v_DataServerId = 0;
   END IF;*/
   SET v_Current = CURRENT_TIMESTAMP;

-- 设置分隔符
   SET v_Spliter = ',';

-- 设置个数
   SET v_MinIndex = 1;
   SET v_MaxIndex = v_MonitorUnitTotal;

-- 批量保存MU心跳
   SET @SWV_Error = 0;
   WHILE(v_MinIndex <= v_MaxIndex) DO
-- @MonitorUnitId
      SET v_Index = LOCATE(v_Spliter,v_BMonitorUnitId);
      IF v_Index = 0 then

         SET v_MonitorUnitId = cast(v_BMonitorUnitId as SIGNED INTEGER);
      ELSE
         SET v_MonitorUnitId = cast(SUBSTRING(v_BMonitorUnitId,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BMonitorUnitId_Str = SUBSTRING(v_BMonitorUnitId,v_Index+1,9999);
         SET v_BMonitorUnitId = SWV_BMonitorUnitId_Str;
      end if;

-- 更新心跳时间
      UPDATE TSL_MonitorUnit
      SET HeartbeatTime = v_Current
      WHERE MonitorUnitId = v_MonitorUnitId;
      IF v_DataServerId <> 0 then

         IF NOT EXISTS(SELECT 1 FROM TSL_RealtimeRouting	WHERE DataServerId = v_DataServerId AND MonitorUnitId = v_MonitorUnitId) then

            UPDATE TSL_RealtimeRouting SET DataServerId = v_DataServerId WHERE MonitorUnitId = v_MonitorUnitId;
         end if;
      end if;
      SET v_MinIndex = v_MinIndex+1;
   END WHILE;	

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;    

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_ClearActiveSignal]...';





DROP PROCEDURE IF EXISTS PBL_ClearActiveSignal;

CREATE PROCEDURE PBL_ClearActiveSignal(v_Expired	INT,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_CurrentTime DATETIME;

-- 当前时间
   SET v_CurrentTime = CURRENT_TIMESTAMP;

-- Clear 过期
   DELETE FROM TBL_ActiveSignal
   WHERE SampleTime IS NOT NULL AND TIMESTAMPDIFF(MINUTE,LastUpdate,v_CurrentTime) >= v_Expired;

-- SQLWAYS_EVAL# 站，设备，信号编号任一个为0)
   DELETE FROM TBL_ActiveSignal
   WHERE StationId = 0 OR EquipmentId = 0 OR SignalId = 0;

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_ConfigChangeLog]...';






DROP PROCEDURE IF EXISTS PBL_ConfigChangeLog;

CREATE PROCEDURE PBL_ConfigChangeLog(v_ObjectId		 NATIONAL VARCHAR(255),
v_ConfigId 		 INT,
v_EditType 		 INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_MacroObjectId NATIONAL VARCHAR(255);
   DECLARE v_MacroConfigId INT; 
   DECLARE v_MacroEditType INT;  

   DECLARE v_IdConvertRule NATIONAL VARCHAR(255);
   DECLARE v_tmpStr1 NATIONAL VARCHAR(255);
   DECLARE v_tmpStr2 NATIONAL VARCHAR(255);
   DECLARE v_tmpPos INT;
   DECLARE v_MinIndex INT;
   DECLARE v_MaxIndex INT;
   DECLARE SWV_MacroObjectId_Str NATIONAL VARCHAR(255);
   DECLARE SWV_tmpStr1_Str NATIONAL VARCHAR(255);

-- SQLWAYS_EVAL# nfigChangeMicroLog]（如果该Config有其他EditType记录则删除其他EditType记录）
   IF EXISTS(SELECT 1 FROM TBL_ConfigChangeMicroLog
   WHERE ObjectId = v_ObjectId AND ConfigId = v_ConfigId AND EditType = v_EditType) then

      UPDATE TBL_ConfigChangeMicroLog SET UpdateTime = CURRENT_TIMESTAMP
      WHERE ObjectId = v_ObjectId AND ConfigId = v_ConfigId AND EditType = v_EditType;
   ELSE
      DELETE FROM TBL_ConfigChangeMicroLog WHERE ObjectId = v_ObjectId AND ConfigId = v_ConfigId;
      INSERT INTO TBL_ConfigChangeMicroLog VALUES(v_ObjectId,v_ConfigId,v_EditType,CURRENT_TIMESTAMP);
   end if;

/*SQLWAYS_EVAL# _ConfigChangeMicroLog,供C接口增量配置使用,20141204,BEGIN*/
   IF EXISTS(SELECT 1 FROM C_ConfigChangeMicroLog
   WHERE ObjectId = v_ObjectId AND ConfigId = v_ConfigId AND EditType = v_EditType) then

      UPDATE C_ConfigChangeMicroLog SET UpdateTime = CURRENT_TIMESTAMP
      WHERE ObjectId = v_ObjectId AND ConfigId = v_ConfigId AND EditType = v_EditType;
   ELSE
 INSERT INTO C_ConfigChangeMicroLog VALUES(v_ObjectId,v_ConfigId,v_EditType,CURRENT_TIMESTAMP);
   end if;
/*SQLWAYS_EVAL# _ConfigChangeMicroLog,供C接口增量配置使用,20141204,END*/

-- SQLWAYS_EVAL# ChangeMap]
   select   MacroConfigId, MacroEditType, IdConvertRule INTO v_MacroConfigId,v_MacroEditType,v_IdConvertRule FROM TBL_ConfigChangeMap WHERE MicroConfigId = v_ConfigId AND MicroEditType = v_EditType;

-- SQLWAYS_EVAL# 则退出
   IF (v_MacroConfigId IS NULL OR v_MacroEditType IS NULL) then 
      SET SWP_Ret_Value = 0;
      LEAVE SWL_return;
   end if;

-- 生成细记录ID临时表
   CREATE TEMPORARY TABLE tt_tmpIds 
   (
      Idx INT not null  AUTO_INCREMENT PRIMARY KEY, 
      FieldValue NATIONAL VARCHAR(255) not null
   );

   SET v_tmpStr1 = v_ObjectId;

   SWL_Label9:
   WHILE (1 = 1) DO
      SET v_tmpPos = LOCATE('.',v_tmpStr1);
      IF (v_tmpPos <= 0) then

  INSERT INTO tt_tmpIds VALUES(v_tmpStr1);

         LEAVE SWL_Label9;
      ELSE
         SET v_tmpStr2 = SUBSTRING(v_tmpStr1,1,v_tmpPos -1);
         INSERT INTO tt_tmpIds VALUES(v_tmpStr2);

         SET SWV_tmpStr1_Str = SUBSTRING(v_tmpStr1,v_tmpPos+1,LENGTH(v_tmpStr1) -v_tmpPos);
         SET v_tmpStr1 = SWV_tmpStr1_Str;
      end if;
   END WHILE;

-- 生成宏记录ID转换规则表
   CREATE TEMPORARY TABLE tt_tmpRules 
   (
      Idx INT not null  AUTO_INCREMENT PRIMARY KEY, 
      FieldValue NATIONAL VARCHAR(255) not null
   );
   SET v_tmpStr1 = v_IdConvertRule;

   SWL_Label10:
   WHILE (1 = 1) DO
      SET v_tmpPos = LOCATE('.',v_tmpStr1);
      IF (v_tmpPos <= 0) then

  INSERT INTO tt_tmpRules VALUES(v_tmpStr1);

         LEAVE SWL_Label10;
      ELSE
         SET v_tmpStr2 = SUBSTRING(v_tmpStr1,1,v_tmpPos -1);
         INSERT INTO tt_tmpRules VALUES(v_tmpStr2);

         SET SWV_tmpStr1_Str = SUBSTRING(v_tmpStr1,v_tmpPos+1,LENGTH(v_tmpStr1) -v_tmpPos);
         SET v_tmpStr1 = SWV_tmpStr1_Str;
      end if;
   END WHILE;

-- 生成宏记录ID
   select   Min(Idx), Max(Idx) INTO v_MinIndex,v_MaxIndex FROM tt_tmpRules;

   WHILE(v_MinIndex <= v_MaxIndex) DO
      select   FieldValue INTO v_tmpStr1 FROM tt_tmpRules WHERE Idx = v_MinIndex;
      SET v_tmpPos = cast(v_tmpStr1 as SIGNED INTEGER);
      select   FieldValue INTO v_tmpStr2 FROM tt_tmpIds WHERE Idx = v_tmpPos;
      SET v_MacroObjectId = CONCAT(v_tmpStr2,'.');
      SET v_MinIndex = v_MinIndex+1;
   END WHILE;

   SET SWV_MacroObjectId_Str = SUBSTRING(v_MacroObjectId,1,LENGTH(v_MacroObjectId) -1);
   SET v_MacroObjectId = SWV_MacroObjectId_Str;

-- 插入宏记录
   IF EXISTS(SELECT 1 FROM TBL_ConfigChangeMacroLog
   WHERE ObjectId = v_MacroObjectId AND ConfigId = v_MacroConfigId AND EditType = v_MacroEditType) then

      UPDATE TBL_ConfigChangeMacroLog SET UpdateTime = CURRENT_TIMESTAMP
      WHERE ObjectId = v_MacroObjectId AND ConfigId = v_MacroConfigId AND EditType = v_MacroEditType;
   ELSE
      DELETE FROM TBL_ConfigChangeMacroLog WHERE ObjectId = v_MacroObjectId AND ConfigId = v_MacroConfigId;
      INSERT INTO TBL_ConfigChangeMacroLog VALUES(v_MacroObjectId,v_MacroConfigId,v_MacroEditType,CURRENT_TIMESTAMP);
   end if;

   DROP TEMPORARY TABLE IF EXISTS tt_tmpIds;
   DROP TEMPORARY TABLE IF EXISTS tt_tmpRules;
END;


-- SELECT N'SQLWAYS_EVAL# L_CountConfigSignal]...';


DROP PROCEDURE IF EXISTS PBL_CountConfigSignal;

CREATE PROCEDURE PBL_CountConfigSignal(v_CenterId           NATIONAL VARCHAR(4000)    ,
v_GroupId            NATIONAL VARCHAR(4000)    ,
v_StationState       NATIONAL VARCHAR(4000)    ,
v_StationCategory    NATIONAL VARCHAR(4000)    ,
v_StationId          NATIONAL VARCHAR(4000)    ,
v_StationId2         NATIONAL VARCHAR(4000)    ,
v_StationId3         NATIONAL VARCHAR(4000)    ,
v_EquipmentCategory  NATIONAL VARCHAR(4000)    ,
v_EquipmentId        NATIONAL VARCHAR(4000)    ,
v_EquipmentId2       NATIONAL VARCHAR(4000)    ,
v_EquipmentId3       NATIONAL VARCHAR(4000)    ,
v_SignalProperty		NATIONAL VARCHAR(4000)    ,
v_SignalCategory     NATIONAL VARCHAR(4000)    ,
v_SignalId	        NATIONAL VARCHAR(4000)    ,
v_SignalId2	        NATIONAL VARCHAR(4000)    ,
v_SignalId3	        NATIONAL VARCHAR(4000)    ,
v_SignalName         NATIONAL VARCHAR(4000)    ,
v_BaseTypeId         NATIONAL VARCHAR(4000)    ,
v_BaseTypeId2	    NATIONAL VARCHAR(4000)    ,
v_BaseTypeId3	    NATIONAL VARCHAR(4000)    ,
v_BaseTypeName       NATIONAL VARCHAR(4000)    ,
v_BaseTypeEntryId		NATIONAL VARCHAR(4000)    , -- SQLWAYS_EVAL# Id不包含后面3位顺序号
v_StandardTypeEntryId		NATIONAL VARCHAR(4000)    , -- SQLWAYS_EVAL# ，StandardDicId不包含前面局站类型和后面3位顺序号
v_OnlyBaseType       NATIONAL VARCHAR(20)      , -- 非-1代表只包含基类
v_OnlyStandardType	NATIONAL VARCHAR(20)   	,
v_QueryUserId        NATIONAL VARCHAR(20)      ,
v_ReturnCount        NATIONAL VARCHAR(20)   ,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_RowCount INT;				
   DECLARE v_Index INT;             
   DECLARE v_TotalRowCount INT;				
   DECLARE v_WhereSignalId1 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereSignalId2 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereSignalId3 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereSignalProperty NATIONAL VARCHAR(4000);  
   DECLARE v_WhereSignalCategory NATIONAL VARCHAR(4000);  
   DECLARE v_WhereSignalName NATIONAL VARCHAR(4000);  
   DECLARE v_WhereBaseTypeId1 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereBaseTypeId2 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereBaseTypeId3 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereBaseTypeName NATIONAL VARCHAR(4000);  
   DECLARE v_WhereBaseTypeEntryId NATIONAL VARCHAR(4000);  
   DECLARE v_WhereStandardTypeEntryId NATIONAL VARCHAR(4000);  
   DECLARE v_WhereModule NATIONAL VARCHAR(4000);  
   DECLARE v_BaseTypeJoinString NATIONAL VARCHAR(4000);  
   DECLARE v_StandardTypeEntryJoinString NATIONAL VARCHAR(4000);  
   DECLARE v_PropertyJoinString NATIONAL VARCHAR(4000);  
   DECLARE v_StandardVer INT;
	DECLARE SWV_ExecDyn VARCHAR(5000);
-- 处理权限后的局站
   IF v_CenterId is null then
      set v_CenterId = '-1';
   END IF;
   IF v_GroupId is null then
      set v_GroupId = '-1';
   END IF;
   IF v_StationState is null then
      set v_StationState = '-1';
   END IF;
   IF v_StationCategory is null then
      set v_StationCategory = '-1';
   END IF;
   IF v_StationId is null then
      set v_StationId = '-1';
   END IF;
   IF v_StationId2 is null then
      set v_StationId2 = '-1';
   END IF;
   IF v_StationId3 is null then
      set v_StationId3 = '-1';
   END IF;
   IF v_EquipmentCategory is null then
      set v_EquipmentCategory = '-1';
   END IF;
   IF v_EquipmentId is null then
      set v_EquipmentId = '-1';
   END IF;
   IF v_EquipmentId2 is null then
      set v_EquipmentId2 = '-1';
   END IF;
   IF v_EquipmentId3 is null then
      set v_EquipmentId3 = '-1';
   END IF;
   IF v_SignalProperty is null then
      set v_SignalProperty = '-1';
   END IF;
   IF v_SignalCategory is null then
      set v_SignalCategory = '-1';
   END IF;
   IF v_SignalId is null then
      set v_SignalId = '-1';
   END IF;
   IF v_SignalId2 is null then
      set v_SignalId2 = '-1';
   END IF;
   IF v_SignalId3 is null then
      set v_SignalId3 = '-1';
   END IF;
   IF v_SignalName is null then
      set v_SignalName = '-1';
   END IF;
   IF v_BaseTypeId is null then
      set v_BaseTypeId = '-1';
   END IF;
   IF v_BaseTypeId2 is null then
      set v_BaseTypeId2 = '-1';
   END IF;
   IF v_BaseTypeId3 is null then
      set v_BaseTypeId3 = '-1';
   END IF;
   IF v_BaseTypeName is null then
      set v_BaseTypeName = '-1';
   END IF;
   IF v_BaseTypeEntryId is null then
      set v_BaseTypeEntryId = '-1';
   END IF;
   IF v_StandardTypeEntryId is null then
      set v_StandardTypeEntryId = '-1';
   END IF;
   IF v_OnlyBaseType is null then
      set v_OnlyBaseType = '-1';
   END IF;
   IF v_OnlyStandardType is null then
      set v_OnlyStandardType = '-1';
   END IF;
   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   CREATE TEMPORARY TABLE tt_TempStation
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      StationId INT,
      StationName VARCHAR(128),
      StationState INT,
      StationCategory INT,
      StationGrade INT,
      StationBaseType INT
   );
   CALL PAM_FilterStation(v_CenterId,v_GroupId,v_StationState,v_StationCategory,v_StationId,v_StationId2,
   v_StationId3,v_QueryUserId,'#TempStation');

-- SQLWAYS_EVAL# CMCC；2 CTCC；3 CNCC
   SET v_StandardVer = PAM_GetStandardVer();

-- 设置标准化局站类型
   UPDATE tt_TempStation A
   INNER JOIN TBL_StationBaseMap B ON A.StationCategory = B.StationCategory AND B.StandardType = v_StandardVer SET A.StationBaseType = B.StationBaseType;

-- 处理权限后的设备
   CREATE TEMPORARY TABLE tt_TempEquipment
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      StationId INT,
      StationName VARCHAR(128),
      StationState INT,
      StationCategory INT,
      EquipmentId INT,
      EquipmentName VARCHAR(128),
      EquipmentTemplateId INT,
      EquipmentCategory INT
   );
   CALL PAM_FilterEquipmentCategory(v_EquipmentCategory,v_EquipmentId,v_EquipmentId2,v_EquipmentId3,v_QueryUserId,
   '#TempStation','#TempEquipment');

-- 信号ID
   SET v_WhereSignalId1 = '    ';
   IF IFNULL(v_SignalId,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_SignalId);
      IF v_Index = 0 then
         SET v_WhereSignalId1 = CONCAT('SQLWAYS_EVAL# = ',v_SignalId);
      ELSE
         SET v_WhereSignalId1 = CONCAT('SQLWAYS_EVAL# IN (',v_SignalId,')');
      end if;
   end if;

-- 信号ID2
   SET v_WhereSignalId2 = '   ';
   IF IFNULL(v_SignalId2,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_SignalId2);
      IF v_Index = 0 then
         SET v_WhereSignalId2 = CONCAT('SQLWAYS_EVAL# = ',v_SignalId2);
      ELSE
         SET v_WhereSignalId2 = CONCAT('SQLWAYS_EVAL# IN (',v_SignalId2,')');
      end if;
   end if;

-- 信号ID3
   SET v_WhereSignalId3 = '   ';
   IF IFNULL(v_SignalId3,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_SignalId3);
      IF v_Index = 0 then
         SET v_WhereSignalId3 = CONCAT('SQLWAYS_EVAL# = ',v_SignalId3);
      ELSE
         SET v_WhereSignalId3 = CONCAT('SQLWAYS_EVAL# IN (',v_SignalId3,')');
      end if;
   end if;

-- 信号属性ID
   SET v_WhereSignalProperty = '  ';
   SET v_PropertyJoinString = '';
   IF IFNULL(v_SignalProperty,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_SignalProperty);
      IF v_Index = 0 then
         SET v_WhereSignalProperty = CONCAT('SQLWAYS_EVAL# = ',v_SignalProperty);
      ELSE
         SET v_WhereSignalProperty = CONCAT('SQLWAYS_EVAL# IN (',v_SignalProperty,')');
      end if;
      SET v_PropertyJoinString = 'SQLWAYS_EVAL# sp ON es.EquipmentId = sp.EquipmentId AND es.SignalId = sp.SignalId ';
   end if;

-- 信号种类ID
   SET v_WhereSignalCategory = '  ';
   IF IFNULL(v_SignalCategory,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_SignalCategory);
      IF v_Index = 0 then
         SET v_WhereSignalCategory = CONCAT('SQLWAYS_EVAL# = ',v_SignalCategory);
      ELSE
         SET v_WhereSignalCategory = CONCAT('SQLWAYS_EVAL# IN (',v_SignalCategory,')');
      end if;
   end if;

-- 信号名称
   SET v_WhereSignalName = '  ';
   IF IFNULL(v_SignalName,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_SignalName);
      IF v_Index = 0 then

         SET v_WhereSignalName = CONCAT('SQLWAYS_EVAL# LIKE ''%',v_SignalName,'%''');
      ELSE
         SET v_WhereSignalName = ' AND (( ';
         WHILE(v_Index != 0) DO
            SET v_WhereSignalName = CONCAT(v_WhereSignalName,'SQLWAYS_EVAL# like ''','%',SUBSTRING(v_SignalName,1,v_Index -1),
            '%''');
            SET v_SignalName = rtrim(ltrim(INSERT(v_SignalName,1,v_Index,' ')));
            SET v_Index = LOCATE(',',v_SignalName);
            IF(v_Index != 0) then

               SET v_WhereSignalName = CONCAT(v_WhereSignalName,' ) OR ( ');
            ELSE
               SET v_WhereSignalName = CONCAT(v_WhereSignalName,' )) ');
            end if;
         END WHILE;
      end if;
   end if;		

   IF v_StandardVer <> 2 then
-- SQLWAYS_EVAL# 使用艾默生基类标准化

      IF v_OnlyBaseType = '-1' AND v_OnlyStandardType <> '-1' then
         SET v_OnlyBaseType = v_OnlyStandardType;
      end if;
      IF v_BaseTypeEntryId = '-1' AND v_StandardTypeEntryId <> '-1' then
         SET v_BaseTypeEntryId = v_StandardTypeEntryId;
      end if;
   end if;

-- 基类连接
   IF v_OnlyBaseType = '-1' then

      SET v_BaseTypeJoinString = 'SQLWAYS_EVAL# sb ON sb.BaseTypeId = es.BaseTypeId  ';
   ELSE
      SET v_BaseTypeJoinString = 'SQLWAYS_EVAL# sb ON sb.BaseTypeId = es.BaseTypeId  ';
   end if;

-- 标准化连接
   IF v_OnlyStandardType = '-1' then

      SET v_StandardTypeEntryJoinString = CONCAT('SQLWAYS_EVAL# sbm ON sbm.StationBaseType = su.StationBaseType AND sbm.BaseTypeId = floor(es.BaseTypeId / 1000) * 1000 + 1
LEFT JOIN TBL_StandardDicSig sds ON sds.StandardDicId = sbm.StandardDicId AND sds.StandardType = ',CAST(v_StandardVer AS CHAR(10)));
   ELSE
      IF v_StandardVer = 2 then 
-- 电信使用电信集团标准化
         SET v_StandardTypeEntryJoinString = CONCAT('SQLWAYS_EVAL# sbm ON sbm.StationBaseType = su.StationBaseType AND sbm.BaseTypeId = floor(es.BaseTypeId / 1000) * 1000 + 1
LEFT JOIN TBL_StandardDicSig sds ON sds.StandardDicId = sbm.StandardDicId AND sds.StandardType = ',CAST(v_StandardVer AS CHAR(10)));
      ELSE
-- 艾默生和移动使用基类标准化
         SET v_StandardTypeEntryJoinString = CONCAT('SQLWAYS_EVAL# sbm ON sbm.StationBaseType = su.StationBaseType AND sbm.BaseTypeId = floor(es.BaseTypeId / 1000) * 1000 + 1
LEFT JOIN TBL_StandardDicSig sds ON sds.StandardDicId = sbm.StandardDicId AND sds.StandardType = ',CAST(v_StandardVer AS CHAR(10)));
      end if;
   end if;

-- 基类ID
   SET v_WhereBaseTypeId1 = ' ';
   IF IFNULL(v_BaseTypeId,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_BaseTypeId);
      IF v_Index = 0 then
         SET v_WhereBaseTypeId1 = CONCAT('SQLWAYS_EVAL# = ',v_BaseTypeId);
      ELSE
         SET v_WhereBaseTypeId1 = CONCAT('SQLWAYS_EVAL# IN (',v_BaseTypeId,')');
      end if;
      SET v_BaseTypeJoinString = 'SQLWAYS_EVAL# sb ON sb.BaseTypeId = es.BaseTypeId  ';
   end if;

-- 基类ID2
   SET v_WhereBaseTypeId2 = ' ';
   IF IFNULL(v_BaseTypeId2,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_BaseTypeId2);
      IF v_Index = 0 then
         SET v_WhereBaseTypeId2 = CONCAT('SQLWAYS_EVAL# = ',v_BaseTypeId2);
      ELSE
         SET v_WhereBaseTypeId2 = CONCAT('SQLWAYS_EVAL# IN (',v_BaseTypeId2,')');
      end if;
   end if;

-- 基类ID3
   SET v_WhereBaseTypeId3 = ' ';
   IF IFNULL(v_BaseTypeId3,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_BaseTypeId3);
      IF v_Index = 0 then
         SET v_WhereBaseTypeId3 = CONCAT('SQLWAYS_EVAL# = ',v_BaseTypeId3);
      ELSE
         SET v_WhereBaseTypeId3 = CONCAT('SQLWAYS_EVAL# IN (',v_BaseTypeId3,')');
      end if;
   end if;
   IF v_WhereBaseTypeId1 <> ' ' then
      SET v_WhereBaseTypeId3 = CONCAT(v_WhereBaseTypeId3,')');
   end if;

-- 基类名称	
   SET v_WhereBaseTypeName = '  ';
   IF IFNULL(v_BaseTypeName,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_BaseTypeName);
      IF v_Index = 0 then

         SET v_WhereBaseTypeName = CONCAT('SQLWAYS_EVAL# LIKE ''%',v_BaseTypeName,'%''');
      ELSE
         SET v_WhereBaseTypeName = ' AND (( ';
         WHILE(v_Index != 0) DO
            SET v_WhereBaseTypeName = CONCAT(v_WhereBaseTypeName,'SQLWAYS_EVAL# like ','%',SUBSTRING(v_BaseTypeName,1,v_Index -1),
            '%');
            SET v_BaseTypeName = rtrim(ltrim(INSERT(v_BaseTypeName,1,v_Index,' ')));
            SET v_Index = LOCATE(',',v_BaseTypeName);
            IF(v_Index != 0) then

               SET v_WhereBaseTypeName = CONCAT(v_WhereBaseTypeName,' ) OR ( ');
            ELSE
               SET v_WhereBaseTypeName = CONCAT(v_WhereBaseTypeName,' )) ');
            end if;
         END WHILE;
      end if;
      SET v_BaseTypeJoinString = 'SQLWAYS_EVAL# sb ON sb.BaseTypeId = es.BaseTypeId  ';
   end if;		

-- 基类业务
   SET v_WhereBaseTypeEntryId = ' ';
   IF IFNULL(v_BaseTypeEntryId,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_BaseTypeEntryId);
      IF v_Index = 0 then

         SET v_WhereBaseTypeEntryId = CONCAT('SQLWAYS_EVAL#  > ',CAST(cast(v_BaseTypeEntryId as SIGNED INTEGER)*1000 AS CHAR(10)),
         'SQLWAYS_EVAL# < ',CAST(cast(v_BaseTypeEntryId as SIGNED INTEGER)*1000+1000 AS CHAR(10)));
      ELSE
         SET v_WhereBaseTypeEntryId = CONCAT('SQLWAYS_EVAL# / 1000) IN (',v_BaseTypeEntryId,')');
      end if;
      SET v_BaseTypeJoinString = 'SQLWAYS_EVAL# sb ON sb.BaseTypeId = es.BaseTypeId  ';
   end if;

-- 标准化ID
   IF v_StandardVer = 2 then
-- 电信使用电信集团标准化

      SET v_WhereStandardTypeEntryId = ' ';
      IF IFNULL(v_StandardTypeEntryId,'-1') <> '-1' then

         SET v_Index = LOCATE(',',v_StandardTypeEntryId);
         IF v_Index = 0 then
            SET v_WhereStandardTypeEntryId = CONCAT('SQLWAYS_EVAL# %100000000)/1000) = ',v_StandardTypeEntryId);
         ELSE
            SET v_WhereStandardTypeEntryId = CONCAT('SQLWAYS_EVAL# %100000000)/1000) IN (',v_StandardTypeEntryId,')');
         end if;
         SET v_StandardTypeEntryJoinString = CONCAT('SQLWAYS_EVAL# sbm ON sbm.StationBaseType = su.StationBaseType AND sbm.BaseTypeId = floor(es.BaseTypeId / 1000) * 1000 + 1
INNER JOIN TBL_StandardDicSig sds ON sds.StandardDicId = sbm.StandardDicId AND sds.StandardType = ',CAST(v_StandardVer AS CHAR(10)));
      end if;
   end if;

-- 模块条件
   SET v_WhereModule = 'SQLWAYS_EVAL# = 0
OR ett.InstalledModule = ''0'' 
OR ett.InstalledModule = ''''  
OR CHARINDEX('','' + CONVERT(NVARCHAR, es.ModuleNo) + '','', '','' + ett.InstalledModule + '','') > 0 
)  ';		

-- 满足条件信号
   CREATE TEMPORARY TABLE tt_SignalTotal
   (
      StationId INT,
      EquipmentId INT,
      SignalId INT
   );

-- 查询结果条数
   SET v_RowCount = cast(v_ReturnCount as SIGNED INTEGER);
   SET SQL_SELECT_LIMIT = v_RowCount;  

-- 满足条件信号
   SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL# EquipmentId, SignalId)
SELECT su.StationId,e.EquipmentId,es.SignalId
FROM #TempEquipment e
INNER JOIN #TempStation su ON e.StationId = su.StationId
INNER JOIN TBL_Equipment ett ON e.StationId = ett.StationId AND e.EquipmentId = ett.EquipmentId
INNER JOIN TBL_Signal es ON e.EquipmentTemplateId = es.EquipmentTemplateId AND es.Enable = 1  AND es.Visible = 1 ',v_PropertyJoinString,v_BaseTypeJoinString,
   v_StandardTypeEntryJoinString,' WHERE 1=1 ',v_WhereModule,v_WhereSignalId1,
   v_WhereSignalId2,v_WhereSignalId3,v_WhereSignalCategory,v_WhereSignalName,
   v_WhereSignalProperty,v_WhereBaseTypeId1,v_WhereBaseTypeId2,
   v_WhereBaseTypeId3,v_WhereBaseTypeName,v_WhereBaseTypeEntryId,v_WhereStandardTypeEntryId);
   SET @SWV_Stmt = SWV_ExecDyn;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;

   SELECT COUNT(*) FROM tt_SignalTotal;
   SELECT COUNT(*) FROM tt_TempStation;
   SELECT COUNT(*) FROM tt_TempEquipment;

   SET SQL_SELECT_LIMIT = DEFAULT;

   DROP TEMPORARY TABLE IF EXISTS tt_SignalTotal;
   DROP TEMPORARY TABLE IF EXISTS tt_TempEquipment;
   DROP TEMPORARY TABLE IF EXISTS tt_TempStation;

   SET SWP_Ret_Value = 0;
END;




-- SELECT N'SQLWAYS_EVAL# L_CreateTogetherAlarm]...';

DROP PROCEDURE IF EXISTS PBL_CreateTogetherAlarm;
CREATE PROCEDURE PBL_CreateTogetherAlarm(v_StationCategory		VARCHAR(8000),
v_StandardId				INT,
v_DerivateStandardId		INT,
v_Span					INT,
v_Threashold				INT,
v_StartSpan				INT ,
v_HoldTime				INT ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_StartTime DATETIME;
   DECLARE v_EndTime DATETIME;
   DECLARE v_CurTime DATETIME;
   DECLARE v_MAXOffTime DATETIME;
   DECLARE v_MAXUnEndTime DATETIME;
   DECLARE v_MinIndex INT;
   DECLARE v_MaxIndex INT;
   DECLARE v_EventCount INT;
   DECLARE v_Step INT;
   DECLARE v_PoweroffConfig INT;
   DECLARE v_CaseStationId INT;
   DECLARE v_CaseEquipmentId INT;
   DECLARE v_CaseEventId INT;
   DECLARE v_CaseEventConditionId INT;
-- 0    正常	
-- -1   输入参数错误
-- SQLWAYS_EVAL# 警配置


-- 如果输入参数错误,返回-1
   IF v_StartSpan is null then
      set v_StartSpan = 600;
   END IF;
   IF v_HoldTime is null then
      set v_HoldTime = 0;
   END IF;
   IF(v_StandardId <= 0 OR v_DerivateStandardId <= 0
   OR v_Span < 0 OR v_Threashold < 0 OR v_HoldTime < 0) then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

-- 获取局站
   CREATE TEMPORARY TABLE tt_StationGroup
   (
      CenterId INT,
      CenterName NATIONAL VARCHAR(128),
      GroupId INT,
      GroupName NATIONAL VARCHAR(128),
      StationId INT,
      StationName NATIONAL VARCHAR(128),
      StationState INT,
      StationCategory INT,
      StationGrade INT
   );
   CALL PAM_FilterStation('-1','-1','-1',v_StationCategory,'-1','-1','-1','-1','#StationGroup');

-- 标准化告警配置
   CREATE TEMPORARY TABLE tt_StandardTogetherEvent
   (
      StationId INT,
      EquipmentId INT,
      EventId INT,
      EventConditionId INT,
      EventSeverity INT,
      EventName NATIONAL VARCHAR(255),
      Meanings NATIONAL VARCHAR(255)
   );
/*SQLWAYS_EVAL#  tt.StationId, et.EquipmentId,C.EventId,F.EventConditionId,F.EventSeverity,C.EventName ,F.Meanings
FROM TBL_EquipmentTemplate A   
INNER JOIN TBL_Equipment et ON A.EquipmentTemplateId = et.EquipmentTemplateId
INNER JOIN #StationGroup tt ON tt.StationId = et.StationId
INNER JOIN TBL_Signal B ON A.EquipmentTemplateId =B.EquipmentTemplateId 
INNER JOIN TBL_Event C ON A.EquipmentTemplateId =C.EquipmentTemplateId AND B.SignalId =C.SignalId 
INNER JOIN TBL_StandardTemplateMap N ON A.EquipmentTemplateId=N.EquipmentTemplateId AND N.StationCategory=1
INNER JOIN TBL_StandardTemplate  I ON N.StandardTemplateId = I.StandardTemplateId AND N.StationCategory =I.StationCategory
INNER JOIN TBL_EventCondition F ON A.EquipmentTemplateId =F.EquipmentTemplateId AND C.EventId = F.EventId
INNER JOIN TBL_StandardRule E ON E.StandardTemplateId =I.StandardTemplateId  AND E.SignalName=B.SignalName AND E.Meanings =F.Meanings 
INNER JOIN TBL_StandardDic G ON E.StandardDicId=G.StandardDicId 
WHERE E.StandardDicId = @StandardId
*/
   INSERT INTO tt_StandardTogetherEvent(StationId,EquipmentId,EventId,EventConditionId,EventSeverity,EventName,Meanings)
   SELECT  tt.StationId, et.EquipmentId,C.EventId,E.EventConditionId,E.EventSeverity,C.EventName ,E.Meanings
   FROM TBL_EquipmentTemplate A
   INNER JOIN TBL_Equipment et ON A.EquipmentTemplateId = et.EquipmentTemplateId
   INNER JOIN tt_StationGroup tt ON tt.StationId = et.StationId
   INNER JOIN TBL_Signal B ON A.EquipmentTemplateId = B.EquipmentTemplateId
   INNER JOIN TBL_Event C ON A.EquipmentTemplateId = C.EquipmentTemplateId AND B.SignalId = C.SignalId
   INNER JOIN TBL_EventCondition E ON A.EquipmentTemplateId = E.EquipmentTemplateId AND C.EventId = E.EventId
   INNER JOIN TBL_StationBaseMap F ON F.StationCategory = tt.StationCategory
   INNER JOIN TBL_EventBaseMap G ON G.StationBaseType = F.StationBaseType AND G.BaseTypeId = E.BaseTypeId
   WHERE G.StandardDicId = v_StandardId; 

-- 衍生标准化告警配置
   CREATE TEMPORARY TABLE tt_TogetherEvent
   (
      StationId INT,
      EquipmentId INT,
      EventId INT,
      EventConditionId INT,
      EventSeverity INT,
      EventName NATIONAL VARCHAR(255),
      Meanings NATIONAL VARCHAR(255)
   );
/*
SQLWAYS_EVAL#  tt.StationId, et.EquipmentId,C.EventId,F.EventConditionId,F.EventSeverity,C.EventName ,F.Meanings
FROM TBL_EquipmentTemplate A   
INNER JOIN TBL_Equipment et ON A.EquipmentTemplateId = et.EquipmentTemplateId
INNER JOIN #StationGroup tt ON tt.StationId = et.StationId
INNER JOIN TBL_Signal B ON A.EquipmentTemplateId =B.EquipmentTemplateId 
INNER JOIN TBL_Event C ON A.EquipmentTemplateId =C.EquipmentTemplateId AND B.SignalId =C.SignalId 
INNER JOIN TBL_StandardTemplateMap N ON A.EquipmentTemplateId=N.EquipmentTemplateId AND N.StationCategory=1
INNER JOIN TBL_StandardTemplate  I ON N.StandardTemplateId = I.StandardTemplateId AND N.StationCategory =I.StationCategory
INNER JOIN TBL_EventCondition F ON A.EquipmentTemplateId =F.EquipmentTemplateId AND C.EventId = F.EventId
INNER JOIN TBL_StandardRule E ON E.StandardTemplateId =I.StandardTemplateId  AND E.SignalName=B.SignalName AND E.Meanings =F.Meanings 
INNER JOIN TBL_StandardDic G ON E.StandardDicId=G.StandardDicId 
WHERE E.StandardDicId = @DerivateStandardId 
*/

   INSERT INTO tt_TogetherEvent(StationId,EquipmentId,EventId,EventConditionId,EventSeverity,EventName,Meanings)
   SELECT  tt.StationId, et.EquipmentId,C.EventId,E.EventConditionId,E.EventSeverity,C.EventName ,E.Meanings
   FROM TBL_EquipmentTemplate A
   INNER JOIN TBL_Equipment et ON A.EquipmentTemplateId = et.EquipmentTemplateId
   INNER JOIN tt_StationGroup tt ON tt.StationId = et.StationId
   INNER JOIN TBL_Signal B ON A.EquipmentTemplateId = B.EquipmentTemplateId
   INNER JOIN TBL_Event C ON A.EquipmentTemplateId = C.EquipmentTemplateId AND B.SignalId = C.SignalId
   INNER JOIN TBL_EventCondition E ON A.EquipmentTemplateId = E.EquipmentTemplateId AND C.EventId = E.EventId
   INNER JOIN TBL_StationBaseMap F ON F.StationCategory = tt.StationCategory
   INNER JOIN TBL_EventBaseMap G ON G.StationBaseType = F.StationBaseType AND G.BaseTypeId = E.BaseTypeId
   WHERE G.StandardDicId = v_DerivateStandardId; 

   select   COUNT(*) INTO v_PoweroffConfig FROM tt_TogetherEvent;
   IF(v_PoweroffConfig IS NULL OR v_PoweroffConfig <= 0) then

-- SQLWAYS_EVAL# 回-2
      DROP TEMPORARY TABLE IF EXISTS tt_StationGroup;
-- SQLWAYS_EVAL# Deleted by Yujian in 2011-9-29
      SET SWP_Ret_Value = -2;
      LEAVE SWL_return;
   end if;

-- 所有未结束衍生标准化告警
   CREATE TEMPORARY TABLE tt_TableActiveEvent
   (
      StationId INT,
      EquipmentId INT,
      EventId INT,
      EventConditionId INT,
      StartTime DATETIME,
      EndTime DATETIME	
   );
   INSERT INTO tt_TableActiveEvent(StationId, EquipmentId, EventId, EventConditionId, StartTime, EndTime)
   SELECT ae.StationId, ae.EquipmentId, ae.EventId, ae.EventConditionId, ae.StartTime,ae.EndTime
   FROM TBL_ActiveEvent ae
   INNER JOIN tt_TogetherEvent te ON ae.StationId = te.StationId AND ae.EquipmentId = te.EquipmentId
   AND ae.EventId = te.EventId AND ae.EventConditionId = te.EventConditionId
   WHERE ae.StartTime IS NOT NULL AND ae.EndTime IS NULL;
-- 当前时间, 需要减去延时阀值
   SET v_CurTime = TIMESTAMPADD(second,0 -v_HoldTime,CURRENT_TIMESTAMP);

-- 确定开始时间
-- SQLWAYS_EVAL# 一条的开始时间
-- SQLWAYS_EVAL# 始阀值，则将其作为开始时间
   select   Max(StartTime) INTO v_StartTime FROM TBL_SARAlarmRecordStartTime WHERE RelationType = 3;	
   IF v_StartTime IS NULL OR v_StartTime < TIMESTAMPADD(second,0 -v_StartSpan,v_CurTime) OR v_StartTime > v_CurTime then

      SET v_StartTime = TIMESTAMPADD(second,0 -v_StartSpan,v_CurTime);
   end if;

-- SQLWAYS_EVAL# 隔小于判断告警的间隔，不需要处理
   IF TIMESTAMPDIFF(second,v_StartTime,v_CurTime) < v_Span then

      DROP TEMPORARY TABLE IF EXISTS tt_StationGroup;
      DROP TEMPORARY TABLE IF EXISTS tt_TogetherEvent;
      DROP TEMPORARY TABLE IF EXISTS tt_TableActiveEvent;
      SET SWP_Ret_Value = 0;
      LEAVE SWL_return;
   end if;

-- SQLWAYS_EVAL# 结束标准告警
   Create TEMPORARY TABLE  tt_PoweroffActiveEvent
   (
      Idx INT NOT NULL  AUTO_INCREMENT PRIMARY KEY,	-- 自增长字段
      UniqueId NATIONAL VARCHAR(128), 		-- 告警唯一标识	
      StationId INT,				-- 基站编号
      EquipmentId INT,				-- 设备编号
      EventId INT,		 		-- 事件编号
      EventConditionId INT,				-- 事件条件编号
      AlarmGrade INT,				-- 告警等级
      AlarmType INT, 				-- 告警类型
      StartTime DATETIME,			-- 告警开始时间
      ConfirmTime DATETIME,		-- 告警确认时间
      EndTime DATETIME,		-- 告警结束时间
      TriggerValue NUMERIC(13,2),		-- 告警触发值
      Meanings VARCHAR(50)	-- 告警说明
   );
   CREATE index IDX_PoweroffAE_Idx ON tt_PoweroffActiveEvent
   (Idx);

   INSERT INTO tt_PoweroffActiveEvent(UniqueId, StationId,
EquipmentId, Meanings, AlarmGrade,
StartTime, ConfirmTime, EventId,EventConditionId,
TriggerValue, EndTime, AlarmType)
   SELECT DISTINCT ae.SequenceId AS UniqueId, ae.StationId,
ae.EquipmentId, ae.Meanings, ae.EventSeverityId AS AlarmGrade,
ae.StartTime, ae.ConfirmTime, ae.EventId, ae.EventConditionId,
ae.EventValue AS TriggerValue, ae.EndTime, ae.EventCategoryId AS AlarmType
   FROM TBL_ActiveEvent ae
   INNER JOIN tt_StandardTogetherEvent st ON ae.StationId = st.StationId AND ae.EquipmentId = st.EquipmentId
   AND ae.EventId = st.EventId AND ae.EventConditionId = st.EventConditionId
   WHERE ae.StartTime >= v_StartTime AND ae.StartTime < v_CurTime AND ae.EndTime IS NULL;
-- SQLWAYS_EVAL# 告警
   select   min(StartTime) INTO v_StartTime FROM tt_PoweroffActiveEvent; 
   IF v_StartTime IS NULL then

      DROP TEMPORARY TABLE IF EXISTS tt_TogetherEvent;
      DROP TEMPORARY TABLE IF EXISTS tt_StationGroup;
      DROP TEMPORARY TABLE IF EXISTS tt_PoweroffActiveEvent;
      DROP TEMPORARY TABLE IF EXISTS tt_TableActiveEvent;
      SET SWP_Ret_Value = 0;
      LEAVE SWL_return;
   end if;

-- 保存衍生标准化告警
   Create TEMPORARY Table  tt_TogetherActiveEvent
   (
      StationId INT,
      EquipmentId INT,
      EventId INT,
      EventConditionId INT,
      EventSeverity INT,
      StartTime DATETIME,
      EndTime DATETIME,
      Meanings VARCHAR(50),
      EventValue INT
   );
-- 得到判断告警间隔的截止时间
   SET v_EndTime = TIMESTAMPADD(second,v_Span,v_StartTime);

   WHILE v_EndTime <  v_CurTime AND v_StartTime IS NOT NULL DO
-- SQLWAYS_EVAL# 告警数量
      select   COUNT(*) INTO v_EventCount FROM tt_PoweroffActiveEvent WHERE StartTime >= v_StartTime AND StartTime < v_EndTime;
-- SQLWAYS_EVAL# 生一条衍生标准化告警
      IF v_EventCount >= v_Threashold then

-- 寻找可用EventId
         select   StationId, EquipmentId, EventId, EventConditionId INTO v_CaseStationId,v_CaseEquipmentId,v_CaseEventId,v_CaseEventConditionId FROM tt_TogetherEvent te WHERE te.EventId NOT IN(SELECT DISTINCT EventId FROM tt_TableActiveEvent);

-- SQLWAYS_EVAL# d，取第一个事件的EventId，系统会自动结束第一条事件
         IF v_CaseEventId IS NULL then

            select   StationId, EquipmentId, EventId, EventConditionId INTO v_CaseStationId,v_CaseEquipmentId,v_CaseEventId,v_CaseEventConditionId FROM tt_TogetherEvent    ORDER BY EventId LIMIT 1;
         end if;

-- 记录衍生标准化告警
         INSERT INTO tt_TogetherActiveEvent(StationId,EquipmentId,EventId,EventConditionId,EventSeverity,StartTime,Meanings,EventValue)
         SELECT StationId,EquipmentId,EventId,EventConditionId,EventSeverity,v_EndTime AS StartTime,
CONCAT(Meanings,',',CAST(v_Span AS CHAR(30)),'秒超过',',',CAST(v_Threashold AS CHAR(30)),
         '条'),
v_EventCount
         FROM tt_TogetherEvent
         WHERE StationId = v_CaseStationId AND EquipmentId = v_CaseEquipmentId
         AND EventId = v_CaseEventId AND EventConditionId = v_CaseEventConditionId;

-- SQLWAYS_EVAL# 于本次循环中再次产生衍生标准化停电时寻找EventId
         INSERT INTO tt_TableActiveEvent(StationId,EquipmentId,EventId,EventConditionId,StartTime,EndTime)
         SELECT StationId,EquipmentId,EventId,EventConditionId,v_EndTime AS StartTime,null
         FROM tt_TogetherEvent
         WHERE StationId = v_CaseStationId AND EquipmentId = v_CaseEquipmentId
         AND EventId = v_CaseEventId AND EventConditionId = v_CaseEventConditionId;

-- SQLWAYS_EVAL# 准化告警
         INSERT INTO TBL_SARAlarmRelation(StationId,EquipmentId,EventId,EventConditionId,StartTime,StandardId,
CauseStationId,CauseEquipmentId,CauseEventId,CauseEventConditionId,CauseStartTime,CauseStandardId,RelationType)
         SELECT v_CaseStationId AS StationId,v_CaseEquipmentId AS EquipmentId,v_CaseEventId AS EventId,
v_CaseEventConditionId AS EventConditionId,v_EndTime AS StartTime,v_DerivateStandardId AS StandardId,
pe.StationId AS CauseStationId,pe.EquipmentId AS CauseEquipmentId,
pe.EventId AS CauseEventId,pe.EventConditionId AS CauseEventConditionId,
pe.StartTime AS CauseStartTime,v_StandardId AS CauseStandardId,3
         FROM tt_PoweroffActiveEvent pe
         WHERE pe.StartTime >= v_StartTime AND pe.StartTime < v_EndTime
         AND NOT EXISTS(SELECT 'X'
            FROM    TBL_SARAlarmRelation  sv
            WHERE   v_CaseStationId			= sv.StationId
            AND     v_CaseEquipmentId		= sv.EquipmentId			AND     v_CaseEventId	= sv.EventId
            AND     v_CaseEventConditionId   = sv.EventConditionId		AND     v_EndTime		= sv.StartTime
            AND		v_DerivateStandardId     = sv.StandardId				AND		pe.StationId	= sv.CauseStationId
            AND		pe.EquipmentId          = sv.CauseEquipmentId		AND		pe.EventId      = sv.CauseEventId
            AND		pe.EventConditionId     = sv.CauseEventConditionId  AND		pe.StartTime    = sv.CauseStartTime
            AND		v_StandardId				= sv.CauseStandardId		AND		3				= sv.RelationType);

-- SQLWAYS_EVAL# 一条告警
         select   min(StartTime) INTO v_StartTime FROM tt_PoweroffActiveEvent WHERE StartTime >= v_EndTime;
         IF v_StartTime IS NOT NULL then

            SET v_EndTime = TIMESTAMPADD(second,v_Span,v_StartTime);
         end if;
      ELSE
-- 开始时间改为下一条告警
         select   min(StartTime) INTO v_StartTime FROM tt_PoweroffActiveEvent WHERE StartTime > v_StartTime;
         IF v_StartTime IS NOT NULL then

            SET v_EndTime = TIMESTAMPADD(second,v_Span,v_StartTime);
         end if;
      end if;
   END WHILE;

-- SQLWAYS_EVAL# RecordStartTime表中保留一条记录，用于记录开始时间
   IF EXISTS(SELECT 1 FROM tt_TogetherActiveEvent) then

--      IF EXISTS(SELECT 1 FROM TBL_SARAlarmRecordStartTime) then

         DELETE FROM TBL_SARAlarmRecordStartTime WHERE RelationType = 3;
--      end if;
      INSERT INTO TBL_SARAlarmRecordStartTime(StartTime,RelationType)
      SELECT max(StartTime), 3 FROM tt_TogetherActiveEvent;
  end if;


-- SQLWAYS_EVAL# has expanded all '*' elements in the following statement
   SELECT tt_TogetherActiveEvent.StationId, tt_TogetherActiveEvent.EquipmentId, tt_TogetherActiveEvent.EventId, tt_TogetherActiveEvent.EventConditionId, tt_TogetherActiveEvent.EventSeverity, tt_TogetherActiveEvent.StartTime, tt_TogetherActiveEvent.EndTime, tt_TogetherActiveEvent.Meanings, tt_TogetherActiveEvent.EventValue
   FROM tt_TogetherActiveEvent
   ORDER BY StartTime;

-- 清除临时表
   DROP TEMPORARY TABLE IF EXISTS tt_StandardTogetherEvent;
   DROP TEMPORARY TABLE IF EXISTS tt_TogetherEvent;
   DROP TEMPORARY TABLE IF EXISTS tt_StationGroup;
   DROP TEMPORARY TABLE IF EXISTS tt_PoweroffActiveEvent;
   DROP TEMPORARY TABLE IF EXISTS tt_TogetherActiveEvent;
   DROP TEMPORARY TABLE IF EXISTS tt_TableActiveEvent;

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_Del_HistoryBattery]...';





DROP PROCEDURE IF EXISTS PBL_Del_HistoryBattery;

CREATE PROCEDURE PBL_Del_HistoryBattery(v_StartTime          DATETIME    ,
v_EndTime            DATETIME    ,
v_StationId          INT    ,
v_EquipmentId        INT    ,
v_SignalId           INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL#      PBL_Del_HistoryBattery
Parameters:         @StartTime      datetime    -- 开始时间      必须输入
@EndTime        datetime    -- 结束时间      必须输入
@StationId      int         -- 局站ID        必须输入
@EquipmentId    int         -- 设备ID
@EquipmentState int         -- 设备状态ID
@SignalId       int         -- 信号ID

Comments:           删除历史电池信号数据
Return:             0           成功
-1          开始时间不能大于结束时间
-2          1..12月份执行语法出错代码
*/
-- 声明变量
   DECLARE v_Index INT;       -- 循环变量
   DECLARE v_SQL NATIONAL VARCHAR(255);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;


-- 验证时间正确性
   SET @SWV_Error = 0;
   IF v_StartTime > v_EndTime then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

-- 初始化变量
   SET v_Index = 1;

-- 循环删除数据
   WHILE (v_Index <= 12) DO
      SET v_SQL = CONCAT('SQLWAYS_EVAL# L_HistoryBattery',CAST(v_Index AS CHAR(2)),'SQLWAYS_EVAL# >= ''',
      DATE_FORMAT(v_StartTime,'SQLWAYS_EVAL# :%s:%f%p'),'''',
      'SQLWAYS_EVAL# < ''',DATE_FORMAT(v_EndTime,'SQLWAYS_EVAL# :%s:%f%p'),
      '''');
      IF v_StationId IS NOT NULL then
         SET v_SQL = CONCAT(v_SQL,'SQLWAYS_EVAL# = ',CAST(v_StationId AS CHAR(20)));
      end if;
      IF v_EquipmentId IS NOT NULL then
         SET v_SQL = CONCAT(v_SQL,'SQLWAYS_EVAL# = ',CAST(v_EquipmentId AS CHAR(20)));
      end if;
      IF v_SignalId IS NOT NULL then
         SET v_SQL = CONCAT(v_SQL,'SQLWAYS_EVAL# ',CAST(v_SignalId AS CHAR(20)));
      end if;
      SET @SWV_Stmt = v_SQL;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
      IF @SWV_Error <> 0 then
         SET SWP_Ret_Value = v_Index;
         LEAVE SWL_return;
      end if;
      SET v_Index = v_Index+1;
   END WHILE;

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_Del_HistoryControl]...';





DROP PROCEDURE IF EXISTS PBL_Del_HistoryControl;

CREATE PROCEDURE PBL_Del_HistoryControl(v_StartTime DATETIME,
v_EndTime DATETIME,
v_StationId INT,
v_EquipmentId INT,
v_CommandId INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL#       @StartTime          datetime    -- 开始时间      必须输入
@EndTime            datetime    -- 结束时间      必须输入
@StationId          int         -- 局站ID
@EquipmentId        int         -- 设备ID
@CommandId          int         -- 控制命令ID

Comments:           按月份删除历史事件数据
Return:             0       成功代码
-1      开始时间不能大于结束时间
1       出错代码
*/
-- 检验删除时间
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   IF  v_StartTime > v_EndTime then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

   SET @SWV_Error = 0;
   DELETE
   FROM TBL_HistoryControl
   WHERE StartTime >= v_StartTime
   AND   StartTime <  v_EndTime
   AND   StationId      = IFNULL(v_StationId,StationId)
   AND   EquipmentId    = IFNULL(v_EquipmentId,EquipmentId)
   AND   ControlId      = IFNULL(v_CommandId,ControlId);

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -2;
      LEAVE SWL_return;
   end if;

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_Del_HistoryEvent]...';





DROP PROCEDURE IF EXISTS PBL_Del_HistoryEvent;

CREATE PROCEDURE PBL_Del_HistoryEvent(v_StartTime          DATETIME    ,
v_EndTime            DATETIME    ,
v_StationId          INT    ,
v_EquipmentId        INT    ,
v_EventId            INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL#       @StartTime          datetime    -- 开始时间      必须输入
@EndTime            datetime    -- 结束时间      必须输入
@StationId          int         -- 局站ID
@EquipmentId        int         -- 设备ID
@EventId            int         -- 事件ID

Comments:           删除历史事件数据
Return:             0       成功代码
-1      开始时间不能大于结束时间
-2      删除出错代码
*/
-- 检验删除时间
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   IF v_StartTime > v_EndTime then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

   SET @SWV_Error = 0;
   DELETE
   FROM TBL_HistoryEvent
   WHERE StartTime >= v_StartTime
   AND StartTime < v_EndTime
   AND StationId = IFNULL(v_StationId,StationId)
   AND EquipmentId = IFNULL(v_EquipmentId,EquipmentId)
   AND EventId = IFNULL(v_EventId,EventId);

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -2;
      LEAVE SWL_return;
   end if;

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_Del_HistorySignal]...';





DROP PROCEDURE IF EXISTS PBL_Del_HistorySignal;

CREATE PROCEDURE PBL_Del_HistorySignal(v_StartTime DATETIME,
v_EndTime DATETIME,
v_StationId INT,
v_EquipmentId INT,
v_SignalId INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL#      PBL_Del_HistorySignal
Parameters:         @StartTime          datetime        -- 开始时间      必须输入
@EndTime            datetime        -- 结束时间      必须输入
@StationId          int             -- 局站ID
@EquipmentId        int             -- 设备ID
@SignalId           int             -- 信号ID

Comments:           删除历史信号数据
Return:             0       成功
-1      开始日期不能大于结束日期
-2      1..12月份执行语法出错代码
*/

-- 声明变量
   DECLARE v_Index INT;       -- 循环变量
   DECLARE v_SQL NATIONAL VARCHAR(255);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 验证时间正确性
   SET @SWV_Error = 0;
   IF v_StartTime > v_EndTime then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

-- 初始化变量
   SET v_Index = 1;

-- 循环删除数据
   WHILE(v_Index <= 12) DO
      SET v_SQL = CONCAT('SQLWAYS_EVAL# L_HistorySignal',CAST(v_Index AS CHAR(2)),'SQLWAYS_EVAL# >= ''',
      DATE_FORMAT(v_StartTime,'SQLWAYS_EVAL# :%s:%f%p'),'''',
      'SQLWAYS_EVAL# < ''',DATE_FORMAT(v_EndTime,'SQLWAYS_EVAL# :%s:%f%p'),
      '''');
      IF v_StationId IS NOT NULL then
         SET v_SQL = CONCAT(v_SQL,'SQLWAYS_EVAL# = ',CAST(v_StationId AS CHAR(20)));
      end if;
      IF v_EquipmentId IS NOT NULL then
         SET v_SQL = CONCAT(v_SQL,'SQLWAYS_EVAL# = ',CAST(v_EquipmentId AS CHAR(20)));
      end if;
      IF v_SignalId IS NOT NULL then
         SET v_SQL = CONCAT(v_SQL,'SQLWAYS_EVAL# ',CAST(v_SignalId AS CHAR(20)));
      end if;
      SET @SWV_Stmt = v_SQL;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
      IF @SWV_Error <> 0 then
         SET SWP_Ret_Value = v_Index;
         LEAVE SWL_return;
      end if;
      SET v_Index = v_Index+1;
   END WHILE;

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_Del_OperationRecord]...';





DROP PROCEDURE IF EXISTS PBL_Del_OperationRecord;

CREATE PROCEDURE PBL_Del_OperationRecord(v_StartTime          DATETIME    ,
v_EndTime            DATETIME    ,
v_UserId             INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL#       @StartTime      datetime    -- 开始时间      必须输入
@EndTime        datetime    -- 结束时间      必须输入
@UserId         int         -- 操作员ID

Comments:           删除操作记录数据
Return:             0           成功
-1          开始时间不能大于结束时间
-2          执行语法出错代码
*/
-- 检验时间正确性
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   IF v_StartTime > v_EndTime then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

   SET @SWV_Error = 0;
   DELETE
   FROM TBL_OperationRecord
   WHERE OperationTime >= v_StartTime
   AND OperationTime < v_EndTime
   AND UserId = IFNULL(v_UserId,UserId);	

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -2;
      LEAVE SWL_return;
   end if;

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_Del_SignalStatistics]...';





DROP PROCEDURE IF EXISTS PBL_Del_SignalStatistics;

CREATE PROCEDURE PBL_Del_SignalStatistics(v_StartTime DATETIME,
v_EndTime DATETIME,
v_StationId INT,
v_EquipmentId INT,
v_SignalId INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL#      正确
-1     开始日期大于结束日期
-2     有删除异常
*/
-- 声明局部变量
   DECLARE v_IndexTime DATETIME; -- 循环时间
   DECLARE v_Index INT;  -- 循环变量
   DECLARE v_Month INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END; -- 统计月份


-- 检验时间正确性
   SET @SWV_Error = 0;
   IF v_StartTime > v_EndTime then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

   SET @SWV_Error = 0;
   DELETE
   FROM TBL_SignalStatistics
   WHERE StatisticsTime >= v_StartTime
   AND StatisticsTime < v_EndTime
   AND StationId = IFNULL(v_StationId,StationId)
   AND EquipmentId = IFNULL(v_EquipmentId,EquipmentId)
   AND SignalId = IFNULL(v_SignalId,SignalId);

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -2;
      LEAVE SWL_return;
   end if;
-- 成功删除
   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_Del_SwapCardRecord]...';





DROP PROCEDURE IF EXISTS PBL_Del_SwapCardRecord;

CREATE PROCEDURE PBL_Del_SwapCardRecord(v_StartTime          DATETIME,
v_EndTime            DATETIME,
v_CardId             VARCHAR(20),
v_DoorNo             INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL#      PBL_Del_SwapCardRecord
Parameters:         @StartTime      datetime    -- 开始时间      必须输入
@EndTime        datetime    -- 结束时间      必须输入
@CardId         int         -- 卡号
@DoorNo         int         -- 门禁号

Comments:           删除历史刷卡数据
Return:             0           成功
-1          开始时间不能大于结束时间
-2          执行语法出错代码
*/
-- 检验时间正确性
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   IF v_StartTime > v_EndTime then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

   SET @SWV_Error = 0;
   DELETE
   FROM  TBL_SwapCardRecord
   WHERE RecordTime >= v_StartTime
   AND RecordTime < v_EndTime;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -2;
      LEAVE SWL_return;
   end if;

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_DeleteAlarmChange]...';



/*SQLWAYS_EVAL# -----------------------------------
Name:PBL_DeleteAlarmChange
Function:
自动清除TBL_AlarmChange中的记录；
至少保留50000条记录；
保留48小时内产生的记录；
-------------------------------------------------*/


DROP PROCEDURE IF EXISTS PBL_DeleteAlarmChange;

CREATE PROCEDURE PBL_DeleteAlarmChange(INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_SerialNo NUMERIC(12,0);	
   DECLARE v_MinSerialNo NUMERIC(12,0);
   DECLARE v_MaxSerialNo NUMERIC(12,0);
   DECLARE v_TimeSpan INT;
   DECLARE v_CurrentTime DATETIME; 
   DECLARE v_ExcuteCount INT;

   select   MAX(SerialNo), MIN(SerialNo) INTO v_MaxSerialNo,v_MinSerialNo FROM TBL_AlarmChange;  -- SQLWAYS_EVAL# 表中当前最新和最早的记录

   IF v_MaxSerialNo IS NULL OR v_MinSerialNo IS NULL then
-- 记录不存在，返回
      SET SWP_Ret_Value = NULL;
      LEAVE SWL_return;
   end if;

   IF v_MaxSerialNo -v_MinSerialNo < 50000 then
-- SQLWAYS_EVAL# ge表少于50000条纪录，直接返回
      SET SWP_Ret_Value =(SELECT MAX(SerialNo)
      FROM TBL_AlarmChange WHERE SerialNo <= v_MinSerialNo+5000);
      LEAVE SWL_return;
   end if;

   IF v_SerialNo IS NULL then
      SET SWP_Ret_Value =(SELECT CURRENT_TIMESTAMP);
      LEAVE SWL_return;
   end if;

   SET v_ExcuteCount = 0;


-- SQLWAYS_EVAL# 000条记录
   WHILE v_MaxSerialNo -v_SerialNo > 50000 AND v_ExcuteCount < 2 DO
-- SQLWAYS_EVAL# 记录的产生时间
      select   TIMESTAMPDIFF(HOUR,InsertTime,v_CurrentTime) INTO v_TimeSpan FROM TBL_AlarmChange WHERE SerialNo =  v_SerialNo;
      IF v_TimeSpan IS NULL then
-- 记录不存在，返回
         SET SWP_Ret_Value = NULL;
         LEAVE SWL_return;
      end if;
      IF v_TimeSpan < 48 then
-- SQLWAYS_EVAL# 循环，不再继续删除
         SET SWP_Ret_Value = NULL;
         LEAVE SWL_return;
      end if;

-- 删除本批记录
      DELETE FROM TBL_AlarmChange
      WHERE SerialNo <= v_SerialNo; 	

-- SQLWAYS_EVAL# 	
      select   MAX(SerialNo) INTO v_SerialNo FROM TBL_AlarmChange WHERE SerialNo <= v_SerialNo+5000;
      IF v_SerialNo IS NULL then
-- 记录不存在，返回
         SET SWP_Ret_Value =(SELECT v_ExcuteCount+1);
         LEAVE SWL_return;
      end if;
   END WHILE; -- SQLWAYS_EVAL# -  @SerialNo > 50000
END;

-- SELECT N'SQLWAYS_EVAL# L_GenerateId]...';





DROP PROCEDURE IF EXISTS PBL_GenerateId;

CREATE PROCEDURE PBL_GenerateId(v_TableName       VARCHAR(30)        ,
v_PostalCode      INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_IdentityValue INT;     
   DECLARE v_TableId INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   /*liangyj
   IF v_PostalCode is null then
      set v_PostalCode = 0;
   END IF;*/
   SET @SWV_Error = 0;
   IF v_TableName    IS NULL then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;


   IF (v_PostalCode  = 0) AND EXISTS(SELECT 'X' FROM TBL_DataItem WHERE EntryId = 62) then
      select   ItemId INTO v_PostalCode FROM TBL_DataItem WHERE EntryId = 62;
   end if;

   SET v_PostalCode = IFNULL(v_PostalCode,0);




   IF NOT EXISTS(SELECT 'X' FROM TBL_PrimaryKeyIdentity WHERE TableName = v_TableName) then

      SET SWP_Ret_Value = -2;
      LEAVE SWL_return;
   end if;

   select   TableId INTO v_TableId FROM  TBL_PrimaryKeyIdentity m WHERE  m.TableName  = v_TableName;


   IF v_TableName = 'TBL_DataItem' then
      SET v_PostalCode = 0;
   end if;

   START TRANSACTION;
   SET @SWV_Error = 0;
   IF NOT EXISTS(SELECT   'X'
   FROM     TBL_PrimaryKeyValue
   WHERE    TableId     =  v_TableId
   AND      PostalCode  =  v_PostalCode) then

  INSERT INTO TBL_PrimaryKeyValue(TableId        ,
PostalCode     ,
MinValue       ,
CurrentValue)
VALUES(v_TableId       ,
v_PostalCode    ,
1              ,
1);
   ELSE
      UPDATE  TBL_PrimaryKeyValue
      SET     CurrentValue    = IFNULL(CurrentValue,0)+1
      WHERE   TableId         = v_TableId
      AND     PostalCode      = v_PostalCode;
   end if;
   IF @SWV_Error <> 0 then

      ROLLBACK;
      SET SWP_Ret_Value = -3;
      LEAVE SWL_return;
   end if;

   SELECT  v_PostalCode*1000000+CurrentValue GlobalIdentity
   FROM    TBL_PrimaryKeyValue
   WHERE   TableId         = v_TableId
   AND     PostalCode      = v_PostalCode;


   COMMIT;

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_GenerateMUSyncPlan]...';





DROP PROCEDURE IF EXISTS PBL_GenerateMUSyncPlan;

CREATE PROCEDURE PBL_GenerateMUSyncPlan(v_StationId INT ,
v_MonitorUnitId INT ,
v_PlanTime DATETIME)
BEGIN

   DECLARE v_SyncType INT; 
   DECLARE v_SyncRule INT; 
   DECLARE v_SyncState INT; 
   DECLARE v_MaxRetryCount INT; 
-- SQLWAYS_EVAL# default 3
   SET v_MaxRetryCount = 3;
   SET v_SyncRule = 1;		-- 自上向下同步
   SET v_SyncState = 0;	-- 任务初始状态

   IF EXISTS(SELECT 'X' FROM TSL_MonitorUnit WHERE MonitorUnitId = v_MonitorUnitId AND IsSync = 1) then

      UPDATE TSL_MonitorUnit SET IsSync = 0 WHERE MonitorUnitId = v_MonitorUnitId;
   end if;

-- SQLWAYS_EVAL# 新任务
   IF NOT EXISTS(SELECT 'X' FROM TBL_MUSyncTask WHERE StationId = v_StationId AND MonitorUnitId = v_MonitorUnitId AND SyncRule = v_SyncRule AND SyncState IN(0,1,5,6)) then

  INSERT INTO TBL_MUSyncTask(StationId,MonitorUnitId,PlanTime,SyncState,SyncRule,MaxRetryCount,RetryCount,Description)
VALUES(v_StationId,v_MonitorUnitId,v_PlanTime,v_SyncState,v_SyncRule,v_MaxRetryCount,0,'');
   ELSE
-- SQLWAYS_EVAL# 置等需及时执行任务时，修改已有任务的执行时间
      UPDATE TBL_MUSyncTask SET PlanTime = v_PlanTime,v_SyncState = 0
      WHERE StationId = v_StationId AND MonitorUnitId = v_MonitorUnitId AND SyncRule = v_SyncRule AND SyncState IN(0,1,5,6) AND PlanTime < v_PlanTime;
   end if;

END;


-- SELECT N'SQLWAYS_EVAL# L_GetActiveSignalStatus]...';


DROP PROCEDURE IF EXISTS PBL_GetActiveSignalStatus;

CREATE PROCEDURE PBL_GetActiveSignalStatus(v_ReturnCount        NATIONAL VARCHAR(20))
BEGIN
   DECLARE v_RowCount INT;				

-- 查询结果条数
   IF v_ReturnCount is null then
      set v_ReturnCount = '10000';
   END IF;
   SET v_RowCount = cast(v_ReturnCount as SIGNED INTEGER);
   SET SQL_SELECT_LIMIT = v_RowCount; 

   SELECT	ac.StationId,
ac.EquipmentId,
ac.SignalId,
ac.Flag,
et.ConnectState AS EquipmentFlag
   FROM TBL_ActiveSignal  ac
   INNER JOIN TBL_Equipment et ON ac.StationId = et.StationId AND ac.EquipmentId = et.EquipmentId
   ORDER BY ac.LastUpdate DESC; 

   SET SQL_SELECT_LIMIT = DEFAULT;
END;


-- SELECT N'SQLWAYS_EVAL# L_GetConfigCheck]...';


DROP PROCEDURE IF EXISTS PBL_GetConfigCheck;
CREATE PROCEDURE PBL_GetConfigCheck()
BEGIN 

   DECLARE v_MinIndex INT;
   DECLARE v_MaxIndex INT;
   DECLARE v_StationId INT;
   DECLARE v_EquipmentId INT;
   DECLARE v_MonitorUnitId INT;
   DECLARE v_SignalId INT;
   DECLARE v_ObjectId NATIONAL VARCHAR(128);
   DECLARE v_Count INT;
   DECLARE v_CountHasConfigCheck INT;


   CREATE TEMPORARY TABLE tt_ConfigCheck
   (
      Idx INT   AUTO_INCREMENT PRIMARY KEY,
      StationId INT NOT null,
      EquipmentId INT NOT 	NULL,
      SignalId INT NOT 	NULL,
      MonitorUnitId INT NOT null
   );

   INSERT INTO tt_ConfigCheck(StationId, EquipmentId,SignalId,MonitorUnitId)
   SELECT A.StationId,A.EquipmentId,B.SignalId,A.MonitorUnitId  FROM TBL_Equipment A
   INNER JOIN TBL_Signal B ON B.ChannelNo = -2 AND (B.Expression IS NULL OR B.Expression = '')  AND A.EquipmentTemplateId = B.EquipmentTemplateId; 

   CREATE INDEX IDX_ConifgCheck_Idx ON tt_ConfigCheck
   (Idx);

   select   Min(Idx), Max(Idx) INTO v_MinIndex,v_MaxIndex FROM tt_ConfigCheck;
   WHILE(v_MinIndex <= v_MaxIndex) DO
      select   StationId, EquipmentId, SignalId, MonitorUnitId INTO v_StationId,v_EquipmentId,v_SignalId,v_MonitorUnitId FROM tt_ConfigCheck WHERE Idx = v_MinIndex;
      select   COUNT(*) INTO v_Count FROM TSL_MonitorUnitSignal WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId
      AND SignalId = v_SignalId;
      IF(v_Count <= 0) then

         SET v_ObjectId = CONCAT(CAST(v_StationId AS CHAR(30)),'.',CAST(v_EquipmentId AS CHAR(30)),'.',
         CAST(v_SignalId AS CHAR(30)));
         select   count(*) INTO v_CountHasConfigCheck FROM TBL_ConfigCheckTask WHERE ObjectId = v_ObjectId AND BugType = 1;
         IF(v_CountHasConfigCheck <= 0) then

  INSERT INTO TBL_ConfigCheckTask VALUES('信号', v_ObjectId, 1, CURRENT_TIMESTAMP, 1,NULL);

            UPDATE TSL_MonitorUnit SET CanDistribute = 0 WHERE MonitorUnitId = v_MonitorUnitId;
         end if;
      end if;
      SET v_MinIndex = v_MinIndex+1;
   END WHILE; 
   DROP TEMPORARY TABLE IF EXISTS tt_ConfigCheck;

END;


-- SELECT N'SQLWAYS_EVAL# L_GetDoorPassword]...';


DROP PROCEDURE IF EXISTS PBL_GetDoorPassword;

CREATE PROCEDURE PBL_GetDoorPassword(v_StationId           INT,
v_EquipmentId         INT)
BEGIN

-- 处理：
-- 获取门禁密码
   DECLARE v_Password NATIONAL VARCHAR(125);
   select   Password INTO v_Password FROM TBL_Door WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId;
   SELECT v_Password;
END;


-- SELECT N'SQLWAYS_EVAL# L_GetEventExpression]...';


DROP PROCEDURE IF EXISTS PBL_GetEventExpression;
CREATE PROCEDURE PBL_GetEventExpression()
BEGIN 

   DECLARE v_MinIndex INT;
   DECLARE v_MaxIndex INT;
   DECLARE v_EquipmentId INT;
   DECLARE v_Expression NATIONAL VARCHAR(255);
   DECLARE v_Ids NATIONAL VARCHAR(255);
   DECLARE v_ObjectId NATIONAL VARCHAR(128);
   DECLARE v_Count INT;
   DECLARE v_CountHasConfigCheck INT;
   DECLARE v_EquipmentReferId NATIONAL VARCHAR(255);
   DECLARE v_SignalId NATIONAL VARCHAR(255);
   DECLARE SWV_Expression_Str NATIONAL VARCHAR(255);


   DROP TEMPORARY TABLE IF EXISTS tt_EventExpression;
   CREATE TEMPORARY TABLE tt_EventExpression
   (
      Idx INT   AUTO_INCREMENT PRIMARY KEY,
      EquipmentId INT NOT 	NULL,
      Expression NATIONAL VARCHAR(255) NOT 	NULL
   );

   INSERT INTO tt_EventExpression(EquipmentId,Expression)
   SELECT EquipmentId,EventExpression FROM
   TBL_Equipment WHERE EventExpression IS NOT NULL AND EventExpression <> '';

   CREATE INDEX IDX_EventExpression_Idx ON tt_EventExpression
   (Idx);

   select   Min(Idx), Max(Idx) INTO v_MinIndex,v_MaxIndex FROM tt_EventExpression;
   WHILE(v_MinIndex <= v_MaxIndex) DO
      BEGIN
         select   EquipmentId, Expression INTO v_EquipmentId,v_Expression FROM tt_EventExpression WHERE Idx = v_MinIndex;
         SWL_Label7:
         while SWF_Patindex('[%,%]',v_Expression) > 0 DO
            SET v_Ids = SUBSTRING(v_Expression,LOCATE('[',v_Expression)+1,LOCATE(']',v_Expression) -1 -LOCATE('[',v_Expression));
            IF(LENGTH(v_Expression) >(LOCATE(']',v_Expression)+1)) then

               SET SWV_Expression_Str = SUBSTRING(v_Expression,LOCATE(']',v_Expression)+1,LENGTH(v_Expression) -LOCATE(']',v_Expression));
               SET v_Expression = SWV_Expression_Str;
            ELSE
               SET v_Expression = NULL;
            end if;
            SET v_EquipmentReferId = SUBSTRING(v_Ids,1,LOCATE(',',v_Ids) -1);
            SET v_SignalId = SUBSTRING(v_Ids,LOCATE(',',v_Ids)+1,LENGTH(v_Ids) -LOCATE(',',v_Ids));
            select   count(*) INTO v_Count FROM TBL_Equipment A
            INNER JOIN TBL_Signal B ON A.EquipmentId = cast(v_EquipmentReferId as SIGNED INTEGER)
            AND B.SignalId = cast(v_SignalId as SIGNED INTEGER)
            AND A.EquipmentTemplateId = B.EquipmentTemplateId;
            IF(v_Count = 0) then

               LEAVE SWL_Label7;
            end if;
         END WHILE;
         IF(v_Count = 0) then

            SET v_ObjectId = CAST(v_EquipmentId AS CHAR(30));
            select   count(*) INTO v_CountHasConfigCheck FROM TBL_ConfigCheckTask WHERE ObjectId = v_ObjectId AND BugType = 3;
            IF(v_CountHasConfigCheck <= 0) then

  INSERT INTO TBL_ConfigCheckTask VALUES('设备', v_ObjectId, 3, CURRENT_TIMESTAMP,3,NULL);
            end if;
         end if;
         SET v_MinIndex = v_MinIndex+1;
      END;
   END WHILE; 	

END;

-- SELECT N'SQLWAYS_EVAL# L_GetLastHistorySignal]...';


DROP PROCEDURE IF EXISTS PBL_GetLastHistorySignal;

CREATE PROCEDURE PBL_GetLastHistorySignal(
     -- 非-1代表只包含基类
v_StationId     INT,
v_EquipmentId   INT,
v_OnlyBaseType  NATIONAL VARCHAR(20)   ,INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN
-- 获取最新历史信号

-- -1 不可知错误
--  0 成功
--  1 参数为0或空

   DECLARE v_StartTime DATETIME;
   DECLARE v_EndTime DATETIME;
   DECLARE v_TabIndex VARCHAR(2);
   DECLARE v_EquipmentCategory INT;
   DECLARE v_SStarTime VARCHAR(255);
   DECLARE v_FloatValueType INT;
   DECLARE v_WhereBaseType VARCHAR(255);
   DECLARE v_StandardVer INT;
   DECLARE SWV_ExecDyn VARCHAR(5000);

-- 参数检查
   IF v_OnlyBaseType is null then
      set v_OnlyBaseType = '-1';
   END IF;
   IF v_StationId IS NULL OR v_EquipmentId IS NULL then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;				

-- 错误处理
   IF v_StationId = 0 OR v_EquipmentId = 0 then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

-- 浮点类型
   SET v_FloatValueType = 0;
-- 获取当前时间
   SET v_EndTime = CURRENT_TIMESTAMP;
-- 计算搜索开始时间
   SET v_StartTime = TIMESTAMPADD(day,-1,v_EndTime);
-- 获取设备分类
   select   EquipmentCategory INTO v_EquipmentCategory FROM TBL_Equipment WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId;
-- 创建临时表
   DROP TEMPORARY TABLE IF EXISTS tt_EquipmentSignal;
   CREATE TEMPORARY TABLE tt_EquipmentSignal
   (
      StationId INT NOT NULL,
      StationName NATIONAL VARCHAR(255) NOT NULL,
      EquipmentId INT NOT NULL,
      EquipmentName NATIONAL VARCHAR(128) NOT NULL,
      SignalId INT NOT NULL,
      SignalName NATIONAL VARCHAR(128) NOT NULL,
      SignalCategory INT NOT NULL,
      DataType INT,
      FloatValue FLOAT,
      StringValue NATIONAL VARCHAR(128),
      DateTimeValue DATETIME,
      SampleTime DATETIME NOT NULL,
      ShowPrecision NATIONAL VARCHAR(20),
      Unit NATIONAL VARCHAR(64),
      BaseTypeId NUMERIC(10,0),
      BaseTypeName NATIONAL VARCHAR(128),
      EventSeverity INT,
      EventSeverityName NATIONAL VARCHAR(128),
      Meanings NATIONAL VARCHAR(255),
      ThresholdType INT
   );

-- 设置开始时间
   SET v_SStarTime = CONCAT('SQLWAYS_EVAL# >= ''',DATE_FORMAT(v_StartTime,'SQLWAYS_EVAL# :%s:%f%p'),
   'SQLWAYS_EVAL# <= ''',DATE_FORMAT(v_EndTime,'SQLWAYS_EVAL# :%s:%f%p'),
   'SQLWAYS_EVAL# = ',CAST(v_StationId AS CHAR(30)),'SQLWAYS_EVAL# = ',
   CAST(v_EquipmentId AS CHAR(30))); 

-- 设置基类条件
   IF v_OnlyBaseType = '-1' then

      SET v_WhereBaseType = ' ';
   ELSE
      SET v_WhereBaseType = 'SQLWAYS_EVAL# > 0  ';
   end if;

-- SQLWAYS_EVAL# 张表
   IF EXTRACT(month FROM v_StartTime) = EXTRACT(month FROM v_EndTime) then

      SET v_TabIndex = CAST(EXTRACT(month FROM v_StartTime) AS CHAR(30));
      SET SWV_ExecDyn = CONCAT('INSERT INTO tt_EquipmentSignal(StationId, StationName, EquipmentId,
EquipmentName, SignalId, SignalName,
SignalCategory, DataType,
FloatValue, StringValue, DateTimeValue,
SampleTime, ShowPrecision, Unit,
BaseTypeId, BaseTypeName, EventSeverity,
EventSeverityName, ThresholdType, Meanings)
      SELECT
      StationId, StationName, EquipmentId,
EquipmentName, SignalId, SignalName,
SignalCategory, 
      DataType,
FloatValue, StringValue, DateTimeValue,
SampleTime, 
      ShowPrecision, Unit,
BaseTypeId, BaseTypeName, EventSeverity,
EventSeverityName, 
      ThresholdType, Meanings
      FROM TBL_HistorySignal',v_TabIndex,'  ',v_SStarTime,'  ',v_WhereBaseType);
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;

-- 电池需要搜索电池数据
-- SQLWAYS_EVAL# = 24
-- BEGIN 
      SET SWV_ExecDyn = CONCAT('INSERT INTO tt_EquipmentSignal(StationId, StationName, EquipmentId,
EquipmentName, SignalId, SignalName,
SignalCategory, DataType,
FloatValue, StringValue, DateTimeValue,
SampleTime, ShowPrecision, Unit,
BaseTypeId, BaseTypeName, EventSeverity,
EventSeverityName, ThresholdType, Meanings)
      SELECT
      StationId, StationName, EquipmentId,
EquipmentName, SignalId, SignalName,
SignalCategory, 
      0,
FloatValue, NULL, NULL,
SampleTime, ShowPrecision, Unit,
BaseTypeId, 
      BaseTypeName, EventSeverity,
EventSeverityName, ThresholdType, Meanings
      FROM TBL_HistoryBattery',v_TabIndex,'  ',v_SStarTime,'  ',v_WhereBaseType);
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
   ELSE
      SET v_TabIndex = CAST(EXTRACT(month FROM v_StartTime) AS CHAR(30));
      SET SWV_ExecDyn = CONCAT('INSERT INTO tt_EquipmentSignal(StationId, StationName, EquipmentId,
EquipmentName, SignalId, SignalName,
SignalCategory, DataType,
FloatValue, StringValue, DateTimeValue,
SampleTime, ShowPrecision, Unit,
BaseTypeId, BaseTypeName, EventSeverity,
EventSeverityName, ThresholdType, Meanings)
      SELECT
      StationId, StationName, EquipmentId,
EquipmentName, SignalId, SignalName,
SignalCategory, 
      DataType,
FloatValue, StringValue, DateTimeValue,
SampleTime, 
      ShowPrecision, Unit,
BaseTypeId, BaseTypeName, EventSeverity,
EventSeverityName, 
      ThresholdType, Meanings
      FROM TBL_HistorySignal',v_TabIndex,'  ',v_SStarTime,'  ',v_WhereBaseType);
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
      SET v_TabIndex = CAST(EXTRACT(month FROM v_EndTime) AS CHAR(30));
      SET SWV_ExecDyn = CONCAT('INSERT INTO tt_EquipmentSignal(StationId, StationName, EquipmentId,
EquipmentName, SignalId, SignalName,
SignalCategory, DataType,
FloatValue, StringValue, DateTimeValue,
SampleTime, ShowPrecision, Unit,
BaseTypeId, BaseTypeName, EventSeverity,
EventSeverityName, ThresholdType, Meanings)
      SELECT
      StationId, StationName, EquipmentId,
EquipmentName, SignalId, SignalName,
SignalCategory, 
      DataType,
FloatValue, StringValue, DateTimeValue,
SampleTime, 
      ShowPrecision, Unit,
BaseTypeId, BaseTypeName, EventSeverity,
EventSeverityName, 
      ThresholdType, Meanings
      FROM TBL_HistorySignal',v_TabIndex,'  ',v_SStarTime,'  ',v_WhereBaseType);
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
-- 电池需要搜索电池数据
-- SQLWAYS_EVAL# = 24
-- BEGIN
      SET v_TabIndex = CAST(EXTRACT(month FROM v_StartTime) AS CHAR(30));
      SET SWV_ExecDyn = CONCAT('INSERT INTO tt_EquipmentSignal(StationId, StationName, EquipmentId,
EquipmentName, SignalId, SignalName,
SignalCategory, DataType,
FloatValue, StringValue, DateTimeValue,
SampleTime, ShowPrecision, Unit,
BaseTypeId, BaseTypeName, EventSeverity,
EventSeverityName, ThresholdType, Meanings)
      SELECT
      StationId, StationName, EquipmentId,
EquipmentName, SignalId, SignalName,
SignalCategory, 
      0,
FloatValue, NULL, NULL,
SampleTime, ShowPrecision, Unit,
BaseTypeId, 
      BaseTypeName, EventSeverity,
EventSeverityName, ThresholdType, Meanings
      FROM TBL_HistoryBattery',v_TabIndex,'  ',v_SStarTime,'  ',v_WhereBaseType);
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
      SET v_TabIndex = CAST(EXTRACT(month FROM v_EndTime) AS CHAR(30));
-- SQLWAYS_EVAL# StationName, EquipmentId, 这三列字段名遗漏    
      SET SWV_ExecDyn = CONCAT('INSERT INTO tt_EquipmentSignal(StationId, StationName, EquipmentId,
EquipmentName, SignalId, SignalName,
SignalCategory, DataType,
FloatValue, StringValue, DateTimeValue,
SampleTime, ShowPrecision, Unit,
BaseTypeId, BaseTypeName, EventSeverity,
EventSeverityName, ThresholdType, Meanings)
      SELECT
      StationId, StationName, EquipmentId,
EquipmentName, SignalId, SignalName,
SignalCategory, 
      0,
FloatValue, NULL, NULL,
SampleTime, ShowPrecision, Unit,
BaseTypeId, 
      BaseTypeName, EventSeverity,
EventSeverityName, ThresholdType, Meanings
      FROM TBL_HistoryBattery',v_TabIndex,'  ',v_SStarTime,'  ',v_WhereBaseType);
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
   end if;

-- SQLWAYS_EVAL# CMCC；2 CTCC；3 CNCC
   SET v_StandardVer = PAM_GetStandardVer();

-- 分类返回结果
-- SQLWAYS_EVAL# * 
   IF v_OnlyBaseType = '-1' OR v_StandardVer <> 2 then
-- 非电信标准化或者显示所有信号

      SELECT  ts.StationId		 ,
ts.StationName       ,
ts.EquipmentId       ,
ts.EquipmentName     ,
ts.SignalId          ,
ts.SignalName        ,
ts.SignalCategory    ,
ts.DataType          ,
ts.FloatValue        ,
ts.StringValue       ,
ts.DateTimeValue     ,
ts.SampleTime        ,
ts.ShowPrecision     ,
ts.Unit              ,
ts.BaseTypeId        ,
ts.BaseTypeName      ,
CASE
      WHEN v_StandardVer = 2 THEN sds.StandardDicId
      ELSE ts.BaseTypeId
      END AS StandardTypeId,
CASE
      WHEN v_StandardVer = 2 THEN  floor((sds.StandardDicId -floor(sds.StandardDicId/100000000)*100000000)/1000)
      ELSE floor(ts.BaseTypeId/1000)
      END AS StandardTypeEntryId,
CASE
      WHEN v_StandardVer = 2 THEN replace(sds.SignalStandardName,'XX',CAST(ts.BaseTypeId -floor(ts.BaseTypeId/1000)*1000 AS CHAR(10)))
      ELSE ts.BaseTypeName
      END AS StandardTypeName,
ts.EventSeverity     ,
ts.EventSeverityName ,
ts.Meanings			 ,
ts.ThresholdType	 ,
(CASE WHEN ts.EventSeverity = 0 THEN 'SQLWAYS_EVAL# .png'
      WHEN ts.EventSeverity = 1 THEN 'SQLWAYS_EVAL# .png'
      WHEN ts.EventSeverity = 2 THEN 'SQLWAYS_EVAL# .png'
      WHEN ts.EventSeverity = 3 THEN 'SQLWAYS_EVAL# .png'
      ELSE 'SQLWAYS_EVAL# K.png' END) AS EventSeverityImage,
(CASE WHEN ts.SignalCategory = 2 THEN 'onoff.png'
      WHEN ts.SignalCategory = 3 THEN 'camera-web.png'
      ELSE 'SQLWAYS_EVAL# png' END) AS SignalImage
      FROM  tt_EquipmentSignal ts
      INNER JOIN TBL_Equipment ett ON ts.StationId = ett.StationId AND ts.EquipmentId = ett.EquipmentId
      INNER JOIN TBL_Signal es ON ett.EquipmentTemplateId = es.EquipmentTemplateId AND es.Enable = 1  AND es.Visible = 1 AND ts.SignalId = es.SignalId
      INNER JOIN TBL_Station st ON st.StationId = ts.StationId
      LEFT JOIN TBL_StationBaseMap stm ON st.StationCategory = stm.StationCategory AND stm.StandardType = v_StandardVer
      LEFT JOIN TBL_SignalBaseMap sbm ON sbm.StationBaseType = stm.StationBaseType AND sbm.BaseTypeId = floor(ts.BaseTypeId/1000)*1000+1
      LEFT JOIN TBL_StandardDicSig sds ON sds.StandardDicId = sbm.StandardDicId AND sds.StandardType = v_StandardVer
      WHERE ts.StationId = v_StationId AND ts.EquipmentId = v_EquipmentId
      AND (es.ModuleNo = 0
      OR ett.InstalledModule = '0'
      OR ett.InstalledModule = ''
      OR LOCATE(CONCAT(',',CAST(es.ModuleNo AS CHAR(30)),','),CONCAT(',',ett.InstalledModule,',')) > 0)
      AND
      ts.SampleTime =(Select max(SampleTime) FROM tt_EquipmentSignal  ts2
         WHERE  ts2.StationId = ts.StationId AND ts2.EquipmentId = ts.EquipmentId AND ts2.SignalId = ts.SignalId)
      ORDER BY ts.SampleTime DESC;
   ELSE
-- 电信标准化且只显示标准化信号
      SELECT  ts.StationId		 ,
ts.StationName       ,
ts.EquipmentId       ,
ts.EquipmentName     ,
ts.SignalId          ,
ts.SignalName        ,
ts.SignalCategory    ,
ts.DataType          ,
ts.FloatValue        ,
ts.StringValue       ,
ts.DateTimeValue     ,
ts.SampleTime        ,
ts.ShowPrecision     ,
ts.Unit              ,
ts.BaseTypeId        ,
ts.BaseTypeName      ,
CASE
      WHEN v_StandardVer = 2 THEN sds.StandardDicId
      ELSE ts.BaseTypeId
      END AS StandardTypeId,
CASE
      WHEN v_StandardVer = 2 THEN  floor((sds.StandardDicId -floor(sds.StandardDicId/100000000)*100000000)/1000)
      ELSE floor(ts.BaseTypeId/1000)
      END AS StandardTypeEntryId,
CASE
      WHEN v_StandardVer = 2 THEN replace(sds.SignalStandardName,'XX',CAST(ts.BaseTypeId -floor(ts.BaseTypeId/1000)*1000 AS CHAR(10)))
      ELSE ts.BaseTypeName
      END AS StandardTypeName,
ts.EventSeverity     ,
ts.EventSeverityName ,
ts.Meanings			 ,
ts.ThresholdType	 ,
(CASE WHEN ts.EventSeverity = 0 THEN 'SQLWAYS_EVAL# .png'
      WHEN ts.EventSeverity = 1 THEN 'SQLWAYS_EVAL# .png'
      WHEN ts.EventSeverity = 2 THEN 'SQLWAYS_EVAL# .png'
      WHEN ts.EventSeverity = 3 THEN 'SQLWAYS_EVAL# .png'
      ELSE 'SQLWAYS_EVAL# K.png' END) AS EventSeverityImage,
(CASE WHEN ts.SignalCategory = 2 THEN 'onoff.png'
      WHEN ts.SignalCategory = 3 THEN 'camera-web.png'
      ELSE 'SQLWAYS_EVAL# png' END) AS SignalImage
      FROM  tt_EquipmentSignal ts
      INNER JOIN TBL_Equipment ett ON ts.StationId = ett.StationId AND ts.EquipmentId = ett.EquipmentId
      INNER JOIN TBL_Signal es ON ett.EquipmentTemplateId = es.EquipmentTemplateId AND es.Enable = 1  AND es.Visible = 1 AND ts.SignalId = es.SignalId
      INNER JOIN TBL_Station st ON st.StationId = ts.StationId
      INNER JOIN TBL_StationBaseMap stm ON st.StationCategory = stm.StationCategory AND stm.StandardType = v_StandardVer
      INNER JOIN TBL_SignalBaseMap sbm ON sbm.StationBaseType = stm.StationBaseType AND sbm.BaseTypeId = floor(ts.BaseTypeId/1000)*1000+1
      INNER JOIN TBL_StandardDicSig sds ON sds.StandardDicId = sbm.StandardDicId AND sds.StandardType = v_StandardVer
      WHERE ts.StationId = v_StationId AND ts.EquipmentId = v_EquipmentId
      AND (es.ModuleNo = 0
      OR ett.InstalledModule = '0'
      OR ett.InstalledModule = ''
      OR LOCATE(CONCAT(',',CAST(es.ModuleNo AS CHAR(30)),','),CONCAT(',',ett.InstalledModule,',')) > 0)
      AND
      ts.SampleTime =(Select max(SampleTime) FROM tt_EquipmentSignal  ts2
         WHERE  ts2.StationId = ts.StationId AND ts2.EquipmentId = ts.EquipmentId AND ts2.SignalId = ts.SignalId)
      ORDER BY ts.SampleTime DESC;
   end if;
END;

-- SELECT N'SQLWAYS_EVAL# L_GetSystemCurrentTime]...';


DROP PROCEDURE IF EXISTS PBL_GetSystemCurrentTime;

CREATE PROCEDURE PBL_GetSystemCurrentTime(INOUT v_OutCurrentTime  DATETIME   ,
v_InCurrentTime   DATETIME ,INOUT SWP_Ret_Value INT)
BEGIN
   IF v_InCurrentTime IS NULL then
      SET v_InCurrentTime = CURRENT_TIMESTAMP;
   end if;

   SET v_OutCurrentTime = CAST(CONCAT(CAST(EXTRACT(year FROM v_InCurrentTime) AS CHAR(30)),'-',CAST(EXTRACT(month FROM v_InCurrentTime) AS CHAR(30)),
   '-',CAST(EXTRACT(day FROM v_InCurrentTime) AS CHAR(30)),
   ' ',CAST(EXTRACT(hour FROM v_InCurrentTime) AS CHAR(30)),
   ':',CAST(EXTRACT(minute FROM v_InCurrentTime) AS CHAR(30)),':',CAST(EXTRACT(second FROM v_InCurrentTime) AS CHAR(30))) AS DATETIME);
   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_GetSystemUniqueIdentity]...';


DROP PROCEDURE IF EXISTS PBL_GetSystemUniqueIdentity;

CREATE PROCEDURE PBL_GetSystemUniqueIdentity(INOUT v_ScheduleNumber      NUMERIC  ,
v_TableName           VARCHAR(30)    ,
v_PostalCode          INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_IdentityValue INT;     
   DECLARE v_TableId INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
/*liangyj
   IF v_PostalCode is null then
      set v_PostalCode = 0;
   END IF;*/
   SET @SWV_Error = 0;
/*
   IF v_TableName IS NULL then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;*/

   IF (v_PostalCode  = 0) AND EXISTS(SELECT 'X' FROM TBL_DataItem WHERE EntryId = 62) then
      select   cast(ItemId as SIGNED INTEGER) INTO v_PostalCode FROM  TBL_DataItem WHERE EntryId = 62;
   end if;

   SET v_ScheduleNumber = 0;
   SET v_PostalCode = IFNULL(v_PostalCode,0);

   IF NOT EXISTS(SELECT 'X' FROM TBL_PrimaryKeyIdentity WHERE TableName = v_TableName) then

      SET SWP_Ret_Value = -2;
      LEAVE SWL_return;
   end if;

   select   TableId INTO v_TableId FROM  TBL_PrimaryKeyIdentity m WHERE  m.TableName  = v_TableName;

   IF v_TableName = 'TBL_DataItem' then
      SET v_PostalCode = 0;
   end if;

   START TRANSACTION;
   SET @SWV_Error = 0;
   IF NOT EXISTS(SELECT   'X'
   FROM     TBL_PrimaryKeyValue
   WHERE    TableId     =  v_TableId
   AND      PostalCode  =  v_PostalCode) then

  INSERT INTO TBL_PrimaryKeyValue(TableId        ,
PostalCode     ,
MinValue       ,
CurrentValue)
VALUES(v_TableId       ,
v_PostalCode    ,
1              ,
1);
   ELSE
      UPDATE  TBL_PrimaryKeyValue
      SET     CurrentValue    = IFNULL(CurrentValue,0)+1
      WHERE   TableId         = v_TableId
      AND     PostalCode      = v_PostalCode;
   end if;
   IF @SWV_Error <> 0 then

      ROLLBACK;
      SET SWP_Ret_Value = -3;
      LEAVE SWL_return;
   end if;

   -- select   v_PostalCode*1000000+CurrentValue INTO v_ScheduleNumber FROM    TBL_PrimaryKeyValue WHERE   TableId         = v_TableId AND     PostalCode      = v_PostalCode;

   select UNIX_TIMESTAMP(SYSDATE())%1000000000+CEILING(RAND()*100) INTO v_ScheduleNumber FROM    TBL_PrimaryKeyValue WHERE   TableId         = v_TableId
   AND     PostalCode      = v_PostalCode;
   
   COMMIT;

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_RecoveryHistoryBattery]...';


DROP PROCEDURE IF EXISTS PBL_RecoveryHistoryBattery;

CREATE PROCEDURE PBL_RecoveryHistoryBattery(INOUT v_RowCount INT ,
v_StartTime	DATETIME ,
v_EndTime	DATETIME ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL#     正确
1..12    12个月中恢复异常
13    TRUNCATE TABLE  TBL_HistoryBatteryMid异常
*/

-- 声明变量
   DECLARE v_Index INT;
   DECLARE v_ErrorCode INT;
   DECLARE v_SQL NATIONAL VARCHAR(1024);
   DECLARE v_TableName NATIONAL VARCHAR(256);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 获取恢复开始时间、结束时间

-- 初始化
   SET v_Index = 1;
   SET v_RowCount = 0;
   SET v_TableName = 'SQLWAYS_EVAL# tery';

-- 循环恢复12个月数据.
   START TRANSACTION;
   SET v_Index = 1; -- 从1月开始恢复
 -- 1~12月逐月恢复
   WHILE v_Index <= 12 DO
      SET v_SQL = '';
      SET @SWV_Stmt = v_SQL;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
      SET v_SQL = CONCAT('SELECT * FROM TBL_HistoryBatteryMid  WHERE EXTRACT(month FROM SampleTime) = ',CAST(v_Index AS CHAR(2)),' ');
      if v_StartTime is not null then
         SET v_SQL = CONCAT(replace(v_SQL,';',' '),'SQLWAYS_EVAL# >=''',DATE_FORMAT(v_StartTime,'SQLWAYS_EVAL# :%s:%f%p'),
         '''');
      end if;
      if v_EndTime is not null then
         SET v_SQL = CONCAT(replace(v_SQL,';',' '),'SQLWAYS_EVAL# <=''',DATE_FORMAT(v_EndTime,'SQLWAYS_EVAL# :%s:%f%p'),
         '''');
      end if;
      SET @SWV_Stmt = v_SQL;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;

-- 记录恢复数
      SET v_RowCount = v_RowCount+ROW_COUNT();
      SET v_ErrorCode = @SWV_Error;
      IF v_ErrorCode <> 0 then

         ROLLBACK;
         SET SWP_Ret_Value = v_Index;
         LEAVE SWL_return;
      end if;
      SET v_Index = v_Index+1;
   END WHILE;

   COMMIT;

-- 清除BCP数据暂存表
   SET @SWV_Error = 0;
   TRUNCATE TABLE  TBL_HistoryBatteryMid;

   IF @SWV_Error <> 0 then

      SET SWP_Ret_Value = 13;
      LEAVE SWL_return;
   end if;

-- 恢复成功
   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_RecoveryHistoryControl]...';


DROP PROCEDURE IF EXISTS PBL_RecoveryHistoryControl;

CREATE PROCEDURE PBL_RecoveryHistoryControl(INOUT v_RowCount    INT ,
v_StartTime	DATETIME ,
v_EndTime	DATETIME ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL#     正确
-1     BCP IN无恢复数据
1     恢复异常
13     TRUNCATE TABLE TBL_HistoryControlMid
*/
-- 声明变量
   DECLARE v_ErrorCode INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 初始化
   SET v_RowCount = 0;

   SET @SWV_Error = 0;
   INSERT INTO TBL_HistoryControl
   SELECT * FROM TBL_HistoryControlMid
   WHERE StartTime >= IFNULL(v_StartTime,StartTime) AND StartTime <= IFNULL(v_EndTime,StartTime);

   SET v_RowCount = ROW_COUNT();
   SET v_ErrorCode = @SWV_Error;

   IF v_ErrorCode <> 0 then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

-- 清除BCP数据暂存表
   SET @SWV_Error = 0;
   TRUNCATE TABLE TBL_HistoryControlMid;
   IF @SWV_Error <> 0 then

      SET SWP_Ret_Value = 13;
      LEAVE SWL_return;
   end if;

-- 恢复成功
   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_RecoveryHistoryEvent]...';


DROP PROCEDURE IF EXISTS PBL_RecoveryHistoryEvent;

CREATE PROCEDURE PBL_RecoveryHistoryEvent(INOUT v_RowCount    INT ,
v_StartTime	DATETIME ,
v_EndTime	DATETIME ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL#     正确
1     恢复异常
13 			TRUNCATE TABLE TBL_HistoryEventMid错误
*/
-- 声明变量
   DECLARE v_ErrorCode INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
-- 初始化
   SET v_RowCount = 0;

   SET @SWV_Error = 0;
   INSERT INTO TBL_HistoryEvent
   SELECT * FROM TBL_HistoryEventMid
   WHERE StartTime >= IFNULL(v_StartTime,StartTime) AND StartTime <= IFNULL(v_EndTime,StartTime);

   SET v_RowCount = ROW_COUNT();
   SET v_ErrorCode = @SWV_Error;

   IF v_ErrorCode <> 0 then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

-- 清除BCP数据暂存表数据.
   SET @SWV_Error = 0;
   TRUNCATE TABLE TBL_HistoryEventMid;

   IF @SWV_Error <> 0 then

      SET SWP_Ret_Value = 13;
      LEAVE SWL_return;
   end if;

-- 恢复成功
   SET SWP_Ret_Value = 0;
END;



-- SELECT N'SQLWAYS_EVAL# L_RecoveryHistorySignal]...';


DROP PROCEDURE IF EXISTS PBL_RecoveryHistorySignal;

CREATE PROCEDURE PBL_RecoveryHistorySignal(INOUT v_RowCount INT ,
v_StartTime	DATETIME ,
v_EndTime	DATETIME ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL#     正确
1..12    12个月中恢复异常
13    TRUNCATE TABLE  TBL_HistorySignalMid异常
*/

-- 声明变量
   DECLARE v_Index INT;
   DECLARE v_ErrorCode INT;
   DECLARE v_SQL NATIONAL VARCHAR(1024);
   DECLARE v_TableName NATIONAL VARCHAR(256);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 获取恢复开始时间、结束时间

-- 初始化
   SET v_Index = 1;
   SET v_RowCount = 0;
   SET v_TableName = 'SQLWAYS_EVAL# nal';

-- 循环恢复12个月数据.
   START TRANSACTION;
   SET v_Index = 1; -- 从1月开始恢复
 -- 1~12月逐月恢复
   WHILE v_Index <= 12 DO
      SET v_SQL = '';
      SET @SWV_Stmt = v_SQL;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
      SET v_SQL = CONCAT('SELECT * FROM TBL_HistorySignalMid WHERE EXTRACT(month FROM SampleTime)  = ',CAST(v_Index AS CHAR(2)),' ');
      if v_StartTime is not null then
         SET v_SQL = CONCAT(replace(v_SQL,';',' '),'SQLWAYS_EVAL# >=''',DATE_FORMAT(v_StartTime,'SQLWAYS_EVAL# :%s:%f%p'),
         '''');
      end if;
      if v_EndTime is not null then
         SET v_SQL = CONCAT(replace(v_SQL,';',' '),'SQLWAYS_EVAL# <=''',DATE_FORMAT(v_EndTime,'SQLWAYS_EVAL# :%s:%f%p'),
         '''');
      end if;
      SET @SWV_Stmt = v_SQL;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;

-- 记录恢复数
      SET v_RowCount = v_RowCount+ROW_COUNT();
      SET v_ErrorCode = @SWV_Error;
      IF v_ErrorCode <> 0 then

         ROLLBACK;
         SET SWP_Ret_Value = v_Index;
         LEAVE SWL_return;
      end if;
      SET v_Index = v_Index+1;
   END WHILE;

   COMMIT;

-- 清除BCP数据暂存表
   SET @SWV_Error = 0;
   TRUNCATE TABLE  TBL_HistorySignalMid;

   IF @SWV_Error <> 0 then

      SET SWP_Ret_Value = 13;
      LEAVE SWL_return;
   end if;

-- 恢复成功
   SET SWP_Ret_Value = 0;
END;



-- SELECT N'SQLWAYS_EVAL# L_RecoveryOperationRecord]...';


DROP PROCEDURE IF EXISTS PBL_RecoveryOperationRecord;

CREATE PROCEDURE PBL_RecoveryOperationRecord(INOUT v_RowCount INT ,
v_StartTime	DATETIME ,
v_EndTime	DATETIME ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL# 到TBL_OperationRecordMid的操作日志恢复到历史表中.

返回代码：　
0				正确
1       执行语法出错
13      TRUNCATE TABLE TBL_OperationRecordMid
*/

-- 初始化
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET v_RowCount = 0;

   SET @SWV_Error = 0;
   INSERT INTO TBL_OperationRecord
   SELECT * FROM TBL_OperationRecordMid
   WHERE OperationTime >= IFNULL(v_StartTime,OperationTime) AND OperationTime <= IFNULL(v_EndTime,OperationTime);

   IF @SWV_Error <> 0 then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

-- 记录恢复数
   SET v_RowCount = ROW_COUNT();

-- 清除BCP暂存数据
   SET @SWV_Error = 0;
   TRUNCATE TABLE TBL_OperationRecordMid;
   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = 13;
      LEAVE SWL_return;
   end if;

-- 恢复成功.
   SET SWP_Ret_Value = 0;
END;



-- SELECT N'SQLWAYS_EVAL# L_RecoverySignalStatistics]...';


DROP PROCEDURE IF EXISTS PBL_RecoverySignalStatistics;

CREATE PROCEDURE PBL_RecoverySignalStatistics(INOUT v_RowCount INT ,
v_StartTime	DATETIME ,
v_EndTime	DATETIME ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL# 成功
1 执行语法出错
13 TRUNCATE TABLE  TBL_SignalStatisticsMid异常				
*/

-- 声明变量
   DECLARE v_ErrorCode INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 初始化
   SET v_RowCount = 0;		

   SET @SWV_Error = 0;
   INSERT INTO TBL_SignalStatistics SELECT * FROM TBL_SignalStatisticsMid
   WHERE StatisticsTime >= IFNULL(v_StartTime,StatisticsTime) AND StatisticsTime <= IFNULL(v_EndTime,StatisticsTime);

   IF @SWV_Error <> 0 then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;	
-- 记录恢复数
   SET v_RowCount = ROW_COUNT(); 

-- 清除BCP暂存数据
   SET @SWV_Error = 0;
   TRUNCATE TABLE TBL_SignalStatisticsMid;
   IF @SWV_Error <> 0 then
-- SQLWAYS_EVAL# e出错，返回13
      SET SWP_Ret_Value = 13;
      LEAVE SWL_return;
   end if;

-- 恢复成功		
   SET SWP_Ret_Value = 0;
END;



-- SELECT N'SQLWAYS_EVAL# L_RecoverySwapCardRecord]...';


DROP PROCEDURE IF EXISTS PBL_RecoverySwapCardRecord;

CREATE PROCEDURE PBL_RecoverySwapCardRecord(INOUT v_RowCount INT ,
v_StartTime	DATETIME ,
v_EndTime	DATETIME ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN

/*SQLWAYS_EVAL#    执行语法出错
*/

-- 初始化
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET v_RowCount = 0;

   SET @SWV_Error = 0;
   INSERT INTO  TBL_SwapCardRecord
   SELECT * FROM TBL_SwapCardRecordMid
   WHERE RecordTime >= IFNULL(v_StartTime,RecordTime) AND RecordTime <= IFNULL(v_EndTime,RecordTime);

   IF @SWV_Error <> 0 then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

-- 记录恢复数
   SET v_RowCount = ROW_COUNT(); 

-- 清除BCP暂存数据
   SET @SWV_Error = 0;
   TRUNCATE TABLE TBL_SwapCardRecordMid;
   IF @SWV_Error <> 0 then

      SET SWP_Ret_Value = 13;
      LEAVE SWL_return;
   end if;

-- 恢复成功
   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_RequireEndTogetherAlarm]...';

-- SQLWAYS_EVAL# 型)

DROP PROCEDURE IF EXISTS PBL_RequireEndTogetherAlarm;

CREATE PROCEDURE PBL_RequireEndTogetherAlarm(v_StationCategory		NATIONAL VARCHAR(4000),
v_StandardId				INT,
v_DerivateStandardId		INT,
v_Span					INT,
v_Threashold				INT,
v_HoldTime				INT ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_StartTime DATETIME;
   DECLARE v_EndTime DATETIME;
   DECLARE v_CurTime DATETIME;
   DECLARE v_MinStartTime DATETIME;
   DECLARE v_PoweroffConfig INT;
   DECLARE v_MinIndex INT;
   DECLARE v_MaxIndex INT;
   DECLARE v_EventCount INT;

-- 0    正常	
-- -1   输入参数错误
-- SQLWAYS_EVAL# 警配置

   IF v_HoldTime is null then
      set v_HoldTime = 0;
   END IF;
   IF(v_StandardId <= 0 OR v_DerivateStandardId <= 0
   OR v_Span < 0 OR v_Threashold < 0 OR v_HoldTime < 0) then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

-- 当前时间
   SET v_CurTime = CURRENT_TIMESTAMP;

-- 处理权限后的局站
   CREATE TEMPORARY TABLE tt_StationGroup
   (
      CenterId INT,
      CenterName NATIONAL VARCHAR(128),
      GroupId INT,
      GroupName NATIONAL VARCHAR(128),
      StationId INT,
      StationName NATIONAL VARCHAR(128),
      StationState INT,
      StationCategory INT,
      StationGrade INT
   );
   CALL PAM_FilterStation('-1','-1','-1',v_StationCategory,'-1','-1','-1','-1','#StationGroup');

-- 标准化告警配置
   CREATE TEMPORARY TABLE tt_StandardEvent
   (
      StationId INT,
      EquipmentId INT,
      EventId INT,
      EventConditionId INT,
      EventSeverity INT,
      EventName NATIONAL VARCHAR(255),
      Meanings NATIONAL VARCHAR(255)
   );
/*SQLWAYS_EVAL#  tt.StationId, et.EquipmentId,C.EventId,F.EventConditionId,F.EventSeverity,C.EventName ,F.Meanings
FROM TBL_EquipmentTemplate A   
INNER JOIN TBL_Equipment et ON A.EquipmentTemplateId = et.EquipmentTemplateId
INNER JOIN #StationGroup tt ON tt.StationId = et.StationId
INNER JOIN TBL_Signal B ON A.EquipmentTemplateId =B.EquipmentTemplateId 
INNER JOIN TBL_Event C ON A.EquipmentTemplateId =C.EquipmentTemplateId AND B.SignalId =C.SignalId 
INNER JOIN TBL_StandardTemplateMap N ON A.EquipmentTemplateId=N.EquipmentTemplateId AND N.StationCategory=1
INNER JOIN TBL_StandardTemplate  I ON N.StandardTemplateId = I.StandardTemplateId AND N.StationCategory =I.StationCategory
INNER JOIN TBL_EventCondition F ON A.EquipmentTemplateId =F.EquipmentTemplateId AND C.EventId = F.EventId
INNER JOIN TBL_StandardRule E ON E.StandardTemplateId =I.StandardTemplateId  AND E.SignalName=B.SignalName AND E.Meanings =F.Meanings 
INNER JOIN TBL_StandardDic G ON E.StandardDicId=G.StandardDicId 
WHERE E.StandardDicId = @StandardId 
*/
   INSERT INTO tt_StandardEvent(StationId,EquipmentId,EventId,EventConditionId,EventSeverity,EventName,Meanings)
   SELECT  tt.StationId, et.EquipmentId,C.EventId,E.EventConditionId,E.EventSeverity,C.EventName ,E.Meanings
   FROM TBL_EquipmentTemplate A
   INNER JOIN TBL_Equipment et ON A.EquipmentTemplateId = et.EquipmentTemplateId
   INNER JOIN tt_StationGroup tt ON tt.StationId = et.StationId
   INNER JOIN TBL_Signal B ON A.EquipmentTemplateId = B.EquipmentTemplateId
   INNER JOIN TBL_Event C ON A.EquipmentTemplateId = C.EquipmentTemplateId AND B.SignalId = C.SignalId
   INNER JOIN TBL_EventCondition E ON A.EquipmentTemplateId = E.EquipmentTemplateId AND C.EventId = E.EventId
   INNER JOIN TBL_StationBaseMap F ON F.StationCategory = tt.StationCategory
   INNER JOIN TBL_EventBaseMap G ON G.StationBaseType = F.StationBaseType AND G.BaseTypeId = E.BaseTypeId
   WHERE G.StandardDicId = v_StandardId;

-- 衍生标准化告警配置
   CREATE TEMPORARY TABLE tt_TogetherEvent
   (
      StationId INT,
      EquipmentId INT,
      EventId INT,
      EventConditionId INT,
      EventSeverity INT,
      EventName NATIONAL VARCHAR(255),
      Meanings NATIONAL VARCHAR(255)
   );
/*SQLWAYS_EVAL#  tt.StationId, et.EquipmentId,C.EventId,F.EventConditionId,F.EventSeverity,C.EventName ,F.Meanings
FROM TBL_EquipmentTemplate A   
INNER JOIN TBL_Equipment et ON A.EquipmentTemplateId = et.EquipmentTemplateId
INNER JOIN #StationGroup tt ON tt.StationId = et.StationId
INNER JOIN TBL_Signal B ON A.EquipmentTemplateId =B.EquipmentTemplateId 
INNER JOIN TBL_Event C ON A.EquipmentTemplateId =C.EquipmentTemplateId AND B.SignalId =C.SignalId 
INNER JOIN TBL_StandardTemplateMap N ON A.EquipmentTemplateId=N.EquipmentTemplateId AND N.StationCategory=1
INNER JOIN TBL_StandardTemplate  I ON N.StandardTemplateId = I.StandardTemplateId AND N.StationCategory =I.StationCategory
INNER JOIN TBL_EventCondition F ON A.EquipmentTemplateId =F.EquipmentTemplateId AND C.EventId = F.EventId
INNER JOIN TBL_StandardRule E ON E.StandardTemplateId =I.StandardTemplateId  AND E.SignalName=B.SignalName AND E.Meanings =F.Meanings 
INNER JOIN TBL_StandardDic G ON E.StandardDicId=G.StandardDicId 
WHERE E.StandardDicId = @DerivateStandardId 
*/

   INSERT INTO tt_TogetherEvent(StationId,EquipmentId,EventId,EventConditionId,EventSeverity,EventName,Meanings)
   SELECT  tt.StationId, et.EquipmentId,C.EventId,E.EventConditionId,E.EventSeverity,C.EventName ,E.Meanings
   FROM TBL_EquipmentTemplate A
   INNER JOIN TBL_Equipment et ON A.EquipmentTemplateId = et.EquipmentTemplateId
   INNER JOIN tt_StationGroup tt ON tt.StationId = et.StationId
   INNER JOIN TBL_Signal B ON A.EquipmentTemplateId = B.EquipmentTemplateId
   INNER JOIN TBL_Event C ON A.EquipmentTemplateId = C.EquipmentTemplateId AND B.SignalId = C.SignalId
   INNER JOIN TBL_EventCondition E ON A.EquipmentTemplateId = E.EquipmentTemplateId AND C.EventId = E.EventId
   INNER JOIN TBL_StationBaseMap F ON F.StationCategory = tt.StationCategory
   INNER JOIN TBL_EventBaseMap G ON G.StationBaseType = F.StationBaseType AND G.BaseTypeId = E.BaseTypeId
   WHERE G.StandardDicId = v_DerivateStandardId;

   select   COUNT(*) INTO v_PoweroffConfig FROM tt_TogetherEvent;
   IF(v_PoweroffConfig IS NULL OR v_PoweroffConfig <= 0) then

-- SQLWAYS_EVAL# 回-2
      DROP TEMPORARY TABLE IF EXISTS tt_StationGroup;
-- SQLWAYS_EVAL# Deleted by Yujian in 2011-9-29
      SET SWP_Ret_Value = -2;
      LEAVE SWL_return;
   end if;

-- 所有未结束标准化告警
   CREATE TEMPORARY TABLE tt_PoweroffActiveEvent
   (
      UniqueId NATIONAL VARCHAR(128), 	-- 告警唯一标识	
      StationId INT,			-- 基站编号
      EquipmentId INT,			-- 设备编号
      EventId INT,		 	-- 事件编号
      EventConditionId INT,			-- 事件条件编号
      AlarmGrade INT,			-- 告警等级
      AlarmType INT, 			-- 告警类型
      StartTime DATETIME,		-- 告警开始时间
      ConfirmTime DATETIME,	-- 告警确认时间
      EndTime DATETIME,	-- 告警结束时间
      TriggerValue NUMERIC(13,2),	-- 告警触发值
      Meanings NATIONAL VARCHAR(255)-- 告警说明
   );

-- 实例
   INSERT INTO tt_PoweroffActiveEvent(UniqueId, StationId,
EquipmentId, Meanings, AlarmGrade,
StartTime, ConfirmTime, EventId,EventConditionId,
TriggerValue, EndTime, AlarmType)
   SELECT  DISTINCT
   ae.SequenceId AS UniqueId, ae.StationId,
ae.EquipmentId, ae.Meanings, ae.EventSeverityId AS AlarmGrade,
ae.StartTime, ae.ConfirmTime, ae.EventId, ae.EventConditionId,
ae.EventValue AS TriggerValue, ae.EndTime, ae.EventCategoryId AS AlarmType
   FROM TBL_ActiveEvent ae
   INNER JOIN tt_StandardEvent st ON ae.StationId = st.StationId AND ae.EquipmentId = st.EquipmentId
   AND ae.EventId = st.EventId AND ae.EventConditionId = st.EventConditionId
   WHERE ae.StartTime IS NOT NULL AND ae.EndTime IS NULL;

-- 所有未结束衍生标准化告警
   CREATE TEMPORARY TABLE tt_TogetherActiveEvent
   (
      Idx INT NOT NULL  AUTO_INCREMENT PRIMARY KEY, -- 自增长字段
      UniqueId NATIONAL VARCHAR(128), 	-- 告警唯一标识	
      StationId INT,
      EquipmentId INT,
      EventId INT,
      EventConditionId INT,
      EventSeverity INT,
      StartTime DATETIME,
      Meanings NATIONAL VARCHAR(255),
      EventValue INT
   );
   CREATE index IDX_TogetherActiveEvent_Idx ON tt_TogetherActiveEvent
   (Idx);

   INSERT INTO tt_TogetherActiveEvent(UniqueId,StationId,EquipmentId,EventId,EventConditionId,EventSeverity,StartTime,Meanings,EventValue)
   SELECT ae.SequenceId AS UniqueId,ae.StationId,ae.EquipmentId,ae.EventId,ae.EventConditionId,te.EventSeverity,ae.StartTime,ae.Meanings,ae.EventValue
   FROM TBL_ActiveEvent ae
   INNER JOIN TBL_SARAlarmActiveRecord sr ON ae.StationId = sr.StationId AND ae.EquipmentId = sr.EquipmentId
   AND ae.EventId = sr.EventId AND ae.EventConditionId = sr.EventConditionId
   AND ae.StartTime = sr.StartTime AND ae.SequenceId = sr.SequenceId
   INNER JOIN tt_TogetherEvent te ON ae.StationId = te.StationId AND ae.EquipmentId = te.EquipmentId
   AND ae.EventId = te.EventId AND ae.EventConditionId = te.EventConditionId
   WHERE ae.StartTime IS NOT NULL AND ae.EndTime IS NULL AND sr.RelationType = 5;

   select   MIN(Idx), MAX(Idx) INTO v_MinIndex,v_MaxIndex FROM tt_TogetherActiveEvent;

-- 需要结束的衍生标准化告警
   CREATE TEMPORARY TABLE tt_EndTogetherActiveEvent
   (
      SequenceId NATIONAL VARCHAR(128), 	-- 告警唯一标识	
      StationId INT,
      EquipmentId INT,
      EventId INT,
      EventConditionId INT,
      EventSeverity INT,
      StartTime DATETIME,
      EndTime DATETIME,
      Meanings NATIONAL VARCHAR(255),
      EventValue INT
   );

-- 循环计算是否结束同时告警
   WHILE(v_MinIndex <= v_MaxIndex) DO
-- 确定开始时间
      select   TIMESTAMPADD(second,0 -v_HoldTime,StartTime) INTO v_StartTime FROM tt_TogetherActiveEvent WHERE Idx = v_MinIndex;

-- 衍生标准化告警是否可以结束
      select   COUNT(*) INTO v_EventCount FROM tt_PoweroffActiveEvent WHERE StartTime <= v_StartTime AND StartTime > TIMESTAMPADD(second,0 -v_Span,v_StartTime);
      IF v_EventCount <= v_Threashold then

-- 确定结束时间
-- 目前只能以当前时间
         SET v_MinStartTime = v_CurTime;
-- 可以结束的衍生标准化告警
         INSERT INTO  tt_EndTogetherActiveEvent(SequenceId,StationId,EquipmentId,EventId,EventConditionId,EventSeverity,StartTime,EndTime,Meanings,EventValue)
         SELECT UniqueId AS SequenceId,StationId,EquipmentId,EventId,EventConditionId,ae.EventSeverity,StartTime,v_MinStartTime,Meanings,EventValue
         FROM tt_TogetherActiveEvent ae
         WHERE Idx = v_MinIndex;
      end if;
      SET v_MinIndex = v_MinIndex+1;
   END WHILE;

-- 返回需要结束的衍生标准化告警
   SELECT * FROM tt_EndTogetherActiveEvent ORDER BY StartTime;

-- 清除临时表
   DROP TEMPORARY TABLE IF EXISTS tt_StationGroup;
   DROP TEMPORARY TABLE IF EXISTS tt_StandardEvent;
   DROP TEMPORARY TABLE IF EXISTS tt_TogetherEvent;
   DROP TEMPORARY TABLE IF EXISTS tt_PoweroffActiveEvent;
   DROP TEMPORARY TABLE IF EXISTS tt_TogetherActiveEvent;
   DROP TEMPORARY TABLE IF EXISTS tt_EndTogetherActiveEvent;

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_RequireTotalAlarm]...';

DROP PROCEDURE IF EXISTS PBL_RequireTotalAlarm;


CREATE PROCEDURE PBL_RequireTotalAlarm(v_DerivateBaseTypeId		 INT,
v_StartThreashold		INT,
v_EndThreashold			INT,
v_Span					INT,
v_FilterThreashold	    INT ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_MinStartTime DATETIME;
   DECLARE v_StartTime DATETIME;
   DECLARE v_UnEndPOTotal INT;
   DECLARE v_UnEndToTotal INT;
   DECLARE v_RecordTotal INT;
   DECLARE v_MAXEndTime DATETIME;
   DECLARE v_PoweroffConfig INT;
   DECLARE v_CaseStationId INT;
   DECLARE v_CaseEquipmentId INT;
   DECLARE v_CaseEventId INT;
   DECLARE v_CaseEventConditionId INT;
   DECLARE v_CaseEventSeverity INT;
   DECLARE v_UnEndPoCount INT;
   DECLARE v_StandardVer INT;
   DECLARE v_RecordCount INT;
   DECLARE v_i INT;
   DECLARE v_BaseTypeId INT;
   DECLARE v_StationCategoryId INT;
   DECLARE v_CaseEventName VARCHAR(255);
   DECLARE v_CaseMeaning VARCHAR(255);

-- 0    正常	
-- -1   输入参数错误
-- SQLWAYS_EVAL# 警配置

-- 如果输入参数错误,返回-1
   IF v_FilterThreashold is null then
      set v_FilterThreashold = 0;
   END IF;
   IF(v_DerivateBaseTypeId <= 0
   OR v_StartThreashold <= 0 OR v_EndThreashold < 0
   OR v_StartThreashold < v_EndThreashold) then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

   SET v_StandardVer = PAM_GetStandardVer(); 


-- 衍生标准化告警配置
   CREATE TEMPORARY TABLE tt_TotalEvent
   (
      StationId INT,
      EquipmentId INT,
      EventId INT,
      EventConditionId INT,
      EventSeverity INT,
      BaseTypeId INT,
      EventName VARCHAR(255),
      Meanings VARCHAR(255)
   );


   INSERT INTO tt_TotalEvent(StationId,EquipmentId,EventId,EventConditionId,EventSeverity,BaseTypeId, EventName,Meanings)
   SELECT  et.StationId, et.EquipmentId,C.EventId,E.EventConditionId,E.EventSeverity,E.BaseTypeId, C.EventName ,E.Meanings
   FROM TBL_EquipmentTemplate A
   INNER JOIN TBL_Equipment et ON A.EquipmentTemplateId = et.EquipmentTemplateId
   INNER JOIN TBL_Event C ON A.EquipmentTemplateId = C.EquipmentTemplateId
   INNER JOIN TBL_EventCondition E ON A.EquipmentTemplateId = E.EquipmentTemplateId AND C.EventId = E.EventId AND E.BaseTypeId = v_DerivateBaseTypeId;



-- 累计衍生标准化告警配置
-- 目前在二级中心生成只能有一个
   select   StationId, EquipmentId, EventId, EventConditionId, EventSeverity, BaseTypeId, EventName, Meanings INTO v_CaseStationId,v_CaseEquipmentId,v_CaseEventId,v_CaseEventConditionId,
   v_CaseEventSeverity,v_DerivateBaseTypeId,v_CaseEventName,v_CaseMeaning FROM tt_TotalEvent    LIMIT 1;


-- 所有未结束标准化告警
   CREATE TEMPORARY TABLE tt_PoweroffActiveEvent
   (
      UniqueId NATIONAL VARCHAR(128), 		-- 告警唯一标识	
      StationId INT,				-- 基站编号
      EquipmentId INT,				-- 设备编号
      EventId INT,		 		-- 事件编号
      EventConditionId INT,				-- 事件条件编号
      AlarmGrade INT,				-- 告警等级
      AlarmType INT, 				-- 告警类型
      BaseTypeId INT, 				-- 基类类型
      StartTime DATETIME,			-- 告警开始时间
      ConfirmTime DATETIME,		-- 告警确认时间
      EndTime DATETIME,		-- 告警结束时间
      TriggerValue NUMERIC(13,2),		-- 告警触发值
      Meanings VARCHAR(50)	-- 告警说明
   );

   DROP TEMPORARY TABLE IF EXISTS tt_ConfigDerivateMap;

   CREATE TEMPORARY TABLE tt_ConfigDerivateMap
   (
      IndexId INT   AUTO_INCREMENT PRIMARY KEY,
      BaseTypeId INT,
      StationCategoryId INT
   );

   INSERT INTO tt_ConfigDerivateMap
   SELECT BaseTypeId, StationCategoryId
   FROM TBL_SARStationDerivateMap
   WHERE DerivateBaseTypeId = v_DerivateBaseTypeId;  

   select   MIN(IndexId), MAX(IndexId) INTO v_i,v_RecordCount FROM tt_ConfigDerivateMap;
   WHILE v_i <= v_RecordCount DO
      select   BaseTypeId, StationCategoryId INTO v_BaseTypeId,v_StationCategoryId FROM tt_ConfigDerivateMap WHERE IndexId = v_i;
      IF(v_Span > 0) then

  INSERT INTO tt_PoweroffActiveEvent(UniqueId, StationId,
EquipmentId, Meanings, AlarmGrade, BaseTypeId,
StartTime, ConfirmTime, EventId, EventConditionId,
TriggerValue, EndTime, AlarmType)
         SELECT  DISTINCT ae.SequenceId AS UniqueId, ae.StationId,
ae.EquipmentId, ae.Meanings, ae.EventSeverityId AS AlarmGrade, ae.BaseTypeId,
ae.StartTime, ae.ConfirmTime, ae.EventId, ae.EventConditionId,
ae.EventValue AS TriggerValue, ae.EndTime, ae.EventCategoryId AS AlarmType
         FROM TBL_ActiveEvent ae
         WHERE ae.BaseTypeId = v_BaseTypeId AND ae.StationCategoryId IN(SELECT StationCategory
            FROM TBL_StationBaseMap
            WHERE StandardType = v_StandardVer
            AND StationBaseType = v_StationCategoryId)
         AND ae.StartTime IS NOT NULL AND ae.EndTime IS NULL
         AND ae.StartTime  > TIMESTAMPADD(second,0 -v_Span,CURRENT_TIMESTAMP);
      ELSE
 INSERT INTO tt_PoweroffActiveEvent(UniqueId, StationId,
EquipmentId, Meanings, AlarmGrade, BaseTypeId,
StartTime, ConfirmTime, EventId,EventConditionId,
TriggerValue, EndTime, AlarmType)
         SELECT  DISTINCT
         ae.SequenceId AS UniqueId, ae.StationId,
ae.EquipmentId, ae.Meanings, ae.EventSeverityId AS AlarmGrade, ae.BaseTypeId,
ae.StartTime, ae.ConfirmTime, ae.EventId, ae.EventConditionId,
ae.EventValue AS TriggerValue, ae.EndTime, ae.EventCategoryId AS AlarmType
         FROM TBL_ActiveEvent ae
         WHERE ae.BaseTypeId = v_BaseTypeId AND ae.StationCategoryId IN(SELECT StationCategory
            FROM TBL_StationBaseMap
            WHERE StandardType = v_StandardVer
            AND StationBaseType = v_StationCategoryId)
         AND ae.StartTime IS NOT NULL AND ae.EndTime IS NULL;
      end if;
      SET v_i = v_i+1;
   END WHILE; 


-- 根据过滤阀值确定开始时间
   select   Min(StartTime) INTO v_StartTime FROM tt_PoweroffActiveEvent;


-- 所有未结束标准化告警总数
   select   COUNT(*) INTO v_UnEndPOTotal FROM tt_PoweroffActiveEvent WHERE StartTime >= v_StartTime;

-- 最大时间
   select   Max(StartTime) INTO v_MAXEndTime FROM tt_PoweroffActiveEvent;

-- 所有未结束衍生标准化告警
   CREATE TEMPORARY TABLE tt_UnEndTotalActiveEvent
   (
      SequenceId NATIONAL VARCHAR(128), 	-- 告警唯一标识	
      StationId INT,
      EquipmentId INT,
      EventId INT,
      EventConditionId INT,
      EventSeverity INT,
      StartTime DATETIME,
      EndTime DATETIME,
      Meanings VARCHAR(255),
      EventValue INT,
      BaseTypeId INT
   );
   INSERT INTO tt_UnEndTotalActiveEvent(SequenceId,StationId,EquipmentId,EventId,EventConditionId,EventSeverity,StartTime,EndTime,Meanings,EventValue,BaseTypeId)
   SELECT ae.SequenceId,ae.StationId,ae.EquipmentId,ae.EventId,ae.EventConditionId,ae.EventSeverityId AS EventSeverity,ae.StartTime,ae.EndTime,ae.Meanings,ae.EventValue,ae.BaseTypeId
   FROM TBL_ActiveEvent ae
   WHERE ae.BaseTypeId = v_DerivateBaseTypeId AND ae.StartTime IS NOT NULL AND ae.EndTime IS NULL; 

-- 所有未结束衍生标准化告警总数
   select   COUNT(*) INTO v_UnEndToTotal FROM tt_UnEndTotalActiveEvent;

-- 是否需要结束衍生标准化告警
   IF(v_UnEndPOTotal >= v_StartThreashold) then

-- 不需要结束
      IF(v_UnEndToTotal > 0) then

-- 清除临时表
         DROP TEMPORARY TABLE IF EXISTS tt_TotalEvent;
         DROP TEMPORARY TABLE IF EXISTS tt_PoweroffActiveEvent;
         DROP TEMPORARY TABLE IF EXISTS tt_UnEndTotalActiveEvent;
         SET SWP_Ret_Value = 0;
         LEAVE SWL_return;
      ELSE
-- 记录累积衍生标准化告警
 INSERT INTO tt_UnEndTotalActiveEvent(SequenceId,StationId,EquipmentId,EventId,EventConditionId,EventSeverity,StartTime,EndTime,Meanings,EventValue,BaseTypeId)
VALUES('',v_CaseStationId,v_CaseEquipmentId,v_CaseEventId,v_CaseEventConditionId,v_CaseEventSeverity,v_MAXEndTime,null,
CONCAT(v_CaseMeaning,',达到',CAST(v_StartThreashold AS CHAR(30)), '条'),
v_UnEndPOTotal,v_DerivateBaseTypeId);
-- SQLWAYS_EVAL# 的标准化告警

         INSERT INTO TBL_SARAlarmRelation(StationId,EquipmentId,EventId,EventConditionId,StartTime,StandardId,
CauseStationId,CauseEquipmentId,CauseEventId,CauseEventConditionId,CauseStartTime,CauseStandardId,RelationType)
         SELECT v_CaseStationId AS StationId,v_CaseEquipmentId AS EquipmentId,v_CaseEventId AS EventId,
v_CaseEventConditionId AS EventConditionId,v_MAXEndTime AS StartTime,v_DerivateBaseTypeId AS StandardId,
pe.StationId AS CauseStationId,pe.EquipmentId AS CauseEquipmentId,
pe.EventId AS CauseEventId,pe.EventConditionId AS CauseEventConditionId,
pe.StartTime AS CauseStartTime,pe.BaseTypeId AS CauseStandardId,4
         FROM tt_PoweroffActiveEvent pe;

-- 返回新产生累积衍生告警
         SELECT * FROM tt_UnEndTotalActiveEvent;
      end if;
   ELSE
-- 需要结束
      IF(v_UnEndToTotal > 0) then

         IF(v_Span > 0) then

            select   count(*) INTO v_UnEndPoCount FROM tt_UnEndTotalActiveEvent unEndTotal,TBL_SARAlarmRelation sarAlarmRelation,TBL_ActiveEvent activeEvent WHERE unEndTotal.StationId = sarAlarmRelation.StationId
            AND unEndTotal.EquipmentId = sarAlarmRelation.EquipmentId
            AND unEndTotal.EventId = sarAlarmRelation.EventId
            AND unEndTotal.StartTime = sarAlarmRelation.StartTime
            AND sarAlarmRelation.CauseStationId = activeEvent.StationId
            AND sarAlarmRelation.CauseEquipmentId = activeEvent.EquipmentId
            AND sarAlarmRelation.CauseStandardId = activeEvent.StandardAlarmNameId
            AND sarAlarmRelation.CauseStartTime = activeEvent.StartTime
            AND activeEvent.EndTime IS NULL;
            IF(v_UnEndPoCount <= v_EndThreashold) then

               UPDATE tt_UnEndTotalActiveEvent SET EndTime = CURRENT_TIMESTAMP;
               SELECT * FROM tt_UnEndTotalActiveEvent;
            end if;
         ELSE
            IF(v_UnEndPOTotal <= v_EndThreashold) then

               UPDATE tt_UnEndTotalActiveEvent SET EndTime = CURRENT_TIMESTAMP;
               SELECT * FROM tt_UnEndTotalActiveEvent;
            end if;
         end if;
      ELSE
-- 清除临时表
         DROP TEMPORARY TABLE IF EXISTS tt_PoweroffActiveEvent;
         DROP TEMPORARY TABLE IF EXISTS tt_UnEndTotalActiveEvent;
         SET SWP_Ret_Value = 0;
         LEAVE SWL_return;
      end if;
   end if;

-- 清除临时表
   DROP TEMPORARY TABLE IF EXISTS tt_PoweroffActiveEvent;
   DROP TEMPORARY TABLE IF EXISTS tt_UnEndTotalActiveEvent;

   SET SWP_Ret_Value = 0;
END;







-- SELECT N'SQLWAYS_EVAL# L_SaveHistoryCommand]...';


DROP PROCEDURE IF EXISTS PBL_SaveHistoryCommand;

CREATE PROCEDURE PBL_SaveHistoryCommand(v_StationId   	INT       	,
v_EquipmentId 	INT		    ,
v_ControlId    	INT        	,
v_SerialNo	    INT			,
v_StartTime		DATETIME,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
--  返回结果
-- -1 不可知错误
--  0 成功
--  1 参数为0或空

   DECLARE v_StartIndex INT;
   DECLARE v_EndIndex INT;
   DECLARE v_SQL NATIONAL VARCHAR(4000);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 参数判断
   SET @SWV_Error = 0;
   IF v_StationId IS NULL OR v_EquipmentId IS NULL OR v_ControlId IS NULL OR v_SerialNo IS NULL OR v_StartTime IS NULL
   OR v_StationId = 0 OR v_EquipmentId = 0 OR v_ControlId = 0 then
      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

-- SQLWAYS_EVAL# 	
   INSERT INTO TBL_HistoryControl(StationId,
StationName,
EquipmentId,
EquipmentName,
ControlId,
ControlName,
SerialNo,
ControlSeverity,
CmdToken,
ControlPhase,
StartTime,
EndTime,
ConfirmTime,
ConfirmerId,
ConfirmerName,
ControlResultType,
ControlResult,
ControlExecuterId,
ControlExecuterIdName,
ControlType,
ActionId,
Description,
Retry,
BaseTypeId,
BaseTypeName,
ParameterValues,
BaseCondId)
   SELECT StationId,
StationName,
EquipmentId,
EquipmentName,
ControlId,
ControlName,
SerialNo,
ControlSeverity,
CmdToken,
ControlPhase,
StartTime,
EndTime,
ConfirmTime,
ConfirmerId,
ConfirmerName,
ControlResultType,
ControlResult,
ControlExecuterId,
ControlExecuterIdName,
ControlType,
ActionId,
Description,
Retry,
BaseTypeId,
BaseTypeName,
ParameterValues,
BaseCondId
   FROM TBL_ActiveControl
   WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId AND ControlId = v_ControlId
   AND SerialNo = v_SerialNo AND StartTime = v_StartTime;

   SET @SWV_Error = 0;
   DELETE FROM TBL_ActiveControl
   WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId AND ControlId = v_ControlId
   AND SerialNo = v_SerialNo AND StartTime = v_StartTime;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;                                                         

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_SaveSwapCardRecord]...';


DROP PROCEDURE IF EXISTS PBL_SaveSwapCardRecord;
CREATE PROCEDURE PBL_SaveSwapCardRecord(v_StationId   	INT       	,
v_HostId      	INT   	   	,
v_EquipmentId 	INT		    ,
v_SequenceId		INT			,
v_SampleTime		DATETIME    ,
v_DoorId		    INT       	,-- 实际为库中门号DoorNo
v_CardId		    VARCHAR(20) ,-- 实际为库中CardCode
v_Enter			INT       	,
v_SwapFlag		INT,INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN
--  返回结果
-- -1 不可知错误
--  0 成功
--  1 参数为0或空
--  2 配置是否存在
--  3 没有该卡授权且为合法卡
--  4 有该卡授权且为非法卡

   DECLARE v_StartIndex INT;
   DECLARE v_EndIndex INT;
   DECLARE v_CardStationId INT;
   DECLARE v_CardStationName NATIONAL VARCHAR(255);
   DECLARE v_TmpCardId INT;
   DECLARE v_CardName NATIONAL VARCHAR(255);
   DECLARE v_CardUserId INT;
   DECLARE v_CardUserName NATIONAL VARCHAR(255);
   DECLARE v_CardCategory INT;
   DECLARE v_CardCategoryName NATIONAL VARCHAR(255);
   DECLARE v_CardGroup INT;
   DECLARE v_CardGroupName NATIONAL VARCHAR(255);
   DECLARE v_CardStatus INT;
   DECLARE v_CardStatusName NATIONAL VARCHAR(255);
   DECLARE v_TmpDoorId INT;
   DECLARE v_DoorName NATIONAL VARCHAR(255);
   DECLARE v_DoorStationName NATIONAL VARCHAR(255);
   DECLARE v_DoorEquipmentName NATIONAL VARCHAR(255);
   DECLARE v_DoorCategory INT;
   DECLARE v_DoorCategoryName NATIONAL VARCHAR(255);
   DECLARE v_ValidName NATIONAL VARCHAR(255);
   DECLARE v_Total INT;
   DECLARE v_CTotal INT;
   DECLARE v_GetDate DATETIME;
   DECLARE v_Return INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;	

-- 参数检查
   SET @SWV_Error = 0;
   IF v_StationId IS NULL OR v_EquipmentId IS NULL OR v_DoorId IS NULL OR v_CardId IS NULL
   OR v_StationId = 0 OR v_EquipmentId = 0 OR v_DoorId = 0 then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

-- 配置是否存在
   select   COUNT(*) INTO v_Total FROM TBL_Station WHERE StationId = v_StationId;
   IF (v_Total <> 1) then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;
   select   COUNT(*) INTO v_Total FROM TBL_Equipment WHERE EquipmentId = v_EquipmentId AND StationId = v_StationId;
   IF (v_Total <> 1) then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;
   select   COUNT(*) INTO v_Total FROM TBL_Door WHERE EquipmentId = v_EquipmentId AND StationId = v_StationId AND DoorNo = v_DoorId;
   IF (v_Total <> 1) then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;

-- 当前时间
   SET v_GetDate = CURRENT_TIMESTAMP;

-- Door
   select   StationName INTO v_DoorStationName FROM TBL_Station WHERE StationId = v_StationId;

   select   EquipmentName INTO v_DoorEquipmentName FROM TBL_Equipment WHERE EquipmentId = v_EquipmentId AND StationId = v_StationId;

   select   dr.DoorId, dr.DoorName, dr.Category, di.ItemValue INTO v_TmpDoorId,v_DoorName,v_DoorCategory,v_DoorCategoryName FROM TBL_Door dr
   LEFT JOIN TBL_DataItem di ON dr.Category = di.ItemId AND di.EntryId = 73 WHERE dr.EquipmentId = v_EquipmentId AND dr.StationId = v_StationId AND dr.DoorNo = v_DoorId;

-- Card			
   SET v_TmpCardId = 0;
   select   COUNT(*) INTO v_Total FROM TBL_Card WHERE CardCode = v_CardId;
   IF (v_Total = 1) then

      select   cd.CardId, cd.StationId, cd.CardCategory, cd.CardGroup, cg.ItemValue, cc.ItemValue, CardName, ts.StationName, cd.UserId, ac.EmployeeName, cd.CardStatus, cs.ItemValue INTO v_TmpCardId,v_CardStationId,v_CardCategory,v_CardGroup,v_CardGroupName,
      v_CardCategoryName,v_CardName,v_CardStationName,v_CardUserId,v_CardUserName,
      v_CardStatus,v_CardStatusName FROM TBL_Card cd
      LEFT JOIN TBL_DataItem cs ON cd.CardStatus = cs.ItemId AND cs.EntryId = 46
      LEFT JOIN TBL_DataItem cc ON cd.CardCategory = cc.ItemId AND cc.EntryId = 47
      LEFT JOIN TBL_DataItem cg ON cd.CardGroup = cg.ItemId AND cg.EntryId = 75
      LEFT JOIN  TBL_Employee ac ON ac.EmployeeId = cd.UserId
      LEFT JOIN TBL_Station ts ON cd.StationId = ts.StationId WHERE CardCode = v_CardId;
   end if;

-- Valid
   select   fd.ItemValue INTO v_ValidName FROM TBL_DataItem fd WHERE fd.ItemId = v_SwapFlag AND fd.EntryId = 49;

-- 用户号+密码开门
   IF (v_SwapFlag = 11) AND (v_TmpCardId = 0) then

      select   cd.CardId, cd.StationId, cd.CardCategory, cd.CardGroup, cg.ItemValue, cc.ItemValue, CardName, ts.StationName, cd.UserId, ac.EmployeeName, cd.CardStatus, cs.ItemValue INTO v_TmpCardId,v_CardStationId,v_CardCategory,v_CardGroup,v_CardGroupName,
      v_CardCategoryName,v_CardName,v_CardStationName,v_CardUserId,v_CardUserName,
      v_CardStatus,v_CardStatusName FROM TBL_Card cd
      LEFT JOIN TBL_DataItem cs ON cd.CardStatus = cs.ItemId AND cs.EntryId = 46
      LEFT JOIN TBL_DataItem cc ON cd.CardCategory = cc.ItemId AND cc.EntryId = 47
      LEFT JOIN TBL_DataItem cg ON cd.CardGroup = cg.ItemId AND cg.EntryId = 75
      LEFT JOIN  TBL_Employee ac ON ac.EmployeeId = cd.UserId
      LEFT JOIN TBL_Station ts ON cd.StationId = ts.StationId WHERE CardId%10000 = cast(v_CardId as SIGNED INTEGER);
   end if;

-- 保存
   INSERT INTO TBL_SwapCardRecord(StationId				,
StationName				,
EquipmentId				,
EquipmentName			,
CardStationId			,
CardStationName			,
CardId					,
CardCode				,
CardName				,
CardUserId				,
CardUserName			,
CardCategory			,
CardCategoryName		,
CardGroup				,
CardGroupName			,
CardStatus				,
CardStatusName			,
DoorId					,
DoorNo					,
DoorName				,
DoorCategory			,
DoorCategoryName		,
Valid					,
ValidName				,
Enter					,
RecordTime)
values(v_StationId,
v_DoorStationName,
v_EquipmentId,
v_DoorEquipmentName,
v_CardStationId,
v_CardStationName,
v_TmpCardId,
v_CardId,
v_CardName,
v_CardUserId,
v_CardUserName,
v_CardCategory,
v_CardCategoryName,
v_CardGroup,
v_CardGroupName,
v_CardStatus,
v_CardStatusName,
v_TmpDoorId,
v_DoorId,
v_DoorName,
v_DoorCategory,
v_DoorCategoryName,
v_SwapFlag,
v_ValidName,
v_Enter,
v_SampleTime);			

-- 设置返回值

   SET v_Return = 0;

-- 是否有卡授权
   select   COUNT(*) INTO v_CTotal FROM TBL_DoorCard dc WHERE dc.CardId = v_TmpCardId AND dc.DoorId = v_TmpDoorId;
   SET @SWV_Error = 0;
   IF v_SwapFlag = 1 then

-- 合法卡					
      IF (v_CTotal < 1 AND v_Total = 1) then

-- 没有该合法卡的授权
         SET v_Return = 3;
      end if;
   ELSE 
      IF v_SwapFlag = 6 then

-- 非法卡
         IF (v_CTotal > 0 AND v_Total = 1) then

-- 有该非法卡的授权
            SET v_Return = 4;
         end if;
      end if;
   end if;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -2;
      LEAVE SWL_return;
   end if;

   SET SWP_Ret_Value = v_Return;
   LEAVE SWL_return;
   -- NOT SUPPORTED PRINT N'正在创建 [dbo].[PBL_SendDistributeControl]...'
END;









DROP PROCEDURE IF EXISTS PBL_SendDistributeControl;

CREATE PROCEDURE PBL_SendDistributeControl(v_Timeout   			INT,
v_DataServerId		INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_CurrentTime DATETIME;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- SQLWAYS_EVAL# 分发过的控制
-- SQLWAYS_EVAL# 重新拿下发的控制（TimeOut）

--  返回结果
-- -1 不可知错误
--  0 成功

-- 当前时间
   SET v_CurrentTime = CURRENT_TIMESTAMP;	

-- SQLWAYS_EVAL# #ConfigControl
   CREATE TEMPORARY TABLE tt_ConfigControl
   (
      HostId INT,
      StationId INT,
      EquipmentId INT,
      ControlId INT,
      Timeout INT,
      Retry INT
   );
   INSERT INTO tt_ConfigControl(HostId, StationId, EquipmentId,
ControlId, Timeout, Retry)
   SELECT DISTINCT ce.MonitorUnitId AS HostId, ac.StationId, ac.EquipmentId,
ac.ControlId,
(CASE WHEN cc.TimeOut IS NULL THEN v_Timeout
   WHEN cc.TimeOut = 0 THEN v_Timeout
   WHEN cc.TimeOut < v_Timeout THEN v_Timeout
   ELSE cc.TimeOut END) AS Timeout,
(CASE WHEN cc.Retry IS NULL THEN 0
   ELSE cc.Retry END) AS Retry
   FROM TBL_ActiveControl ac
   INNER JOIN TBL_Equipment ce ON ac.StationId = ce.StationId AND ac.EquipmentId = ce.EquipmentId
   INNER JOIN TBL_Control cc ON ce.EquipmentTemplateId = cc.EquipmentTemplateId AND ac.ControlId = cc.ControlId
   INNER JOIN TSL_RealtimeRouting rr ON ce.MonitorUnitId = rr.MonitorUnitId
   WHERE ac.StartTime IS NOT NULL AND ac.EndTime IS NULL AND rr.DataServerId = v_DataServerId;


-- Table
   CREATE TEMPORARY TABLE tt_DistributeControl
   (
      StationId INT,
      HostId INT,
      EquipmentId INT,
      ControlId INT,
      BaseTypeId NUMERIC(10,0),
      UserId INT,
      SerialNo INT,
      ControlType INT,
      Priority INT,
      ParameterValues NATIONAL VARCHAR(500),
      StartTime DATETIME
   );

-- Condition1
   INSERT INTO tt_DistributeControl(StationId, HostId, EquipmentId,
ControlId, BaseTypeId, UserId,
SerialNo, ControlType, Priority,
ParameterValues, StartTime)
   SELECT ac.StationId,cc.HostId AS HostId,ac.EquipmentId,
ac.ControlId,ac.BaseTypeId,ac.ControlExecuterId AS UserId,
ac.SerialNo,ac.ControlType,ac.ControlSeverity AS Priority,
ac.ParameterValues, ac.StartTime
   FROM TBL_ActiveControl ac
   INNER JOIN tt_ConfigControl cc ON ac.StationId = cc.StationId AND ac.EquipmentId = cc.EquipmentId
   AND ac.ControlId = cc.ControlId
   WHERE ac.Retry = 0  AND ac.EndTime IS NULL;

-- Condition2
   INSERT INTO tt_DistributeControl(StationId, HostId, EquipmentId,
ControlId, BaseTypeId, UserId,
SerialNo, ControlType, Priority,
ParameterValues, StartTime)
   SELECT ac.StationId,cc.HostId AS HostId,ac.EquipmentId,
ac.ControlId,ac.BaseTypeId,ac.ControlExecuterId AS UserId,
ac.SerialNo,ac.ControlType,ac.ControlSeverity AS Priority,
ac.ParameterValues, ac.StartTime
   FROM TBL_ActiveControl ac
   INNER JOIN tt_ConfigControl cc ON ac.StationId = cc.StationId AND ac.EquipmentId = cc.EquipmentId
   AND ac.ControlId = cc.ControlId
   WHERE ac.StartTime IS NOT NULL AND cc.Retry > ac.Retry
   AND TIMESTAMPDIFF(SECOND,ac.StartTime,v_CurrentTime) >(cc.Timeout*ac.Retry)
   AND EndTime IS NULL;

-- SQLWAYS_EVAL# Control
   UPDATE TBL_ActiveControl ac
   INNER JOIN tt_DistributeControl dc ON ac.StationId = dc.StationId AND ac.EquipmentId = dc.EquipmentId
   AND ac.ControlId = dc.ControlId AND ac.ControlExecuterId = dc.UserId
   AND ac.SerialNo = dc.SerialNo AND ac.StartTime = dc.StartTime
   SET ac.Retry = Retry+1,ac.ControlPhase = 2;

-- Result
   SELECT DISTINCT * FROM tt_DistributeControl;

-- DROP
   DROP TEMPORARY TABLE IF EXISTS tt_DistributeControl;
   SET @SWV_Error = 0;
   DROP TEMPORARY TABLE IF EXISTS tt_ConfigControl;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;    

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_TruncateTable]...';


DROP PROCEDURE IF EXISTS PBL_TruncateTable;

CREATE PROCEDURE PBL_TruncateTable(v_TableName  NATIONAL VARCHAR(32),INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL# 数据.
*/
	DECLARE SWV_ExecDyn VARCHAR(5000); 
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
/*liangyj
   IF v_TableName IS NULL then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;*/

   IF NOT EXISTS(SELECT 'X' FROM sysobjects WHERE name LIKE v_TableName AND type = 'U') then

      SET SWP_Ret_Value = -2;
      LEAVE SWL_return;
   end if;

   SET SWV_ExecDyn = CONCAT('TRUNCATE TABLE ',v_TableName);
   SET @SWV_Stmt = SWV_ExecDyn;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;

   IF @SWV_Error <> 0 then

      SET SWP_Ret_Value = -3;
      LEAVE SWL_return;
   end if;

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# T_CopyEquipmentTemplate]...';


DROP PROCEDURE IF EXISTS PCT_CopyEquipmentTemplate;
CREATE PROCEDURE PCT_CopyEquipmentTemplate(v_sourceTemplateId 		 INT,
v_destTemplateId 		 INT,
v_newTemplateName NATIONAL VARCHAR(128),
v_parentTemplateId 		 INT,
v_memo NATIONAL VARCHAR(255))
BEGIN

-- SQLWAYS_EVAL# Template
 INSERT INTO TBL_EquipmentTemplate(EquipmentTemplateId,EquipmentTemplateName,ParentTemplateId,
Memo,ProtocolCode,EquipmentCategory,EquipmentType,Property,
Description,EquipmentStyle,Unit,Vendor,EquipmentBaseType,StationCategory)
   SELECT v_destTemplateId,v_newTemplateName,v_parentTemplateId,
v_memo,a.ProtocolCode,a.EquipmentCategory,a.EquipmentType,a.Property,
a.Description,a.EquipmentStyle,a.Unit,a.Vendor,a.EquipmentBaseType,a.StationCategory
   FROM TBL_EquipmentTemplate a WHERE a.EquipmentTemplateId = v_sourceTemplateId;

-- TBL_Signal
   INSERT INTO TBL_Signal(EquipmentTemplateId, SignalId, Enable, Visible, Description, SignalName,
SignalCategory, SignalType, ChannelNo, ChannelType, Expression, DataType,
ShowPrecision, Unit, StoreInterval, AbsValueThreshold, PercentThreshold,
StaticsPeriod, BaseTypeId, ChargeStoreInterVal, ChargeAbsValue, DisplayIndex, ModuleNo)
   SELECT v_destTemplateId, a.SignalId, a.Enable, a.Visible, a.Description, a.SignalName,
a.SignalCategory, a.SignalType, a.ChannelNo, a.ChannelType, a.Expression, a.DataType,
a.ShowPrecision, a.Unit, a.StoreInterval, a.AbsValueThreshold, a.PercentThreshold,
a.StaticsPeriod, a.BaseTypeId, a.ChargeStoreInterVal, a.ChargeAbsValue, a.DisplayIndex,a.ModuleNo
   FROM TBL_Signal a WHERE a.EquipmentTemplateId = v_sourceTemplateId; 

-- SQLWAYS_EVAL# nings
   INSERT INTO TBL_SignalMeanings(EquipmentTemplateId, SignalId, StateValue, Meanings,BaseCondId)
   SELECT v_destTemplateId, a.SignalId, a.StateValue, a.Meanings,a.BaseCondId
   FROM TBL_SignalMeanings a WHERE a.EquipmentTemplateId = v_sourceTemplateId;

-- SQLWAYS_EVAL# perty
   INSERT INTO TBL_SignalProperty(EquipmentTemplateId, SignalId, SignalPropertyId)
   SELECT v_destTemplateId, a.SignalId, a.SignalPropertyId
   FROM TBL_SignalProperty a WHERE a.EquipmentTemplateId = v_sourceTemplateId;

-- TBL_Event
   INSERT INTO TBL_Event(EquipmentTemplateId, EventId, EventName, StartType, EndType, StartExpression,
SuppressExpression, EventCategory, SignalId, Enable, Visible, Description, DisplayIndex, ModuleNo)
   SELECT v_destTemplateId, a.EventId, a.EventName, a.StartType, a.EndType, a.StartExpression,
a.SuppressExpression, a.EventCategory, a.SignalId, a.Enable, a.Visible, a.Description, a.DisplayIndex, a.ModuleNo
   FROM TBL_Event a WHERE a.EquipmentTemplateId = v_sourceTemplateId;

-- SQLWAYS_EVAL# ition
   INSERT INTO TBL_EventCondition(EventConditionId, EquipmentTemplateId, EventId, StartOperation, StartCompareValue,
StartDelay, EndOperation, EndCompareValue, EndDelay, Frequency,
FrequencyThreshold, Meanings, EquipmentState, BaseTypeId, EventSeverity, StandardName)
   SELECT a.EventConditionId, v_destTemplateId, a.EventId, a.StartOperation, a.StartCompareValue,
a.StartDelay, a.EndOperation, a.EndCompareValue, a.EndDelay, a.Frequency,
a.FrequencyThreshold, a.Meanings, a.EquipmentState, a.BaseTypeId, a.EventSeverity, a.StandardName
   FROM TBL_EventCondition a WHERE a.EquipmentTemplateId = v_sourceTemplateId;

-- TBL_Control
   INSERT INTO TBL_Control(EquipmentTemplateId, ControlId, ControlName, ControlCategory, CmdToken,
BaseTypeId, ControlSeverity, SignalId, TimeOut, Retry, Description, Enable, Visible,
DisplayIndex, CommandType, ControlType, DataType, MaxValue, MinValue, DefaultValue, ModuleNo)
   SELECT v_destTemplateId, a.ControlId, a.ControlName, a.ControlCategory, a.CmdToken,
a.BaseTypeId, a.ControlSeverity, a.SignalId, a.TimeOut, a.Retry, a.Description, a.Enable, a.Visible,
a.DisplayIndex, a.CommandType, a.ControlType, a.DataType, a.MaxValue, a.MinValue, a.DefaultValue, a.ModuleNo
   FROM TBL_Control a WHERE a.EquipmentTemplateId = v_sourceTemplateId;

-- SQLWAYS_EVAL# anings
   INSERT INTO TBL_ControlMeanings(EquipmentTemplateId, ControlId, ParameterValue, Meanings,BaseCondId)
   SELECT v_destTemplateId, a.ControlId, a.ParameterValue, a.Meanings,a.BaseCondId
   FROM TBL_ControlMeanings a WHERE a.EquipmentTemplateId = v_sourceTemplateId;
END;

-- SELECT N'SQLWAYS_EVAL# T_DeleteCard]...';






DROP PROCEDURE IF EXISTS PCT_DeleteCard;

CREATE PROCEDURE PCT_DeleteCard(v_CardId INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   START TRANSACTION;
   SET @SWV_Error = 0;
   DELETE FROM TBL_DoorCard WHERE CardId = v_CardId;  
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if;
   SET @SWV_Error = 0;
   DELETE FROM TBL_CardTypeMap WHERE CardId = v_CardId; 
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if;
   SET @SWV_Error = 0;
   DELETE FROM TBL_Card  WHERE CardId = v_CardId;  
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if;

   COMMIT;
   SET SWP_Ret_Value = 0;
   LEAVE SWL_return;

   ROLLBACK;
   SET SWP_Ret_Value = -1;
END;

-- SELECT N'SQLWAYS_EVAL# T_DeleteControl]...';





DROP PROCEDURE IF EXISTS PCT_DeleteControl;

CREATE PROCEDURE PCT_DeleteControl(v_ControlId 		 INT      ,
v_equipmentTemplateId INT)
BEGIN
   DELETE FROM TBL_ControlMeanings WHERE ControlId = v_ControlId AND EquipmentTemplateId = v_equipmentTemplateId;

   DELETE FROM TBL_Control WHERE ControlId = v_ControlId AND EquipmentTemplateId = v_equipmentTemplateId;
END;

-- SELECT N'SQLWAYS_EVAL# T_DeleteEquipment]...';






DROP PROCEDURE IF EXISTS PCT_DeleteEquipment;

CREATE PROCEDURE PCT_DeleteEquipment(v_StationId 		 INT      ,
v_EquipmentId 		 INT)
BEGIN
   DECLARE v_SamplerUnitId INT;
   DECLARE v_PortId INT;
   DECLARE v_Count INT;
   select   SamplerUnitId INTO v_SamplerUnitId FROM TBL_Equipment WHERE EquipmentId = v_EquipmentId AND StationId = v_StationId;

   DELETE FROM 	TBL_EquipmentProjectInfo WHERE  EquipmentId = v_EquipmentId AND StationId = v_StationId;

   DELETE FROM TSL_MonitorUnitSignal WHERE EquipmentId = v_EquipmentId AND StationId = v_StationId;
   DELETE FROM TSL_MonitorUnitEvent WHERE EquipmentId = v_EquipmentId AND StationId = v_StationId;
   DELETE FROM TSL_MonitorUnitControl WHERE EquipmentId = v_EquipmentId AND StationId = v_StationId;

   SELECT PortId INTO v_PortId FROM TSL_SamplerUnit WHERE SamplerUnitId = v_SamplerUnitId;
   SELECT COUNT(*) INTO v_Count FROM TSL_SamplerUnit WHERE PortId = v_PortId;
-- 判断该设备的端口是否是唯一
   IF v_Count = 1 THEN
       DELETE FROM TSL_Port WHERE PortId = v_PortId;
   END IF;

-- 根据门禁设备编号删除TBL_DoorTimeGroup数据
	DELETE FROM TBL_DoorTimeGroup WHERE DoorId IN (SELECT DoorId FROM TBL_Door WHERE EquipmentId = v_EquipmentId);
	 
   DELETE FROM TBL_Door WHERE EquipmentId = v_EquipmentId AND StationId = v_StationId;
-- SQLWAYS_EVAL# 个设备，则删除设备时不同时删掉采集单元
   IF(NOT EXISTS(SELECT 'x' FROM TBL_Equipment WHERE SamplerUnitId = v_SamplerUnitId AND EquipmentId <> v_EquipmentId AND StationId = v_StationId)) then

      DELETE FROM TSL_SamplerUnit WHERE SamplerUnitId = v_SamplerUnitId;
   end if;

   DELETE FROM TBL_Equipment WHERE EquipmentId = v_EquipmentId AND StationId = v_StationId;
   UPDATE TBL_Equipment SET ParentEquipmentId = NULL WHERE ParentEquipmentId = CAST(v_EquipmentId AS CHAR(255)) AND StationId = v_StationId;
END;

DROP PROCEDURE IF EXISTS PCT_DeleteEquipmentTemplate;

CREATE PROCEDURE PCT_DeleteEquipmentTemplate(v_equipmentTemplateId 		 INT)
BEGIN
   DECLARE v_ProtocolCode CHAR(32);
   DECLARE v_SamplerId INT;
   DECLARE v_SamplerRefCounts INT;
   select   ProtocolCode INTO v_ProtocolCode FROM TBL_EquipmentTemplate WHERE EquipmentTemplateId = v_equipmentTemplateId;
   select   SamplerId INTO v_SamplerId FROM TSL_Sampler WHERE ProtocolCode = v_ProtocolCode LIMIT 1;
   select   count(*) INTO v_SamplerRefCounts FROM TBL_EquipmentTemplate WHERE ProtocolCode = v_ProtocolCode;

   DELETE FROM TBL_EquipmentTemplate WHERE EquipmentTemplateId = v_equipmentTemplateId; 

   DELETE FROM TBL_Signal WHERE EquipmentTemplateId = v_equipmentTemplateId; 
   DELETE FROM TBL_SignalProperty WHERE EquipmentTemplateId = v_equipmentTemplateId;
   DELETE FROM TBL_SignalMeanings WHERE EquipmentTemplateId = v_equipmentTemplateId;

   DELETE FROM TBL_Control WHERE EquipmentTemplateId = v_equipmentTemplateId;       
   DELETE FROM TBL_ControlMeanings WHERE EquipmentTemplateId = v_equipmentTemplateId;

   DELETE FROM TBL_Event WHERE EquipmentTemplateId = v_equipmentTemplateId;       
   DELETE FROM TBL_EventCondition WHERE EquipmentTemplateId = v_equipmentTemplateId;

   IF NOT EXISTS(SELECT 'X' FROM TSL_SamplerUnit WHERE SamplerId = v_SamplerId) AND v_SamplerRefCounts = 1 then

      DELETE FROM TSL_Sampler WHERE ProtocolCode = v_ProtocolCode;
   end if;
END;

-- SELECT N'SQLWAYS_EVAL# T_DeleteEvent]...';





DROP PROCEDURE IF EXISTS PCT_DeleteEvent;

CREATE PROCEDURE PCT_DeleteEvent(v_EventId 		 INT      ,
v_equipmentTemplateId INT)
BEGIN
   DELETE FROM TBL_EventCondition WHERE EventId = v_EventId AND EquipmentTemplateId = v_equipmentTemplateId;

   DELETE FROM TBL_Event WHERE EventId = v_EventId AND EquipmentTemplateId = v_equipmentTemplateId;
END;



-- SELECT N'SQLWAYS_EVAL# T_DeleteEventLogAction]...';


DROP PROCEDURE IF EXISTS PCT_DeleteEventLogAction;

CREATE PROCEDURE PCT_DeleteEventLogAction(v_LogActionId 		 INT)
BEGIN
   DELETE FROM TBL_LogInformList WHERE LogActionId = v_LogActionId;

   DELETE FROM TBL_ControlLogAction WHERE LogActionId = v_LogActionId;

   DELETE FROM TBL_EventLogAction WHERE LogActionId = v_LogActionId;
END;


-- SELECT N'SQLWAYS_EVAL# T_DeleteMonitorUnit]...';


DROP PROCEDURE IF EXISTS PCT_DeleteMonitorUnit;

CREATE PROCEDURE PCT_DeleteMonitorUnit(v_MonitorUnitId 		 INT)
BEGIN
   DELETE FROM 	TBL_MonitorUnitProjectInfo WHERE MonitorUnitId = v_MonitorUnitId;
   DELETE FROM 	TBL_EquipmentProjectInfo WHERE MonitorUnitId = v_MonitorUnitId;

   DELETE FROM TBL_Equipment WHERE MonitorUnitId = v_MonitorUnitId;

   DELETE FROM TSL_MonitorUnitSignal WHERE MonitorUnitId = v_MonitorUnitId;
   DELETE FROM TSL_MonitorUnitEvent WHERE MonitorUnitId = v_MonitorUnitId;
   DELETE FROM TSL_MonitorUnitControl WHERE MonitorUnitId = v_MonitorUnitId;

   DELETE FROM TSL_SamplerUnit WHERE MonitorUnitId = v_MonitorUnitId;

   DELETE FROM TSL_Port WHERE MonitorUnitId = v_MonitorUnitId;

   DELETE FROM TSL_MonitorUnit WHERE MonitorUnitId = v_MonitorUnitId;
END;

-- SELECT N'SQLWAYS_EVAL# T_DeletePort]...';


DROP PROCEDURE IF EXISTS PCT_DeletePort;

CREATE PROCEDURE PCT_DeletePort(v_portId 		 INT)
BEGIN
   DELETE FROM TSL_Port WHERE LinkSamplerUnitId IN(SELECT SamplerUnitId FROM TSL_SamplerUnit WHERE PortId = v_portId); 

   DELETE FROM TSL_SamplerUnit WHERE PortId = v_portId;

   DELETE FROM TSL_Port WHERE PortId = v_portId;
END;


-- SELECT N'SQLWAYS_EVAL# T_DeleteSamplerUnit]...';


DROP PROCEDURE IF EXISTS PCT_DeleteSamplerUnit;
CREATE PROCEDURE PCT_DeleteSamplerUnit(v_SamplerUnitId 		 INT)
BEGIN
   DELETE FROM TSL_Port WHERE LinkSamplerUnitId = v_SamplerUnitId;

   DELETE FROM TSL_SamplerUnit WHERE SamplerUnitId = v_SamplerUnitId;
END;


-- SELECT N'SQLWAYS_EVAL# T_DeleteSignal]...';


DROP PROCEDURE IF EXISTS PCT_DeleteSignal;

CREATE PROCEDURE PCT_DeleteSignal(v_SignalId 		 INT      ,
v_equipmentTemplateId INT)
BEGIN
   DELETE FROM TSL_MonitorUnitSignal WHERE SignalId = v_SignalId AND EquipmentId IN(SELECT EquipmentId FROM TBL_Equipment WHERE EquipmentTemplateId = v_equipmentTemplateId);

   DELETE FROM TBL_SignalProperty WHERE SignalId = v_SignalId AND EquipmentTemplateId = v_equipmentTemplateId;

   DELETE FROM TBL_SignalMeanings WHERE SignalId = v_SignalId AND EquipmentTemplateId = v_equipmentTemplateId;

   DELETE FROM TBL_Signal WHERE SignalId = v_SignalId AND EquipmentTemplateId = v_equipmentTemplateId;
END;

-- SELECT N'SQLWAYS_EVAL# T_DeleteStation]...';





DROP PROCEDURE IF EXISTS PCT_DeleteStation;

CREATE PROCEDURE PCT_DeleteStation(v_StationId 		 INT)
BEGIN
   DELETE FROM 	TBL_StationProjectInfo WHERE StationId = v_StationId;
   DELETE FROM 	TBL_MonitorUnitProjectInfo WHERE StationId = v_StationId;
   DELETE FROM 	TBL_EquipmentProjectInfo WHERE StationId = v_StationId;

   DELETE FROM TBL_House WHERE StationId = v_StationId;

   DELETE FROM TSL_MonitorUnitSignal WHERE StationId = v_StationId;
   DELETE FROM TSL_MonitorUnitEvent WHERE StationId = v_StationId;
   DELETE FROM TSL_MonitorUnitControl WHERE StationId = v_StationId;

   DELETE FROM TSL_SamplerUnit WHERE MonitorUnitId IN(SELECT MonitorUnitId FROM TSL_MonitorUnit WHERE StationId = v_StationId);
   DELETE FROM TSL_Port WHERE MonitorUnitId IN(SELECT MonitorUnitId FROM TSL_MonitorUnit WHERE StationId = v_StationId);
   DELETE FROM TSL_MonitorUnit WHERE StationId = v_StationId;

   DELETE FROM TBL_EventMask WHERE StationId = v_StationId;
   DELETE FROM TBL_EquipmentMask WHERE StationId = v_StationId;
   DELETE FROM TBL_StationMask WHERE StationId = v_StationId;

   DELETE FROM TBL_Equipment WHERE StationId = v_StationId;

   DELETE FROM TBL_Station WHERE StationId = v_StationId;

   DELETE FROM TBL_StationStructureMap WHERE StationId = v_StationId;

   DELETE FROM TBL_StationSwatchMap WHERE StationId = v_StationId;

   DELETE FROM TBL_ControlLogAction WHERE LogActionId IN(SELECT LogActionId FROM TBL_EventLogAction WHERE StationId = v_StationId);

   DELETE FROM TBL_EventLogAction WHERE StationId = v_StationId;

   DELETE FROM TBL_DoorTimeGroup WHERE DoorId IN(SELECT DoorId FROM TBL_Door WHERE StationId = v_StationId);

   DELETE FROM TBL_Door WHERE StationId = v_StationId;
END;


-- SELECT N'SQLWAYS_EVAL# T_GenerateBaseDic]...';


DROP PROCEDURE IF EXISTS PCT_GenerateBaseDic;

CREATE PROCEDURE PCT_GenerateBaseDic(v_equipmentTemplateId 		 INT)
BEGIN
-- Signal
   DECLARE v_MaxIndex INT;
   DECLARE v_MinIndex INT; 
   DECLARE v_ModuleNo INT;
   DECLARE v_SourceId NUMERIC(10,0);
   DECLARE v_BaseTypeId NUMERIC(10,0);
   CREATE TEMPORARY TABLE tt_BaseId
   (
      BaseTypeId NUMERIC(10,0) NOT NULL,
      BaseTypeNameExt NATIONAL VARCHAR(128),
      Category NUMERIC(10,0) NOT NULL
   );

   CREATE TEMPORARY TABLE tt_SignalBaseType
   (
      Idx INT NOT NULL  AUTO_INCREMENT PRIMARY KEY,
      BaseTypeId NUMERIC(10,0) NOT NULL
   );

   CREATE TEMPORARY TABLE tt_EventBaseType
   (
      Idx INT NOT NULL  AUTO_INCREMENT PRIMARY KEY,
      BaseTypeId NUMERIC(10,0) NOT NULL
   );

   CREATE TEMPORARY TABLE tt_ControlBaseType
   (
      Idx INT NOT NULL  AUTO_INCREMENT PRIMARY KEY,
      BaseTypeId NUMERIC(10,0) NOT NULL
   );

   INSERT INTO tt_SignalBaseType(BaseTypeId)
   SELECT BaseTypeId
   FROM TBL_Signal2
   WHERE EquipmentTemplateId = v_equipmentTemplateId
   AND IFNULL(BaseTypeId,0) <> 0
   AND BaseTypeId NOT IN(SELECT BaseTypeId FROM TBL_SignalBaseDic);

   select   Max(Idx), Min(Idx) INTO v_MaxIndex,v_MinIndex FROM tt_SignalBaseType;

   WHILE(v_MinIndex <= v_MaxIndex) DO
      select   BaseTypeId INTO v_BaseTypeId FROM tt_SignalBaseType WHERE Idx = v_MinIndex;
-- SQLWAYS_EVAL# =(@BaseTypeId/1000)*1000+1
      SET v_SourceId = cast((v_BaseTypeId/1000) as SIGNED INTEGER)*1000+1;
      SET v_ModuleNo = v_BaseTypeId -floor(v_BaseTypeId/1000)*1000;
      IF EXISTS(SELECT 'X' FROM TBL_SignalBaseDic WHERE BaseTypeId = v_SourceId) then

  INSERT INTO TBL_SignalBaseDic(BaseTypeId,
BaseTypeName,
BaseEquipmentId,
EnglishName,
BaseLogicCategoryId,
StoreInterval,
AbsValueThreshold,
PercentThreshold,
StoreInterval2,
AbsValueThreshold2,
PercentThreshold2,
ExtendField1,
ExtendField2,
ExtendField3,
UnitId,
BaseStatusId,
BaseHysteresis,
BaseFreqPeriod,
BaseFreqCount,
BaseShowPrecision,
BaseStatPeriod,
CGElement,
Description,
BaseNameExt,
IsSystem)
         SELECT
         v_BaseTypeId,
BaseTypeName,
BaseEquipmentId,
EnglishName,
BaseLogicCategoryId,
StoreInterval,
AbsValueThreshold,
PercentThreshold,
StoreInterval2,
AbsValueThreshold2,
PercentThreshold2,
ExtendField1,
ExtendField2,
ExtendField3,
UnitId,
BaseStatusId,
BaseHysteresis,
BaseFreqPeriod,
BaseFreqCount,
BaseShowPrecision,
BaseStatPeriod,
CGElement,
Description,
BaseNameExt,
0 -- IsSystem
         FROM TBL_SignalBaseDic WHERE BaseTypeId = v_SourceId;
         INSERT INTO tt_BaseId(BaseTypeId,BaseTypeNameExt,Category) SELECT v_BaseTypeId,BaseNameExt,1 FROM TBL_SignalBaseDic WHERE BaseTypeId = v_BaseTypeId;
      end if;
      SET v_MinIndex = v_MinIndex+1;
   END WHILE;


-- Event
   INSERT INTO tt_EventBaseType(BaseTypeId)
   SELECT BaseTypeId
   FROM TBL_EventCondition2
   WHERE EquipmentTemplateId = v_equipmentTemplateId
   AND IFNULL(BaseTypeId,0) <> 0
   AND BaseTypeId NOT IN(SELECT BaseTypeId FROM TBL_EventBaseDic);

   select   Max(Idx), Min(Idx) INTO v_MaxIndex,v_MinIndex FROM tt_EventBaseType;

   WHILE(v_MinIndex <= v_MaxIndex) DO
      select   BaseTypeId INTO v_BaseTypeId FROM tt_EventBaseType WHERE Idx = v_MinIndex;
-- SQLWAYS_EVAL# =(@BaseTypeId/1000)*1000+1
      SET v_SourceId = cast((v_BaseTypeId/1000) as SIGNED INTEGER)*1000+1;
      SET v_ModuleNo = v_BaseTypeId -floor(v_BaseTypeId/1000)*1000;
      IF EXISTS(SELECT 'X' FROM TBL_EventBaseDic WHERE BaseTypeId = v_SourceId) then

  INSERT INTO TBL_EventBaseDic(BaseTypeId,
BaseTypeName,
BaseEquipmentId,
EnglishName,
EventSeverityId,
ComparedValue,
BaseLogicCategoryId,
StartDelay,
-- BaseStatusId,
ExtendField1,
ExtendField2,
ExtendField3,
ExtendField4,
ExtendField5,
Description,
BaseNameExt,
IsSystem)
         SELECT
         v_BaseTypeId,
BaseTypeName,
BaseEquipmentId,
EnglishName,
EventSeverityId,
ComparedValue,
BaseLogicCategoryId,
StartDelay,
-- BaseStatusId,
ExtendField1,
ExtendField2,
ExtendField3,
ExtendField4,
ExtendField5,
Description,
BaseNameExt,
0 -- IsSystem
         FROM TBL_EventBaseDic WHERE BaseTypeId = v_SourceId;
         INSERT INTO tt_BaseId(BaseTypeId,BaseTypeNameExt,Category) SELECT v_BaseTypeId,BaseNameExt,2 FROM TBL_EventBaseDic WHERE BaseTypeId = v_BaseTypeId;
      end if;
      SET v_MinIndex = v_MinIndex+1;
   END WHILE;


-- Control
   INSERT INTO tt_ControlBaseType
   SELECT BaseTypeId
   FROM TBL_Control2
   WHERE EquipmentTemplateId = v_equipmentTemplateId
   AND IFNULL(BaseTypeId,0) <> 0
   AND BaseTypeId NOT IN(SELECT BaseTypeId FROM TBL_CommandBaseDic);

   select   Max(Idx), Min(Idx) INTO v_MaxIndex,v_MinIndex FROM tt_ControlBaseType;

   WHILE(v_MinIndex <= v_MaxIndex) DO
      select   BaseTypeId INTO v_BaseTypeId FROM tt_ControlBaseType WHERE Idx = v_MinIndex;
-- SQLWAYS_EVAL# =(@BaseTypeId/1000)*1000+1
      SET v_SourceId = cast((v_BaseTypeId/1000) as SIGNED INTEGER)*1000+1;
      SET v_ModuleNo = v_BaseTypeId -floor(v_BaseTypeId/1000)*1000;
      IF EXISTS(SELECT 'X' FROM TBL_CommandBaseDic WHERE BaseTypeId = v_SourceId) then

  INSERT INTO TBL_CommandBaseDic(BaseTypeId,
BaseTypeName,
BaseEquipmentId,
EnglishName,
BaseLogicCategoryId,
CommandType,
BaseStatusId,
ExtendField1,
ExtendField2,
ExtendField3,
Description,
BaseNameExt,
IsSystem)
         SELECT
         v_BaseTypeId,
BaseTypeName,
BaseEquipmentId,
EnglishName,
BaseLogicCategoryId,
CommandType,
BaseStatusId,
ExtendField1,
ExtendField2,
ExtendField3,
Description,
BaseNameExt,
0 -- IsSystem
         FROM TBL_CommandBaseDic WHERE BaseTypeId = v_SourceId;
         INSERT INTO tt_BaseId(BaseTypeId,BaseTypeNameExt,Category) SELECT v_BaseTypeId,BaseNameExt,3 FROM TBL_CommandBaseDic WHERE BaseTypeId = v_BaseTypeId;
      end if;
      SET v_MinIndex = v_MinIndex+1;
   END WHILE;

   SELECT * FROM tt_BaseId;

   DROP TEMPORARY TABLE IF EXISTS tt_SignalBaseType;
   DROP TEMPORARY TABLE IF EXISTS tt_EventBaseType;
   DROP TEMPORARY TABLE IF EXISTS tt_ControlBaseType;
   DROP TEMPORARY TABLE IF EXISTS tt_BaseId;
END;


-- SELECT N'SQLWAYS_EVAL# T_GetDoorByEquipment]...';


DROP PROCEDURE IF EXISTS PCT_GetDoorByEquipment;

CREATE PROCEDURE PCT_GetDoorByEquipment(
v_StationId     INT,
v_EquipmentId   INT
)
BEGIN
   DECLARE v_MinIndex INT;         
   DECLARE v_MaxIndex INT;         
   DECLARE v_Index INT;         
   DECLARE v_DoorNo INT;         
   DECLARE v_DoorId INT;         
   DECLARE v_SamplerUnitId INT;         
   DECLARE v_DoorControlId INT;         
   DECLARE v_EquipmentName VARCHAR(128);
   DECLARE v_EquipmentNames VARCHAR(128);
   DECLARE SWP_Ret_Value INT;
   DELETE TBL_DoorCard m
   FROM   TBL_DoorCard m      INNER JOIN TBL_DoorTimeGroup d  ON m.DoorId          = d.DoorId
   AND m.TimeGroupId           = d.TimeGroupId
   INNER JOIN TBL_Door          e  ON d.DoorId          = e.DoorId
   AND e.StationId   = v_StationId
   AND e.EquipmentId = v_EquipmentId;
   DELETE TBL_DoorTimeGroup m
   FROM   TBL_DoorTimeGroup m INNER JOIN TBL_Door d  ON m.DoorId          = d.DoorId
   AND d.StationId   = v_StationId
   AND d.EquipmentId = v_EquipmentId;


-- 根据门禁的"最大门号"获得最大值
	 SET v_MinIndex = 1;
   SELECT Expression INTO v_MaxIndex
   FROM   TBL_Signal a,TBL_Equipment b
   WHERE  a.EquipmentTemplateId = b.EquipmentTemplateId
   AND    b.StationId         = v_StationId
   AND    b.EquipmentId       = v_EquipmentId
   AND    a.BaseTypeId = 1001390001;

-- 门禁设备名称和采集单元ID
   select   EquipmentName, SamplerUnitId INTO v_EquipmentName,v_SamplerUnitId FROM   TBL_Equipment WHERE  StationId      = v_StationId
   AND    EquipmentId    = v_EquipmentId;

-- 门禁类型
   select   cast(a.Expression as SIGNED INTEGER) INTO v_DoorControlId FROM   TBL_Signal a,TBL_Equipment b WHERE  a.EquipmentTemplateId = b.EquipmentTemplateId
   AND    b.StationId    = v_StationId
   AND    b.EquipmentId  = v_EquipmentId
   AND    a.BaseTypeId = 1001391001;

	IF v_DoorControlId IS NULL THEN
		SET v_DoorControlId = 0;
	END IF;


   WHILE(v_MinIndex <= v_MaxIndex) DO
-- 门号
      SET v_DoorNo = v_MinIndex;

-- 默认门名称
      SET v_EquipmentNames = CONCAT(v_EquipmentName,'#',CAST(v_DoorNo AS CHAR(30)));
-- DoorId
      CALL PBL_GetSystemUniqueIdentity(v_DoorId,'TBL_Door',0,SWP_Ret_Value);
      INSERT INTO TBL_Door(DoorId          ,
DoorNo          ,
DoorName        ,
StationId   ,
EquipmentId ,
SamplerUnitId  ,
Category    ,
WorkMode    ,
DoorControlId         ,
Password)
VALUES(v_DoorId         ,
v_DoorNo         ,
v_EquipmentNames        ,
v_StationId            ,
v_EquipmentId          ,
v_SamplerUnitId        ,
v_DoorControlId        ,
1                     ,
v_DoorControlId        ,
'000000');

      SET v_MinIndex = v_MinIndex+1;
   END WHILE;
END;

-- SELECT N'SQLWAYS_EVAL# T_InsertAccount]...';





DROP PROCEDURE IF EXISTS PCT_InsertAccount;

CREATE PROCEDURE PCT_InsertAccount(v_UserId INT,
v_RecordUserId	INT,  -- 操作人员Id
v_UserName NATIONAL VARCHAR(128),
v_LogonId  NATIONAL VARCHAR(20),
v_Password NATIONAL VARCHAR(128),
v_Enable BOOLEAN,
v_MaxError INT,
v_Locked BOOLEAN,
v_ValidTime DATETIME,
v_Description NATIONAL VARCHAR(255),
v_IsRemote BOOLEAN,
v_CenterId INT,
v_RoleIdStr	NATIONAL VARCHAR(4000),INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_SubIdStr NATIONAL VARCHAR(4000);
   DECLARE v_RoleId INT;
   DECLARE v_EndIndex INT;
   DECLARE v_CurrentTime DATETIME;
   DECLARE SWV_SubIdStr_Str NATIONAL VARCHAR(4000);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;    

   SET v_CurrentTime = CURRENT_TIMESTAMP;

   IF (v_RoleIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_RoleIdStr))) > 0) then

      CREATE TEMPORARY TABLE tt_UserRoleMap
      (
         UserId INT NOT NULL,
         RoleId INT NOT NULL
      );
      SET v_SubIdStr = v_RoleIdStr;
      SET v_EndIndex = LOCATE(',',v_SubIdStr);
      WHILE(v_EndIndex <> 0) DO
         SET v_RoleId = cast(SUBSTRING(v_SubIdStr,1,v_EndIndex -1) as SIGNED INTEGER);
         IF EXISTS(SELECT 1 FROM TBL_UserRole WHERE RoleId = v_RoleId) then

  INSERT tt_UserRoleMap(UserId, RoleId) VALUES(v_UserId, v_RoleId);
         end if;
         SET SWV_SubIdStr_Str = SUBSTRING(v_SubIdStr,v_EndIndex+1,LENGTH(v_SubIdStr) -v_EndIndex);
         SET v_SubIdStr = SWV_SubIdStr_Str;
         SET v_EndIndex = LOCATE(',',v_SubIdStr);
      END WHILE;
      SET v_RoleId = cast(SUBSTRING(v_SubIdStr,1,LENGTH(v_SubIdStr)) as SIGNED INTEGER);
      IF EXISTS(SELECT 1 FROM TBL_UserRole WHERE RoleId = v_RoleId) then

  INSERT tt_UserRoleMap(UserId, RoleId) VALUES(v_UserId, v_RoleId);
      end if;
   end if;


   START TRANSACTION;

-- SQLWAYS_EVAL# irst
   SET @SWV_Error = 0;
   INSERT INTO TBL_Account(UserId,UserName, LogonId,Password,Enable,MaxError,Locked,ValidTime,Description,IsRemote,CenterId)
VALUES(v_UserId,v_UserName,v_LogonId,v_Password,v_Enable,v_MaxError,v_Locked,v_ValidTime,v_Description,v_IsRemote,v_CenterId);


   IF @SWV_Error <> 0 then

      ROLLBACK;
      IF (v_RoleIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_RoleIdStr))) > 0) then
         DROP TEMPORARY TABLE IF EXISTS tt_UserRoleMap;
      end if;
      SET SWP_Ret_Value = -2;
   end if;


   IF (v_RoleIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_RoleIdStr))) > 0) then

      SET @SWV_Error = 0;
      INSERT TBL_UserRoleMap(UserId, RoleId)
      SELECT UserId, RoleId FROM tt_UserRoleMap;
      IF @SWV_Error <> 0 then

         ROLLBACK;
         IF (v_RoleIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_RoleIdStr))) > 0) then
            DROP TEMPORARY TABLE IF EXISTS tt_UserRoleMap;
         end if;
         SET SWP_Ret_Value = -2;
      end if;
   end if;

   COMMIT;

   INSERT TBL_OperationDetail(UserId, ObjectId, ObjectType, PropertyName, OperationTime, OperationType, OldValue, NewValue)
VALUES(v_RecordUserId, CAST(v_UserId AS CHAR(40)), 30, '人员',  v_CurrentTime, '新增', '', v_UserName);


   IF (v_RoleIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_RoleIdStr))) > 0) then

  INSERT TBL_OperationDetail(UserId, ObjectId,
ObjectType, PropertyName, OperationTime, OperationType, OldValue, NewValue)
      SELECT v_RecordUserId, CONCAT(CAST(A.UserId AS CHAR(40)),'.',CAST(A.RoleId AS CHAR(40))),
30, '人员与角色关联', v_CurrentTime, '新增', '',
CASE WHEN B.RoleName IS NULL THEN CAST(A.RoleId AS CHAR(40)) ELSE B.RoleName END
      FROM tt_UserRoleMap A
      LEFT JOIN TBL_UserRole B ON A.RoleId = B.RoleId;
      DROP TEMPORARY TABLE IF EXISTS tt_UserRoleMap;
   end if;

   SET SWP_Ret_Value = 1;
   LEAVE SWL_return;


   ROLLBACK;

   IF (v_RoleIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_RoleIdStr))) > 0) then
      DROP TEMPORARY TABLE IF EXISTS tt_UserRoleMap;
   end if;

   SET SWP_Ret_Value = -2;
END;

-- SELECT N'SQLWAYS_EVAL# T_InsertCard]...';




DROP PROCEDURE IF EXISTS PCT_InsertCard;

CREATE PROCEDURE PCT_InsertCard(v_CardId INT   ,
v_cardcode NATIONAL VARCHAR(20)  ,
v_CardName  NATIONAL VARCHAR(128)   ,
v_cardtype INT  ,
v_CardCategory INT  ,
v_CardGroup INT   ,
v_UserId INT  ,
v_StationId INT,
v_CardStatus INT,
v_StartTime	DATETIME,
v_EndTime	DATETIME,
v_registertime	DATETIME,
v_unregistertime	DATETIME,
v_losttime	DATETIME,
v_Description NATIONAL VARCHAR(255))
BEGIN

   IF v_cardtype is null then
      set v_cardtype = 1;
   END IF;
   INSERT INTO TBL_Card(CardId,
CardCode,
CardName,
CardCategory,
CardGroup,
UserId,
StationId,
CardStatus,
StartTime,
EndTime,
RegisterTime,
UnRegisterTime,
LostTime,
Description)
VALUES(v_CardId,
v_cardcode,
v_CardName,
v_CardCategory,
v_CardGroup,
v_UserId,
v_StationId,
v_CardStatus,
v_StartTime,
v_EndTime,
v_registertime,
v_unregistertime,
v_losttime,
v_Description);


   INSERT INTO TBL_CardTypeMap(CardId,
CardType)
VALUES(v_CardId,
v_cardtype);

END;


-- SELECT N'SQLWAYS_EVAL# T_InsertDoorTimeGroup]...';


DROP PROCEDURE IF EXISTS PCT_InsertDoorTimeGroup;
CREATE PROCEDURE PCT_InsertDoorTimeGroup(v_DoorId       INT  ,
v_TimeGroupId    INT,INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN
   DECLARE v_DeviceId INT;
   DECLARE v_TimeGroupType INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   IF EXISTS(SELECT 1 FROM TBL_DoorTimeGroup WHERE DoorId = v_DoorId AND TimeGroupId = v_TimeGroupId) then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

   START TRANSACTION;
   DROP TEMPORARY TABLE IF EXISTS tt_DoorIds;
   Create TEMPORARY Table tt_DoorIds
   (
      DoorId INT
   );
   INSERT INTO tt_DoorIds values(v_DoorId);

   select   EquipmentId INTO v_DeviceId FROM TBL_Door WHERE DoorId = v_DoorId; 
   INSERT INTO tt_DoorIds SELECT A.DoorId FROM TBL_Door A, TSL_IPDevice B WHERE A.EquipmentId = B.DeviceId and B.IpAddress in(SELECT IpAddress FROM TSL_IPDevice WHERE DeviceId = v_DeviceId); 

   select   TimeGroupType INTO v_TimeGroupType FROM TBL_DoorTimeGroup WHERE DoorId IN(SELECT DoorId FROM tt_DoorIds) AND TimeGroupId = v_TimeGroupId;
   IF v_TimeGroupType IS NOT NULL then

      SET @SWV_Error = 0;
      INSERT INTO TBL_DoorTimeGroup SELECT v_DoorId, v_TimeGroupId, v_TimeGroupType;
      If @SWV_Error <> 0 then 
         ROLLBACK;
         SET SWP_Ret_Value = -1;
      end if;
   ELSE 
      IF NOT EXISTS(SELECT 1 FROM TBL_DoorTimeGroup WHERE DoorId in(SELECT DoorId from tt_DoorIds)  AND TimeGroupType = 10) then

         SET @SWV_Error = 0;
         INSERT INTO TBL_DoorTimeGroup VALUES(v_DoorId,v_TimeGroupId,10);

         IF @SWV_Error <> 0 then 
            ROLLBACK;
            SET SWP_Ret_Value = -1;
         end if;
      ELSE 
         IF NOT EXISTS(SELECT 1 FROM TBL_DoorTimeGroup WHERE DoorId in(SELECT DoorId from tt_DoorIds)  AND TimeGroupType = 11) then

            SET @SWV_Error = 0;
            INSERT INTO TBL_DoorTimeGroup VALUES(v_DoorId,v_TimeGroupId,11);

            IF @SWV_Error <> 0 then 
               ROLLBACK;
               SET SWP_Ret_Value = -1;
            end if;
         ELSE 
            IF NOT EXISTS(SELECT 1 FROM TBL_DoorTimeGroup WHERE DoorId in(SELECT DoorId from tt_DoorIds)  AND TimeGroupType = 12) then

               SET @SWV_Error = 0;
               INSERT INTO TBL_DoorTimeGroup VALUES(v_DoorId,v_TimeGroupId,12);

               IF @SWV_Error <> 0 then 
                  ROLLBACK;
                  SET SWP_Ret_Value = -1;
               end if;
            ELSE 
               IF NOT EXISTS(SELECT 1 FROM TBL_DoorTimeGroup WHERE DoorId in(SELECT DoorId from tt_DoorIds)  AND TimeGroupType = 13) then

                  SET @SWV_Error = 0;
                  INSERT INTO TBL_DoorTimeGroup VALUES(v_DoorId,v_TimeGroupId,13);

                  IF @SWV_Error <> 0 then 
                     ROLLBACK;
                     SET SWP_Ret_Value = -1;
                  end if;
               end if;
            end if;
         end if;
      end if;
   end if;
   COMMIT;

   SET SWP_Ret_Value = 0;
   LEAVE SWL_return;

   ROLLBACK;
   SET SWP_Ret_Value = -1;
END;


-- SELECT N'SQLWAYS_EVAL# T_ModifyCardLost]...';


DROP PROCEDURE IF EXISTS PCT_ModifyCardLost;

CREATE PROCEDURE PCT_ModifyCardLost(v_CardId 	INT,INOUT SWP_Ret_Value INT)

   SWL_return:
BEGIN
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   START TRANSACTION;

   SET @SWV_Error = 0;
   UPDATE TBL_Card SET CardStatus = 2 WHERE CardId = v_CardId;  
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if; 

   SET @SWV_Error = 0;
   DELETE FROM TBL_DoorCardLost WHERE CardId = v_CardId; 
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if; 

   SET @SWV_Error = 0;
   INSERT INTO TBL_DoorCardLost SELECT CardId,TimeGroupId,DoorId,StartTime,EndTime,Password
   FROM TBL_DoorCard WHERE CardId = v_CardId;
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if; 

   SET @SWV_Error = 0;
   DELETE FROM TBL_DoorCard WHERE CardId = v_CardId; 
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if; 

   COMMIT;  

   SET SWP_Ret_Value = 0;
   LEAVE SWL_return;

   ROLLBACK;
   SET SWP_Ret_Value = -1;
END;

-- SELECT N'SQLWAYS_EVAL# T_ModifyCardUsr]...';





DROP PROCEDURE IF EXISTS PCT_ModifyCardUsr;

CREATE PROCEDURE PCT_ModifyCardUsr(v_CardId 	INT)
BEGIN
   UPDATE TBL_Card SET CardStatus = 1 WHERE CardId = v_CardId;

   SELECT d.StationId, d.EquipmentId, d.Password, tc.CardId, tc.CardCode,
dt.TimeGroupType, dc.EndTime, dc.Password AS DoorCardPassword
   FROM TBL_DoorCardLost dc
   INNER JOIN TBL_Card tc ON dc.CardId = tc.CardId
   INNER JOIN TBL_DoorTimeGroup dt ON dt.DoorId = dc.DoorId AND dt.TimeGroupId = dc.TimeGroupId
   INNER JOIN TBL_Door d ON dt.DoorId = d.DoorId
   WHERE tc.CardId = v_CardId;

   DELETE FROM TBL_DoorCardLost WHERE CardId = v_CardId;
END;

-- SELECT N'SQLWAYS_EVAL# T_ReAssignEquipmentTemplate]...';





DROP PROCEDURE IF EXISTS PCT_ReAssignEquipmentTemplate;

CREATE PROCEDURE PCT_ReAssignEquipmentTemplate(v_EquipmentId 		 INT,
v_equipmentTemplateId 		 INT)
BEGIN
   DECLARE v_SamplerId_old INT;
   DECLARE v_SamplerId_new INT;
   DECLARE v_EquipmentTemplateId_old INT;
   DECLARE v_SamplerUnitId INT;
   DECLARE v_DllPath_old NATIONAL VARCHAR(128);
   DECLARE v_DllPath_prefix_old NATIONAL VARCHAR(128);
   DECLARE v_DllPath_new NATIONAL VARCHAR(128);
   DECLARE v_DllPath_prefix_new NATIONAL VARCHAR(128);
   select   EquipmentTemplateId INTO v_EquipmentTemplateId_old FROM TBL_Equipment WHERE EquipmentId = v_EquipmentId;

   select   SamplerId INTO v_SamplerId_old FROM TSL_Sampler WHERE ProtocolCode IN(SELECT ProtocolCode FROM TBL_EquipmentTemplate WHERE EquipmentTemplateId = v_EquipmentTemplateId_old);

   select   SamplerId, DllPath INTO v_SamplerId_new,v_DllPath_new FROM TSL_Sampler WHERE ProtocolCode IN(SELECT ProtocolCode FROM TBL_EquipmentTemplate WHERE EquipmentTemplateId = v_equipmentTemplateId);

   select   SamplerUnitId INTO v_SamplerUnitId FROM TBL_Equipment WHERE EquipmentId = v_EquipmentId;

   select   DllPath INTO v_DllPath_old FROM TSL_SamplerUnit WHERE SamplerUnitId = v_SamplerUnitId;
   SET v_DllPath_prefix_old = SUBSTRING(v_DllPath_old,1,LOCATE('.',v_DllPath_old) -1);

   SET v_DllPath_prefix_new = SUBSTRING(v_DllPath_new,1,LOCATE('.',v_DllPath_new) -1);

   UPDATE TSL_SamplerUnit SET SamplerId = v_SamplerId_new,DllPath = replace(DllPath,v_DllPath_prefix_old,v_DllPath_prefix_new) WHERE SamplerUnitId = v_SamplerUnitId;

   UPDATE TBL_Equipment SET EquipmentTemplateId = v_equipmentTemplateId WHERE EquipmentId = v_EquipmentId;
END;


-- SELECT N'SQLWAYS_EVAL# T_SaveDoorControl]...';


DROP PROCEDURE IF EXISTS PCT_SaveDoorControl;


CREATE PROCEDURE PCT_SaveDoorControl(v_StationId       INT,
v_EquipmentId     INT,
v_CommandCategory INT,
v_CmdToken        VARCHAR(255))
SWL_return:
BEGIN
   DECLARE v_CmdPara1 VARCHAR(50);
   DECLARE v_CmdPara2 VARCHAR(50);
   DECLARE v_CmdPara3 VARCHAR(50);
   DECLARE v_CmdPara4 VARCHAR(50);
   DECLARE v_cardcode VARCHAR(35);
   DECLARE v_CardNo VARCHAR(8);
   DECLARE v_iTemp INT;
   DECLARE v_TempParams VARCHAR(80);
   DECLARE v_DoorId INT;        
   DECLARE v_TimeGroupId INT;        
   DECLARE v_TimeSpanId INT;        
   DECLARE v_CardId INT;
   DECLARE SWV_CmdToken_Str VARCHAR(255);
   DECLARE SWV_TempParams_Str VARCHAR(80);
   DECLARE v_Week INT; -- [1-7]
   DECLARE v_StartTime1 VARCHAR(5);            
   DECLARE v_EndTime1 VARCHAR(5);
   DECLARE v_StartTime2 VARCHAR(5);            
   DECLARE v_EndTime2 VARCHAR(5);
   DECLARE v_StartTime3 VARCHAR(5);            
   DECLARE v_EndTime3 VARCHAR(5);
   DECLARE v_GroupChar VARCHAR(168);          
   DECLARE v_GroupCharDay VARCHAR(168);

-- Sample
-- SQLWAYS_EVAL# 3},{4},{5},{6}
-- SQLWAYS_EVAL# + CardCode,(TimeGroupNo - 10),CardPwd,DoorCardValidTime
   SET v_CmdToken = CONCAT('[',v_CmdToken,']');


-- 去掉前2个参数
   SET v_iTemp = LOCATE(',',v_CmdToken);
   SET SWV_CmdToken_Str = SUBSTRING(v_CmdToken,v_iTemp+1,255);
   SET v_CmdToken = SWV_CmdToken_Str;
   SET v_iTemp = LOCATE(',',v_CmdToken);
   SET SWV_CmdToken_Str = SUBSTRING(v_CmdToken,v_iTemp+1,255);
   SET v_CmdToken = SWV_CmdToken_Str;
   SET SWV_CmdToken_Str = SUBSTRING(v_CmdToken,1,LENGTH(v_CmdToken) -1);
   SET v_CmdToken = SWV_CmdToken_Str;

-- 初始化变量
   SET v_CmdPara1 = '';
   SET v_CmdPara2 = '';
   SET v_CmdPara3 = '';
   SET v_CmdPara4 = '';
   SET v_cardcode = '';
   SET v_CardNo = '';

   SET v_TempParams = v_CmdToken;

-- 析解参数 分隔符为','
   SET v_iTemp = LOCATE(',',v_TempParams);

   IF v_iTemp > 0 then -- 1

      SET v_CmdPara1 = SUBSTRING(v_TempParams,1,v_iTemp -1);     -- First
      SET SWV_TempParams_Str = SUBSTRING(v_TempParams,v_iTemp+1,255);
      SET v_TempParams = SWV_TempParams_Str; -- SQLWAYS_EVAL# rest
      SET v_iTemp = LOCATE(',',v_TempParams);
      IF v_iTemp > 0 then -- 2

         SET v_CmdPara2 = SUBSTRING(v_TempParams,1,v_iTemp -1);
         SET SWV_TempParams_Str = SUBSTRING(v_TempParams,v_iTemp+1,255);
         SET v_TempParams = SWV_TempParams_Str;
         SET v_iTemp = LOCATE(',',v_TempParams);
         IF v_iTemp > 0 then -- 3

            SET v_CmdPara3 = SUBSTRING(v_TempParams,1,v_iTemp -1);
            SET SWV_TempParams_Str = SUBSTRING(v_TempParams,v_iTemp+1,255);
            SET v_TempParams = SWV_TempParams_Str;
            SET v_iTemp = LOCATE(',',v_TempParams);
            IF v_iTemp > 0 then -- 4
               SET v_CmdPara4 = SUBSTRING(v_TempParams,1,v_iTemp -1);
            ELSE
               SET v_CmdPara4 = v_TempParams;
            end if;
         ELSE
            SET v_CmdPara3 = v_TempParams;
         end if;
      ELSE
         SET v_CmdPara2 = v_TempParams;
      end if; -- IF
   ELSE
      SET v_CmdPara1 = v_TempParams;
   end if;
-- END IF

   select   DoorId INTO v_DoorId FROM TBL_Door WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId;

-- 析解参数 分隔符为'+'
   SET v_iTemp = LOCATE('+',v_CmdPara1);
   IF v_iTemp > 0 then

      SET v_CardNo = SUBSTRING(v_CmdPara1,1,v_iTemp -1);
      SET v_cardcode = SUBSTRING(v_CmdPara1,v_iTemp+1,255);
   ELSE
      SET v_cardcode = v_CmdPara1;
   end if;
-- END IF


-- 参数正确性应在程序中保证
   IF v_CommandCategory = 20 then  -- 开门超时时间

      Update TBL_Door Set OpenDelay = cast(v_CmdPara2 as SIGNED INTEGER)
      WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId; -- SQLWAYS_EVAL# n=30
   ELSE 
      IF v_CommandCategory = 21 then -- 门工作方式

         Update TBL_Door SET WorkMode = cast(v_CmdPara2 as SIGNED INTEGER)
         WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId; -- IF
      ELSE 
         IF v_CommandCategory = 12 then -- 增加门禁卡及权限

            select   CardId INTO v_CardId FROM TBL_Card WHERE CardCode = v_cardcode;
            select   tg.TimeGroupId INTO v_TimeGroupId FROM TBL_TimeGroup tg
            INNER JOIN TBL_DoorTimeGroup mdt ON tg.TimeGroupId = mdt.TimeGroupId
            AND mdt.DoorId = v_DoorId AND mdt.TimeGroupType = 10+cast(v_CmdPara2 as SIGNED INTEGER);
            IF v_CardId IS NOT NULL AND v_TimeGroupId IS NOT NULL AND v_DoorId IS NOT NULL then 
-- SQLWAYS_EVAL# 'X' FROM TBL_DoorCard where DoorId=@DoorId and CardId = @CardId and TimeGroupId=@TimeGroupId)

               DELETE FROM TBL_DoorCard WHERE DoorId = v_DoorId AND CardId = v_CardId;  -- 删除在该门其他时间组上授权
               INSERT INTO TBL_DoorCard(DoorId,CardId,TimeGroupId,StartTime, EndTime,Password) VALUES(v_DoorId, v_CardId, v_TimeGroupId,CURRENT_TIMESTAMP, v_CmdPara4, v_CmdPara3);
            end if; -- IF
         ELSE 
            IF v_CommandCategory = 13 then -- 删除门禁卡及权限

               select   CardId INTO v_CardId FROM TBL_Card WHERE CardCode = v_cardcode;
/*SQLWAYS_EVAL# =  tg.TimeGroupId FROM TBL_TimeGroup tg 
INNER JOIN TBL_DoorTimeGroup mdt ON tg.TimeGroupId = mdt.TimeGroupId AND mdt.DoorId = @DoorId */
               DELETE FROM TBL_DoorCard WHERE DoorId = v_DoorId AND CardId = v_CardId;
            ELSE 
               IF v_CommandCategory = 14 then -- 修改门禁卡权限

                  select   CardId INTO v_CardId FROM TBL_Card WHERE CardCode = v_cardcode;
                  select   tg.TimeGroupId INTO v_TimeGroupId FROM TBL_TimeGroup tg
                  INNER JOIN TBL_DoorTimeGroup mdt ON tg.TimeGroupId = mdt.TimeGroupId AND mdt.DoorId = v_DoorId;
                  UPDATE   TBL_DoorCard
                  SET      Password = v_CmdPara3,EndTime = v_CmdPara4
                  WHERE DoorId = v_DoorId AND CardId = v_CardId;
-- SQLWAYS_EVAL# 22333444555666777888999AAABBB7
               ELSE 
                  IF v_CommandCategory = 15 then  -- 设置门禁时间组


                     select   tg.TimeGroupId INTO v_TimeGroupId FROM TBL_TimeGroup tg
                     INNER JOIN TBL_DoorTimeGroup mdt ON tg.TimeGroupId = mdt.TimeGroupId AND mdt.DoorId = v_DoorId; 

-- 星期
                     SET v_Week = cast(Right(v_CmdPara3,1) as SIGNED INTEGER); -- IF CmdToken=42
                  ELSE 
                     IF v_CommandCategory = 17 then  -- 删除505A门禁所有授权卡

                        DELETE FROM TBL_DoorCard WHERE DoorId = v_DoorId; -- SQLWAYS_EVAL# n=45

                     ELSE 
                        IF v_CommandCategory = 16 then -- 修改验证控制密码

                           UPDATE TBL_Door  SET Password = v_CmdPara2
                           WHERE  DoorId = v_DoorId;
                           UPDATE TBL_Door SET Password = v_CmdPara2 WHERE EquipmentId IN(SELECT DeviceId FROM TSL_IPDevice WHERE IpAddress IN(SELECT IpAddress FROM TSL_IPDevice WHERE DeviceId = v_EquipmentId));
                        end if;
                     end if;
                  end if;
               end if;
            end if;
         end if;
      end if;
   end if; -- IF

   LEAVE SWL_return;
END;



-- SELECT N'SQLWAYS_EVAL# T_SelectCardAuthInfo]...';

-- 获取卡的授权信息

DROP PROCEDURE IF EXISTS PCT_SelectCardAuthInfo;


CREATE PROCEDURE  PCT_SelectCardAuthInfo(v_CardId      INT,
v_ControlCategory			INT)
BEGIN

   SELECT d.StationId,d.EquipmentId,d.Password,cc.CardId,cc.CardCode,contr.ControlId
   FROM TBL_DoorCard c
   LEFT JOIN TBL_Door d ON c.DoorId = d.DoorId
   LEFT JOIN TBL_Equipment b ON d.EquipmentId = b.EquipmentId
   LEFT JOIN TBL_Control contr ON b.EquipmentTemplateId = contr.EquipmentTemplateId
   LEFT JOIN TBL_Card cc ON c.CardId = cc.CardId
   WHERE c.CardId = v_CardId and contr.ControlCategory = v_ControlCategory;

END;



-- SELECT N'SQLWAYS_EVAL# T_SelectDoorControl]...';


DROP PROCEDURE IF EXISTS PCT_SelectDoorControl;

CREATE PROCEDURE PCT_SelectDoorControl(v_StationName	NATIONAL VARCHAR(255),
v_StartTime		DATETIME,
v_EndTime		DATETIME,
v_ControlResultType	INT,
v_ControlCategory		INT,INOUT SWP_Ret_Value INT)
BEGIN
   SELECT * FROM(SELECT c.StationId, c.StationName, c.EquipmentId, c.EquipmentName, c.ControlId, c.ControlName,
c.SerialNo, c.CmdToken, c.StartTime, c.EndTime, c.ConfirmTime, c.ConfirmerId, c.ControlPhase,
c.ControlResultType, c.ControlResult, c.ControlExecuterId, c.ControlType, c.Retry, c.ParameterValues,
e.EmployeeId, e.EmployeeName ,d.ItemValue AS ControlPhaseName
      FROM TBL_ActiveControl c INNER JOIN TBL_Employee e
      ON c.ControlExecuterId = e.EmployeeId
      INNER JOIN TBL_DataItem d ON c.ControlPhase = d.ItemId AND d.EntryId = 29
      INNER JOIN TBL_Equipment eq ON eq.StationId = c.StationId AND eq.EquipmentId = c.EquipmentId AND eq.EquipmentCategory = 82
      INNER JOIN TBL_Control tc ON c.ControlId = tc.ControlId AND tc.EquipmentTemplateId = eq.EquipmentTemplateId
      WHERE c.StationName LIKE CONCAT('%',v_StationName,'%') AND c.StartTime > v_StartTime AND c.StartTime < v_EndTime
      and c.ControlResultType =  CASE WHEN v_ControlResultType = -1 THEN c.ControlResultType ELSE v_ControlResultType END
      and tc.ControlCategory =  CASE WHEN v_ControlCategory = -1 THEN tc.ControlCategory ELSE v_ControlCategory END
      UNION
      SELECT c.StationId, c.StationName, c.EquipmentId, c.EquipmentName, c.ControlId, c.ControlName,
c.SerialNo, c.CmdToken, c.StartTime, c.EndTime, c.ConfirmTime, c.ConfirmerId, c.ControlPhase,
c.ControlResultType, c.ControlResult, c.ControlExecuterId, c.ControlType, c.Retry, c.ParameterValues,
c.ControlExecuterId AS EmployeeId, c.ControlExecuterIdName AS EmployeeName ,d.ItemValue AS ControlPhaseName
      FROM TBL_HistoryControl c 
-- SQLWAYS_EVAL# e  ON c.ControlExecuterId = e.EmployeeId 
      INNER JOIN TBL_DataItem d ON c.ControlPhase = d.ItemId AND d.EntryId = 29
      INNER JOIN TBL_Equipment eq ON eq.StationId = c.StationId AND eq.EquipmentId = c.EquipmentId AND eq.EquipmentCategory = 82
      INNER JOIN TBL_Control tc ON c.ControlId = tc.ControlId AND tc.EquipmentTemplateId = eq.EquipmentTemplateId
      WHERE c.StationName LIKE CONCAT('%',v_StationName,'%') AND c.StartTime > v_StartTime AND c.StartTime < v_EndTime
      and c.ControlResultType =  CASE WHEN v_ControlResultType = -1 THEN c.ControlResultType ELSE v_ControlResultType END
      and tc.ControlCategory =  CASE WHEN v_ControlCategory = -1 THEN tc.ControlCategory ELSE v_ControlCategory END) a ORDER BY a.StartTime DESC;

   SET SWP_Ret_Value = 0;
END;



-- SELECT N'SQLWAYS_EVAL# T_SelectDoorControlId]...';






DROP PROCEDURE IF EXISTS PCT_SelectDoorControlId;

CREATE PROCEDURE PCT_SelectDoorControlId(v_StationId      INT,
v_EquipmentId      INT,
v_ControlCategory			INT)
BEGIN
   SELECT ControlId FROM TBL_Control WHERE EquipmentTemplateId =(SELECT EquipmentTemplateId FROM TBL_Equipment WHERE StationId = v_StationId and EquipmentId = v_EquipmentId)
   AND ControlCategory = v_ControlCategory;
END;

-- SELECT N'SQLWAYS_EVAL# T_UpdateCard]...';


DROP PROCEDURE IF EXISTS PCT_UpdateCard;

CREATE PROCEDURE PCT_UpdateCard(v_CardId INT   ,
v_CardName  NATIONAL VARCHAR(128)   ,
v_CardCategory INT  ,
v_CardGroup INT   ,
v_UserId INT  ,
v_StationId INT  ,
v_CardStatus INT,
v_EndTime	DATETIME,
v_losttime	DATETIME,
v_unregistertime	DATETIME,
v_Description NATIONAL VARCHAR(255))
BEGIN
   UPDATE TBL_Card
   SET
   CardName = v_CardName,CardCategory = v_CardCategory,CardGroup = v_CardGroup,
   UserId = v_UserId,StationId = v_StationId,CardStatus = v_CardStatus,
   EndTime = v_EndTime,LostTime = v_losttime,Description = v_Description,
   UnRegisterTime = v_unregistertime
   WHERE CardId = v_CardId;
END;

-- SELECT N'SQLWAYS_EVAL# T_UpdateDoorNoCommandInfo]...';



-- SQLWAYS_EVAL# 的数据：门名称，门地址


DROP PROCEDURE IF EXISTS PCT_UpdateDoorNoCommandInfo;

CREATE PROCEDURE PCT_UpdateDoorNoCommandInfo(v_DoorId INT   ,
v_Infrared	INT,
v_DoorName NATIONAL VARCHAR(128)  ,
v_Address  NATIONAL VARCHAR(255))
BEGIN
   UPDATE TBL_Door
   SET
   Infrared = v_Infrared,DoorName = v_DoorName,Address = v_Address
   WHERE DoorId = v_DoorId;
END;

-- SELECT N'SQLWAYS_EVAL# T_UpdateMenusMap]...';



/*SQLWAYS_EVAL# 
PCT_UpdateMenusMap
Function: 
更改操作权限映射表PCT_UpdateMenusMap
说明：
如果GroupId不在PCT_UpdateMenusMap中不存在，则不添加映射
Parameter:
@MenusId INT,  --MenusId
@AddItemIdStr NVARCHAR(4000), --添加的操作Id，用','分隔
@DeleteItemIdStr NVARCHAR(4000)  --删除的操作Id，用','分隔

Return: INT
0:执行成功
-1：分组Id不存在
-2: 删除Id失败
-------------------------------------------------------------*/  



DROP PROCEDURE IF EXISTS PCT_UpdateMenusMap;

CREATE PROCEDURE PCT_UpdateMenusMap(v_MenusId INT,
v_AddItemIdStr NATIONAL VARCHAR(4000),
v_DeleteItemIdStr NATIONAL VARCHAR(4000),INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN

   DECLARE v_SQL NATIONAL VARCHAR(4000);
   DECLARE v_SubIdStr NATIONAL VARCHAR(4000);
   DECLARE v_MenuItemsId INT;
   DECLARE v_EndIndex INT;
   DECLARE SWV_SubIdStr_Str NATIONAL VARCHAR(4000);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;  

   SET @SWV_Error = 0;
   IF NOT EXISTS(SELECT 1 FROM TBL_Menus WHERE MenusId = v_MenusId) then
-- SQLWAYS_EVAL# 返回
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;



   IF (v_AddItemIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddItemIdStr))) > 0) then


-- 使用临时表，减少事务执行时间
      CREATE TEMPORARY TABLE tt_MenusMap
      (
         MenusId INT NOT NULL,
         MenuItemsId INT NOT NULL
      );
      SET v_SubIdStr = v_AddItemIdStr;
      SET v_EndIndex = LOCATE(',',v_SubIdStr); -- 获取第一个','的位置

      WHILE(v_EndIndex <> 0) DO

-- 获取第一个Id
         SET v_MenuItemsId = cast(SUBSTRING(v_SubIdStr,1,v_EndIndex -1) as SIGNED INTEGER);
         IF EXISTS(SELECT 1 FROM TBL_MenuItems WHERE MenuItemsId = v_MenuItemsId) then
-- SQLWAYS_EVAL# msId存在才添加映射记录

-- SQLWAYS_EVAL# 少后面事务执行的时间
  INSERT tt_MenusMap(MenusId, MenuItemsId) VALUES(v_MenusId, v_MenuItemsId);
         end if;

-- SQLWAYS_EVAL# 处理的Id串赋给@SubId
         SET SWV_SubIdStr_Str = SUBSTRING(v_SubIdStr,v_EndIndex+1,LENGTH(v_SubIdStr) -v_EndIndex);
         SET v_SubIdStr = SWV_SubIdStr_Str;
         SET v_EndIndex = LOCATE(',',v_SubIdStr);
      END WHILE;

-- 处理后一个Id
      SET v_MenuItemsId = cast(SUBSTRING(v_SubIdStr,1,LENGTH(v_SubIdStr)) as SIGNED INTEGER);
      IF EXISTS(SELECT 1 FROM TBL_MenuItems WHERE MenuItemsId = v_MenuItemsId) then
-- SQLWAYS_EVAL# onId存在才添加映射记录

-- SQLWAYS_EVAL# 少后面事务执行的时间
  INSERT tt_MenusMap(MenusId, MenuItemsId) VALUES(v_MenusId, v_MenuItemsId);
      end if;
   end if;

   START TRANSACTION;

   IF (v_AddItemIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddItemIdStr))) > 0) then

      SET @SWV_Error = 0;
      INSERT TBL_MenusMap(MenusId,    MenuItemsId)
      SELECT MenusId,   MenuItemsId FROM tt_MenusMap;
      IF @SWV_Error <> 0 then

         ROLLBACK;
         IF (v_AddItemIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddItemIdStr))) > 0) then
            DROP TEMPORARY TABLE IF EXISTS tt_MenusMap;
         end if;
         SET SWP_Ret_Value = -2;
      end if;
   end if;

   IF (v_DeleteItemIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_DeleteItemIdStr))) > 0) then

      SET v_SQL = CONCAT('DELETE FROM TBL_MenusMap WHERE MenusId = ',CAST(v_MenusId AS CHAR(40)),' AND MenuItemsId IN( ',v_DeleteItemIdStr,' )');
      SET @SWV_Stmt = v_SQL;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
      IF @SWV_Error <> 0 then

         ROLLBACK;
         IF (v_AddItemIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddItemIdStr))) > 0) then
            DROP TEMPORARY TABLE IF EXISTS tt_MenusMap;
         end if;
         SET SWP_Ret_Value = -2;
      end if;
   end if;     

   COMMIT;

   IF (v_AddItemIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddItemIdStr))) > 0) then
      DROP TEMPORARY TABLE IF EXISTS tt_MenusMap;
   end if;

   SET SWP_Ret_Value = 1;
   LEAVE SWL_return;


   ROLLBACK;
   IF (v_AddItemIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddItemIdStr))) > 0) then
      DROP TEMPORARY TABLE IF EXISTS tt_MenusMap;
   end if;
   SET SWP_Ret_Value = -2;

END;

-- SELECT N'SQLWAYS_EVAL# T_UpdateOperationGroupMap]...';



/*SQLWAYS_EVAL# 
PCT_UpdateOperationGroupMap
Function: 
更改操作权限映射表TBL_OperationGroupMap
说明：
如果GroupId不在TBL_OperationGroup中不存在，则不添加映射
Parameter:
@GroupId INT,  --分组Id
@AddItemIdStr NVARCHAR(4000), --添加的操作Id，用','分隔
@DeleteItemIdStr NVARCHAR(4000)  --删除的操作Id，用','分隔

Return: INT
0:执行成功
-1：分组Id不存在
-2: 删除Id失败
-------------------------------------------------------------*/  



DROP PROCEDURE IF EXISTS PCT_UpdateOperationGroupMap;

CREATE PROCEDURE PCT_UpdateOperationGroupMap(v_GroupId INT,
v_AddItemIdStr NATIONAL VARCHAR(4000),
v_DeleteItemIdStr NATIONAL VARCHAR(4000),INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN

   DECLARE v_SQL NATIONAL VARCHAR(4000);
   DECLARE v_SubIdStr NATIONAL VARCHAR(4000);
   DECLARE v_OperationId INT;
   DECLARE v_EndIndex INT;
   DECLARE SWV_SubIdStr_Str NATIONAL VARCHAR(4000);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;  

   SET @SWV_Error = 0;
   IF NOT EXISTS(SELECT 1 FROM TBL_OperationGroup WHERE GroupId = v_GroupId) then
-- SQLWAYS_EVAL# 返回
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;



   IF (v_AddItemIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddItemIdStr))) > 0) then


-- 使用临时表，减少事务执行时间
      CREATE TEMPORARY TABLE tt_OperationGroupMap
      (
         GroupId INT NOT NULL,
         OperationId INT NOT NULL
      );
      SET v_SubIdStr = v_AddItemIdStr;
      SET v_EndIndex = LOCATE(',',v_SubIdStr); -- 获取第一个','的位置

      WHILE(v_EndIndex <> 0) DO

-- 获取第一个Id
         SET v_OperationId = cast(SUBSTRING(v_SubIdStr,1,v_EndIndex -1) as SIGNED INTEGER);
         IF EXISTS(SELECT 1 FROM TBL_Operation WHERE OperationId = v_OperationId) then
-- SQLWAYS_EVAL# onId存在才添加映射记录

-- SQLWAYS_EVAL# 少后面事务执行的时间
  INSERT tt_OperationGroupMap(GroupId, OperationId) VALUES(v_GroupId, v_OperationId);
         end if;

-- SQLWAYS_EVAL# 处理的Id串赋给@SubId
         SET SWV_SubIdStr_Str = SUBSTRING(v_SubIdStr,v_EndIndex+1,LENGTH(v_SubIdStr) -v_EndIndex);
         SET v_SubIdStr = SWV_SubIdStr_Str;
         SET v_EndIndex = LOCATE(',',v_SubIdStr);
      END WHILE;

-- 处理后一个Id
      SET v_OperationId = cast(SUBSTRING(v_SubIdStr,1,LENGTH(v_SubIdStr)) as SIGNED INTEGER);
      IF EXISTS(SELECT 1 FROM TBL_Operation WHERE OperationId = v_OperationId) then
-- SQLWAYS_EVAL# onId存在才添加映射记录

-- SQLWAYS_EVAL# 少后面事务执行的时间
  INSERT tt_OperationGroupMap(GroupId, OperationId) VALUES(v_GroupId, v_OperationId);
      end if;
   end if;

   START TRANSACTION;

   IF (v_AddItemIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddItemIdStr))) > 0) then

      SET @SWV_Error = 0;
      INSERT TBL_OperationGroupMap(GroupId,  OperationId)
      SELECT GroupId, OperationId FROM tt_OperationGroupMap;
      IF @SWV_Error <> 0 then

         ROLLBACK;
         IF (v_AddItemIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddItemIdStr))) > 0) then

            DROP TEMPORARY TABLE IF EXISTS tt_OperationGroupMap;
         end if;
         SET SWP_Ret_Value = -2;
      end if;
   end if;

   SET @SWV_Error = 0;
   IF (v_DeleteItemIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_DeleteItemIdStr))) > 0) then

      SET v_SQL = CONCAT('DELETE FROM TBL_OperationGroupMap WHERE GroupId = ',CAST(v_GroupId AS CHAR(40)),' AND OperationId IN( ',v_DeleteItemIdStr,' )');
      SET @SWV_Stmt = v_SQL;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
      IF @SWV_Error <> 0 then

         ROLLBACK;
         IF (v_AddItemIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddItemIdStr))) > 0) then

            DROP TEMPORARY TABLE IF EXISTS tt_OperationGroupMap;
         end if;
         SET SWP_Ret_Value = -2;
      end if;
   end if;     

   IF @SWV_Error <> 0 then

      ROLLBACK;
      IF (v_AddItemIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddItemIdStr))) > 0) then

         DROP TEMPORARY TABLE IF EXISTS tt_OperationGroupMap;
      end if;
      SET SWP_Ret_Value = -2;
   end if;

   COMMIT;

   IF (v_AddItemIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddItemIdStr))) > 0) then

      DROP TEMPORARY TABLE IF EXISTS tt_OperationGroupMap;
   end if;

   SET SWP_Ret_Value = 1;
   LEAVE SWL_return;


   ROLLBACK;
   IF (v_AddItemIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddItemIdStr))) > 0) then

      DROP TEMPORARY TABLE IF EXISTS tt_OperationGroupMap;
   end if;
   SET SWP_Ret_Value = -2;

END;


-- SELECT N'SQLWAYS_EVAL# L_ReplicateConfig]...';


DROP PROCEDURE IF EXISTS PDL_ReplicateConfig;
CREATE PROCEDURE PDL_ReplicateConfig(INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_CenterId INT;
   DECLARE v_CenterIdStr NATIONAL VARCHAR(10);
   select   StructureId INTO v_CenterId FROM TBL_StationStructure WHERE StructureGroupId = 0 AND ParentStructureId = 0;
   SET v_CenterIdStr = CAST(v_CenterId%1000 AS CHAR(10));

-- SQLWAYS_EVAL# ion--
   INSERT TBL_ReplicateLogs(LogStr)
VALUES(CONCAT('SQLWAYS_EVAL# 1 FROM sysobjects WHERE id = object_id(''TBL_TempStation',v_CenterIdStr,'SQLWAYS_EVAL# TBL_TempStation', v_CenterIdStr));


   INSERT TBL_ReplicateLogs(LogStr)
VALUES(CONCAT('SQLWAYS_EVAL# TBL_TempStation',v_CenterIdStr, 'SQLWAYS_EVAL# WHERE 1 = 2'));


   INSERT TBL_ReplicateLogs(LogStr)
VALUES(CONCAT('SQLWAYS_EVAL# INDEX TBL_TempStation_Idx ON TBL_TempStation',v_CenterIdStr, 'SQLWAYS_EVAL# ignore_dup_key'));


   INSERT TBL_ReplicateLogs(LogStr)
   SELECT CONCAT('SQLWAYS_EVAL# L_TempStation',v_CenterIdStr,'(','StationId',',StationName',
   ',Latitude',',Longitude',',SetupTime',',CompanyId',',ConnectState',
   ',UpdateTime','SQLWAYS_EVAL# ry',',StationGrade',',StationState',
   ',ContactId',',SupportTime',',OnWayTime',',SurplusTime',',FloorNo',
   ',PropList',',Acreage',',BuildingType',',ContainNode',',Description',
   ',BordNumber',',CenterId',',Enable',',StartTime',',EndTime',',ProjectName',
   ',ContractNo',',InstallTime',') VALUES ( ',CASE WHEN StationId IS NULL THEN 'NULL' ELSE CAST(StationId AS CHAR(255)) END,',',CASE WHEN StationName IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(StationName AS CHAR(255)),'''') END,
   ',',CASE WHEN Latitude IS NULL THEN 'NULL' ELSE CAST(Latitude AS CHAR(255)) END,',',CASE WHEN Longitude IS NULL THEN 'NULL' ELSE CAST(Longitude AS CHAR(255)) END,',',CASE WHEN SetupTime IS NULL THEN 'NULL' ELSE CONCAT('''',DATE_FORMAT(SetupTime,'%Y-%m-%d %T'),'''') END,
   ',',CASE WHEN CompanyId IS NULL THEN 'NULL' ELSE CAST(CompanyId AS CHAR(255)) END,',',CASE WHEN ConnectState IS NULL THEN 'NULL' ELSE CAST(ConnectState AS CHAR(255)) END,',',CASE WHEN UpdateTime IS NULL THEN 'NULL' ELSE CONCAT('''',DATE_FORMAT(UpdateTime,'%Y-%m-%d %T'),'''') END,
   ',',CASE WHEN StationCategory IS NULL THEN 'NULL' ELSE CAST(StationCategory AS CHAR(255)) END,',',CASE WHEN StationGrade IS NULL THEN 'NULL' ELSE CAST(StationGrade AS CHAR(255)) END,',',CASE WHEN StationState IS NULL THEN 'NULL' ELSE CAST(StationState AS CHAR(255)) END,',',CASE WHEN ContactId IS NULL THEN 'NULL' ELSE CAST(ContactId AS CHAR(255)) END,',',
   CASE WHEN SupportTime IS NULL THEN 'NULL' ELSE CAST(SupportTime AS CHAR(255)) END,',',CASE WHEN OnWayTime IS NULL THEN 'NULL' ELSE CAST(OnWayTime AS CHAR(255)) END,',',CASE WHEN SurplusTime IS NULL THEN 'NULL' ELSE CAST(SurplusTime AS CHAR(255)) END,',',CASE WHEN FloorNo IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(FloorNo AS CHAR(255)),'''') END,',',CASE WHEN PropList IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(PropList AS CHAR(255)),'''') END,
   ',',CASE WHEN Acreage IS NULL THEN 'NULL' ELSE CAST(Acreage AS CHAR(255)) END,',',CASE WHEN BuildingType IS NULL THEN 'NULL' ELSE CAST(BuildingType AS CHAR(255)) END,',',CASE WHEN ContainNode IS NULL THEN 'NULL' ELSE CAST(ContainNode AS CHAR(255)) END,',',CASE WHEN Description IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(Description AS CHAR(255)),'''') END,
   ',',CASE WHEN BordNumber IS NULL THEN 'NULL' ELSE CAST(BordNumber AS CHAR(255)) END,',',CASE WHEN CenterId IS NULL THEN 'NULL' ELSE CAST(CenterId AS CHAR(255)) END,',',CASE WHEN Enable IS NULL THEN 'NULL' ELSE CAST(Enable AS CHAR(255)) END,',',CASE WHEN StartTime IS NULL THEN 'NULL' ELSE CONCAT('''',DATE_FORMAT(StartTime,'%Y-%m-%d %T'),'''') END,
   ',',CASE WHEN EndTime IS NULL THEN 'NULL' ELSE CONCAT('''',DATE_FORMAT(EndTime,'%Y-%m-%d %T'),'''') END,',',CASE WHEN ProjectName IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(ProjectName AS CHAR(255)),'''') END,
   ',',CASE WHEN ContractNo IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(ContractNo AS CHAR(255)),'''') END,',',CASE WHEN InstallTime IS NULL THEN 'NULL' ELSE CONCAT('''',DATE_FORMAT(InstallTime,'%Y-%m-%d %T'),'''') END,
   ')')
   FROM TBL_Station; 

   INSERT TBL_ReplicateLogs(LogStr)
VALUES(CONCAT('SQLWAYS_EVAL# 1,', CAST(v_CenterId AS CHAR(20))));

-- SQLWAYS_EVAL# pment--

   INSERT TBL_ReplicateLogs(LogStr)
VALUES(CONCAT('SQLWAYS_EVAL# 1 FROM sysobjects WHERE id = object_id(''TBL_TempEquipment',v_CenterIdStr,'SQLWAYS_EVAL# TBL_TempEquipment', v_CenterIdStr));


   INSERT TBL_ReplicateLogs(LogStr)
VALUES(CONCAT('SQLWAYS_EVAL# TBL_TempEquipment',v_CenterIdStr, 'SQLWAYS_EVAL# WHERE 1 = 2'));


   INSERT TBL_ReplicateLogs(LogStr)
VALUES(CONCAT('SQLWAYS_EVAL# INDEX TBL_TempEquipment_Idx ON TBL_TempEquipment',v_CenterIdStr, 'SQLWAYS_EVAL# WITH ignore_dup_key'));


   INSERT TBL_ReplicateLogs(LogStr)
   SELECT CONCAT('SQLWAYS_EVAL# L_TempEquipment',v_CenterIdStr,'(','StationId',',EquipmentId',
   ',EquipmentName',',EquipmentNo','SQLWAYS_EVAL# le',',EquipmentStyle',
   ',AssetState',',Price',',UsedLimit',',UsedDate',',BuyDate',
   ',Vendor',',Unit','SQLWAYS_EVAL# gory',',EquipmentType',',EquipmentClass',
   ',EquipmentState','SQLWAYS_EVAL# on',',StartDelay',',EndDelay',',Property',
   ',Description','SQLWAYS_EVAL# lateId',',HouseId',',MonitorUnitId',
   ',WorkStationId',',SamplerUnitId',',DisplayIndex',',ConnectState',
   ',UpdateTime','SQLWAYS_EVAL# ntId',',RatedCapacity','SQLWAYS_EVAL# le',
   ',ProjectName',',ContractNo',',InstallTime',',EquipmentSN',',SO',') VALUES ( ',
   CASE WHEN StationId IS NULL THEN 'NULL' ELSE CAST(StationId AS CHAR(255)) END,',',CASE WHEN EquipmentId IS NULL THEN 'NULL' ELSE CAST(EquipmentId AS CHAR(255)) END,',',CASE WHEN EquipmentName IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(EquipmentName AS CHAR(255)),'''') END,
   ',',CASE WHEN EquipmentNo IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(EquipmentNo AS CHAR(255)),'''') END,',',CASE WHEN EquipmentModule IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(EquipmentModule AS CHAR(255)),'''') END,
   ',',CASE WHEN EquipmentStyle IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(EquipmentStyle AS CHAR(255)),'''') END,',',CASE WHEN AssetState IS NULL THEN 'NULL' ELSE CAST(AssetState AS CHAR(255)) END,',',CASE WHEN Price IS NULL THEN 'NULL' ELSE CAST(Price AS CHAR(255)) END,
   ',',CASE WHEN UsedLimit IS NULL THEN 'NULL' ELSE CAST(UsedLimit AS CHAR(255)) END,',',
   CASE WHEN UsedDate IS NULL THEN 'NULL' ELSE CONCAT('''',DATE_FORMAT(UsedDate,'%Y-%m-%d %T'),'''') END,',',CASE WHEN BuyDate IS NULL THEN 'NULL' ELSE CONCAT('''',DATE_FORMAT(BuyDate,'%Y-%m-%d %T'),'''') END,
   ',',CASE WHEN Vendor IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(Vendor AS CHAR(255)),'''') END,',',CASE WHEN Unit IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(Unit AS CHAR(255)),'''') END,',',CASE WHEN EquipmentCategory IS NULL THEN 'NULL' ELSE CAST(EquipmentCategory AS CHAR(255)) END,',',
   CASE WHEN EquipmentType IS NULL THEN 'NULL' ELSE CAST(EquipmentType AS CHAR(255)) END,',',CASE WHEN EquipmentClass IS NULL THEN 'NULL' ELSE CAST(EquipmentClass AS CHAR(255)) END,',',CASE WHEN EquipmentState IS NULL THEN 'NULL' ELSE CAST(EquipmentState AS CHAR(255)) END,',',CASE WHEN EventExpression IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(EventExpression AS CHAR(255)),'''') END,
   ',',CASE WHEN StartDelay IS NULL THEN 'NULL' ELSE CAST(StartDelay AS CHAR(255)) END,',',CASE WHEN EndDelay IS NULL THEN 'NULL' ELSE CAST(EndDelay AS CHAR(255)) END,',',CASE WHEN Property IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(Property AS CHAR(255)),'''') END,
   ',',CASE WHEN Description IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(Description AS CHAR(255)),'''') END,',',CASE WHEN EquipmentTemplateId IS NULL THEN 'NULL' ELSE CAST(EquipmentTemplateId AS CHAR(255)) END,',',
   CASE WHEN HouseId IS NULL THEN 'NULL' ELSE CAST(HouseId AS CHAR(255)) END,',',CASE WHEN MonitorUnitId IS NULL THEN 'NULL' ELSE CAST(MonitorUnitId AS CHAR(255)) END,',',CASE WHEN WorkStationId IS NULL THEN 'NULL' ELSE CAST(WorkStationId AS CHAR(255)) END,',',CASE WHEN SamplerUnitId IS NULL THEN 'NULL' ELSE CAST(SamplerUnitId AS CHAR(255)) END,',',CASE WHEN DisplayIndex IS NULL THEN 'NULL' ELSE CAST(DisplayIndex AS CHAR(255)) END,
   ',',CASE WHEN ConnectState IS NULL THEN 'NULL' ELSE CAST(ConnectState AS CHAR(255)) END,',',CASE WHEN UpdateTime IS NULL THEN 'NULL' ELSE CONCAT('''',DATE_FORMAT(UpdateTime,'%Y-%m-%d %T'),'''') END,',',CASE WHEN ParentEquipmentId IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(ParentEquipmentId AS CHAR(255)),'''') END,
   ',',CASE WHEN RatedCapacity IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(RatedCapacity AS CHAR(255)),'''') END,
   ',',CASE WHEN InstalledModule IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(InstalledModule AS CHAR(1024)),'''') END,',',CASE WHEN ProjectName IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(ProjectName AS CHAR(255)),'''') END,
   ',',CASE WHEN ContractNo IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(ContractNo AS CHAR(255)),'''') END,',',CASE WHEN InstallTime IS NULL THEN 'NULL' ELSE CONCAT('''',DATE_FORMAT(InstallTime,'%Y-%m-%d %T'),'''') END,
   ',',CASE WHEN EquipmentSN IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(EquipmentSN AS CHAR(255)),'''') END,',',CASE WHEN SO IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(SO AS CHAR(255)),'''') END,')')
   FROM TBL_Equipment; 

   INSERT TBL_ReplicateLogs(LogStr)
VALUES(CONCAT('SQLWAYS_EVAL# 2,', CAST(v_CenterId AS CHAR(20))));

/*SQLWAYS_EVAL# TBL_EquipmentTemplate--
INSERT TBL_ReplicateLogs(LogStr)
VALUES(	'IF EXISTS(SELECT 1 FROM sysobjects WHERE id = object_id(''TBL_TempEquipmentTemplate'')) DROP TABLE TBL_TempEquipmentTemplate')

INSERT TBL_ReplicateLogs(LogStr)
VALUES('SELECT * INTO TBL_TempEquipmentTemplate FROM TBL_EquipmentTemplate WHERE 1 = 2')

INSERT TBL_ReplicateLogs(LogStr) 
SELECT 'INSERT INTO TBL_TempEquipmentTemplate('
+'EquipmentTemplateId'
+',EquipmentTemplateName'
+',ParentTemplateId'
+',Memo'
+',ProtocolCode'
+',EquipmentCategory'
+',EquipmentType'
+',Property'
+',Description'
+',EquipmentStyle'
+',Unit'
+',Vendor'
+ ') VALUES ( '
+ CASE WHEN EquipmentTemplateId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), EquipmentTemplateId) END + ','
+ CASE WHEN EquipmentTemplateName IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), EquipmentTemplateName) + '''' END +','
+ CASE WHEN ParentTemplateId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ParentTemplateId) END + ','
+ CASE WHEN Memo IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), Memo) + '''' END +','
+ CASE WHEN ProtocolCode IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), ProtocolCode) + '''' END +','
+ CASE WHEN EquipmentCategory IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), EquipmentCategory) END + ','
+ CASE WHEN EquipmentType IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), EquipmentType) END + ','
+ CASE WHEN Property IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), Property) + '''' END +','
+ CASE WHEN Description IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), Description) + '''' END +','
+ CASE WHEN EquipmentStyle IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), EquipmentStyle) + '''' END +','
+ CASE WHEN Unit IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), Unit) + '''' END +','
+ CASE WHEN Vendor IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), Vendor) + '''' END +')'
FROM TBL_EquipmentTemplate

INSERT TBL_ReplicateLogs(LogStr)
VALUES(	'IF EXISTS(SELECT 1 FROM sysobjects WHERE id = object_id(''TBL_TempSignal'')) DROP TABLE TBL_TempSignal')

INSERT TBL_ReplicateLogs(LogStr)
VALUES('SELECT * INTO TBL_TempSignal FROM TBL_Signal WHERE 1 = 2')

INSERT TBL_ReplicateLogs(LogStr) 
SELECT 'INSERT INTO TBL_TempSignal('
+'EquipmentTemplateId'
+',SignalId'
+',Enable'
+',Visible'
+',Description'
+',SignalName'
+',SignalCategory'
+',SignalType'
+',ChannelNo'
+',ChannelType'
+',Expression'
+',DataType'
+',ShowPrecision'
+',Unit'
+',StoreInterval'
+',AbsValueThreshold'
+',PercentThreshold'
+',StaticsPeriod'
+',BaseTypeId'
+',ChargeStoreInterVal'
+',ChargeAbsValue'
+',DisplayIndex'
+',MDBSignalId'
+',ModuleNo'
+ ') VALUES ( '
+ CASE WHEN EquipmentTemplateId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), EquipmentTemplateId) END + ','
+ CASE WHEN SignalId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), SignalId) END + ','
+ CASE WHEN Enable IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), Enable) END + ','
+ CASE WHEN Visible IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), Visible) END + ','
+ CASE WHEN Description IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), Description) + '''' END +','
+ CASE WHEN SignalName IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), SignalName) + '''' END +','
+ CASE WHEN SignalCategory IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), SignalCategory) END + ','
+ CASE WHEN SignalType IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), SignalType) END + ','
+ CASE WHEN ChannelNo IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ChannelNo) END + ','
+ CASE WHEN ChannelType IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ChannelType) END + ','
+ CASE WHEN Expression IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), Expression) + '''' END +','
+ CASE WHEN DataType IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), DataType) END + ','
+ CASE WHEN ShowPrecision IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), ShowPrecision) + '''' END +','
+ CASE WHEN Unit IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), Unit) + '''' END +','
+ CASE WHEN StoreInterval IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), StoreInterval) END + ','
+ CASE WHEN AbsValueThreshold IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), AbsValueThreshold) END + ','
+ CASE WHEN PercentThreshold IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), PercentThreshold) END + ','
+ CASE WHEN StaticsPeriod IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), StaticsPeriod) END + ','
+ CASE WHEN BaseTypeId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), BaseTypeId) END + ','
+ CASE WHEN ChargeStoreInterVal IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ChargeStoreInterVal) END + ','
+ CASE WHEN ChargeAbsValue IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ChargeAbsValue) END + ','
+ CASE WHEN DisplayIndex IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), DisplayIndex) END + ','
+ CASE WHEN MDBSignalId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), MDBSignalId) END + ','
+ CASE WHEN ModuleNo IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ModuleNo) END + ')'
FROM TBL_Signal 

INSERT TBL_ReplicateLogs(LogStr)
VALUES(	'IF EXISTS(SELECT 1 FROM sysobjects WHERE id = object_id(''TBL_TempEvent'')) DROP TABLE TBL_TempEvent')

INSERT TBL_ReplicateLogs(LogStr)
VALUES('SELECT * INTO TBL_TempEvent FROM TBL_Event WHERE 1 = 2')								 

INSERT TBL_ReplicateLogs(LogStr) 
SELECT 'INSERT INTO TBL_TempEvent('
+'EquipmentTemplateId'
+',EventId'
+',EventName'
+',StartType'
+',EndType'
+',StartExpression'
+',SuppressExpression'
+',EventCategory'
+',SignalId'
+',Enable'
+',Visible'
+',Description'
+',DisplayIndex'
+',ModuleNo'
+ ') VALUES ( '
+ CASE WHEN EquipmentTemplateId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), EquipmentTemplateId) END + ','
+ CASE WHEN EventId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), EventId) END + ','
+ CASE WHEN EventName IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), EventName) + '''' END +','
+ CASE WHEN StartType IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), StartType) END + ','
+ CASE WHEN EndType IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), EndType) END + ','
+ CASE WHEN StartExpression IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), StartExpression) + '''' END +','
+ CASE WHEN SuppressExpression IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), SuppressExpression) + '''' END +','
+ CASE WHEN EventCategory IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), EventCategory) END + ','
+ CASE WHEN SignalId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), SignalId) END + ','
+ CASE WHEN Enable IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), Enable) END + ','
+ CASE WHEN Visible IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), Visible) END + ','
+ CASE WHEN Description IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), Description) + '''' END +','
+ CASE WHEN DisplayIndex IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), DisplayIndex) END +','
+ CASE WHEN ModuleNo IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ModuleNo) END + ')'
FROM TBL_Event 

INSERT TBL_ReplicateLogs(LogStr)
VALUES(	'IF EXISTS(SELECT 1 FROM sysobjects WHERE id = object_id(''TBL_TempControl'')) DROP TABLE TBL_TempControl')

INSERT TBL_ReplicateLogs(LogStr)
VALUES('SELECT * INTO TBL_TempControl FROM TBL_Control WHERE 1 = 2')										 

INSERT TBL_ReplicateLogs(LogStr) 
SELECT 'INSERT INTO TBL_TempControl('
+'EquipmentTemplateId'
+',ControlId'
+',ControlName'
+',ControlCategory'
+',CmdToken'
+',BaseTypeId'
+',ControlSeverity'
+',SignalId'
+',TimeOut'
+',Retry'
+',Description'
+',Enable'
+',Visible'
+',DisplayIndex'
+',CommandType'
+',ControlType'
+',DataType'
+',MaxValue'
+',MinValue'
+',DefaultValue'
+',ModuleNo'
+ ') VALUES ( '
+ CASE WHEN EquipmentTemplateId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), EquipmentTemplateId) END + ','
+ CASE WHEN ControlId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ControlId) END + ','
+ CASE WHEN ControlName IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), ControlName) + '''' END +','
+ CASE WHEN ControlCategory IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ControlCategory) END + ','
+ CASE WHEN CmdToken IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), CmdToken) + '''' END +','
+ CASE WHEN BaseTypeId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), BaseTypeId) END + ','
+ CASE WHEN ControlSeverity IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ControlSeverity) END + ','
+ CASE WHEN SignalId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), SignalId) END + ','
+ CASE WHEN TimeOut IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), TimeOut) END + ','
+ CASE WHEN Retry IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), Retry) END + ','
+ CASE WHEN Description IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), Description) + '''' END +','
+ CASE WHEN Enable IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), Enable) END + ','
+ CASE WHEN Visible IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), Visible) END + ','
+ CASE WHEN DisplayIndex IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), DisplayIndex) END + ','
+ CASE WHEN CommandType IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), CommandType) END + ','
+ CASE WHEN ControlType IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ControlType) END + ','
+ CASE WHEN DataType IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), DataType) END + ','
+ CASE WHEN MaxValue IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), MaxValue) END + ','
+ CASE WHEN MinValue IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), MinValue) END + ','
+ CASE WHEN DefaultValue IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), DefaultValue) END + ','
+ CASE WHEN ModuleNo IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ModuleNo) END + ')'
FROM TBL_Control 

INSERT TBL_ReplicateLogs(LogStr)
VALUES('EXEC PDL_CopySSConfig 3,' + Convert(nvarchar(20), @CenterId))						 		
********************************************不同步模版信息，先注释***********************************************/		

   SET SWP_Ret_Value = 0;
END;



-- SQLWAYS_EVAL# 型)







DROP PROCEDURE IF EXISTS PNL_CanAccessDataServer;


CREATE PROCEDURE PNL_CanAccessDataServer(v_DataServerId  INT,
v_MonitorUnitId INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
-- MU是否可以在这个DS注册
-- 1允许注册
-- 0不允许注册

   DECLARE v_MuNumber INT;
   DECLARE v_CurrentMuNumber INT;
   DECLARE v_CurrentDsNumber INT;
   DECLARE v_DataServerCap INT;

   SET v_DataServerCap = null;

-- 获取当前MU数据
   select   count(rr.MonitorUnitId) INTO v_CurrentMuNumber FROM TSL_RealtimeRouting rr
   INNER JOIN  TSL_MonitorUnit mu ON rr.MonitorUnitId = mu.MonitorUnitId WHERE rr.DataServerId = v_DataServerId;

-- 获取当前在DS数据
   select   count(WorkStationId) INTO v_CurrentDsNumber FROM TBL_WorkStation WHERE  WorkStationType = 2 AND TIMESTAMPDIFF(second,UpdateTime,CURRENT_TIMESTAMP) < 90;
   select   COUNT(MonitorUnitId) INTO v_MuNumber FROM TSL_MonitorUnit;

   IF v_CurrentDsNumber = 0 then
      SET v_CurrentDsNumber = 1;
   end if;
-- 如果容量足够，则允许接入
   select   Capacity INTO v_DataServerCap FROM TSL_DataServerCapacity WHERE DataServerId = v_DataServerId;
-- SQLWAYS_EVAL# 常DS数来计算DS的容量)

   IF v_DataServerCap IS NULL then
      SET v_DataServerCap = floor((v_MuNumber*1.2)/v_CurrentDsNumber)+1;
   end if;

   IF v_CurrentMuNumber >= v_DataServerCap then
      SET SWP_Ret_Value = 0;
      LEAVE SWL_return;
   ELSE
      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;
   -- NOT SUPPORTED PRINT N'正在创建 [dbo].[PNL_CancelSubscribeSignal]...'
END;









DROP PROCEDURE IF EXISTS PNL_CancelSubscribeSignal;

CREATE PROCEDURE PNL_CancelSubscribeSignal(v_Expired		INT ,
v_DataServerId	INT,INOUT SWP_Ret_Value INT)
BEGIN
-- SQLWAYS_EVAL# eTime跟当前时间比较
-- SQLWAYS_EVAL# ired
-- SQLWAYS_EVAL# 命令

   DECLARE v_CurrentTime DATETIME;

-- 当前时间
   IF v_Expired is null then
      set v_Expired = 60;
   END IF;
   SET v_CurrentTime = CURRENT_TIMESTAMP;

-- 保存结果
   CREATE TEMPORARY TABLE tt_CancelSignal
   (
      StationId INT not null,
      HostId INT not null,
      EquipmentId INT not null,
      SignalId INT not null,
      SubscribeType INT not null
   );

-- Insert
   INSERT INTO tt_CancelSignal(StationId,HostId,EquipmentId,SignalId,SubscribeType)
   SELECT ts.StationId,ts.HostId,ts.EquipmentId,ts.SignalId,ts.SubscribeType
   FROM TSL_SubscribeSignal ts
   INNER JOIN TSL_RealtimeRouting rr ON ts.HostId = rr.MonitorUnitId
   WHERE ts.LastUpdateDateTime IS NOT NULL AND TIMESTAMPDIFF(SECOND,ts.LastUpdateDateTime,v_CurrentTime) >= v_Expired
   AND rr.DataServerId = v_DataServerId;

-- Clear
   DELETE  TSL_SubscribeSignal ts
   FROM TSL_SubscribeSignal  ts
   INNER JOIN TSL_RealtimeRouting rr ON ts.HostId = rr.MonitorUnitId
   WHERE ts.LastUpdateDateTime IS NOT NULL AND TIMESTAMPDIFF(SECOND,ts.LastUpdateDateTime,v_CurrentTime) >= v_Expired
   AND rr.DataServerId = v_DataServerId;

-- RESULT
   SELECT * FROM tt_CancelSignal;

   DROP TEMPORARY TABLE IF EXISTS tt_CancelSignal;

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_GenerateMUSyncPlan]...';

DROP PROCEDURE IF EXISTS PNL_GenerateMUSyncPlan;
CREATE PROCEDURE PNL_GenerateMUSyncPlan(v_StationId INT ,
v_MonitorUnitId INT ,
v_ConfigFileCode CHAR(32),
v_SampleConfigCode CHAR(32),
v_IpAddress	NATIONAL VARCHAR(32),INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN

   DECLARE v_ConfigFileCode_db CHAR(32);
   DECLARE v_SampleConfigCode_db CHAR(32);
   DECLARE v_SyncType INT; 
   DECLARE v_SyncRule INT; 
   DECLARE v_MaxRetryCount INT; 
   DECLARE v_PlanTime DATETIME;
   DECLARE v_SyncState INT;
   DECLARE v_nullMd5 CHAR(32);
   DECLARE v_Return INT; 

   IF v_IpAddress is null then
      set v_IpAddress = '';
   END IF;
   SET v_Return = -1;
   SET v_nullMd5 = '00000000000000000000000000000000'; -- 全0的MD5码
   SET v_ConfigFileCode = upper(v_ConfigFileCode);-- 转换为大写
   SET v_SampleConfigCode = upper(v_SampleConfigCode);-- 转换为大写

-- SQLWAYS_EVAL# default 3
   SET v_MaxRetryCount = 3;
   SET v_SyncState = 0;	-- 任务初始状态
   SET v_SyncType = 1;	-- 立即同步
/*liangyj
   IF NOT EXISTS(SELECT 'X' FROM TSL_MonitorUnit WHERE MonitorUnitId = v_MonitorUnitId) then
 
      IF NOT EXISTS(SELECT 'X' FROM TSL_MonitorUnit WHERE IpAddress = v_IpAddress) then

         IF NOT EXISTS(SELECT 'X' FROM TBL_NewInStation WHERE IpAddress = v_IpAddress) then

  INSERT INTO TBL_NewInStation(IpAddress,UpdateTime) VALUES(v_IpAddress,CURRENT_TIMESTAMP);
         ELSE
            UPDATE TBL_NewInStation SET UpdateTime = CURRENT_TIMESTAMP WHERE IpAddress = v_IpAddress;
         end if;
         SET SWP_Ret_Value = 0;
         LEAVE SWL_return;
      end if;
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if; 
*/
   IF(v_StationId = -1) then

      select   StationId INTO v_StationId FROM TSL_MonitorUnit WHERE MonitorUnitId = v_MonitorUnitId;
   end if;

   select   ConfigFileCode, SampleConfigCode INTO v_ConfigFileCode_db,v_SampleConfigCode_db FROM TSL_MonitorUnit WHERE StationId = v_StationId AND MonitorUnitId = v_MonitorUnitId;

   IF(v_SampleConfigCode = v_nullMd5) then-- 底端无采集配置文件

      IF(v_ConfigFileCode = v_nullMd5) then-- SQLWAYS_EVAL# 建站的情况

-- SQLWAYS_EVAL# 到@IpAddress
         SET SWP_Ret_Value = 0;
         LEAVE SWL_return;
      end if;
      IF(v_ConfigFileCode = v_ConfigFileCode_db) then-- 配置无需同步

         SET SWP_Ret_Value = 1;
         LEAVE SWL_return;
      end if;
   ELSE
      IF(v_ConfigFileCode = v_nullMd5) then-- SQLWAYS_EVAL# 建站的情况

-- SQLWAYS_EVAL# 到@IpAddress
         SET SWP_Ret_Value = 0;
         LEAVE SWL_return;
      end if;
      IF(v_ConfigFileCode = v_ConfigFileCode_db) AND (v_SampleConfigCode = v_SampleConfigCode_db) then-- 配置无需同步

         SET SWP_Ret_Value = 1;
         LEAVE SWL_return;
      end if;
   end if; 

   IF(v_SampleConfigCode <> v_nullMd5) then

      IF(v_SampleConfigCode = v_SampleConfigCode_db) then

         IF(v_ConfigFileCode <> v_ConfigFileCode_db) then
 -- 需要生成自上向下配置同步计划
            SET v_SyncRule = 1;
            SET v_Return = 1;
         end if;
      ELSE 
-- 需要生成自底向上配置同步计划
         SET v_SyncRule = 2;
         SET v_Return = 1;
      end if;
   ELSE
      IF(v_ConfigFileCode <> v_ConfigFileCode_db)
      OR (v_ConfigFileCode IS NOT NULL AND v_ConfigFileCode_db IS NULL)
      OR (v_ConfigFileCode IS NULL AND v_ConfigFileCode_db IS NOT NULL) then
 -- 需要生成自上向下配置同步计划
         SET v_SyncRule = 1;
         SET v_Return = 1;
      end if;
   end if; 

   IF EXISTS(SELECT 'X' FROM TSL_MonitorUnit WHERE MonitorUnitId = v_MonitorUnitId AND IsSync = 1) then

      UPDATE TSL_MonitorUnit SET IsSync = 0 WHERE MonitorUnitId = v_MonitorUnitId;
   end if;
-- 任务时间为当前时间3分钟后
   SET v_PlanTime = TIMESTAMPADD(minute,3,CURRENT_TIMESTAMP);
-- SQLWAYS_EVAL# 新任务
   IF NOT EXISTS(SELECT 'X' FROM TBL_MUSyncTask WHERE StationId = v_StationId AND MonitorUnitId = v_MonitorUnitId AND SyncRule = v_SyncRule AND SyncState IN(0,1,5,6)) then

  INSERT INTO TBL_MUSyncTask(StationId,MonitorUnitId,PlanTime,SyncState,SyncRule,MaxRetryCount,RetryCount,Description)
VALUES(v_StationId,v_MonitorUnitId,v_PlanTime,v_SyncState,v_SyncRule,v_MaxRetryCount,0,'');
   end if; 
   SET SWP_Ret_Value = v_Return;

END;
-- SELECT N'SQLWAYS_EVAL# L_GetCurrentMUSyncTasks]...';





DROP PROCEDURE IF EXISTS PNL_GetCurrentMUSyncTasks;
CREATE PROCEDURE PNL_GetCurrentMUSyncTasks()
BEGIN

   SELECT a.TaskId, a.StationId, a.MonitorUnitId, a.SyncState, a.SyncRule, a.PlanTime, a.BeginTime, a.EndTime,
a.MaxRetryCount, a.RetryCount, a.Description, b.IpAddress
   FROM TBL_MUSyncTask a,TSL_MonitorUnit b
   WHERE a.MonitorUnitId = b.MonitorUnitId
   AND a.SyncState not in(2,3,4)
   AND b.MonitorUnitCategory <> 1
   AND a.PlanTime <= CURRENT_TIMESTAMP
   UNION
   SELECT a.TaskId, a.StationId, a.MonitorUnitId, a.SyncState, a.SyncRule, a.PlanTime, a.BeginTime, a.EndTime,
a.MaxRetryCount, a.RetryCount, a.Description, c.IPAddress AS IpAddress
   FROM TBL_MUSyncTask a,TSL_MonitorUnit b,TBL_WorkStation c
   WHERE a.MonitorUnitId = b.MonitorUnitId
   AND a.SyncState not in(2,3,4)
   AND b.MonitorUnitCategory = 1
   AND c.WorkStationId = b.WorkStationId
   AND a.PlanTime <= CURRENT_TIMESTAMP;

END;

-- SELECT N'SQLWAYS_EVAL# L_GetFullCfgRequest]...';





DROP PROCEDURE IF EXISTS PNL_GetFullCfgRequest;

CREATE PROCEDURE PNL_GetFullCfgRequest(v_DataServerId		INT)
BEGIN

   SELECT mm.StationId,mm.MonitorUnitId,mm.ConfigFileCode
   FROM TBL_MUFullCfgState mm
   INNER JOIN TSL_RealtimeRouting rr ON mm.MonitorUnitId = rr.MonitorUnitId
   WHERE mm.State in(0,6) AND rr.DataServerId = v_DataServerId
   ORDER BY mm.UpdateTime;

END;

-- SELECT N'SQLWAYS_EVAL# L_GetStationState]...';





DROP PROCEDURE IF EXISTS PNL_GetStationState;

CREATE PROCEDURE PNL_GetStationState(
			-- 事件开始时间	
v_StationId		   INT,	   
v_StartTime		   DATETIME,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_EngineerStartTime DATETIME;
   DECLARE v_EngineerEndTime DATETIME;
   DECLARE v_StationState INT;
   select   StationState, StartTime, EndTime INTO v_StationState,v_EngineerStartTime,v_EngineerEndTime FROM TBL_Station WHERE StationId = v_StationId;

   IF (v_StationState = 3) then

      IF (v_EngineerStartTime is not NULL AND  v_StartTime > v_EngineerStartTime AND v_StartTime < v_EngineerEndTime) then

         SET SWP_Ret_Value = 0;
         LEAVE SWL_return;
      ELSE
         SET SWP_Ret_Value = 1;
         LEAVE SWL_return;
      end if;
   ELSE
      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;
END;

-- SELECT N'SQLWAYS_EVAL# L_Ins_MidHistoryEvent]...';


DROP PROCEDURE IF EXISTS PNL_Ins_MidHistoryEvent;

CREATE PROCEDURE `PNL_Ins_MidHistoryEvent`(IN `v_SequenceId` NATIONAL VARCHAR(255),IN `v_EndTime` datetime,IN `v_ConfirmTime` datetime,IN `v_ConfirmerId` int,IN `v_ConfirmerName` NATIONAL VARCHAR(255))
BEGIN
   DECLARE v_UserId INT;
   DECLARE v_UserName NATIONAL VARCHAR(256);

   INSERT IGNORE INTO TBL_HistoryEvent(SequenceId,StationId ,StationName,EquipmentId,EquipmentName ,EventId,EventName,
EventConditionId,EventSeverityId,EventSeverity,StartTime,EndTime,CancelTime,CancelUserId,CancelUserName ,
ConfirmTime,
ConfirmerId,
ConfirmerName,
EventValue ,
ReversalNum,
Meanings ,
EventFilePath ,
Description,
SourceHostId ,
InstructionId ,
InstructionStatus,
StandardAlarmNameId ,
StandardAlarmName,
BaseTypeId,
BaseTypeName ,
EquipmentCategory ,
EquipmentCategoryName,
MaintainState ,
SignalId ,
RelateSequenceId,
EventCategoryId,
EventStateId,
CenterId,
CenterName,
StructureName,
MonitorUnitName,
StructureId,
StationCategoryId,
EquipmentVendor)
   SELECT SequenceId,
StationId ,
StationName,
EquipmentId,
EquipmentName ,
EventId,
EventName,
EventConditionId,
EventSeverityId,
EventSeverity,
StartTime,
v_EndTime,
CancelTime,
CancelUserId,
CancelUserName ,
v_ConfirmTime,
v_ConfirmerId,
v_ConfirmerName,
EventValue ,
ReversalNum,
Meanings ,
EventFilePath ,
Description,
SourceHostId ,
InstructionId ,
InstructionStatus,
StandardAlarmNameId ,
StandardAlarmName,
BaseTypeId,
BaseTypeName ,
EquipmentCategory ,
EquipmentCategoryName,
MaintainState ,
SignalId ,
RelateSequenceId,
EventCategoryId,
EventStateId,
CenterId,
CenterName,
StructureName,
MonitorUnitName,
StructureId,
StationCategoryId,
EquipmentVendor
   FROM  TBL_ActiveEvent
   WHERE SequenceId = v_SequenceId;

   DELETE FROM TBL_ActiveEvent WHERE  SequenceId = v_SequenceId;         

END;



DROP PROCEDURE IF EXISTS PNL_MURegisterIpCompare;


CREATE PROCEDURE PNL_MURegisterIpCompare(v_HostId			   INT,						-- 监控单元ID
v_IpAddress		   VARCHAR(32))				-- 监控单元IP地址

   SWL_return:
BEGIN
   DECLARE v_IsConflict BOOLEAN;
   DECLARE v_OldIpAddress VARCHAR(128);

   select   IpAddress INTO v_OldIpAddress FROM TSL_MonitorUnit WHERE MonitorUnitId = v_HostId;

   IF ROW_COUNT() = 0 then
-- SQLWAYS_EVAL# 返回
      LEAVE SWL_return;
   end if;

   IF(v_OldIpAddress <> v_IpAddress) then

      IF EXISTS(SELECT 'X' FROM TSL_MonitorUnit WHERE IpAddress = v_IpAddress) then
-- 是否与现有的Ip冲突

         SET v_IsConflict = 1;
      ELSE
         SET v_IsConflict = 0;
      end if;
      IF EXISTS(SELECT 'X' FROM TSL_MonitorUnitIpMap WHERE MonitorUnitId = v_HostId) then
-- 已存在Ip映射，修改为最新值
/*liangyj
         IF EXISTS(SELECT 'X' FROM TSL_MonitorUnitIpMap WHERE MonitorUnitId = v_HostId
         AND ((NewIpAddress <> v_IpAddress) OR (NewIpAddress = v_IpAddress AND IsConflict <> v_IsConflict))) then

            UPDATE TSL_MonitorUnitIpMap
            SET NewIpAddress = v_IpAddress,OldIpAddress = v_OldIpAddress,RecordTime = CURRENT_TIMESTAMP,
            IsSync = 0,IsConflict = v_IsConflict
            WHERE MonitorUnitId = v_HostId;
         end if;
      ELSE*/
 INSERT INTO TSL_MonitorUnitIpMap(MonitorUnitId,
NewIpAddress,
OldIpAddress,
RecordTime,
IsSync,
IsConflict,
Description)
VALUES(v_HostId,
v_IpAddress,
v_OldIpAddress,
CURRENT_TIMESTAMP,
0,
v_IsConflict,
NULL);
      end if;
   ELSE
      UPDATE TSL_MonitorUnitIpMap
      SET NewIpAddress = v_OldIpAddress,OldIpAddress = v_OldIpAddress,RecordTime = CURRENT_TIMESTAMP,
      IsSync = 1,IsConflict = 0
      WHERE MonitorUnitId = v_HostId;
   end if;

END;


-- SELECT N'SQLWAYS_EVAL# L_MURegisterRequest]...';





DROP PROCEDURE IF EXISTS PNL_MURegisterRequest;

CREATE PROCEDURE PNL_MURegisterRequest(v_HostId			   INT,						-- 监控单元ID
v_HostType		   INT,						-- SQLWAYS_EVAL# DS(1),AS(2),DSC(3),DSCBak(4),RAS(5),Watchdog(6),CFG(7),RMU(10)
v_MonitorUnitCode	   VARCHAR(128),			-- SQLWAYS_EVAL# 单元有SN，则为SN，否则为GUID）
v_ConfigFileCode	   VARCHAR(32),				-- 监控单元配置文件MD5码
v_SampleConfigCode   VARCHAR(32),				-- SQLWAYS_EVAL# MD5码
v_IpAddress		VARCHAR(32),				-- 监控单元IP地址
v_StartUpTime        DATETIME,INOUT SWP_Ret_Value INT)				-- 监控单元启动时间
   SWL_return:
BEGIN
-- 处理：
-- 1 校验MU是否可以注册
-- SQLWAYS_EVAL# erateMUSyncPlan，根据其结果来处理
-- 		< 0	不允许注册
-- SQLWAYS_EVAL# 需返回服务地址给SiteUnit
-- 		> 0	允许注册

-- 返回结果
-- < 0	不允许注册
-- SQLWAYS_EVAL# 回服务地址给SiteUnit
-- > 0	允许注册

   DECLARE v_StationId INT;
   DECLARE v_WorkStationId INT;
   DECLARE v_ReturnValue INT;

-- 校验MU是否可以注册
-- SQLWAYS_EVAL# teMUSyncPlan处理，StationId不处理
   SET v_ReturnValue = PNL_GenerateMUSyncPlan(-1,v_HostId,v_ConfigFileCode,v_SampleConfigCode,v_IpAddress);

   IF v_ReturnValue > 0 then

-- 更新主机启动时间
      UPDATE TSL_MonitorUnit
      SET StartTime = v_StartUpTime
      WHERE MonitorUnitId = v_HostId;

-- SQLWAYS_EVAL# ConnectState = 1 
      IF EXISTS(SELECT 1 FROM TSL_MonitorUnit WHERE MonitorUnitId = v_HostId) then

         UPDATE TBL_Equipment Set ConnectState = 1 WHERE MonitorUnitId = v_HostId AND ConnectState = 2;
      end if;

-- RMU下MU
      select   WorkStationId INTO v_WorkStationId FROM TSL_MonitorUnit WHERE MonitorUnitId = v_HostId;
      IF (v_WorkStationId IS NOT NULL) then

-- 666避免与其他返回值冲突
         SET SWP_Ret_Value = 666;
         LEAVE SWL_return;
      end if;
   end if;                                                                   

-- MU注册时，比较更新其IP
   IF v_HostType = 0 then

      CALL PNL_MURegisterIpCompare(v_HostId,v_IpAddress);
   end if;

   SET SWP_Ret_Value = v_ReturnValue;
END;

-- SELECT N'SQLWAYS_EVAL# L_SaveCardEventResponse]...';





DROP PROCEDURE IF EXISTS PNL_SaveCardEventResponse;

CREATE PROCEDURE PNL_SaveCardEventResponse(v_StationId		   INT,						-- 局站Id
v_HostId			   INT,						-- 监控单元Id
v_EquipmentId		   INT,						-- 设备Id
v_SequenceId         CHAR(32),				-- 事件流水号
v_EventId			   INT,						-- 事件Id
v_RecordTime		   DATETIME,				-- 刷卡时间
v_DoorId			   INT,						-- 门号
v_CardId			   VARCHAR(32),				-- 卡号
v_Enter			   INT,						-- 进出门标志
v_SwapFlag 		   INT)						-- 刷卡标识说明
BEGIN
   SET @SWV_Null_Var = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_SaveControlResponse]...';





DROP PROCEDURE IF EXISTS PNL_SaveControlResponse;

CREATE PROCEDURE PNL_SaveControlResponse(v_StationId		   INT,						-- 局站Id
v_HostId			   INT,						-- 监控单元Id
v_EquipmentId		   INT,						-- 设备Id
v_SequenceId         CHAR(32),				-- 控制流水号
v_ControlId		   INT,						-- 控制Id
v_StartTime		   DATETIME,				-- 控制开始时间
v_EndTime			   DATETIME,				-- 控制结束时间
v_ValueType		   INT,					-- 值类型
v_StringValue        NATIONAL VARCHAR(255),			-- 参数值是什么类型？
v_ResultCode		   INT,						-- 结果代码
v_ResultDescription  NATIONAL VARCHAR(255),			-- 结果描述
v_BaseTypeId		   NUMERIC(10,0))						-- 基类ID(可空)
BEGIN
   SET @SWV_Null_Var = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_SaveFullCfgResponse]...';






DROP PROCEDURE IF EXISTS PNL_SaveFullCfgResponse;
CREATE PROCEDURE PNL_SaveFullCfgResponse(v_StationId INT ,
v_MonitorUnitId INT ,
v_ResultCode INT)
BEGIN
   DECLARE v_RetryCount INT; 
   DECLARE v_MaxRetryCount INT; 
   DECLARE v_TaskId INT; 
   DECLARE v_SyncResult INT; 
   DECLARE v_SyncDescription NATIONAL VARCHAR(255);
   DECLARE v_SyncTime DATETIME;
   DECLARE v_Description NATIONAL VARCHAR(255);
-- SQLWAYS_EVAL# Record写任务日志
   DECLARE v_RecordEnable NATIONAL VARCHAR(4000);
   select   ConfigValue INTO v_RecordEnable FROM TBL_SysConfig WHERE ConfigKey = 'SQLWAYS_EVAL# able';

   SET v_RetryCount = 0;
   SET v_MaxRetryCount = 1;

   select   TaskId INTO v_TaskId FROM TBL_MUSyncTask WHERE StationId = v_StationId AND MonitorUnitId = v_MonitorUnitId AND SyncState = 1;

   IF(v_ResultCode = 0) then-- success

      SET v_SyncResult = 1;
      SET v_SyncDescription = '';
      SET v_SyncTime = CURRENT_TIMESTAMP;
      SET v_Description = '配置同步成功';
      UPDATE TSL_MonitorUnit SET IsSync = 1,SyncTime = v_SyncTime WHERE StationId = v_StationId AND MonitorUnitId = v_MonitorUnitId;
      DELETE FROM TBL_MUSyncTask WHERE TaskId = v_TaskId;
      IF(IFNULL(v_RecordEnable,'true') = 'true') then
 
-- 写任务日志
  INSERT INTO TBL_MUSyncRecord(StationId,MonitorUnitId,TaskId,SyncResult,SyncTime,Description)
VALUES(v_StationId,v_MonitorUnitId,v_TaskId,0,v_SyncTime,v_Description);
      end if;
   ELSE 
      IF (v_ResultCode > 0) then-- fail

         SET v_SyncResult = 0;
         IF(v_ResultCode = 1) then
            SET v_SyncDescription = '底端找不到配置文件';
         ELSE 
            IF(v_ResultCode = 2) then
               SET v_SyncDescription = 'MD5码不匹配';
            ELSE 
               IF(v_ResultCode = 3) then
                  SET v_SyncDescription = '底端更新文件失败';
               ELSE 
                  IF(v_ResultCode = 4) then
                     SET v_SyncDescription = '底端解压文件失败';
                  ELSE 
                     IF(v_ResultCode = 5) then
                        SET v_SyncDescription = '文件大小超过限制';
                     ELSE
                        SET v_SyncDescription = '未知';
                     end if;
                  end if;
               end if;
            end if;
         end if;
         IF EXISTS(SELECT 'X' FROM TSL_MonitorUnit WHERE MonitorUnitId = v_MonitorUnitId AND IsSync = 1) then

            UPDATE TSL_MonitorUnit SET IsSync = 0 WHERE MonitorUnitId = v_MonitorUnitId;
         end if;
         select   MaxRetryCount, RetryCount INTO v_MaxRetryCount,v_RetryCount FROM TBL_MUSyncTask WHERE TaskId = v_TaskId;
         SET v_RetryCount = v_RetryCount+1;
         IF(v_RetryCount >= v_MaxRetryCount) then-- 失败

            SET v_SyncDescription = CONCAT(v_SyncDescription,'达到最大重试次数');
            DELETE FROM TBL_MUSyncTask WHERE TaskId = v_TaskId;
         ELSE-- 任务重试
            UPDATE TBL_MUSyncTask SET SyncState = 0,EndTime = CURRENT_TIMESTAMP,RetryCount = v_RetryCount WHERE TaskId = v_TaskId;
         end if;
         IF(IFNULL(v_RecordEnable,'true') = 'true') then

  INSERT INTO TBL_MUSyncRecord(StationId,MonitorUnitId,TaskId,SyncResult,SyncTime,Description)
VALUES(v_StationId,v_MonitorUnitId,v_TaskId,v_SyncResult,CURRENT_TIMESTAMP,v_SyncDescription);
         end if;
      end if;
   end if; 

END;

-- SELECT N'SQLWAYS_EVAL# L_SaveHeatbeatRequest]...';





DROP PROCEDURE IF EXISTS PNL_SaveHeatbeatRequest;

CREATE PROCEDURE PNL_SaveHeatbeatRequest(v_HostId			   INT,						-- 监控单元ID
v_HostType		   INT,						-- SQLWAYS_EVAL# DS(1),AS(2),DSC(3),DSCBak(4),RAS(5),Watchdog(6),CFG(7),RMU(10)
v_HeatbeatTime       DATETIME,				-- 监控单元启动时间
v_Report             NATIONAL VARCHAR(255))			-- 心跳附带报告信息
BEGIN

-- 处理：
-- 目前只处理工作站
-- 修改他的更新时间

   DECLARE v_CurrentTime DATETIME;

-- 当前时间
   SET v_CurrentTime = CURRENT_TIMESTAMP;

   UPDATE TBL_WorkStation
   SET UpdateTime = v_CurrentTime
   WHERE WorkStationId = v_HostId;
END;



DROP PROCEDURE IF EXISTS PNL_SaveHistoryEvent;

CREATE PROCEDURE PNL_SaveHistoryEvent(v_StationId		   INT,						-- 局站Id
v_EquipmentId		   INT,						-- 设备Id
v_EventId			   INT,						-- 事件Id
v_EventConditionId   INT,					    -- 产生事件的条件Id
v_SequenceId         NATIONAL VARCHAR(255),			-- 事件流水号
v_StartTime		   DATETIME,				-- 事件开始时间
v_EndTime			   DATETIME,				-- 事件结束时间
v_Overturn		   INT,						-- 事件翻转次数
v_Meanings		   NATIONAL VARCHAR(255),			-- 事件描述
v_EventValue         FLOAT,		        	-- 触发值
v_BaseTypeId		   NUMERIC(10,0),INOUT SWP_Ret_Value INT)						-- 基类ID(可空)
   SWL_return:
BEGIN
   DECLARE v_EventCategory INT;
   DECLARE v_EventSeverityId INT;
   DECLARE v_EventSeverity NATIONAL VARCHAR(255);
   DECLARE v_StationState INT;
   DECLARE v_MaskStartTime DATETIME;
   DECLARE v_MaskEndTime DATETIME;
   DECLARE v_ConfirmTime DATETIME;
   DECLARE v_ConfirmerId INT;   
   DECLARE v_ConfirmerName NATIONAL VARCHAR(256);
   DECLARE v_StandardAlarmNameId INT;
   DECLARE v_StandardAlarmName NATIONAL VARCHAR(256);
   DECLARE v_OperationType INT;
   DECLARE v_CenterId INT;
   DECLARE v_CenterName NATIONAL VARCHAR(255);
   DECLARE v_StructureName NATIONAL VARCHAR(255);
   DECLARE v_MonitorUnitName NATIONAL VARCHAR(255);
   DECLARE v_EquipmentCategoryName NATIONAL VARCHAR(255);
   DECLARE v_BaseTypeName NATIONAL VARCHAR(255);
   DECLARE v_ret INT;
   DECLARE v_ResetSequenceId NATIONAL VARCHAR(128);
   DECLARE v_StructureId INT;
   DECLARE v_StandardMeaning NATIONAL VARCHAR(255);
   DECLARE v_StandardVer INT;
   DECLARE v_NewEventSeverityId INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 参数检验
   SET @SWV_Error = 0;
   IF  v_StationId     IS NULL OR v_EquipmentId   IS NULL OR v_EventId      IS NULL OR  v_EventConditionId IS NULL OR
   v_StartTime     IS NULL OR v_EndTime IS NULL then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

   IF EXISTS(SELECT 'X' FROM TSL_ActiveEvent WHERE SequenceId = v_SequenceId) then

      CALL PNL_SaveEventResponse(v_StationId,v_EquipmentId,v_EventId,v_EventConditionId,v_SequenceId,v_StartTime,
      v_EndTime,v_Overturn,v_Meanings,v_EventValue,v_BaseTypeId);
      SET SWP_Ret_Value = 22;
      LEAVE SWL_return;
   end if;


-- SQLWAYS_EVAL# 备，信号名，基类ID
   SET v_StationState = PNL_GetStationState(v_StationId,v_StartTime);

   select   StructureId, StructureName INTO v_CenterId,v_CenterName FROM TBL_StationStructure WHERE ParentStructureId = 0;

   select   structure.StructureId, structure.StructureName INTO v_StructureId,v_StructureName FROM TBL_StationStructureMap map, TBL_StationStructure structure WHERE map.StationId = v_StationId
   AND map.StructureId = structure.StructureId
   AND structure.StructureGroupId = 1;

   select   MonitorUnitName, dataItem.ItemValue INTO v_MonitorUnitName,v_EquipmentCategoryName FROM TSL_MonitorUnit monitorUnit, TBL_Equipment equipment, TBL_DataItem dataItem WHERE monitorUnit.MonitorUnitId = equipment.MonitorUnitId
   AND equipment.EquipmentId = v_EquipmentId
   AND equipment.StationId = v_StationId
   AND dataItem.EntryId = 7
   AND equipment.EquipmentCategory = dataItem.ItemId;			      			        

   select   EventSeverity, Meanings, A.BaseTypeId INTO v_EventSeverityId,v_StandardMeaning,v_BaseTypeId FROM TBL_EventCondition A, TBL_Equipment B WHERE B.StationId = v_StationId AND B.EquipmentId = v_EquipmentId
   AND A.EquipmentTemplateId = B.EquipmentTemplateId
   AND A.EventId = v_EventId AND A.EventConditionId = v_EventConditionId;

   select   BaseTypeName INTO v_BaseTypeName FROM TBL_EventBaseDic WHERE BaseTypeId = v_BaseTypeId;                               

/*SQLWAYS_EVAL# = srule.StandardDicId  
FROM TBL_Event configEvent, TBL_StandardTemplateMap map, TBL_StandardRule srule, TBL_Station station,TBL_Equipment equipment
WHERE equipment.EquipmentTemplateId = map.EquipmentTemplateId
AND configEvent.EquipmentTemplateId = equipment.EquipmentTemplateId
AND map.StandardTemplateId = srule.StandardTemplateId
AND configEvent.EventName = srule.EventName
AND station.StationCategory = map.StationCategory
AND configEvent.EventId = @EventId
AND station.StationId = @StationId
AND equipment.StationId = @StationId
AND equipment.EquipmentId = @EquipmentId
AND srule.Meanings = @StandardMeaning
*/	 

   SET v_StandardVer = PAM_GetStandardVer(); -- 黑龙江本地标准化需求修改
   IF v_BaseTypeId IS NOT NULL then

-- SQLWAYS_EVAL# = PAM_GetStandardVer

      select   A.StandardDicId, replace(D.EventStandardName,'XX',CAST(v_BaseTypeId -floor(v_BaseTypeId/1000)*1000 AS CHAR(10))) INTO v_StandardAlarmNameId,v_StandardAlarmName FROM TBL_EventBaseMap A
      INNER JOIN TBL_StationBaseMap B ON A.StationBaseType = B.StationBaseType AND B.StandardType = v_StandardVer
      INNER JOIN TBL_Station C ON C.StationCategory = B.StationCategory
      INNER JOIN TBL_StandardDicEvent D ON D.StandardDicId = A.StandardDicId
      AND (D.StationCategory = B.StationBaseType OR D.StationCategory = 0)
      AND D.StandardType = v_StandardVer WHERE A.BaseTypeId = floor(v_BaseTypeId/1000)*1000+1
      AND C.StationId = v_StationId;
   end if; 

-- SQLWAYS_EVAL# 警设置为地方标准化
   IF v_StandardAlarmNameId IS NULL AND v_StandardVer = 1 then

      select   F.StandardDicId, F.EventStandardName, F.EventSeverity INTO v_StandardAlarmNameId,v_StandardAlarmName,v_NewEventSeverityId FROM TBL_Equipment A
      INNER JOIN TBL_EquipmentTemplate B ON A.EquipmentTemplateId = B.EquipmentTemplateId
      INNER JOIN TBL_Station C ON A.StationId = C.StationId
      INNER JOIN TBL_StationBaseMap D ON D.StationCategory = C.StationCategory AND D.StandardType = v_StandardVer
      INNER JOIN TBL_BaseEquipmentMap E
      ON E.StationBaseType = D.StationBaseType AND E.EquipmentBaseType = B.EquipmentBaseType AND E.StandardType = v_StandardVer
      INNER JOIN TBL_StandardDicEvent F
      ON F.StandardDicId = E.StandardDicId
      AND (F.StationCategory = D.StationBaseType OR F.StationCategory = 0)  AND F.StandardType = v_StandardVer WHERE A.StationId = v_StationId AND A.EquipmentId = v_EquipmentId;
      IF v_NewEventSeverityId IS NOT NULL then

         SET v_EventSeverityId = v_NewEventSeverityId;
      end if;
   end if;

   select   ItemValue INTO v_EventSeverity FROM TBL_DataItem WHERE EntryId = 23 AND ItemId = v_EventSeverityId;

/*SQLWAYS_EVAL# = StandardName
FROM TBL_StandardDic
WHERE StandardDicId = @StandardAlarmNameId  
*/

   SET @SWV_Error = 0;
   INSERT INTO TBL_HistoryEvent(SequenceId ,
StationId ,
StationName ,
EquipmentId ,
EquipmentName ,
EventId ,
EventName ,
EventConditionId ,
EventSeverityId ,
EventSeverity,
StartTime ,
EndTime ,
CancelTime ,
CancelUserId ,
CancelUserName ,
ConfirmTime ,
ConfirmerId ,
ConfirmerName ,
EventValue ,
ReversalNum ,
Meanings ,
EventFilePath ,
Description,
SourceHostId ,
InstructionId,
InstructionStatus ,
StandardAlarmNameId,
StandardAlarmName ,
BaseTypeId ,
BaseTypeName ,
EquipmentCategory ,
EquipmentCategoryName ,
MaintainState ,
SignalId ,
RelateSequenceId ,
EventCategoryId ,
EventStateId ,
CenterId ,
CenterName ,
StructureName,
MonitorUnitName,
StructureId,
StationCategoryId,
EquipmentVendor)
   SELECT
   v_SequenceId,
v_StationId,
st.StationName,
v_EquipmentId,
eq.EquipmentName,
v_EventId,
ev.EventName,
v_EventConditionId,
v_EventSeverityId,
v_EventSeverity,
v_StartTime ,
v_EndTime ,
NULL AS CancelTime,
NULL AS CancelUserId,
NULL AS CancelUserName,
CURRENT_TIMESTAMP AS ConfirmTime,
-2  AS ConfirmerId,
'系统自动确认' AS ConfirmName,
v_EventValue ,
0 AS ReversalNum,
v_Meanings ,
NULL AS EventFilePath,
NULL AS Description,
eq.MonitorUnitId,
NULL AS InstructionId,
0 AS InstructionStatus,
v_StandardAlarmNameId,
v_StandardAlarmName ,
v_BaseTypeId,
v_BaseTypeName,
eq.EquipmentCategory ,
v_EquipmentCategoryName ,
v_StationState  AS MaintainState,
ev.SignalId ,
NULL AS RelateSequenceId ,
ev.EventCategory,
ev.Enable    ,
v_CenterId       ,
v_CenterName     ,
v_StructureName   ,
v_MonitorUnitName ,
v_StructureId ,
st.StationCategory,
eq.Vendor
   FROM TBL_EventCondition ec
   INNER JOIN TBL_Equipment eq ON ec.EquipmentTemplateId = eq.EquipmentTemplateId
   INNER JOIN TBL_Event ev ON  ev.EventId = ec.EventId  AND ec.EquipmentTemplateId = ev.EquipmentTemplateId
   INNER JOIN TBL_Station st ON eq.StationId = st.StationId
   WHERE eq.EquipmentId = v_EquipmentId
   AND eq.StationId = v_StationId
   AND ec.EventId = v_EventId
   AND ec.EventConditionId = v_EventConditionId;	  

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -2;
      LEAVE SWL_return;
   end if;
END;




DROP PROCEDURE IF EXISTS PNL_SaveMaskHistoryEvent;

CREATE PROCEDURE PNL_SaveMaskHistoryEvent(v_StationId		   INT,						
v_EquipmentId		   INT,						
v_SequenceId         NATIONAL VARCHAR(128),				
v_EventId			   INT,						
v_ConditionId        INT,   
v_EventValue         FLOAT ,
v_Meanings          NATIONAL VARCHAR(255) ,
v_BaseTypeId        NUMERIC(10,0) ,                  
v_StartTime		   DATETIME,			   
v_EndTime			   DATETIME,INOUT SWP_Ret_Value INT)						
   SWL_return:
BEGIN
   DECLARE v_MaskStartTime DATETIME;
   DECLARE v_MaskEndTime DATETIME;
   DECLARE v_TimeGroupId INT;  
   DECLARE v_DayInWeek INT;
   DECLARE v_IsMask INT; 
   DECLARE v_TimeSpanChar NATIONAL VARCHAR(24);
   IF(v_EndTime IS NOT NULL) then

      IF EXISTS(SELECT 'X' FROM TBL_EventMaskHistory WHERE SequenceId = v_SequenceId) then

-- SQLWAYS_EVAL#    	          
  INSERT INTO TBL_HistoryEventMask(SequenceId,
StationId,
EquipmentId,
EventId,
EventConditionId,
EventValue,
Meanings,
BaseTypeId,
StartTime,
EndTime)
         SELECT
         SequenceId,
StationId,
EquipmentId,
EventId,
EventConditionId,
EventValue,
Meanings,
BaseTypeId,
StartTime,
v_EndTime EndTime
         FROM TBL_EventMaskHistory
         WHERE SequenceId = v_SequenceId;
         DELETE FROM TBL_EventMaskHistory
         WHERE SequenceId = v_SequenceId;
      end if;
   ELSE
      IF EXISTS(SELECT 'X' FROM TBL_EventMaskHistory WHERE SequenceId = v_SequenceId) then
         SET SWP_Ret_Value = -3;
         LEAVE SWL_return;
      end if;
      select   StartTime, EndTime, TimeGroupId INTO v_MaskStartTime,v_MaskEndTime,v_TimeGroupId FROM  TBL_EventMask WHERE StationId = v_StationId
      AND   EquipmentId = v_EquipmentId
      AND   EventId = v_EventId;
      IF (v_MaskStartTime IS NOT NULL) then

         IF (v_StartTime > v_MaskStartTime AND v_StartTime < v_MaskEndTime) then

  INSERT INTO TBL_EventMaskHistory(SequenceId, StationId, EquipmentId, EventId, EventConditionId,EventValue, Meanings, BaseTypeId, StartTime)
VALUES(v_SequenceId, v_StationId, v_EquipmentId, v_EventId, v_ConditionId,v_EventValue, v_Meanings, v_BaseTypeId, v_StartTime);

            SET SWP_Ret_Value = -3;
            LEAVE SWL_return;
         end if;
      ELSE
         SET v_DayInWeek = DAYOFWEEK(CURRENT_TIMESTAMP);
         select   TimeSpanChar INTO v_TimeSpanChar FROM TBL_TimeGroupSpan WHERE TimeGroupId = v_TimeGroupId AND Week = v_DayInWeek;
         SET v_IsMask = IsMask(v_TimeSpanChar);
         IF (v_IsMask = 1) then

  INSERT INTO TBL_EventMaskHistory(SequenceId, StationId, EquipmentId, EventId, EventConditionId,EventValue, Meanings, BaseTypeId, StartTime)
VALUES(v_SequenceId, v_StationId, v_EquipmentId, v_EventId, v_ConditionId,v_EventValue, v_Meanings, v_BaseTypeId, v_StartTime);

            SET SWP_Ret_Value = -3;
            LEAVE SWL_return;
         end if;
      end if;
      select   StartTime, EndTime, TimeGroupId INTO v_MaskStartTime,v_MaskEndTime,v_TimeGroupId FROM  TBL_EquipmentMask WHERE StationId = v_StationId
      AND   EquipmentId = v_EquipmentId;
      IF (v_MaskStartTime IS NOT NULL) then

         IF (v_StartTime > v_MaskStartTime AND v_StartTime < v_MaskEndTime) then

  INSERT INTO TBL_EventMaskHistory(SequenceId, StationId, EquipmentId, EventId, EventConditionId,EventValue, Meanings, BaseTypeId, StartTime)
VALUES(v_SequenceId, v_StationId, v_EquipmentId, v_EventId, v_ConditionId,v_EventValue, v_Meanings, v_BaseTypeId, v_StartTime);

            SET SWP_Ret_Value = -3;
            LEAVE SWL_return;
         end if;
      ELSE
         SET v_DayInWeek = DAYOFWEEK(CURRENT_TIMESTAMP);
         select   TimeSpanChar INTO v_TimeSpanChar FROM TBL_TimeGroupSpan WHERE TimeGroupId = v_TimeGroupId AND Week = v_DayInWeek;
         SET v_IsMask = IsMask(v_TimeSpanChar);
         IF (v_IsMask = 1) then

  INSERT INTO TBL_EventMaskHistory(SequenceId, StationId, EquipmentId, EventId, EventConditionId,EventValue, Meanings, BaseTypeId, StartTime)
VALUES(v_SequenceId, v_StationId, v_EquipmentId, v_EventId, v_ConditionId,v_EventValue, v_Meanings, v_BaseTypeId, v_StartTime);

            SET SWP_Ret_Value = -3;
            LEAVE SWL_return;
         end if;
      end if;
      select   StartTime, EndTime, TimeGroupId INTO v_MaskStartTime,v_MaskEndTime,v_TimeGroupId FROM  TBL_StationMask WHERE StationId = v_StationId;
      IF (v_MaskStartTime IS NOT NULL) then

         IF (v_StartTime > v_MaskStartTime AND v_StartTime < v_MaskEndTime) then

  INSERT INTO TBL_EventMaskHistory(SequenceId, StationId, EquipmentId, EventId, EventConditionId,EventValue, Meanings, BaseTypeId, StartTime)
VALUES(v_SequenceId, v_StationId, v_EquipmentId, v_EventId, v_ConditionId,v_EventValue, v_Meanings, v_BaseTypeId, v_StartTime);

            SET SWP_Ret_Value = -3;
            LEAVE SWL_return;
         end if;
      ELSE
         SET v_DayInWeek = DAYOFWEEK(CURRENT_TIMESTAMP);
         select   TimeSpanChar INTO v_TimeSpanChar FROM TBL_TimeGroupSpan WHERE TimeGroupId = v_TimeGroupId AND Week = v_DayInWeek;
         SET v_IsMask = IsMask(v_TimeSpanChar);
         IF (v_IsMask = 1) then

  INSERT INTO TBL_EventMaskHistory(SequenceId, StationId, EquipmentId, EventId, EventConditionId,EventValue, Meanings, BaseTypeId, StartTime)
VALUES(v_SequenceId, v_StationId, v_EquipmentId, v_EventId, v_ConditionId,v_EventValue, v_Meanings, v_BaseTypeId, v_StartTime);

            SET SWP_Ret_Value = -3;
            LEAVE SWL_return;
         end if;
      end if;
   end if; 


   SET SWP_Ret_Value = 1;
END;


-- SELECT N'SQLWAYS_EVAL# L_SavePowerData]...';


DROP PROCEDURE IF EXISTS PNL_SavePowerData;

CREATE PROCEDURE PNL_SavePowerData(v_StationId              INT             ,
v_EquipmentId            INT             ,
v_SignalId               INT             ,
v_FloatValue             FLOAT           ,
v_RecordTime             DATETIME,INOUT SWP_Ret_Value INT)
BEGIN
/*SQLWAYS_EVAL# int
--取得相应的电表Id
SELECT @AmmeterId  = AmmeterId FROM CfgAmmeter WHERE StationId = @StationId AND EquipmentId = @EquipmentId

IF @AmmeterId IS NOT NULL
BEGIN
--IF NOT EXISTS(SELECT 'X' FROM HistoryAmeterRecord where RecordTime >= @StartTime AND RecordTime <= @EndTime AND StationId =@StationId AND AmmeterId 
= @AmmeterId)
INSERT INTO HistoryAmeterRecord(StationId,AmmeterId,RecordTime,RecordValue,RevisedValue) values
(@StationId,@AmmeterId,@RecordTime,@FloatValue,@FloatValue)
END
*/
   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_SavePowerHistoryData]...';





DROP PROCEDURE IF EXISTS PNL_SavePowerHistoryData;

CREATE PROCEDURE PNL_SavePowerHistoryData(v_StationId   	INT       	,
v_HostId      	INT   	   	,
v_EquipmentId 	INT		    ,
v_SignalId    	INT        	,
v_SampleTime		DATETIME    ,
v_FloatValue		FLOAT       ,
v_StringValue	NATIONAL VARCHAR(255),
v_DateTimeValue	DATETIME    ,
v_BaseTypeId		NUMERIC(10,0)         ,
v_ValueType		INT         ,
v_SignalType		INT         ,
v_EventSeverity	INT)
BEGIN
-- 保存电能，动能历史数据
   DECLARE v_StartIndex INT;
   DECLARE v_EndIndex INT;
   DECLARE v_StationName NATIONAL VARCHAR(255);
   DECLARE v_EquipmentName NATIONAL VARCHAR(255);
   DECLARE v_SignalName NATIONAL VARCHAR(255);
   DECLARE v_SignalCategory INT;
   DECLARE v_ShowPrecision NATIONAL VARCHAR(255);
   DECLARE v_Unit NATIONAL VARCHAR(255);
   DECLARE v_BaseTypeName NATIONAL VARCHAR(255);
   DECLARE v_EventSeverityName NATIONAL VARCHAR(255);
   DECLARE v_SQL NATIONAL VARCHAR(4000);
   DECLARE v_Meanings NATIONAL VARCHAR(255);
   DECLARE v_EquipmentTemplateId INT;
   DECLARE v_StationState INT;
   DECLARE v_Total INT;
   DECLARE v_GetDate DATETIME;
   DECLARE v_SignalPropertyId INT;-- 电能使用
   DECLARE v_IsPCSignal BOOLEAN;-- 电能使用

-- 当前时间
   SET v_GetDate = CURRENT_TIMESTAMP;

-- 阀值类型

-- 信号属性
   select   py.SignalPropertyId INTO v_SignalPropertyId FROM TBL_SignalProperty py
   INNER JOIN TBL_Equipment et ON py.EquipmentTemplateId = et.EquipmentTemplateId
   INNER JOIN TBL_Signal sl ON et.EquipmentTemplateId = sl.EquipmentTemplateId AND py.SignalId = sl.SignalId WHERE py.SignalPropertyId = 34 AND et.StationId = v_StationId AND et.EquipmentId = v_EquipmentId AND sl.SignalId = v_SignalId;

-- 是否动能，电能数据
   SET v_IsPCSignal = 0;

/*SQLWAYS_EVAL# EXISTS (SELECT '1' 
FROM CfgSignal a 
INNER JOIN CfgSignalProperty b ON a.StationId = b.StationId AND a.EquipmentId = b.EquipmentId AND a.SignalId = b.SignalId AND a.OperationType != 3
WHERE a.StationId = @StationId AND a.EquipmentId = @EquipmentId AND a.SignalId = @SignalId AND b.SignalPropertyId = 34) 
OR
EXISTS (SELECT '1' 
FROM  CfgEquipment a 
INNER JOIN EquipmentSignalProperty b ON a.EquipmentTemplateId = b.EquipmentId 
WHERE a.StationId = @StationId AND a.EquipmentId = @EquipmentId AND b.SignalId = @SignalId AND b.SignalPropertyId = 34)
BEGIN
SELECT @IsPCSignal = 1
END
*/

-- 保存动能，电能数据
   IF v_SignalPropertyId IS NOT NULL then

/*SQLWAYS_EVAL# = 1
BEGIN
INSERT INTO PowerConsumption(
StationId           ,
EquipmentId         ,
SignalId            ,
DataType            ,
FloatValue          ,
StringValue         ,
RecordTime          ,
ThresholdType       ,
Meanings            ,
SignalSeverity      )
VALUES(
@StationId          ,
@EquipmentId        ,
@SignalId           ,
@DataType           ,
@FloatValue         ,
@StringValue        ,
@RecordTime         ,
@ThresholdType      ,
@Meanings           ,
@SignalSeverity     )
END
*/
      IF v_SignalType = 7 then

         IF v_IsPCSignal = 1 then

-- SQLWAYS_EVAL# 保存在HistoryAmeterRecord
            CALL PNL_SavePowerData(v_StationId,v_EquipmentId,v_SignalId,v_FloatValue,v_SampleTime);
         ELSE
 INSERT INTO TBL_HourlySignal(StationId           ,
EquipmentId         ,
SignalId            ,
RecordTime          ,
DataType            ,
FloatValue          ,
StringValue         ,
ReportTime          ,
SignalPropertyId)
VALUES(v_StationId          ,
v_EquipmentId        ,
v_SignalId           ,
v_SampleTime         ,
v_ValueType          ,
v_FloatValue         ,
v_StringValue        ,
v_GetDate			,
v_SignalPropertyId);
         end if;
      end if;
   end if;
END;

-- SELECT N'SQLWAYS_EVAL# L_SavePreEventResponse]...';



-- 告警预处理模块
-- SQLWAYS_EVAL# ent中告警进行处理

DROP PROCEDURE IF EXISTS PNL_SavePreEventResponse;

CREATE PROCEDURE PNL_SavePreEventResponse(
 -- 基类ID(可空)
v_StationId				INT, -- 局站Id
v_EquipmentId			INT, -- 设备Id
v_EventId				INT, -- 事件Id
v_EventConditionId		INT, -- 产生事件的条件Id
INOUT v_SequenceId			NATIONAL VARCHAR(128) , -- 事件流水号
v_StartTime				DATETIME, -- 事件开始时间
v_EndTime				DATETIME, -- 事件结束时间
v_Overturn				INT, -- 事件翻转次数
v_Meanings				NATIONAL VARCHAR(255), -- 事件描述
v_EventValue			FLOAT, 	-- 触发值
v_BaseTypeId			NUMERIC(10,0),INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_EventCategory INT;
   DECLARE v_EventSeverityId INT;
   DECLARE v_EventSeverity NATIONAL VARCHAR(255);
   DECLARE v_StationState INT;
   DECLARE v_MaskStartTime DATETIME;
   DECLARE v_MaskEndTime DATETIME;
   DECLARE v_ConfirmTime DATETIME;
   DECLARE v_ConfirmerId INT;   
   DECLARE v_ConfirmerName NATIONAL VARCHAR(256);
   DECLARE v_StandardAlarmNameId INT;
   DECLARE v_StandardAlarmName NATIONAL VARCHAR(256);
   DECLARE v_OperationType INT;
   DECLARE v_CenterId INT;
   DECLARE v_CenterName NATIONAL VARCHAR(255);
   DECLARE v_StructureName NATIONAL VARCHAR(255);
   DECLARE v_MonitorUnitName NATIONAL VARCHAR(255);
   DECLARE v_EquipmentCategoryName NATIONAL VARCHAR(255);
   DECLARE v_BaseTypeName NATIONAL VARCHAR(255);
   DECLARE v_ret INT;
   DECLARE v_ResetSequenceId NATIONAL VARCHAR(128);
   DECLARE v_IsProcess INT;
   DECLARE v_StructureId INT;
   DECLARE v_StandardMeaning NATIONAL VARCHAR(255);
   DECLARE v_Vender NATIONAL VARCHAR(255);

-- 对告警进行预处理
-- -1	开始告警已存在
-- -2	开始告警不存在 

--  tiveEvent表
   IF v_EndTime IS NULL then
       
-- 插入新事件		       
      IF EXISTS(SELECT 'X' FROM TSL_ActiveEvent WHERE SequenceId = v_SequenceId) then      
         SET SWP_Ret_Value = -1;
         LEAVE SWL_return;
      end if;
      INSERT INTO TSL_ActiveEvent(StationId,
EquipmentId,
EventId,
EventConditionId,
SequenceId,
StartTime,
EndTime,
EventValue,
ReversalNum,
Meanings,
BaseTypeId)
VALUES(v_StationId,
v_EquipmentId,
v_EventId,
v_EventConditionId,
v_SequenceId,
v_StartTime,
v_EndTime,
v_EventValue,
v_Overturn,
v_Meanings,
v_BaseTypeId);
   ELSE 
-- 移出已结束事件      
  
      IF NOT EXISTS(SELECT 'X'
      FROM TSL_ActiveEvent
      WHERE SequenceId = v_SequenceId OR ResetSequenceId = v_SequenceId) then

         SET SWP_Ret_Value = -2;
         LEAVE SWL_return;
      end if;
     
      select   ResetSequenceId INTO v_ResetSequenceId FROM TSL_ActiveEvent WHERE ResetSequenceId = v_SequenceId LIMIT 1;
  
      IF  v_ResetSequenceId IS NOT NULL then

         select   SequenceId INTO v_SequenceId FROM TSL_ActiveEvent WHERE ResetSequenceId = v_SequenceId LIMIT 1;
      end if;

-- 删除已结束告警
      DELETE FROM TSL_ActiveEvent WHERE SequenceId = v_SequenceId;
   end if;

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_SaveRegisterRequest]...';





DROP PROCEDURE IF EXISTS PNL_SaveRegisterRequest;

CREATE PROCEDURE PNL_SaveRegisterRequest(v_DesHostId		   INT,						-- 目的主机ID
v_HostId			   INT,						-- 主机ID
v_HostType		   INT,						-- SQLWAYS_EVAL# (1),AS(2),DSC(3),DSCBak(4),RAS(5),Watchdog(6),CFG(7),RMU(10)
v_MonitorUnitCode	   VARCHAR(128),			-- SQLWAYS_EVAL# 有SN，则为SN，否则为GUID）
v_ConfigFileCode	   VARCHAR(32),				-- 主机配置文件MD5码
v_SampleConfigCode   VARCHAR(32),				-- SQLWAYS_EVAL# 5码
v_IpAddress		   VARCHAR(32),				-- 主机IP地址
v_StartUpTime        DATETIME,INOUT SWP_Ret_Value INT)				-- 主机启动时间
   SWL_return:
BEGIN
-- 处理：
-- SQLWAYS_EVAL# 储过程

-- 返回结果
-- SQLWAYS_EVAL# MU注册
-- < 0	 不允许注册
-- SQLWAYS_EVAL# 返回服务地址给SiteUnit
-- > 0	 允许注册

   DECLARE v_StationId INT;
   DECLARE v_Return INT;
   DECLARE v_Total INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 参数检查
   SET @SWV_Error = 0;
   IF v_DesHostId IS NULL OR v_DesHostId = 0 OR v_HostId IS NULL OR v_HostId = 0 OR v_HostType IS NULL then

      SET SWP_Ret_Value = -2;
      LEAVE SWL_return;
   end if;

   SET @SWV_Error = 0;
   IF v_HostType = 0 then

-- MU
-- 是否可以在指定DS注册
      SET v_Return = PNL_CanAccessDataServer(v_DesHostId,v_HostId);
      IF v_Return = 1 then

-- MU是否满足注册条件
         SET v_Return = PNL_MURegisterRequest(v_HostId,v_HostType,v_MonitorUnitCode,v_ConfigFileCode,v_SampleConfigCode,
         v_IpAddress,v_StartUpTime);
         IF v_Return >= 0 then

-- 记录MU属哪个DS
            select   COUNT(*) INTO v_Total FROM TSL_RealtimeRouting WHERE MonitorUnitId = v_HostId;
            IF v_Total > 0 then

               UPDATE TSL_RealtimeRouting SET DataServerId = v_DesHostId WHERE MonitorUnitId = v_HostId;
            ELSE
 INSERT INTO TSL_RealtimeRouting(DataServerId,MonitorUnitId)
VALUES(v_DesHostId,v_HostId);
            end if;
-- SQLWAYS_EVAL# 时刷新的问题
            UPDATE  TSL_SubscribeSignal SET SubscribeDateTime = NULL,LastUpdateDateTime = CURRENT_TIMESTAMP WHERE HostId = v_HostId;
         end if;
      ELSE
         SET SWP_Ret_Value = -9999;
         LEAVE SWL_return;
      end if;
   ELSE
-- 工作站
      SELECT WorkStationId FROM TBL_WorkStation WHERE WorkStationId = v_HostId;
      IF (ROW_COUNT() <> 1) then

         SET SWP_Ret_Value = -2;
         LEAVE SWL_return;
      end if;

-- 注册成功
      SET v_Return = 1;
   end if;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;                                                                       

   SET SWP_Ret_Value = v_Return;
END;

-- SELECT N'SQLWAYS_EVAL# L_SaveSARPreEventResponse]...';



DROP PROCEDURE IF EXISTS PNL_SaveSARPreEventResponse;


CREATE PROCEDURE PNL_SaveSARPreEventResponse(
 -- 基类ID(可空)
v_StationId				INT, -- 局站Id
v_EquipmentId			INT, -- 设备Id
v_EventId				INT, -- 事件Id
v_EventConditionId		INT, -- 产生事件的条件Id
v_SequenceId			NATIONAL VARCHAR(128), -- 事件流水号
v_StartTime				DATETIME, -- 事件开始时间
v_EndTime				DATETIME, -- 事件结束时间
v_Overturn				INT, -- 事件翻转次数
v_Meanings				NATIONAL VARCHAR(255), -- 事件描述
v_EventValue			FLOAT, 	-- 触发值
v_BaseTypeId			NUMERIC(10,0),INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_IsProcess INT;
   DECLARE v_StandardAlarmNameId INT;
   DECLARE v_CurrentTime DATETIME;
   DECLARE v_StationCategoryId INT;
   DECLARE v_StandardVer INT;
   DECLARE v_StartDelay INT;


-- 是否需要处理告警关联
   select   IsProcess INTO v_IsProcess FROM TBL_SARIsProcess;

-- 需要处理告警关联
   IF v_IsProcess > 1 then

-- 当前时间
      SET v_CurrentTime = CURRENT_TIMESTAMP;

-- 局站分类
      select   StationCategory INTO v_StationCategoryId FROM TBL_Station WHERE StationId = v_StationId;
      SET v_StandardVer = PAM_GetStandardVer();
      select   stationBase.StationBaseType INTO v_StationCategoryId FROM TBL_Station station, TBL_StationBaseMap stationBase WHERE station.StationCategory = stationBase.StationCategory
      AND  station.StationId = v_StationId
      AND stationBase.StandardType = v_StandardVer;
      select   A.BaseTypeId INTO v_BaseTypeId FROM TBL_EventCondition A, TBL_Equipment B WHERE B.StationId = v_StationId AND B.EquipmentId = v_EquipmentId
      AND A.EquipmentTemplateId = B.EquipmentTemplateId
      AND A.EventId = v_EventId AND A.EventConditionId = v_EventConditionId;

-- 插入到告警关联队列表
      INSERT INTO TBL_SARAlarmQueue(StationId					,
StationCategoryId			,
EquipmentId				,
EventId					,
EventConditionId			,
SequenceId				,
StartTime					,
EndTime					,
Overturn					,
Meanings					,
EventValue				,
BaseTypeId				,
InsertDateTime)
VALUES(v_StationId,
v_StationCategoryId,
v_EquipmentId,
v_EventId,
v_EventConditionId,
v_SequenceId,
v_StartTime,
v_EndTime,
v_Overturn,
v_Meanings,
v_EventValue,
v_BaseTypeId,
v_CurrentTime);

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   ELSE
      SET SWP_Ret_Value = 0;
      LEAVE SWL_return;
   end if;
END;




-- SELECT N'SQLWAYS_EVAL# L_SaveSubscribeSignal]...';





DROP PROCEDURE IF EXISTS PNL_SaveSubscribeSignal;

CREATE PROCEDURE PNL_SaveSubscribeSignal(v_StationId   	INT       	,
v_EquipmentId 	INT		    ,
v_SignalId    	INT        	,
v_HostId    		INT        	,
v_SubscribeType	INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
-- 保存订阅命令

-- -1 不可知错误
--  0 成功
--  1 参数为0或空

   DECLARE v_CurrentTime DATETIME;
   DECLARE v_Total INT;
   DECLARE v_DefaultValue INT;

-- 设置预设值
   SET v_DefaultValue = -1;

-- 当前时间
   SET v_CurrentTime = CURRENT_TIMESTAMP;	

-- HostId
   IF v_HostId = v_DefaultValue then

      select   MonitorUnitId INTO v_HostId FROM TBL_Equipment WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId;
   end if;

-- 参数检查
   IF v_StationId IS NULL OR v_EquipmentId IS NULL OR v_SignalId IS NULL then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;				

-- 错误处理
   IF v_StationId = 0 OR v_EquipmentId = 0 OR v_SignalId = 0 then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

   IF v_SignalId <> v_DefaultValue then

-- 单信号订阅

-- 是否存在设备订阅
      select   COUNT(*) INTO v_Total FROM TSL_SubscribeSignal WHERE StationId = v_StationId AND HostId = v_HostId AND EquipmentId = v_EquipmentId AND SignalId = v_DefaultValue;
      IF v_Total > 0 then

         UPDATE TSL_SubscribeSignal SET LastUpdateDateTime = v_CurrentTime
         WHERE StationId = v_StationId AND HostId = v_HostId AND EquipmentId = v_EquipmentId AND SignalId = v_DefaultValue;
         SET SWP_Ret_Value = 0;
         LEAVE SWL_return;
      ELSE
         select   COUNT(*) INTO v_Total FROM TSL_SubscribeSignal WHERE StationId = v_StationId AND HostId = v_HostId AND EquipmentId = v_EquipmentId AND SignalId = v_SignalId;
         IF v_Total = 0 then

-- 单信号订阅不存在
  INSERT INTO TSL_SubscribeSignal(StationId,HostId,EquipmentId,SignalId,SubscribeType,LastSampleDateTime,LastUpdateDateTime,SubscribeDateTime)
VALUES(v_StationId,v_HostId,v_EquipmentId,v_SignalId,v_SubscribeType,NULL,v_CurrentTime,NULL);			

-- SQLWAYS_EVAL# 设备订阅

            select   COUNT(*) INTO v_Total FROM TSL_SubscribeSignal WHERE StationId = v_StationId AND HostId = v_HostId AND EquipmentId = v_EquipmentId;
            IF v_Total > 10 then

               DELETE FROM TSL_SubscribeSignal
               WHERE StationId = v_StationId AND HostId = v_HostId AND EquipmentId = v_EquipmentId;
               INSERT INTO TSL_SubscribeSignal(StationId,HostId,EquipmentId,SignalId,SubscribeType,LastSampleDateTime,LastUpdateDateTime,SubscribeDateTime)
VALUES(v_StationId,v_HostId,v_EquipmentId,v_DefaultValue,v_SubscribeType,NULL,v_CurrentTime,NULL);
            end if;
         ELSE
-- 存在单信号订阅
            UPDATE TSL_SubscribeSignal SET LastUpdateDateTime = v_CurrentTime,SubscribeType = v_SubscribeType
            WHERE StationId = v_StationId AND HostId = v_HostId AND EquipmentId = v_EquipmentId AND SignalId = v_SignalId;
         end if;
      end if;
   ELSE
-- 设备订阅
-- 是否存在单信号订阅
      select   COUNT(*) INTO v_Total FROM TSL_SubscribeSignal WHERE StationId = v_StationId AND HostId = v_HostId AND EquipmentId = v_EquipmentId AND SignalId <> v_SignalId;
      IF v_Total > 0 then

         DELETE FROM TSL_SubscribeSignal
         WHERE StationId = v_StationId AND HostId = v_HostId AND EquipmentId = v_EquipmentId  AND SignalId <> v_SignalId;
      end if;
      select   COUNT(*) INTO v_Total FROM TSL_SubscribeSignal WHERE StationId = v_StationId AND HostId = v_HostId AND EquipmentId = v_EquipmentId AND SignalId = v_SignalId;
      IF v_Total = 0 then

-- 不存在设备订阅
  INSERT INTO TSL_SubscribeSignal(StationId,HostId,EquipmentId,SignalId,SubscribeType,LastSampleDateTime,LastUpdateDateTime,SubscribeDateTime)
VALUES(v_StationId,v_HostId,v_EquipmentId,v_SignalId,v_SubscribeType,NULL,v_CurrentTime,NULL);
      ELSE
-- 存在设备订阅
         UPDATE TSL_SubscribeSignal SET LastUpdateDateTime = v_CurrentTime,SubscribeType = v_SubscribeType
         WHERE StationId = v_StationId AND HostId = v_HostId AND EquipmentId = v_EquipmentId AND SignalId = v_SignalId;
      end if;
   end if;

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_SelectAllHost]...';





DROP PROCEDURE IF EXISTS PNL_SelectAllHost;

CREATE PROCEDURE PNL_SelectAllHost(v_IsWorkStation			INT ,				-- 包含WORKSTATION
v_DataServerId			INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
-- 处理：
-- 1 获取所有主机信息

-- 返回结果
-- -1 不可知错误
--  0 成功

-- 主机临时表
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
/*liangyj
   IF v_IsWorkStation is null then
      set v_IsWorkStation = 0;
   END IF;*/
   SET @SWV_Error = 0;
   CREATE TEMPORARY TABLE tt_TempHost
   (
      HostId INT,
      HostType INT,
      MonitorUnitCode NATIONAL VARCHAR(128),
      ConfigFileCode NATIONAL VARCHAR(128),
      SampleConfigCode NATIONAL VARCHAR(128),
      StartupTime DATETIME,
      State INT,
      WorkStationId INT,
      IsChildOfWorkStation INT
   );

-- MU
   INSERT INTO tt_TempHost(HostId,HostType,MonitorUnitCode,ConfigFileCode,SampleConfigCode,StartupTime,State,WorkStationId,IsChildOfWorkStation)
   SELECT mu.MonitorUnitId AS HostId, 0 AS HostType, mu.MonitorUnitCode,
mu.ConfigFileCode AS ConfigFileCode, mu.SampleConfigCode AS SampleConfigCode,
mu.StartTime AS StartupTime, mu.ConnectState AS State, 0 AS WorkStationId, 0 AS IsChildOfWorkStation
   FROM TSL_MonitorUnit mu
   INNER JOIN TSL_RealtimeRouting rr ON mu.MonitorUnitId = rr.MonitorUnitId
   WHERE mu.WorkStationId IS NULL AND rr.DataServerId = v_DataServerId;

-- MU
   INSERT INTO tt_TempHost(HostId,HostType,MonitorUnitCode,ConfigFileCode,SampleConfigCode,StartupTime,State,WorkStationId,IsChildOfWorkStation)
   SELECT mu.MonitorUnitId AS HostId, 0 AS HostType, mu.MonitorUnitCode,
mu.ConfigFileCode AS ConfigFileCode, mu.SampleConfigCode AS SampleConfigCode,
mu.StartTime AS StartupTime, mu.ConnectState AS State, mu.WorkStationId AS WorkStationId, 1 AS IsChildOfWorkStation
   FROM TSL_MonitorUnit mu
   INNER JOIN TSL_RealtimeRouting rr ON mu.MonitorUnitId = rr.MonitorUnitId
   INNER JOIN TBL_WorkStation ws ON mu.WorkStationId = ws.WorkStationId
   WHERE rr.DataServerId = v_DataServerId;

-- WorkStation
   IF v_IsWorkStation = 1 then

  INSERT INTO tt_TempHost(HostId,HostType,MonitorUnitCode,ConfigFileCode,SampleConfigCode,StartupTime,State,WorkStationId,IsChildOfWorkStation)
      SELECT WorkStationId AS HostId, 10 AS HostType, '' AS MonitorUnitCode,
'' AS  ConfigFileCode, '' AS SampleConfigCode,
CURRENT_TIMESTAMP AS StartupTime, ConnectState AS State, WorkStationId AS WorkStationId, 0 AS IsChildOfWorkStation
      FROM TBL_WorkStation;
   end if;

-- 返回结果
   SELECT * FROM tt_TempHost;
   SET @SWV_Error = 0;
   DROP TEMPORARY TABLE IF EXISTS tt_TempHost;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;                                                                       

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_SendSubscribeSignal]...';





DROP PROCEDURE IF EXISTS PNL_SendSubscribeSignal;

CREATE PROCEDURE PNL_SendSubscribeSignal(v_Frequency			INT ,
v_DataServerId		INT,INOUT SWP_Ret_Value INT)
BEGIN
-- SQLWAYS_EVAL# DateTime跟当前时间比较时间间隔大于@Frequency
-- 目前不使用
-- SQLWAYS_EVAL# eDateTime为空且SubscribeDateTime不为空
-- SQLWAYS_EVAL# teTime在当前时间30秒范围内
-- SQLWAYS_EVAL# DateTime为空
-- SQLWAYS_EVAL# eDateTime不为空且SubscribeDateTime不为空
-- SQLWAYS_EVAL# leDateTime小于SubscribeDateTime一小时
-- SQLWAYS_EVAL# leDateTime大于一年
-- SQLWAYS_EVAL# eDateTime在当前时间一分钟范围内
-- 则视为需要下发订阅命令

   DECLARE v_CurrentTime DATETIME;

-- 当前时间
   IF v_Frequency is null then
      set v_Frequency = 4;
   END IF;
   SET v_CurrentTime = CURRENT_TIMESTAMP;

-- 保存结果
   CREATE TEMPORARY TABLE tt_SubscribeSignal
   (
      StationId INT,
      HostId INT,
      EquipmentId INT,
      SignalId INT,
      SubscribeType INT,
      SaveType INT
   );-- 1：保存，0不保存

-- Condition1
   INSERT INTO tt_SubscribeSignal(StationId,HostId,EquipmentId,SignalId,SubscribeType,SaveType)
   SELECT ts.StationId,ts.HostId,ts.EquipmentId,ts.SignalId,ts.SubscribeType,1
   FROM TSL_SubscribeSignal ts
   INNER JOIN TSL_RealtimeRouting rr ON ts.HostId = rr.MonitorUnitId
   WHERE ts.SubscribeDateTime IS NOT NULL AND TIMESTAMPDIFF(MINUTE,ts.SubscribeDateTime,v_CurrentTime) > v_Frequency
   AND rr.DataServerId = v_DataServerId;

/*SQLWAYS_EVAL# INTO #SubscribeSignal(StationId,HostId,EquipmentId,SignalId,SubscribeType,SaveType)
SELECT StationId,HostId,EquipmentId,SignalId,SubscribeType, 1
FROM TSL_SubscribeSignal
WHERE SubscribeDateTime IS NOT NULL AND LastSampleDateTime = NULL
AND DATEDIFF(SECOND,SubscribeDateTime,@CurrentTime) > 30
*/

-- Condition3
   INSERT INTO tt_SubscribeSignal(StationId,HostId,EquipmentId,SignalId,SubscribeType,SaveType)
   SELECT ts.StationId,ts.HostId,ts.EquipmentId,ts.SignalId,ts.SubscribeType,1
   FROM TSL_SubscribeSignal ts
   INNER JOIN TSL_RealtimeRouting rr ON ts.HostId = rr.MonitorUnitId
   WHERE ts.SubscribeDateTime IS NULL AND rr.DataServerId = v_DataServerId;

-- Condition4
   INSERT INTO tt_SubscribeSignal(StationId,HostId,EquipmentId,SignalId,SubscribeType,SaveType)
   SELECT ts.StationId,ts.HostId,ts.EquipmentId,ts.SignalId,ts.SubscribeType,0
   FROM TSL_SubscribeSignal ts
   INNER JOIN TSL_RealtimeRouting rr ON ts.HostId = rr.MonitorUnitId
   WHERE ts.SubscribeDateTime IS NOT NULL AND ts.LastSampleDateTime IS NOT NULL
   AND TIMESTAMPDIFF(MINUTE,ts.SubscribeDateTime,v_CurrentTime) < 1
   AND ts.LastSampleDateTime < TIMESTAMPADD(HOUR,-1,ts.SubscribeDateTime)
   AND ts.LastSampleDateTime > TIMESTAMPADD(YEAR,-1,ts.SubscribeDateTime)
   AND rr.DataServerId = v_DataServerId;

-- SQLWAYS_EVAL# jiangshu cannot get subsignal
   INSERT INTO tt_SubscribeSignal(StationId,HostId,EquipmentId,SignalId,SubscribeType,SaveType) SELECT ts.StationId,ts.HostId,ts.EquipmentId,ts.SignalId,ts.SubscribeType,1 FROM TSL_SubscribeSignal ts INNER JOIN TSL_RealtimeRouting rr ON ts.HostId = rr.MonitorUnitId WHERE ts.LastSampleDateTime IS NULL AND TIMESTAMPDIFF(SECOND,ts.SubscribeDateTime,CURRENT_TIMESTAMP) < 30 AND rr.DataServerId = v_DataServerId;

-- SQLWAYS_EVAL# ibeDateTime
   UPDATE TSL_SubscribeSignal ts
   INNER JOIN tt_SubscribeSignal ss ON ts.StationId = ss.StationId AND ts.HostId = ss.HostId
   AND ts.EquipmentId = ss.EquipmentId AND ts.SignalId = ss.SignalId
   AND ss.SaveType = 1
   SET ts.SubscribeDateTime = v_CurrentTime;

-- RESULT
   SELECT DISTINCT * FROM tt_SubscribeSignal;

   DROP TEMPORARY TABLE IF EXISTS tt_SubscribeSignal;

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_UpdateFullCfgState]...';





DROP PROCEDURE IF EXISTS PNL_UpdateFullCfgState;
CREATE PROCEDURE PNL_UpdateFullCfgState(v_StationId INT ,
v_MonitorUnitId INT ,
v_ConfigFileCode CHAR(32),
v_State INT)
BEGIN

   IF(v_State = 0) then

      IF NOT EXISTS(SELECT 'x' FROM TBL_MUFullCfgState WHERE StationId = v_StationId AND MonitorUnitId = v_MonitorUnitId) then

  INSERT INTO TBL_MUFullCfgState(StationId,MonitorUnitId,ConfigFileCode,UpdateTime,State)
VALUES(v_StationId,v_MonitorUnitId,v_ConfigFileCode,CURRENT_TIMESTAMP,0);
      ELSE
         UPDATE TBL_MUFullCfgState SET State = 0,UpdateTime = CURRENT_TIMESTAMP,ConfigFileCode = v_ConfigFileCode
         WHERE StationId = v_StationId AND MonitorUnitId = v_MonitorUnitId;
      end if;
   ELSE 
      IF(v_State = 1) then

         UPDATE TBL_MUFullCfgState SET State = 1,UpdateTime = CURRENT_TIMESTAMP
         WHERE StationId = v_StationId AND MonitorUnitId = v_MonitorUnitId AND ConfigFileCode = v_ConfigFileCode;
      end if;
   end if; 
END;

-- SELECT N'SQLWAYS_EVAL# L_UpdateMUCfgMD5]...';





DROP PROCEDURE IF EXISTS PNL_UpdateMUCfgMD5;
CREATE PROCEDURE PNL_UpdateMUCfgMD5(v_StationId INT ,
v_MonitorUnitId INT ,
v_ConfigFileCode CHAR(32),
v_SampleConfigCode CHAR(32))
BEGIN
   UPDATE TSL_MonitorUnit SET ConfigFileCode_Old = v_ConfigFileCode,SampleConfigCode_Old = v_SampleConfigCode
   WHERE MonitorUnitId = v_MonitorUnitId AND StationId = v_StationId;
END;
-- SELECT N'SQLWAYS_EVAL# L_UpdSubscribeSample]...';





DROP PROCEDURE IF EXISTS PNL_UpdSubscribeSample;

CREATE PROCEDURE PNL_UpdSubscribeSample(v_StationId   	INT       	,
v_HostId      	INT   	   	,
v_EquipmentId 	INT		    ,
v_SignalId    	INT        	,
v_SampleTime		DATETIME,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
-- 参数检查
   IF v_StationId IS NULL OR v_EquipmentId IS NULL OR v_SignalId IS NULL OR v_SampleTime IS NULL then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;				

-- 错误处理
   IF v_StationId = 0 OR v_EquipmentId = 0 OR v_SignalId = 0 then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

   IF v_SignalId <> -1 then

-- 单信号订阅
-- 是否存在设备订阅
      IF NOT EXISTS(SELECT 'X'
      FROM TSL_SubscribeSignal
      WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId AND SignalId = -1) then
    
-- 不存在
         UPDATE TSL_SubscribeSignal
         SET LastSampleDateTime = v_SampleTime
         WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId AND SignalId = v_SignalId;
      ELSE     
-- 存在      	
         UPDATE TSL_SubscribeSignal
         SET LastSampleDateTime = v_SampleTime
         WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId AND SignalId = -1;
      end if;
   ELSE
-- 设备订阅
      UPDATE TSL_SubscribeSignal
      SET LastSampleDateTime = v_SampleTime
      WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId AND SignalId = v_SignalId;
   end if;

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_UptEquipConnectState]...';





DROP PROCEDURE IF EXISTS PNL_UptEquipConnectState;

CREATE PROCEDURE PNL_UptEquipConnectState(v_MonitorUnitId	   INT,						-- 监控单元ID
v_SamplerUnitId	   INT,						-- 采集单元编号
v_SampleTime		   DATETIME,				-- 采集时间
v_ConnectState       INT,INOUT SWP_Ret_Value INT)						-- 连接状态
   SWL_return:
BEGIN
-- 处理：
-- 1 参数检查
-- 2 更新采集器连接状态

-- 返回结果
-- -1 不可知错误
--  0 成功
--  1 参数为0或空
--  2 配置不存在或超过一个

   DECLARE v_StationId INT;
   DECLARE v_StationConnectState INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 参数检查
   SET @SWV_Error = 0;
   IF v_MonitorUnitId IS NULL OR v_SamplerUnitId IS NULL OR v_ConnectState IS NULL OR v_SampleTime IS NULL then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

   SET @SWV_Error = 0;
   IF v_SamplerUnitId <> -1 then

-- 更新该监控单元下指定设备
      UPDATE TBL_Equipment
      SET ConnectState = v_ConnectState
      WHERE MonitorUnitId = v_MonitorUnitId AND SamplerUnitId = v_SamplerUnitId;
   ELSE
-- 更新该监控单元下所有设备
      UPDATE TBL_Equipment
      SET ConnectState = v_ConnectState
      WHERE MonitorUnitId = v_MonitorUnitId;
   end if;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;            

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_UptEquipOfMURegister]...';






DROP PROCEDURE IF EXISTS PNL_UptEquipOfMURegister;

CREATE PROCEDURE PNL_UptEquipOfMURegister(
						-- 注册结果
v_MonitorUnitId		INT,					-- 监控单元ID    
v_RegisterResult		INT,INOUT SWP_Ret_Value INT)						
   SWL_return:
BEGIN
-- 处理：
-- SQLWAYS_EVAL# > 0)
-- SQLWAYS_EVAL# 告警，设备改为在线
-- SQLWAYS_EVAL# 警，设备改为离线

-- 返回结果
-- -1 不可知错误
--  0 成功
--  1 参数为0或空
--  2 配置不存在或超过一个

   DECLARE v_StationId INT;
   DECLARE v_StationConnectState INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 参数检查
   SET @SWV_Error = 0;
   IF v_MonitorUnitId IS NULL OR v_RegisterResult IS NULL then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

-- 配置是否存在
   SELECT COUNT(*) FROM TSL_MonitorUnit WHERE MonitorUnitId = v_MonitorUnitId;
   IF (ROW_COUNT() <> 1) then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;

-- MU注册成功
   SET @SWV_Error = 0;
   IF v_RegisterResult > 0 then

-- -3告警信息
      CREATE TEMPORARY TABLE tt_TempEvent
      (
         StationId INT,
         EquipmentId INT,
         MonitorUnitId INT,
         ConnectState INT,
         EventStatus INT
      );

-- SQLWAYS_EVAL# 
      INSERT INTO tt_TempEvent(StationId,EquipmentId,MonitorUnitId,ConnectState,EventStatus)
      SELECT DISTINCT et.StationId,et.EquipmentId,et.MonitorUnitId,et.ConnectState,
(CASE WHEN ae.EventId IS NULL THEN 0
      ELSE 1 END) AS EventStatus
      FROM TBL_Equipment et
      INNER JOIN TSL_MonitorUnit mt ON et.MonitorUnitId = mt.MonitorUnitId
      LEFT JOIN TBL_ActiveEvent ae ON et.StationId = ae.StationId AND et.EquipmentId = ae.EquipmentId
      AND ae.EventId = -3 AND ae.EndTime IS NULL
      WHERE mt.MonitorUnitId = v_MonitorUnitId;

-- SQLWAYS_EVAL# 
      UPDATE TBL_Equipment et
      INNER JOIN tt_TempEvent te ON et.StationId = te.StationId AND et.EquipmentId = te.EquipmentId
      AND et.MonitorUnitId = te.MonitorUnitId
      AND te.EventStatus = 1
      SET et.ConnectState = 0;

-- SQLWAYS_EVAL# 为在线
      UPDATE TBL_Equipment et
      INNER JOIN tt_TempEvent te ON et.StationId = te.StationId AND et.EquipmentId = te.EquipmentId
      AND et.MonitorUnitId = te.MonitorUnitId
      AND te.EventStatus = 0
      SET et.ConnectState = 1;
      DROP TEMPORARY TABLE IF EXISTS tt_TempEvent;
   end if;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;            

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_UptRMUConnectState]...';





DROP PROCEDURE IF EXISTS PNL_UptRMUConnectState;

CREATE PROCEDURE PNL_UptRMUConnectState(v_HostId			   INT,						-- 监控单元ID
v_HostType		   INT,						-- SQLWAYS_EVAL# DS(1),AS(2),DSC(3),DSCBak(4),RAS(5),Watchdog(6),CFG(7),RMU(10)
v_ConnectState       INT,INOUT SWP_Ret_Value INT)						-- 连接状态
   SWL_return:
BEGIN
-- 处理：
-- 1 MU在线
-- 1.1 RMU离线
-- 1.1.1 在线
-- 1.2 RMU在线
-- 1.2.1 不处理

-- 2 MU为离线
-- 2.1 RMU离线
-- 2.1.1 不处理
-- 2.2 RMU在线
-- 2.2.1 所有离线

-- 返回结果
-- -1 不可知错误
--  0 成功
--  1 参数为0或空
--  2 配置不存在或超过一个

   DECLARE v_WorkStationId INT;
   DECLARE v_WorkStationConnectState INT;
   DECLARE v_Total INT;
   DECLARE v_TotalOfMU INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 参数检查
   SET @SWV_Error = 0;
   IF v_HostId IS NULL OR v_HostType IS NULL OR v_ConnectState IS NULL OR v_HostId = 0 then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

-- RMU参数
   select   WorkStationId INTO v_WorkStationId FROM TSL_MonitorUnit WHERE MonitorUnitId = v_HostId;
   IF (ROW_COUNT() <> 1) then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;

   select   ConnectState INTO v_WorkStationConnectState FROM TBL_WorkStation WHERE WorkStationId = v_WorkStationId;
   IF (ROW_COUNT() <> 1) then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;

   SET @SWV_Error = 0;
   IF v_ConnectState = 1 AND v_WorkStationConnectState <> 1 then

-- SQLWAYS_EVAL# 在线
-- 更新RMU为在线
      UPDATE TBL_WorkStation
      SET ConnectState = 1
      WHERE WorkStationId = v_WorkStationId;
   ELSE 
      IF v_ConnectState = 0 AND v_WorkStationConnectState = 1 then

-- 2 MU为离线且RMU在线
-- 是否所有MU离线

         select   COUNT(ConnectState) INTO v_Total FROM TSL_MonitorUnit WHERE WorkStationId = v_WorkStationId AND ConnectState = 0;
         select   COUNT(ConnectState) INTO v_TotalOfMU FROM TSL_MonitorUnit WHERE WorkStationId = v_WorkStationId;
         IF (v_Total = v_TotalOfMU) then

-- 更新RMU为离线
            UPDATE TBL_WorkStation
            SET ConnectState = 0
            WHERE WorkStationId = v_WorkStationId;
         end if;
      end if;
   end if;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;                                                                       

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_UptSampleConnectState]...';





DROP PROCEDURE IF EXISTS PNL_UptSampleConnectState;

CREATE PROCEDURE PNL_UptSampleConnectState(v_MonitorUnitId	   INT,						-- 监控单元ID
v_SamplerUnitId	   INT,						-- 采集单元编号
v_PortId			   INT,						-- 端口号PortNo
v_SampleTime		   DATETIME,				-- 采集时间
v_ConnectState       INT,INOUT SWP_Ret_Value INT)						-- 连接状态
   SWL_return:
BEGIN
-- 处理：
-- 1 参数检查
-- 2 配置是否存在
-- 3 更新采集器连接状态

-- 返回结果
-- -1 不可知错误
--  0 成功
--  1 参数为0或空
--  2 配置不存在或超过一个

   DECLARE v_StationId INT;
   DECLARE v_StationConnectState INT;
   DECLARE v_Total INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 参数检查
   SET @SWV_Error = 0;
   IF v_MonitorUnitId IS NULL OR v_SamplerUnitId IS NULL OR v_ConnectState IS NULL OR v_SampleTime IS NULL then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

   SET @SWV_Error = 0;
   IF v_SamplerUnitId <> -1 then

-- SQLWAYS_EVAL# 单元
-- 配置是否存在
      select   COUNT(*) INTO v_Total FROM TSL_SamplerUnit su WHERE su.MonitorUnitId = v_MonitorUnitId AND su.SamplerUnitId = v_SamplerUnitId;
      IF (v_Total <= 0) then

         SET SWP_Ret_Value = 2;
         LEAVE SWL_return;
      end if;

-- 更新连接状态
      UPDATE TSL_SamplerUnit
      SET ConnectState = v_ConnectState
      WHERE MonitorUnitId = v_MonitorUnitId AND SamplerUnitId = v_SamplerUnitId;
   ELSE
-- 更新该监控单元下所有采集单元
      UPDATE TSL_SamplerUnit
      SET ConnectState = v_ConnectState
      WHERE MonitorUnitId = v_MonitorUnitId;
   end if;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;                                                                       

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_UptStationConnectState]...';





DROP PROCEDURE IF EXISTS PNL_UptStationConnectState;

CREATE PROCEDURE PNL_UptStationConnectState(v_HostId			   INT,						-- 监控单元ID
v_HostType		   INT,						-- SQLWAYS_EVAL# DS(1),AS(2),DSC(3),DSCBak(4),RAS(5),Watchdog(6),CFG(7),RMU(10)
v_ConnectState       INT,INOUT SWP_Ret_Value INT)						-- 连接状态
   SWL_return:
BEGIN
-- 处理：
-- 1 MU为在线
-- 1.1 局站离线
-- 1.1.1 是否所有MU在线
-- 1.2 局站在线
-- 1.2.1 不处理

-- 2 MU为离线
-- 2.1 局站离线
-- 2.1.1 不处理
-- 2.2 局站在线
-- 2.2.1 改为离线

-- 返回结果
-- -1 不可知错误
--  0 成功
--  1 参数为0或空
--  2 配置不存在或超过一个

   DECLARE v_StationId INT;
   DECLARE v_StationConnectState INT;
   DECLARE v_Total INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 参数检查
   SET @SWV_Error = 0;
   IF v_HostId IS NULL OR v_HostType IS NULL OR v_ConnectState IS NULL OR v_HostId = 0 then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

-- 局站参数
   select   StationId INTO v_StationId FROM TSL_MonitorUnit WHERE MonitorUnitId = v_HostId;
   IF (ROW_COUNT() <> 1) then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;

   select   ConnectState INTO v_StationConnectState FROM TBL_Station WHERE StationId = v_StationId;
   IF (ROW_COUNT() <> 1) then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;

   SET @SWV_Error = 0;
   IF v_ConnectState = 1 AND v_StationConnectState <> 1 then

-- 1 MU为在线且局站不是在线
-- 是否所有MU在线
      select   COUNT(ConnectState) INTO v_Total FROM TSL_MonitorUnit WHERE StationId = v_StationId AND MonitorUnitId <> v_HostId AND ConnectState <> 1;
      IF (v_Total < 1) then

-- 更新局站为在线
         UPDATE TBL_Station
         SET ConnectState = 1
         WHERE StationId = v_StationId;
      end if;
   ELSE 
      IF v_ConnectState = 0 AND v_StationConnectState = 1 then

-- 2 MU为离线且局站在线
-- 更新局站为离线
         UPDATE TBL_Station
         SET ConnectState = 0
         WHERE StationId = v_StationId;
      end if;
   end if;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;                                                                       

   SET SWP_Ret_Value = 0;
END;




DROP PROCEDURE IF EXISTS PAM_CancelEvent;

CREATE PROCEDURE `PAM_CancelEvent`(v_Events             NATIONAL VARCHAR(4000),
v_UserId             INT         ,
v_Note               NATIONAL VARCHAR(4000))
BEGIN
   DECLARE v_SequenceId NATIONAL VARCHAR(256);
   DECLARE v_ConfirmTime DATETIME;
   DECLARE v_ConfirmerId INT;
   DECLARE v_StationId INT;
   DECLARE v_EquipmentId INT;
   DECLARE v_EventId INT;
   DECLARE v_EventConditionId INT;
   DECLARE v_StartTime DATETIME;
   DECLARE v_EndTime DATETIME;
   DECLARE v_Overturn INT;
   DECLARE v_Meanings NATIONAL VARCHAR(255);
   DECLARE v_EventValue FLOAT;
   DECLARE v_BaseTypeId NUMERIC(10,0);
   DECLARE v_ConfirmerName NATIONAL VARCHAR(256);
   DECLARE v_UserName NATIONAL VARCHAR(256);
   DECLARE v_i INT; 
   DECLARE v_RecordCount INT; 
   DECLARE v_OperationType INT; 
   DECLARE v_SQL NATIONAL VARCHAR(4000);
   DECLARE v_IsProcess INT;

   DROP TEMPORARY TABLE IF EXISTS tt_CancelAlarm;

   CREATE TEMPORARY table tt_CancelAlarm 
   (
      IndexId INT   AUTO_INCREMENT PRIMARY KEY,
      SequenceId NATIONAL VARCHAR(128) NOT NULL,
      StationId INT NOT NULL,
      StationName NATIONAL VARCHAR(255),
      EquipmentId INT,
      EquipmentName NATIONAL VARCHAR(128),
      EventId INT,
      EventName NATIONAL VARCHAR(128),
      EventConditionId INT,
      EventSeverityId INT,
      EventSeverity NATIONAL VARCHAR(128),
      StartTime DATETIME,
      EndTime DATETIME,
      CancelTime DATETIME,
      CancelUserId INT,
      CancelUserName NATIONAL VARCHAR(128),
      ConfirmTime DATETIME,
      ConfirmerId INT,
      ConfirmerName NATIONAL VARCHAR(128),
      EventValue FLOAT,
      Meanings NATIONAL VARCHAR(255),
      Description NATIONAL VARCHAR(255),
      SourceHostId INT,
      BaseTypeId NUMERIC(10,0),
      BaseTypeName NATIONAL VARCHAR(128),
      EquipmentCategory INT,
      EquipmentCategoryName NATIONAL VARCHAR(128),
      MaintainState INT NOT NULL,
      SignalId INT,
      RelateSequenceId NATIONAL VARCHAR(128),
      EventCategoryId INT,
      EventStateId INT,
      CenterId INT,
      CenterName NATIONAL VARCHAR(128),
      StructureName NATIONAL VARCHAR(128),
      MonitorUnitName NATIONAL VARCHAR(128),
      StructureId INT
   );

   SET v_SQL = CONCAT(
	'INSERT INTO tt_CancelAlarm 
	 (SequenceId, StationId, StationName, EquipmentId, EquipmentName, EventId, EventName,
   EventConditionId, EventSeverityId, EventSeverity, StartTime, EndTime, 
   CancelTime, CancelUserId,CancelUserName, ConfirmTime, ConfirmerId, ConfirmerName, 
   EventValue, Meanings, Description, SourceHostId, BaseTypeId,BaseTypeName, 
	 EquipmentCategory, EquipmentCategoryName, MaintainState, SignalId, RelateSequenceId, 
	 EventCategoryId, EventStateId,CenterId, CenterName, StructureName, MonitorUnitName,StructureId)
   SELECT SequenceId, StationId, StationName, EquipmentId, EquipmentName, EventId, EventName,
   EventConditionId, EventSeverityId, EventSeverity, StartTime, EndTime, 
   CancelTime, CancelUserId,CancelUserName, ConfirmTime, ConfirmerId, ConfirmerName, 
   EventValue, Meanings, Description, SourceHostId, BaseTypeId,BaseTypeName, 
	 EquipmentCategory, EquipmentCategoryName, MaintainState, SignalId, RelateSequenceId, 
	 EventCategoryId, EventStateId,CenterId, CenterName, StructureName, MonitorUnitName,StructureId
   FROM  TBL_ActiveEvent WHERE SequenceId IN( ',v_Events,' ) ');

   SET @SWV_Stmt = v_SQL;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;


   SELECT UserName INTO v_UserName FROM TBL_Account WHERE UserId = v_UserId;

   SELECT MIN(IndexId), MAX(IndexId) INTO v_i,v_RecordCount FROM tt_CancelAlarm;

   WHILE v_i <= v_RecordCount DO
      
			SELECT StationId, EquipmentId, EventId, EventConditionId, SequenceId, StartTime,  
			Meanings, EventValue, BaseTypeId, ConfirmTime, ConfirmerId, ConfirmerName,EndTime
			INTO v_StationId,v_EquipmentId,v_EventId,v_EventConditionId,v_SequenceId,v_StartTime,
      v_Meanings,v_EventValue,v_BaseTypeId,v_ConfirmTime, v_ConfirmerId,v_ConfirmerName,v_EndTime 
			FROM tt_CancelAlarm WHERE IndexId = v_i;

      IF v_EventId = -3 then

         UPDATE TBL_Equipment
         SET ConnectState = 1
         WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId;
      end if;

		  IF v_EndTime IS NULL THEN
					SET v_EndTime = CURRENT_TIMESTAMP;
			END IF;

      UPDATE TBL_ActiveEvent SET CancelTime = v_EndTime,CancelUserId = v_UserId,CancelUserName = v_UserName, 
      Description =  CONCAT(IFNULL(Description,''),v_Note)
      WHERE SequenceId =  v_SequenceId;
      IF v_ConfirmTime IS NULL then

         SET v_ConfirmTime = CURRENT_TIMESTAMP;
         SET v_ConfirmerName = v_UserName;
         SET v_ConfirmerId = v_UserId;
      end if; 

			CALL PNL_Ins_MidHistoryEvent(v_SequenceId,v_EndTime,v_ConfirmTime,v_ConfirmerId,v_ConfirmerName);

      INSERT INTO TBL_AlarmChange(
			SequenceId,OperationType,StationId,StationName,EquipmentId,EquipmentName,
			EventId,EventName,EventConditionId,EventSeverityId,EventSeverity,StartTime,EndTime,
			CancelTime,CancelUserId,CancelUserName,ConfirmTime,ConfirmerId,ConfirmerName,
			EventValue,Meanings,Description,SourceHostId,
			BaseTypeId,BaseTypeName,EquipmentCategory,EquipmentCategoryName,MaintainState,SignalId,
			RelateSequenceId,EventCategoryId,EventStateId,CenterId,CenterName,StructureName,
			MonitorUnitName,StructureId)      
			SELECT SequenceId,2 AS OperationType,StationId,StationName,EquipmentId,EquipmentName,
			EventId,EventName,EventConditionId,EventSeverityId,EventSeverity,StartTime,v_EndTime,
			v_EndTime,v_UserId,v_UserName,ConfirmTime,ConfirmerId,ConfirmerName,
			EventValue,Meanings,CONCAT(IFNULL(Description,''),v_Note),SourceHostId,
			BaseTypeId,BaseTypeName,EquipmentCategory,EquipmentCategoryName,MaintainState,SignalId,
			RelateSequenceId,EventCategoryId,EventStateId,CenterId,CenterName,StructureName,
			MonitorUnitName,StructureId
      FROM tt_CancelAlarm
      WHERE SequenceId = v_SequenceId;

      INSERT INTO TBL_AlarmChange(
			SequenceId,OperationType,StationId,StationName,EquipmentId,EquipmentName,
			EventId,EventName,EventConditionId,EventSeverityId,EventSeverity,StartTime,EndTime,
			CancelTime,CancelUserId,CancelUserName,ConfirmTime,ConfirmerId,ConfirmerName,
			EventValue,Meanings,Description,SourceHostId,
			BaseTypeId,BaseTypeName,EquipmentCategory,EquipmentCategoryName,MaintainState,SignalId,
			RelateSequenceId,EventCategoryId,EventStateId,CenterId,CenterName,StructureName,
			MonitorUnitName,StructureId)      
      SELECT SequenceId,3 AS OperationType,StationId,StationName,EquipmentId,EquipmentName,
			EventId,EventName,EventConditionId,EventSeverityId,EventSeverity,StartTime,v_EndTime,
			v_EndTime,v_UserId,v_UserName,v_ConfirmTime,v_ConfirmerId,v_ConfirmerName,
			EventValue,Meanings,CONCAT(IFNULL(Description,''),v_Note),SourceHostId,
			BaseTypeId,BaseTypeName,EquipmentCategory,EquipmentCategoryName,MaintainState,SignalId,
			RelateSequenceId,EventCategoryId,EventStateId,CenterId,CenterName,StructureName,
			MonitorUnitName,StructureId
      FROM tt_CancelAlarm
      WHERE SequenceId = v_SequenceId;

      SET v_i = v_i+1;

   END WHILE;
  
END;


DROP PROCEDURE IF EXISTS PAM_ChangePassword;

CREATE PROCEDURE PAM_ChangePassword(v_LoginId		NATIONAL VARCHAR(20),
v_OldPassword	NATIONAL VARCHAR(128),
v_OldHexPassword	NATIONAL VARCHAR(128) ,
v_NewPassword	NATIONAL VARCHAR(128),INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
-- 修改密码
-- 2 旧密码错误
-- 8 不能使用最近五次密码
-- 1 成功

   DECLARE v_Result INT;
   DECLARE v_Total INT;
   DECLARE v_UserId INT;
   DECLARE v_CurrentDateTime DATETIME;

-- 	验证用户
-- 0 密码即将过期 
-- 1 登录成功 
-- 2 登录Id为空 
-- 3 登录Id错误 
-- 4 超出最大允许错误次数 
-- 5 错误的密码  
-- 6 登录Id即将过期 
-- 7 过期用户
-- 8 服务未启动 
-- 9 超过最大连接数
-- 11 账户被锁定
-- 12 账户已经无效
-- SQLWAYS_EVAL# 登录修改密码
   IF v_OldHexPassword is null then
      set v_OldHexPassword = '';
   END IF;
   SET v_Result = PAM_ValidUser(v_LoginId,v_OldPassword,v_OldHexPassword);
   IF v_Result <> 1 AND v_Result <> 6 AND v_Result <> 13 AND v_Result <> 0 then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;

   IF v_NewPassword = v_OldPassword OR v_NewPassword = v_OldHexPassword then

      SET SWP_Ret_Value = 8;
      LEAVE SWL_return;
   end if;

-- 当前时间
   SET v_CurrentDateTime = CURRENT_TIMESTAMP;

-- 8 不能使用最近五次密码
   CREATE TEMPORARY TABLE tt_TempHistoryPassword
   (
      LogonId NATIONAL VARCHAR(20),
      Password NATIONAL VARCHAR(128),
      RecordTime DATETIME NOT NULL
   );
   INSERT INTO tt_TempHistoryPassword(LogonId, Password, RecordTime)
   SELECT  ac.LogonId, hp.Password, hp.RecordTime
   FROM TBL_HistoryPassword hp
   INNER JOIN TBL_Account ac ON hp.UserId = ac.UserId AND ac.LogonId = v_LoginId
   ORDER BY RecordTime DESC LIMIT 5;

   select   COUNT(RecordTime) INTO v_Total FROM tt_TempHistoryPassword WHERE LogonId = v_LoginId AND Password = v_NewPassword;
   IF (v_Total > 0) then

      SET SWP_Ret_Value = 8;
      LEAVE SWL_return;
   end if;

-- 更新用户密码
-- SQLWAYS_EVAL# 码到期日期,添加3个月
   UPDATE TBL_Account
   SET Password = v_NewPassword,ValidTime = TIMESTAMPADD(MONTH,3,ValidTime)
   WHERE LogonId = v_LoginId;

-- 保存密码历史值
   INSERT TBL_HistoryPassword(UserId,Password,RecordTime)
   SELECT ac.UserId,v_NewPassword,v_CurrentDateTime
   FROM TBL_Account ac
   WHERE ac.LogonId = v_LoginId; 

-- 清除临时表
   DROP TEMPORARY TABLE IF EXISTS tt_TempHistoryPassword;

   SET SWP_Ret_Value = 1;
END;



-- SELECT N'SQLWAYS_EVAL# M_ConfirmedEvent]...';


DROP PROCEDURE IF EXISTS PAM_ConfirmedEvent;


CREATE PROCEDURE PAM_ConfirmedEvent(v_Events     NATIONAL VARCHAR(4000),
v_ConfirmerId        INT)
BEGIN
   DECLARE v_EndTime DATETIME;     
   DECLARE v_SequenceId NATIONAL VARCHAR(256);
   DECLARE v_ConfirmTime DATETIME;   
   DECLARE v_ConfirmerName NATIONAL VARCHAR(256);
   DECLARE v_i INT; 
   DECLARE v_RecordCount INT; 
   DECLARE v_SQL NATIONAL VARCHAR(4000);
   DECLARE v_OldConfirmTime DATETIME;
   DROP TEMPORARY TABLE IF EXISTS tt_ConfirmAlarm;
   create TEMPORARY table tt_ConfirmAlarm 
   (
      IndexId INT   AUTO_INCREMENT PRIMARY KEY,
      SequenceId NATIONAL VARCHAR(128) NOT NULL,
      StationId INT NOT NULL,
      StationName NATIONAL VARCHAR(255),
      EquipmentId INT,
      EquipmentName NATIONAL VARCHAR(128),
      EventId INT,
      EventName NATIONAL VARCHAR(128),
      EventConditionId INT,
      EventSeverityId INT,
      EventSeverity NATIONAL VARCHAR(128),
      StartTime DATETIME,
      EndTime DATETIME,
      CancelTime DATETIME,
      CancelUserId INT,
      CancelUserName NATIONAL VARCHAR(128),
      ConfirmTime DATETIME,
      ConfirmerId INT,
      ConfirmerName NATIONAL VARCHAR(128),
      EventValue FLOAT,
      ReversalNum INT,
      Meanings NATIONAL VARCHAR(255),
      EventFilePath NATIONAL VARCHAR(255),
      Description NATIONAL VARCHAR(255),
      SourceHostId INT,
      InstructionId NATIONAL VARCHAR(255),
      InstructionStatus INT,
      StandardAlarmNameId INT,
      StandardAlarmName NATIONAL VARCHAR(128),
      BaseTypeId NUMERIC(10,0),
      BaseTypeName NATIONAL VARCHAR(128),
      EquipmentCategory INT,
      EquipmentCategoryName NATIONAL VARCHAR(128),
      MaintainState INT NOT NULL,
      SignalId INT,
      RelateSequenceId NATIONAL VARCHAR(128),
      EventCategoryId INT,
      EventStateId INT,
      CenterId INT,
      CenterName NATIONAL VARCHAR(128),
      StructureName NATIONAL VARCHAR(128),
      MonitorUnitName NATIONAL VARCHAR(128),
      StructureId INT,
      StationCategoryId INT,
      EquipmentVendor NATIONAL VARCHAR(128)
   );

   SET v_SQL = CONCAT('INSERT INTO tt_ConfirmAlarm
   SELECT SequenceId, StationId, StationName, EquipmentId, EquipmentName, EventId, EventName,

   EventConditionId, EventSeverityId, EventSeverity, StartTime, EndTime, 
   CancelTime, CancelUserId,
CancelUserName, ConfirmTime, ConfirmerId, ConfirmerName, 
   EventValue, ReversalNum, Meanings, EventFilePath,
Description, SourceHostId, 
   InstructionId, InstructionStatus, StandardAlarmNameId, StandardAlarmName, 
   BaseTypeId,
BaseTypeName, EquipmentCategory, EquipmentCategoryName, 
   MaintainState, SignalId, RelateSequenceId, EventCategoryId, EventStateId,

   CenterId, CenterName, StructureName, MonitorUnitName,StructureId,StationCategoryId,
   EquipmentVendor
   FROM  TBL_ActiveEvent WHERE SequenceId IN( ',v_Events,' )');

   SET @SWV_Stmt = v_SQL;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;

   SET v_ConfirmTime = CURRENT_TIMESTAMP;
   select   UserName INTO v_ConfirmerName FROM TBL_Account WHERE UserId = v_ConfirmerId; 

   select   MIN(IndexId), MAX(IndexId) INTO v_i,v_RecordCount FROM tt_ConfirmAlarm;
   WHILE v_i <= v_RecordCount DO
      select   ConfirmTime, SequenceId INTO v_OldConfirmTime,v_SequenceId FROM tt_ConfirmAlarm WHERE IndexId = v_i;
      select   EndTime INTO v_EndTime FROM TBL_ActiveEvent WHERE SequenceId = v_SequenceId;
      IF v_OldConfirmTime IS NULL then -- SQLWAYS_EVAL# 行确认

         IF v_EndTime IS NULL then

            UPDATE TBL_ActiveEvent SET ConfirmTime = v_ConfirmTime,ConfirmerId = v_ConfirmerId,ConfirmerName = v_ConfirmerName
            WHERE SequenceId = v_SequenceId;
         ELSE
            CALL PNL_Ins_MidHistoryEvent(v_SequenceId,v_EndTime,v_ConfirmTime,v_ConfirmerId,v_ConfirmerName);
         end if;
         INSERT INTO TBL_AlarmChange(SequenceId ,
OperationType ,
StationId ,
StationName ,
EquipmentId ,
EquipmentName ,
EventId ,
EventName ,
EventConditionId ,
EventSeverityId ,
EventSeverity ,
StartTime ,
EndTime ,
CancelTime ,
CancelUserId ,
CancelUserName ,
ConfirmTime ,
ConfirmerId ,
ConfirmerName ,
EventValue ,
ReversalNum ,
Meanings ,
EventFilePath ,
Description ,
SourceHostId ,
InstructionId ,
InstructionStatus ,
StandardAlarmNameId ,
StandardAlarmName ,
BaseTypeId ,
BaseTypeName ,
EquipmentCategory ,
EquipmentCategoryName ,
MaintainState  ,
SignalId ,
RelateSequenceId ,
EventCategoryId ,
EventStateId ,
CenterId ,
CenterName ,
StructureName ,
MonitorUnitName,
StructureId,
StationCategoryId,
EquipmentVendor)
         SELECT
         SequenceId,
3 AS OperationType,
StationId,
StationName,
EquipmentId,
EquipmentName,
EventId,
EventName,
EventConditionId,
EventSeverityId,
EventSeverity,
StartTime,
v_EndTime, -- EndTime, 
CancelTime,
CancelUserId,
CancelUserName,
v_ConfirmTime,
v_ConfirmerId,
v_ConfirmerName,
EventValue,
ReversalNum,
Meanings,
EventFilePath,
Description,
SourceHostId,
InstructionId,
InstructionStatus,
StandardAlarmNameId,
StandardAlarmName,
BaseTypeId,
BaseTypeName,
EquipmentCategory,
EquipmentCategoryName,
MaintainState,
SignalId,
RelateSequenceId,
EventCategoryId,
EventStateId,
CenterId,
CenterName,
StructureName,
MonitorUnitName,
StructureId,
StationCategoryId,
EquipmentVendor
         FROM tt_ConfirmAlarm
         WHERE SequenceId = v_SequenceId;
      end if;
      SET v_i = v_i+1;
   END WHILE;
END;

-- SELECT N'SQLWAYS_EVAL# L_BackupHistoryBatchAll]...';


DROP PROCEDURE IF EXISTS PBL_BackupHistoryBatchAll;

CREATE PROCEDURE PBL_BackupHistoryBatchAll(v_StartTime DATETIME,
v_EndTime DATETIME,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL#      PBL_BackupHistoryAll
Parameters:         @StartTime             datetime  开始时间
@EndTime               datetime  结束时间
Comments:           按业务类型准备备份历史数据(1.历史事件,2.控制命令,3.历史信号,4.蓄电池,5.信号统计,6.刷卡记录,7.操作记录)
Return:             0       成功
1       备份历史出错
2       备份控制命令出错
3       备份历史信号出错
4       备份蓄电池出错
5       备份信号统计出错
6       备份刷卡记录出错
7       备份操作记录出错
*/

-- 声明变量
   DECLARE v_RowCount INT;
   DECLARE v_ReturnCode INT;
   DECLARE v_TotoalRowCount INT;
   SET v_TotoalRowCount = 0;

   SET v_ReturnCode = PBL_BackupHistoryEvent(v_StartTime,v_EndTime,v_RowCount);
   IF v_ReturnCode <> 0 then

      SELECT 1;
      LEAVE SWL_return;
   end if;
   SET v_TotoalRowCount = v_TotoalRowCount+v_RowCount;

   SET v_ReturnCode = PBL_BackupHistoryControl(v_StartTime,v_EndTime,v_RowCount);
   IF v_ReturnCode <> 0 then

      SELECT 2;
      LEAVE SWL_return;
   end if;
   SET v_TotoalRowCount = v_TotoalRowCount+v_RowCount;

   SET v_ReturnCode = PBL_BackupHistorySignal(v_StartTime,v_EndTime,v_RowCount);
   IF v_ReturnCode <> 0 then

      SELECT 3;
      LEAVE SWL_return;
   end if;

   SET v_ReturnCode = PBL_BackupHistoryBattery(v_StartTime,v_EndTime,v_RowCount);
   IF v_ReturnCode <> 0 then

      SELECT 4;
      LEAVE SWL_return;
   end if;
   SET v_TotoalRowCount = v_TotoalRowCount+v_RowCount;

   SET v_ReturnCode = PBL_BackupSignalStatistics(v_StartTime,v_EndTime,v_RowCount);
   IF v_ReturnCode <> 0 then

      SELECT 5;
      LEAVE SWL_return;
   end if;
   SET v_TotoalRowCount = v_TotoalRowCount+v_RowCount;

   SET v_ReturnCode = PBL_BackupSwapCardRecord(v_StartTime,v_EndTime,v_RowCount);
   IF v_ReturnCode <> 0 then

      SELECT 6;
      LEAVE SWL_return;
   end if;
   SET v_TotoalRowCount = v_TotoalRowCount+v_RowCount;

   SET v_ReturnCode = PBL_BackupOperationRecord(v_StartTime,v_EndTime,v_RowCount);
   IF v_ReturnCode <> 0 then

      SELECT 7;
      LEAVE SWL_return;
   end if;
   SET v_TotoalRowCount = v_TotoalRowCount+v_RowCount;

   SELECT v_TotoalRowCount;
   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_BatchSaveSwapCardRecord]...';


DROP PROCEDURE IF EXISTS PBL_BatchSaveSwapCardRecord;

CREATE PROCEDURE PBL_BatchSaveSwapCardRecord(v_StationId   	INT       	,
v_HostId      	INT   	   	,
v_EquipmentId 	INT		    ,
v_SignalTotal	 	INT		    ,	
v_BSequenceId		NATIONAL VARCHAR(4000),   
v_BSampleTime		NATIONAL VARCHAR(4000),
v_BDoorId			NATIONAL VARCHAR(4000),
v_BCardId			NATIONAL VARCHAR(4000),
v_BEnter			NATIONAL VARCHAR(4000),
v_BSwapFlag		NATIONAL VARCHAR(4000),INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_Index INT;			
   DECLARE v_MinIndex INT;			
   DECLARE v_MaxIndex INT;			
   DECLARE v_TempValue NATIONAL VARCHAR(255);
   DECLARE v_SequenceId NATIONAL VARCHAR(255);
   DECLARE v_SampleTime DATETIME;    
   DECLARE v_DoorId INT;			
   DECLARE v_CardId NATIONAL VARCHAR(20); 
   DECLARE v_Enter INT;			
   DECLARE v_SwapFlag INT;			
   DECLARE v_Return INT;			
   DECLARE v_Spliter NATIONAL VARCHAR(255);
   DECLARE v_TmpCardId INT;			
   DECLARE v_TmpEndTime DATETIME;
   DECLARE SWV_BSequenceId_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BSampleTime_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BDoorId_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BCardId_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BEnter_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BSwapFlag_Str NATIONAL VARCHAR(4000);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 卡临时表
   SET @SWV_Error = 0;
   CREATE TEMPORARY TABLE tt_TempSwapCard
   (
      StationId INT,
      EquipmentId INT,
      ControlId INT,
      DoorNo INT,
      Password NATIONAL VARCHAR(20),
      CardId INT,
      CardCode NATIONAL VARCHAR(20),
      TimeGroupType INT,
      EndTime DATETIME,
      Status INT
   );

-- 设置分隔符
   SET v_Spliter = ',';

-- 设置个数
   SET v_MinIndex = 1;
   SET v_MaxIndex = v_SignalTotal;

-- 批量保存统计信号
   WHILE(v_MinIndex <= v_MaxIndex) DO
-- @SequenceId
      SET v_Index = LOCATE(v_Spliter,v_BSequenceId);
      IF v_Index = 0 then

         SET v_SequenceId = v_BSequenceId;
      ELSE
         SET v_SequenceId = SUBSTRING(v_BSequenceId,1,v_Index -1);
         SET SWV_BSequenceId_Str = SUBSTRING(v_BSequenceId,v_Index+1,9999);
         SET v_BSequenceId = SWV_BSequenceId_Str;
      end if;

-- @SampleTime
      SET v_Index = LOCATE(v_Spliter,v_BSampleTime);
      IF v_Index = 0 then

         SET v_SampleTime = CAST(v_BSampleTime AS DATETIME);
      ELSE
         SET v_SampleTime = CAST(SUBSTRING(v_BSampleTime,1,v_Index -1) AS DATETIME);
         SET SWV_BSampleTime_Str = SUBSTRING(v_BSampleTime,v_Index+1,9999);
         SET v_BSampleTime = SWV_BSampleTime_Str;
      end if;

-- @DoorId
      SET v_Index = LOCATE(v_Spliter,v_BDoorId);
      IF v_Index = 0 then

         SET v_DoorId = cast(v_BDoorId as SIGNED INTEGER);
      ELSE
         SET v_DoorId = cast(SUBSTRING(v_BDoorId,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BDoorId_Str = SUBSTRING(v_BDoorId,v_Index+1,9999);
         SET v_BDoorId = SWV_BDoorId_Str;
      end if;

-- @CardId
      SET v_Index = LOCATE(v_Spliter,v_BCardId);
      IF v_Index = 0 then

         SET v_CardId = v_BCardId;
      ELSE
         SET v_CardId = SUBSTRING(v_BCardId,1,v_Index -1);
         SET SWV_BCardId_Str = SUBSTRING(v_BCardId,v_Index+1,9999);
         SET v_BCardId = SWV_BCardId_Str;
      end if;

-- @Enter
      SET v_Index = LOCATE(v_Spliter,v_BEnter);
      IF v_Index = 0 then

         SET v_Enter = cast(v_BEnter as SIGNED INTEGER);
      ELSE
         SET v_Enter = cast(SUBSTRING(v_BEnter,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BEnter_Str = SUBSTRING(v_BEnter,v_Index+1,9999);
         SET v_BEnter = SWV_BEnter_Str;
      end if;

-- @SwapFlag
      SET v_Index = LOCATE(v_Spliter,v_BSwapFlag);
      IF v_Index = 0 then

         SET v_SwapFlag = cast(v_BSwapFlag as SIGNED INTEGER);
      ELSE
         SET v_SwapFlag = cast(SUBSTRING(v_BSwapFlag,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BSwapFlag_Str = SUBSTRING(v_BSwapFlag,v_Index+1,9999);
         SET v_BSwapFlag = SWV_BSwapFlag_Str;
      end if;
      SET v_Return = PBL_SaveSwapCardRecord(v_StationId,v_HostId,v_EquipmentId,0,v_SampleTime,v_DoorId,v_CardId,v_Enter,
      v_SwapFlag);
      IF v_Return = 4 then

-- 4 数据库有该非法卡的授权
  INSERT INTO tt_TempSwapCard(StationId,EquipmentId,ControlId,DoorNo,Password,CardId,CardCode,TimeGroupType,EndTime,Status)
         SELECT d.StationId,d.EquipmentId,cl.ControlId,d.DoorNo,d.Password,c.CardId,c.CardCode,dt.TimeGroupType,c.EndTime,4
         FROM TBL_Door d
         INNER JOIN TBL_DoorTimeGroup dt ON d.DoorId = dt.DoorId
         INNER JOIN TBL_DoorCard dc ON d.DoorId = dc.DoorId AND dt.TimeGroupId = dc.TimeGroupId
         INNER JOIN TBL_Card c ON dc.CardId = c.CardId
         INNER JOIN TBL_Equipment et ON d.StationId = et.StationId AND d.EquipmentId = et.EquipmentId
         INNER JOIN TBL_Control cl ON et.EquipmentTemplateId = cl.EquipmentTemplateId
         AND cl.ControlCategory = 12
         WHERE d.StationId = v_StationId AND d.EquipmentId = v_EquipmentId AND d.DoorNo = v_DoorId AND c.CardCode = v_CardId;
      ELSE 
         IF v_Return = 3 then

-- 3 数据库没有该合法卡的授权
            select   CardId, EndTime INTO v_TmpCardId,v_TmpEndTime FROM TBL_Card WHERE CardCode = v_CardId;
            INSERT INTO tt_TempSwapCard(StationId,EquipmentId,ControlId,DoorNo,Password,CardId,CardCode,TimeGroupType,EndTime,Status)
            SELECT v_StationId,v_EquipmentId,cl.ControlId,d.DoorNo,d.Password,v_TmpCardId,v_CardId,dt.TimeGroupType,v_TmpEndTime,3
            FROM TBL_Door d
            INNER JOIN TBL_DoorTimeGroup dt ON d.DoorId = dt.DoorId
            INNER JOIN TBL_Equipment et ON d.StationId = et.StationId AND d.EquipmentId = et.EquipmentId
            INNER JOIN TBL_Control cl ON et.EquipmentTemplateId = cl.EquipmentTemplateId
            AND cl.ControlCategory = 13
            WHERE d.StationId = v_StationId AND d.EquipmentId = v_EquipmentId AND d.DoorNo = v_DoorId;
         end if;
      end if;
      SET v_MinIndex = v_MinIndex+1;
   END WHILE;	

-- 返回需要重新处理的卡数据
   SELECT DISTINCT * FROM tt_TempSwapCard;

-- 清除临时表
   SET @SWV_Error = 0;
   DROP TEMPORARY TABLE IF EXISTS tt_TempSwapCard;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;    

   SET SWP_Ret_Value = 0;
END;



-- SELECT N'SQLWAYS_EVAL# L_ClearEventMask]...';

-- SQLWAYS_EVAL# --------------------------------------------------------------
-- SQLWAYS_EVAL# rEventMask
-- SQLWAYS_EVAL# 屏蔽时间，但仍未结束的告警，告警开始时间为该告警实际开始时间，
-- SQLWAYS_EVAL# 警屏蔽结束的时间
-- parameter:
-- SQLWAYS_EVAL# 解除屏蔽告警的SequenceId
-- return: 
-- SQLWAYS_EVAL# 成功
-- SQLWAYS_EVAL# TSL_ActiveEvent表中不存在
-- SQLWAYS_EVAL# 
-- SQLWAYS_EVAL# BL_ActiveEvent表
-- SQLWAYS_EVAL# --------------------------------------------------------------


DROP PROCEDURE IF EXISTS PBL_ClearEventMask;
CREATE PROCEDURE PBL_ClearEventMask(v_SequenceId NATIONAL VARCHAR(128),INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN
   DECLARE v_StationId INT; -- 局站Id
   DECLARE v_EquipmentId INT; -- 设备Id
   DECLARE v_EventId INT; -- 事件Id
   DECLARE v_EventConditionId INT; -- 产生事件的条件Id
   DECLARE v_StartTime DATETIME; -- 事件开始时间
   DECLARE v_EndTime DATETIME; -- 事件结束时间
   DECLARE v_OldStartTime DATETIME; -- 事件开始时间
   DECLARE v_Overturn INT; -- 事件翻转次数
   DECLARE v_BaseTypeId NUMERIC(10,0); -- 基类ID(可空)
   DECLARE v_EventCategory INT;
   DECLARE v_EventSeverityId INT;
   DECLARE v_EventSeverity NATIONAL VARCHAR(255);
   DECLARE v_StationState INT;
   DECLARE v_MaskStartTime DATETIME;
   DECLARE v_MaskEndTime DATETIME;
   DECLARE v_ConfirmTime DATETIME;
   DECLARE v_ConfirmerId INT;   
   DECLARE v_ConfirmerName NATIONAL VARCHAR(256);
   DECLARE v_StandardAlarmNameId INT;
   DECLARE v_StandardAlarmName NATIONAL VARCHAR(256);
   DECLARE v_NewGuid NATIONAL VARCHAR(256);
   DECLARE v_CenterId INT;
   DECLARE v_CenterName NATIONAL VARCHAR(255);
   DECLARE v_StructureName NATIONAL VARCHAR(255);
   DECLARE v_MonitorUnitName NATIONAL VARCHAR(255);
   DECLARE v_EquipmentCategoryName NATIONAL VARCHAR(255);
   DECLARE v_BaseTypeName NATIONAL VARCHAR(255);
   DECLARE v_ret INT;
   DECLARE v_ResetSequenceId NATIONAL VARCHAR(128);
   DECLARE v_EventValue FLOAT;
   DECLARE v_StructureId INT;
   DECLARE v_StandardMeaning NATIONAL VARCHAR(255);
   DECLARE v_Meanings NATIONAL VARCHAR(255);
   DECLARE v_Vender NATIONAL VARCHAR(255);
   DECLARE v_StandardVer INT;
   DECLARE v_NewEventSeverityId INT;

   select   StationId, EquipmentId, EventId, EventConditionId, StartTime, CURRENT_TIMESTAMP, EventValue, Meanings, ReversalNum, BaseTypeId INTO v_StationId,v_EquipmentId,v_EventId,v_EventConditionId,v_OldStartTime,
   v_StartTime,v_EventValue,v_Meanings,v_Overturn,v_BaseTypeId FROM TSL_ActiveEvent WHERE SequenceId = v_SequenceId AND EndTime IS NULL;

   IF ROW_COUNT() = 0 then  -- SQLWAYS_EVAL# eEvent中不存在
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if; -- SQLWAYS_EVAL# eEvent中不存在


-- SQLWAYS_EVAL# 通信状态事件，则更新设备表相应记录的通信状态字段
   IF v_EventId = -3 then

      UPDATE TBL_Equipment SET ConnectState = 0
      WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId;
   end if;    

-- SQLWAYS_EVAL# ，设备，信号名，基类ID，及常用事件属性形成ActiveEvent，加快界面和告警通知速度

-- 局站状态
   SET v_StationState = PNL_GetStationState(v_StationId,v_StartTime);

   select   StructureId, StructureName INTO v_CenterId,v_CenterName FROM TBL_StationStructure WHERE ParentStructureId = 0;

   select   structure.StructureId, structure.StructureName INTO v_StructureId,v_StructureName FROM TBL_StationStructureMap map, TBL_StationStructure structure WHERE map.StationId = v_StationId
   AND map.StructureId = structure.StructureId
   AND structure.StructureGroupId = 1;

   select   MonitorUnitName, dataItem.ItemValue INTO v_MonitorUnitName,v_EquipmentCategoryName FROM TSL_MonitorUnit monitorUnit, TBL_Equipment equipment, TBL_DataItem dataItem WHERE monitorUnit.MonitorUnitId = equipment.MonitorUnitId
   AND equipment.EquipmentId = v_EquipmentId
   AND equipment.StationId = v_StationId
   AND dataItem.EntryId = 7
   AND equipment.EquipmentCategory = dataItem.ItemId;

   select   EventSeverity, Meanings, A.BaseTypeId INTO v_EventSeverityId,v_StandardMeaning,v_BaseTypeId FROM TBL_EventCondition A, TBL_Equipment B WHERE B.StationId = v_StationId AND B.EquipmentId = v_EquipmentId
   AND A.EquipmentTemplateId = B.EquipmentTemplateId
   AND A.EventId = v_EventId AND A.EventConditionId = v_EventConditionId;

   select   BaseTypeName INTO v_BaseTypeName FROM TBL_EventBaseDic WHERE BaseTypeId = v_BaseTypeId;				

-- 告警标准名ID，事件等级ID
/*SQLWAYS_EVAL# = srule.StandardDicId  
FROM TBL_Event configEvent, TBL_StandardTemplateMap map, TBL_StandardRule srule, TBL_Station station,TBL_Equipment equipment
WHERE equipment.EquipmentTemplateId = map.EquipmentTemplateId
AND configEvent.EquipmentTemplateId = equipment.EquipmentTemplateId
AND map.StandardTemplateId = srule.StandardTemplateId
AND configEvent.EventName = srule.EventName
AND station.StationCategory = map.StationCategory
AND configEvent.EventId = @EventId
AND station.StationId = @StationId
AND equipment.StationId = @StationId
AND equipment.EquipmentId = @EquipmentId
AND srule.Meanings = @StandardMeaning
*/
   SET v_StandardVer = PAM_GetStandardVer(); -- 黑龙江本地标准化需求修改
   IF v_BaseTypeId IS NOT NULL then


-- SQLWAYS_EVAL# dVer=PAM_GetStandardVer

      select   A.StandardDicId, replace(D.EventStandardName,'XX',CAST(v_BaseTypeId -floor(v_BaseTypeId/1000)*1000 AS CHAR(10))) INTO v_StandardAlarmNameId,v_StandardAlarmName FROM TBL_EventBaseMap A
      INNER JOIN TBL_StationBaseMap B ON A.StationBaseType = B.StationBaseType AND B.StandardType = v_StandardVer
      INNER JOIN TBL_Station C ON C.StationCategory = B.StationCategory
      INNER JOIN TBL_StandardDicEvent D ON D.StandardDicId = A.StandardDicId
      AND (D.StationCategory = B.StationBaseType OR D.StationCategory = 0)
      AND D.StandardType = v_StandardVer WHERE A.BaseTypeId = floor(v_BaseTypeId/1000)*1000+1
      AND C.StationId = v_StationId;
   end if;

-- SQLWAYS_EVAL# 警设置为地方标准化
   IF v_StandardAlarmNameId IS NULL AND v_StandardVer = 1 then

      select   F.StandardDicId, F.EventStandardName, F.EventSeverity INTO v_StandardAlarmNameId,v_StandardAlarmName,v_NewEventSeverityId FROM TBL_Equipment A
      INNER JOIN TBL_EquipmentTemplate B ON A.EquipmentTemplateId = B.EquipmentTemplateId
      INNER JOIN TBL_Station C ON A.StationId = C.StationId
      INNER JOIN TBL_StationBaseMap D ON D.StationCategory = C.StationCategory AND D.StandardType = v_StandardVer
      INNER JOIN TBL_BaseEquipmentMap E
      ON E.StationBaseType = D.StationBaseType AND E.EquipmentBaseType = B.EquipmentBaseType AND E.StandardType = v_StandardVer
      INNER JOIN TBL_StandardDicEvent F
      ON F.StandardDicId = E.StandardDicId
      AND (F.StationCategory = D.StationBaseType OR F.StationCategory = 0)  AND F.StandardType = v_StandardVer WHERE A.StationId = v_StationId AND A.EquipmentId = v_EquipmentId;
      IF v_NewEventSeverityId IS NOT NULL then

         SET v_EventSeverityId = v_NewEventSeverityId;
      end if;
   end if;

-- 事件等级名称  
   select   ItemValue INTO v_EventSeverity FROM TBL_DataItem WHERE EntryId = 23 AND ItemId = v_EventSeverityId;

-- 告警标准名
/*SQLWAYS_EVAL# = StandardName
FROM TBL_StandardDic
WHERE StandardDicId = @StandardAlarmNameId    
*/    

   select   Vendor INTO v_Vender FROM   TBL_Equipment equipment WHERE equipment.EquipmentId = v_EquipmentId;



   IF EXISTS(SELECT 'X' FROM TSL_ActiveEvent WHERE SequenceId = v_SequenceId) then

      SET v_NewGuid = UUID();
      CALL PNL_MaskEventRestart(v_StationId,v_EquipmentId,v_EventId,v_EventConditionId,v_NewGuid,v_SequenceId,
      v_OldStartTime,NULL,v_Overturn,v_Meanings,v_EventValue,v_BaseTypeId);
   end if;


   IF ROW_COUNT() = 0 then
      SET SWP_Ret_Value = -5;
      LEAVE SWL_return;
   end if; -- 未重新生成，返回－5

-- 6 所有步骤执行成功，返回0
   SET SWP_Ret_Value = 0;
END;



-- SELECT N'SQLWAYS_EVAL# L_ExecuteEventMask]...';



DROP PROCEDURE IF EXISTS PBL_ExecuteEventMask;

CREATE PROCEDURE PBL_ExecuteEventMask()
BEGIN
   DECLARE v_SequenceId NATIONAL VARCHAR(128);			   
   DECLARE v_i INT; 
   DECLARE v_RecordCount INT;
   DECLARE v_EventId INT;
   DECLARE v_StationId INT;
   DECLARE v_EquipmentId INT;
   DECLARE v_TimeGroupId INT;
   DECLARE v_DayInWeek INT;
   DECLARE v_IsMask INT; 
   DECLARE v_TimeSpanChar NATIONAL VARCHAR(24);
   DECLARE v_CurrentTime DATETIME;
   DECLARE v_EndTime DATETIME;
   DROP TEMPORARY TABLE IF EXISTS tt_MaskEvent;
   CREATE TEMPORARY TABLE tt_MaskEvent
   (
      IndexId INT   AUTO_INCREMENT PRIMARY KEY,
      SequenceId NATIONAL VARCHAR(128) NOT NULL,
      StationId INT NOT NULL,
      EquipmentId INT NOT NULL,
      EventId INT NOT NULL,
      EndTime DATETIME
   );
   CREATE UNIQUE INDEX MaskEvent_IDX1 ON tt_MaskEvent
   (IndexId);

   INSERT INTO tt_MaskEvent(SequenceId, StationId,EquipmentId, EventId, EndTime)
   SELECT SequenceId, StationId, EquipmentId, EventId, EndTime FROM TBL_ActiveEvent WHERE EndTime IS NULL;

   SET v_CurrentTime = CURRENT_TIMESTAMP;

   select   MIN(IndexId), MAX(IndexId) INTO v_i,v_RecordCount FROM tt_MaskEvent;
   WHILE v_i <= v_RecordCount DO
      select   EventId, SequenceId, StationId, EquipmentId INTO v_EventId,v_SequenceId,v_StationId,v_EquipmentId FROM tt_MaskEvent WHERE IndexId = v_i;
      SET v_EndTime = NULL;
      select   EndTime INTO v_EndTime FROM TBL_EventMask WHERE  StationId = v_StationId
      AND EquipmentId = v_EquipmentId
      AND EventId = v_EventId;
      IF v_EndTime IS NOT NULL then

         IF  v_EndTime > v_CurrentTime then

-- 结束到屏蔽时间的告警
            SET v_CurrentTime = CURRENT_TIMESTAMP;
            CALL PNL_SaveEndEventByMask(v_StationId,v_EquipmentId,v_EventId,v_SequenceId,v_CurrentTime);
         end if;
      ELSE
         SET v_TimeGroupId = NULL;
         select   TimeGroupId INTO v_TimeGroupId FROM TBL_EventMask WHERE  StationId = v_StationId
         AND EquipmentId = v_EquipmentId
         AND EventId = v_EventId;
         SET v_DayInWeek = DAYOFWEEK(CURRENT_TIMESTAMP);
         SET v_TimeSpanChar = NULL;
         select   TimeSpanChar INTO v_TimeSpanChar FROM TBL_TimeGroupSpan WHERE TimeGroupId = v_TimeGroupId AND Week = v_DayInWeek;
         SET v_IsMask = NULL;
         SET v_IsMask = IsMask(v_TimeSpanChar);
         IF (v_IsMask = 1) then

-- 结束到屏蔽时间的告警
            SET v_CurrentTime = CURRENT_TIMESTAMP;
            CALL PNL_SaveEndEventByMask(v_StationId,v_EquipmentId,v_EventId,v_SequenceId,v_CurrentTime);
         end if;
      end if;
      SET v_EndTime = NULL;
      select   EndTime INTO v_EndTime FROM TBL_EquipmentMask WHERE  StationId = v_StationId
      AND EquipmentId = v_EquipmentId;
      IF v_EndTime IS NOT NULL then

         IF  v_EndTime > v_CurrentTime then

-- 结束到屏蔽时间的告警
            SET v_CurrentTime = CURRENT_TIMESTAMP;
            CALL PNL_SaveEndEventByMask(v_StationId,v_EquipmentId,v_EventId,v_SequenceId,v_CurrentTime);
         end if;
      ELSE
         SET v_TimeGroupId = NULL;
         select   TimeGroupId INTO v_TimeGroupId FROM TBL_EquipmentMask WHERE  StationId = v_StationId
         AND EquipmentId = v_EquipmentId;
         SET v_DayInWeek = DAYOFWEEK(CURRENT_TIMESTAMP);
         SET v_TimeSpanChar = NULL;
         select   TimeSpanChar INTO v_TimeSpanChar FROM TBL_TimeGroupSpan WHERE TimeGroupId = v_TimeGroupId AND Week = v_DayInWeek;
         SET v_IsMask = NULL;
         SET v_IsMask = IsMask(v_TimeSpanChar);
         IF (v_IsMask = 1) then

-- 结束到屏蔽时间的告警
            SET v_CurrentTime = CURRENT_TIMESTAMP;
            CALL PNL_SaveEndEventByMask(v_StationId,v_EquipmentId,v_EventId,v_SequenceId,v_CurrentTime);
         end if;
      end if;
      SET v_EndTime = NULL;
      select   EndTime INTO v_EndTime FROM TBL_StationMask WHERE  StationId = v_StationId;
      IF v_EndTime IS NOT NULL then

         IF v_EndTime > v_CurrentTime then

-- 结束到屏蔽时间的告警
            SET v_CurrentTime = CURRENT_TIMESTAMP;
            CALL PNL_SaveEndEventByMask(v_StationId,v_EquipmentId,v_EventId,v_SequenceId,v_CurrentTime);
         end if;
      ELSE
         SET v_TimeGroupId = NULL;
         select   TimeGroupId INTO v_TimeGroupId FROM TBL_StationMask WHERE  StationId = v_StationId;
         SET v_DayInWeek = DAYOFWEEK(CURRENT_TIMESTAMP);
         SET v_TimeSpanChar = NULL;
         select   TimeSpanChar INTO v_TimeSpanChar FROM TBL_TimeGroupSpan WHERE TimeGroupId = v_TimeGroupId AND Week = v_DayInWeek;
         SET v_IsMask = NULL;
         SET v_IsMask = IsMask(v_TimeSpanChar);
         IF (v_IsMask = 1) then

-- 结束到屏蔽时间的告警
            SET v_CurrentTime = CURRENT_TIMESTAMP;
            CALL PNL_SaveEndEventByMask(v_StationId,v_EquipmentId,v_EventId,v_SequenceId,v_CurrentTime);
         end if;
      end if;
      SET v_i = v_i+1;
   END WHILE;
END;



-- SELECT N'SQLWAYS_EVAL# L_ConfirmActiveControl]...';


DROP PROCEDURE IF EXISTS PBL_ConfirmActiveControl;

CREATE PROCEDURE PBL_ConfirmActiveControl(v_StationId   	INT       	,
v_EquipmentId 	INT		    ,
v_ControlId    	INT        	,
v_UserId   		INT        	,
v_SerialNo		INT        	,
v_StartTime		DATETIME,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_EndTime DATETIME;
   DECLARE v_Return INT;
   DECLARE v_ControlResultType INT;
   DECLARE v_ConfirmControl INT;
   DECLARE v_ConfirmFailControl INT;
   DECLARE v_ConfirmerName NATIONAL VARCHAR(255);
   DECLARE v_GetDate DATETIME;
   DECLARE v_RecordMsg NATIONAL VARCHAR(1000);
   DECLARE v_SGetDate NATIONAL VARCHAR(255);
   DECLARE v_SUserId NATIONAL VARCHAR(255);
   DECLARE v_MaxSeq INT;
   DECLARE v_Total INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 返回结果
-- -1 不可知错误
--  0 成功
--  1 没有确认控制命令的权限
-- SQLWAYS_EVAL# 的权限

-- 错误处理
   SET @SWV_Error = 0;
   IF v_StationId = 0 OR v_EquipmentId = 0 OR v_ControlId = 0
   OR v_StationId IS NULL OR v_EquipmentId  IS NULL OR v_ControlId IS NULL
   OR v_StartTime IS NULL then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;	

-- 控制结果
   select   ControlResultType INTO v_ControlResultType FROM TBL_ActiveControl WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId
   AND ControlId = v_ControlId AND SerialNo = v_SerialNo
   AND StartTime = v_StartTime;

   IF v_ControlResultType = 2 then

-- 是否有确认失败控制权限
      SET v_ConfirmFailControl = 9;
      SET v_Return = PAM_OperationPrivilege(v_ConfirmFailControl,v_UserId);
      IF v_Return <> 1 then

         SET SWP_Ret_Value = 2;
         LEAVE SWL_return;
      end if;
   ELSE			
-- 是否有确认控制权限
      SET v_ConfirmControl = 52;
      SET v_Return = PAM_OperationPrivilege(v_ConfirmControl,v_UserId);
      IF v_Return <> 1 then

         SET SWP_Ret_Value = 1;
         LEAVE SWL_return;
      end if;
   end if;

-- 当前时间
   SET v_GetDate = CURRENT_TIMESTAMP;

-- UserName
   SET v_ConfirmerName = '';
   select   UserName INTO v_ConfirmerName FROM TBL_Account WHERE UserId = v_UserId;

   UPDATE TBL_ActiveControl
   SET ConfirmTime = v_GetDate,ConfirmerId = v_UserId,ConfirmerName = v_ConfirmerName
   WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId
   AND ControlId = v_ControlId AND SerialNo = v_SerialNo
   AND StartTime = v_StartTime;

   select   EndTime INTO v_EndTime FROM TBL_ActiveControl WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId
   AND ControlId = v_ControlId AND SerialNo = v_SerialNo
   AND StartTime = v_StartTime;

   IF v_EndTime IS NOT NULL then
      CALL PBL_SaveHistoryCommand(v_StationId,v_EquipmentId,v_ControlId,v_SerialNo,v_StartTime);
   end if;

-- 活动控制总数
   select   COUNT(*) INTO v_Total FROM TBL_ActiveControl;

-- 重置标志
-- SQLWAYS_EVAL# AND @SerialNo >= 1000000
-- BEGIN
-- SQLWAYS_EVAL# TBL_ActiveControl, 'identity_burn_max', 0, '1'
-- END

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;    

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_ConfirmActiveControlBySeq]...';


DROP PROCEDURE IF EXISTS PBL_ConfirmActiveControlBySeq;

CREATE PROCEDURE PBL_ConfirmActiveControlBySeq(v_UserId   		INT        	,
v_SerialNo		INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
-- 返回结果
-- -2 不存在该控制命令
-- -1 不可知错误
--  0 成功
--  1 没有确认控制命令的权限
-- SQLWAYS_EVAL# 的权限

   DECLARE v_Return INT;
   DECLARE v_StationId INT;
   DECLARE v_EquipmentId INT;
   DECLARE v_ControlId INT;
   DECLARE v_StartTime DATETIME;
   DECLARE v_Total INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 活动控制总数
   select   COUNT(*) INTO v_Total FROM TBL_ActiveControl WHERE SerialNo = v_SerialNo;

-- 确认控制
   SET @SWV_Error = 0;
   IF v_Total > 0 then

      select   StationId, EquipmentId, ControlId, StartTime INTO v_StationId,v_EquipmentId,v_ControlId,v_StartTime FROM TBL_ActiveControl WHERE SerialNo = v_SerialNo;
      SET v_Return = PBL_ConfirmActiveControl(v_StationId,v_EquipmentId,v_ControlId,v_UserId,v_SerialNo,v_StartTime);
   ELSE
      SET v_Return = -2;
   end if;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;    

   SET SWP_Ret_Value = v_Return;
END;




-- SELECT N'SQLWAYS_EVAL# L_Del_HistoryDataBatchAll]...';


DROP PROCEDURE IF EXISTS PBL_Del_HistoryDataBatchAll;

CREATE PROCEDURE PBL_Del_HistoryDataBatchAll(v_StartTime DATETIME,
v_EndTime DATETIME,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL#       datetime    --开始时间
@EndTime         datetime    --结束时间

Comments:    删除历史信号数据
Return:      0  成功
-2 开始时间不能大于结束时间
*/


   DECLARE v_ErrorCode INT;

-- 开始时间不能大于结束时间
   IF v_StartTime > v_EndTime then

      SET SWP_Ret_Value = -2;
      LEAVE SWL_return;
   end if;

   SET v_ErrorCode = PBL_Del_HistoryEvent(v_StartTime,v_EndTime);
   IF v_ErrorCode <> 0 then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

   SET v_ErrorCode = PBL_Del_HistoryControl(v_StartTime,v_EndTime);
   IF v_ErrorCode <> 0 then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;

   SET v_ErrorCode = PBL_Del_HistorySignal(v_StartTime,v_EndTime);
   IF v_ErrorCode <> 0 then

      SET SWP_Ret_Value = 3;
      LEAVE SWL_return;
   end if;

   SET v_ErrorCode = PBL_Del_HistoryBattery(v_StartTime,v_EndTime);
   IF v_ErrorCode <> 0 then

      SET SWP_Ret_Value = 4;
      LEAVE SWL_return;
   end if;

   SET v_ErrorCode = PBL_Del_SignalStatistics(v_StartTime,v_EndTime);
   IF v_ErrorCode <> 0 then

      SET SWP_Ret_Value = 5;
      LEAVE SWL_return;
   end if;

   SET v_ErrorCode = PBL_Del_SwapCardRecord(v_StartTime,v_EndTime);
   IF v_ErrorCode <> 0 then

      SET SWP_Ret_Value = 6;
      LEAVE SWL_return;
   end if;

   SET v_ErrorCode = PBL_Del_OperationRecord(v_StartTime,v_EndTime);
   IF v_ErrorCode <> 0 then

      SET SWP_Ret_Value = 7;
      LEAVE SWL_return;
   end if;

   SET SWP_Ret_Value = 0;
END;



-- SELECT N'SQLWAYS_EVAL# L_MaskEventReset]...';




DROP PROCEDURE IF EXISTS PBL_MaskEventReset;


CREATE PROCEDURE PBL_MaskEventReset	 
-- SQLWAYS_EVAL# datetime					
()
BEGIN
   DECLARE v_SequenceId NATIONAL VARCHAR(128);			   
   DECLARE v_i INT; 
   DECLARE v_RecordCount INT;
   DECLARE v_EventId INT;
   DECLARE v_StationId INT;
   DECLARE v_EquipmentId INT;
   DECLARE v_TimeGroupId INT;
   DECLARE v_DayInWeek INT;
   DECLARE v_IsMask INT; 
   DECLARE v_TimeSpanChar NATIONAL VARCHAR(24);
   DECLARE v_CurrentTime DATETIME;
   DECLARE v_EndTime DATETIME;
   DROP TEMPORARY TABLE IF EXISTS tt_MaskEvent;
   CREATE TEMPORARY TABLE tt_MaskEvent
   (
      IndexId INT   AUTO_INCREMENT PRIMARY KEY,
      SequenceId NATIONAL VARCHAR(128) NOT NULL,
      StationId INT NOT NULL,
      EquipmentId INT NOT NULL,
      EventId INT NOT NULL,
      EndTime DATETIME
   );
   CREATE UNIQUE INDEX MaskEvent_IDX1 ON tt_MaskEvent
   (IndexId);

   INSERT INTO tt_MaskEvent(SequenceId, StationId,EquipmentId, EventId, EndTime)
   SELECT SequenceId, StationId, EquipmentId, EventId, EndTime FROM TBL_EventMaskHistory2;

   SET v_CurrentTime = CURRENT_TIMESTAMP;

   select   MIN(IndexId), MAX(IndexId) INTO v_i,v_RecordCount FROM tt_MaskEvent;
   SWL_Label5:
   WHILE v_i <= v_RecordCount DO
      select   EventId, SequenceId, StationId, EquipmentId INTO v_EventId,v_SequenceId,v_StationId,v_EquipmentId FROM tt_MaskEvent WHERE IndexId = v_i;
      SET v_EndTime = NULL;
      select   EndTime INTO v_EndTime FROM TBL_EventMask WHERE  StationId = v_StationId
      AND EquipmentId = v_EquipmentId
      AND EventId = v_EventId;
      IF v_EndTime IS NOT NULL then

         IF  v_EndTime > v_CurrentTime then

-- SQLWAYS_EVAL# 件不能解屏蔽，继续处理下一条事件
            SET v_i = v_i+1;
            ITERATE SWL_Label5;
         end if;
      ELSE
         SET v_TimeGroupId = NULL;
         select   TimeGroupId INTO v_TimeGroupId FROM TBL_EventMask WHERE  StationId = v_StationId
         AND EquipmentId = v_EquipmentId
         AND EventId = v_EventId;
         SET v_DayInWeek = DAYOFWEEK(CURRENT_TIMESTAMP);
         SET v_TimeSpanChar = NULL;
         select   TimeSpanChar INTO v_TimeSpanChar FROM TBL_TimeGroupSpan WHERE TimeGroupId = v_TimeGroupId AND Week = v_DayInWeek;
         SET v_IsMask = NULL;
         SET v_IsMask = IsMask(v_TimeSpanChar);
         IF (v_IsMask = 1) then

-- SQLWAYS_EVAL# 事件不能解屏蔽，继续处理下一条事件
            SET v_i = v_i+1;
            ITERATE SWL_Label5;
         end if;
      end if;
      SET v_EndTime = NULL;
      select   EndTime INTO v_EndTime FROM TBL_EquipmentMask WHERE  StationId = v_StationId
      AND EquipmentId = v_EquipmentId;
      IF v_EndTime IS NOT NULL then

         IF  v_EndTime > v_CurrentTime then

-- SQLWAYS_EVAL# 能解屏蔽，继续处理下一条事件
            SET v_i = v_i+1;
            ITERATE SWL_Label5;
         end if;
      ELSE
         SET v_TimeGroupId = NULL;
         select   TimeGroupId INTO v_TimeGroupId FROM TBL_EquipmentMask WHERE  StationId = v_StationId
         AND EquipmentId = v_EquipmentId;
         SET v_DayInWeek = DAYOFWEEK(CURRENT_TIMESTAMP);
         SET v_TimeSpanChar = NULL;
         select   TimeSpanChar INTO v_TimeSpanChar FROM TBL_TimeGroupSpan WHERE TimeGroupId = v_TimeGroupId AND Week = v_DayInWeek;
         SET v_IsMask = NULL;
         SET v_IsMask = IsMask(v_TimeSpanChar);
         IF (v_IsMask = 1) then

-- SQLWAYS_EVAL# 事件不能解屏蔽，继续处理下一条事件
            SET v_i = v_i+1;
            ITERATE SWL_Label5;
         end if;
      end if;
      SET v_EndTime = NULL;
      select   EndTime INTO v_EndTime FROM TBL_StationMask WHERE  StationId = v_StationId;
      IF v_EndTime IS NOT NULL then

         IF v_EndTime > v_CurrentTime then

-- SQLWAYS_EVAL# 能解屏蔽，继续处理下一条事件
            SET v_i = v_i+1;
            ITERATE SWL_Label5;
         end if;
      ELSE
         SET v_TimeGroupId = NULL;
         select   TimeGroupId INTO v_TimeGroupId FROM TBL_StationMask WHERE  StationId = v_StationId;
         SET v_DayInWeek = DAYOFWEEK(CURRENT_TIMESTAMP);
         SET v_TimeSpanChar = NULL;
         select   TimeSpanChar INTO v_TimeSpanChar FROM TBL_TimeGroupSpan WHERE TimeGroupId = v_TimeGroupId AND Week = v_DayInWeek;
         SET v_IsMask = NULL;
         SET v_IsMask = IsMask(v_TimeSpanChar);
         IF (v_IsMask = 1) then

-- SQLWAYS_EVAL# 事件不能解屏蔽，继续处理下一条事件
            SET v_i = v_i+1;
            ITERATE SWL_Label5;
         end if;
      end if; 

-- SQLWAYS_EVAL# 站屏蔽设置存在，解除屏蔽
      CALL PBL_ClearEventMask(v_SequenceId);
      INSERT INTO TBL_HistoryEventMask(SequenceId ,
StationId ,
EquipmentId ,
EventId ,
EventConditionId ,
EventValue ,
Meanings ,
BaseTypeId ,
StartTime ,
EndTime)
      SELECT
      SequenceId ,
StationId ,
EquipmentId ,
EventId ,
EventConditionId ,
EventValue ,
Meanings ,
BaseTypeId ,
StartTime ,
v_CurrentTime
      FROM TSL_ActiveEvent WHERE SequenceId = v_SequenceId;
      DELETE FROM TBL_EventMaskHistory WHERE SequenceId =  v_SequenceId;
      SET v_i = v_i+1;
   END WHILE;
END;






-- SELECT N'SQLWAYS_EVAL# L_PerformMUSyncTask]...';





DROP PROCEDURE IF EXISTS PBL_PerformMUSyncTask;
CREATE PROCEDURE PBL_PerformMUSyncTask(v_TaskId INT ,
v_StationId INT,
v_MonitorUnitId INT,
v_SyncState INT ,
v_BeginTime DATETIME,
v_EndTime DATETIME,
v_MaxRetryCount INT,
v_RetryCount INT,
v_Description NATIONAL VARCHAR(255),
v_ConfigFileCode CHAR(32),
v_FullCfgState INT)
BEGIN

-- SQLWAYS_EVAL# Record写任务日志
   DECLARE v_RecordEnable NATIONAL VARCHAR(4000);
   IF v_RetryCount is null then
      set v_RetryCount = 0;
   END IF;
   IF v_Description is null then
      set v_Description = '';
   END IF;
   IF v_ConfigFileCode is null then
      set v_ConfigFileCode = '';
   END IF;
   IF v_FullCfgState is null then
      set v_FullCfgState = -1;
   END IF;
   select   ConfigValue INTO v_RecordEnable FROM TBL_SysConfig WHERE ConfigKey = 'SQLWAYS_EVAL# able';

   IF(v_SyncState = 2) then-- 成功

      DELETE FROM TBL_MUSyncTask WHERE TaskId = v_TaskId;

-- 修改全文配置状态表
      CALL PNL_UpdateFullCfgState(v_StationId,v_MonitorUnitId,v_ConfigFileCode,v_FullCfgState);
   ELSE 
      IF(v_SyncState = 3) then-- 失败

         IF EXISTS(SELECT 'X' FROM TSL_MonitorUnit WHERE MonitorUnitId = v_MonitorUnitId AND IsSync = 1) then

            UPDATE TSL_MonitorUnit SET IsSync = 0 WHERE MonitorUnitId = v_MonitorUnitId;
         end if;
         SET v_RetryCount = v_RetryCount+1;
         IF(v_RetryCount >= v_MaxRetryCount) then

            SET v_Description = '任务达到最大重试次数后失败';
            DELETE FROM TBL_MUSyncTask WHERE TaskId = v_TaskId;
         ELSE-- 任务重试
            SET v_Description = CONCAT('BS第',CAST(v_RetryCount AS CHAR(2)),'次任务重试');
            UPDATE TBL_MUSyncTask SET SyncState = 0,RetryCount = v_RetryCount,Description = v_Description
            WHERE TaskId = v_TaskId;
         end if;
         IF(IFNULL(v_RecordEnable,'true') = 'true') then

  INSERT INTO TBL_MUSyncRecord(StationId,MonitorUnitId,TaskId,SyncResult,SyncTime,Description)
VALUES(v_StationId,v_MonitorUnitId,v_TaskId,0,CURRENT_TIMESTAMP,v_Description);
         end if;
      end if;
   end if;
END;

-- SELECT N'SQLWAYS_EVAL# L_RecoveryHistoryAll]...';





DROP PROCEDURE IF EXISTS PBL_RecoveryHistoryAll;

CREATE PROCEDURE PBL_RecoveryHistoryAll(v_BusinessCategory INT,
v_StartTime	DATETIME ,
v_EndTime	DATETIME ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL#       @BusinessCategory      int    恢复数据类型ID
@StartTime             datetime  开始时间
@EndTime               datetime  结束时间
0.全部数据
1.历史事件
2.控制命令
3.历史信号
4.蓄电池
5.信号统计
6.刷卡记录
7.操作记录
8.通知服务记录
9.历史告警屏蔽记录
10.人员登录信息
11.关联信号数据
12.历史电表数据
Comments:           按业务类型恢复历史数据(1.历史事件,2.控制命令,3.历史信号,4.蓄电池,5.信号统计,6.刷卡记录,7.操作记录,8.通知服务记录,9.历史告警屏蔽记录,10.人员登录信息,11.关联信号数据,12.历史电表数据)
Return:             0       成功
1       恢复历史出错
2       恢复控制命令出错
3       恢复历史信号出错
4       恢复蓄电池出错
5       恢复信号统计出错
6       恢复刷卡记录出错
7       恢复操作记录出错
8		恢复通知服务记录出错
9		恢复历史告警屏蔽记录出错
10		恢复人员登录信息出错
11		恢复关联信号数据出错	
12		恢复历史电表数据出错
*/

-- 声明变量
   DECLARE v_ReturnCode INT;
   DECLARE v_RowCount INT;
   SET v_ReturnCode = 0;

   IF (v_BusinessCategory = 1 or v_BusinessCategory = 0) and v_ReturnCode = 0 then
-- 历史事件			
      SET v_ReturnCode = PBL_RecoveryHistoryEvent(v_RowCount,v_StartTime,v_EndTime);
   end if;
   IF (v_BusinessCategory = 2 or v_BusinessCategory = 0) and v_ReturnCode = 0 then
-- 控制命令		
      SET v_ReturnCode = PBL_RecoveryHistoryControl(v_RowCount,v_StartTime,v_EndTime);
   end if;						 
   IF (v_BusinessCategory = 3 or v_BusinessCategory = 0) and v_ReturnCode = 0 then
-- 历史信号
      SET v_ReturnCode = PBL_RecoveryHistorySignal(v_RowCount,v_StartTime,v_EndTime);
   end if;				
   IF (v_BusinessCategory = 4 or v_BusinessCategory = 0) and v_ReturnCode = 0 then
-- 蓄电池
      SET v_ReturnCode = PBL_RecoveryHistoryBattery(v_RowCount,v_StartTime,v_EndTime);
   end if;
   IF (v_BusinessCategory = 5 or v_BusinessCategory = 0) and v_ReturnCode = 0 then
-- 信号统计
      SET v_ReturnCode = PBL_RecoverySignalStatistics(v_RowCount,v_StartTime,v_EndTime);
   end if;
   IF (v_BusinessCategory = 6 or v_BusinessCategory = 0) and v_ReturnCode = 0 then
-- 刷卡记录
      SET v_ReturnCode = PBL_RecoverySwapCardRecord(v_RowCount,v_StartTime,v_EndTime);
   end if;
   IF (v_BusinessCategory = 7 or v_BusinessCategory = 0) and v_ReturnCode = 0 then

-- 操作记录
      SET v_ReturnCode = PBL_RecoveryOperationRecord(v_RowCount,v_StartTime,v_EndTime);
      if v_ReturnCode = 0 then 
         SET v_ReturnCode = PBL_RecoveryOperationDetail(v_RowCount,v_StartTime,v_EndTime);
      end if;
   end if;		
   IF (v_BusinessCategory = 8 or v_BusinessCategory = 0) and v_ReturnCode = 0 then
-- 通知服务记录
      SET v_ReturnCode = PBL_RecoveryNotificationLog(v_RowCount,v_StartTime,v_EndTime);
   end if;	
   IF (v_BusinessCategory = 9 or v_BusinessCategory = 0) and v_ReturnCode = 0 then
-- 历史告警屏蔽记录
      SET v_ReturnCode = PBL_RecoveryHistoryEventMask(v_RowCount,v_StartTime,v_EndTime);
   end if;	
   IF (v_BusinessCategory = 10 or v_BusinessCategory = 0) and v_ReturnCode = 0 then
-- 人员登录信息
      SET v_ReturnCode = PBL_RecoveryLoginInfo(v_RowCount,v_StartTime,v_EndTime);
   end if;
   IF (v_BusinessCategory = 11 or v_BusinessCategory = 0) and v_ReturnCode = 0 then
-- 关联信号数据
      SET v_ReturnCode = PBL_RecoveryRelatingSignal(v_RowCount,v_StartTime,v_EndTime);
   end if;					
   IF (v_BusinessCategory = 12 or v_BusinessCategory = 0) and v_ReturnCode = 0 then
-- 历史电表数据
      SET v_ReturnCode = PBL_RecoveryHistoryAmeter(v_RowCount,v_StartTime,v_EndTime);
   end if;					

   IF v_ReturnCode <> 0 then
-- 执行错误，返回错误代码

      SET SWP_Ret_Value = v_BusinessCategory;
      LEAVE SWL_return;
   end if;

-- 执行成功
   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_SARSaveHistoryEvent]...';


DROP PROCEDURE IF EXISTS PBL_SARSaveHistoryEvent;

CREATE PROCEDURE PBL_SARSaveHistoryEvent(
				-- 基类ID(可空)
v_StationId				INT,			-- 局站Id
v_EquipmentId			INT,			-- 设备Id
v_EventId				INT,			-- 事件Id
v_EventConditionId		INT,			-- 产生事件的条件Id
v_SequenceId			NATIONAL VARCHAR(128),	-- 事件流水号
v_StartTime				DATETIME,		-- 事件开始时间
v_EndTime				DATETIME,		-- 事件结束时间
v_Overturn				INT,			-- 事件翻转次数
v_Meanings				NATIONAL VARCHAR(255),	-- 事件描述
v_EventValue			FLOAT, 			-- 触发值
v_BaseTypeId			NUMERIC(10,0),INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_EventCategory INT;
   DECLARE v_EventSeverityId INT;
   DECLARE v_EventSeverity NATIONAL VARCHAR(255);
   DECLARE v_StationState INT;
   DECLARE v_MaskStartTime DATETIME;
   DECLARE v_MaskEndTime DATETIME;
   DECLARE v_ConfirmTime DATETIME;
   DECLARE v_ConfirmerId INT;   
   DECLARE v_ConfirmerName NATIONAL VARCHAR(256);
   DECLARE v_StandardAlarmNameId INT;
   DECLARE v_StandardAlarmName NATIONAL VARCHAR(256);
   DECLARE v_OperationType INT;
   DECLARE v_CenterId INT;
   DECLARE v_CenterName NATIONAL VARCHAR(255);
   DECLARE v_StructureName NATIONAL VARCHAR(255);
   DECLARE v_MonitorUnitName NATIONAL VARCHAR(255);
   DECLARE v_EquipmentCategoryName NATIONAL VARCHAR(255);
   DECLARE v_BaseTypeName NATIONAL VARCHAR(255);
   DECLARE v_ret INT;
   DECLARE v_ResetSequenceId NATIONAL VARCHAR(128);
   DECLARE v_IsProcess INT;
   DECLARE v_StructureId INT;
   DECLARE v_StandardMeaning NATIONAL VARCHAR(255);
   DECLARE v_Vender NATIONAL VARCHAR(255);
   DECLARE v_CurrentTime DATETIME;
   DECLARE v_StandardVer INT;

-- 当前时间
   SET v_CurrentTime = CURRENT_TIMESTAMP;

-- SQLWAYS_EVAL# ，设备，信号名，基类ID，及常用事件属性形成ActiveEvent，加快界面和告警通知速度
   SET v_StationState = PNL_GetStationState(v_StationId,v_StartTime);

   select   StructureId, StructureName INTO v_CenterId,v_CenterName FROM TBL_StationStructure WHERE ParentStructureId = 0;

   select   structure.StructureId, structure.StructureName INTO v_StructureId,v_StructureName FROM TBL_StationStructureMap map, TBL_StationStructure structure WHERE map.StationId = v_StationId
   AND map.StructureId = structure.StructureId
   AND structure.StructureGroupId = 1;

   select   MonitorUnitName, dataItem.ItemValue INTO v_MonitorUnitName,v_EquipmentCategoryName FROM TSL_MonitorUnit monitorUnit, TBL_Equipment equipment, TBL_DataItem dataItem WHERE monitorUnit.MonitorUnitId = equipment.MonitorUnitId
   AND equipment.EquipmentId = v_EquipmentId
   AND equipment.StationId = v_StationId
   AND dataItem.EntryId = 7
   AND equipment.EquipmentCategory = dataItem.ItemId;

   select   EventSeverity, Meanings, A.BaseTypeId INTO v_EventSeverityId,v_StandardMeaning,v_BaseTypeId FROM TBL_EventCondition A, TBL_Equipment B WHERE B.StationId = v_StationId AND B.EquipmentId = v_EquipmentId
   AND A.EquipmentTemplateId = B.EquipmentTemplateId
   AND A.EventId = v_EventId AND A.EventConditionId = v_EventConditionId;

   select   BaseTypeName INTO v_BaseTypeName FROM TBL_EventBaseDic WHERE BaseTypeId = v_BaseTypeId;

/*SQLWAYS_EVAL# = srule.StandardDicId  
FROM TBL_Event configEvent, TBL_StandardTemplateMap map, TBL_StandardRule srule, TBL_Station station,TBL_Equipment equipment
WHERE equipment.EquipmentTemplateId = map.EquipmentTemplateId
AND configEvent.EquipmentTemplateId = equipment.EquipmentTemplateId
AND map.StandardTemplateId = srule.StandardTemplateId
AND configEvent.EventName = srule.EventName
AND station.StationCategory = map.StationCategory
AND configEvent.EventId = @EventId
AND station.StationId = @StationId
AND equipment.StationId = @StationId
AND equipment.EquipmentId = @EquipmentId
AND srule.Meanings = @StandardMeaning
*/

   IF v_BaseTypeId IS NOT NULL then

      SET v_StandardVer = PAM_GetStandardVer();
      select   A.StandardDicId, replace(D.EventStandardName,'XX',CAST(v_BaseTypeId -floor(v_BaseTypeId/1000)*1000 AS CHAR(10))) INTO v_StandardAlarmNameId,v_StandardAlarmName FROM TBL_EventBaseMap A
      INNER JOIN TBL_StationBaseMap B ON A.StationBaseType = B.StationBaseType AND B.StandardType = v_StandardVer
      INNER JOIN TBL_Station C ON C.StationCategory = B.StationCategory
      INNER JOIN TBL_StandardDicEvent D ON D.StandardDicId = A.StandardDicId
      AND (D.StationCategory = B.StationBaseType OR D.StationCategory = 0)
      AND D.StandardType = v_StandardVer WHERE A.BaseTypeId = floor(v_BaseTypeId/1000)*1000+1
      AND C.StationId = v_StationId;
   end if;  

   select   ItemValue INTO v_EventSeverity FROM TBL_DataItem WHERE EntryId = 23 AND ItemId = v_EventSeverityId;

/*SQLWAYS_EVAL# = StandardName
FROM TBL_StandardDic
WHERE StandardDicId = @StandardAlarmNameId    
*/

   select   Vendor INTO v_Vender FROM   TBL_Equipment equipment WHERE equipment.EquipmentId = v_EquipmentId;

   INSERT INTO TBL_HistoryEvent(SequenceId,
StationId ,
StationName,
EquipmentId,
EquipmentName ,
EventId,
EventName,
EventConditionId,
EventSeverityId,
EventSeverity,
StartTime,
EndTime,
CancelTime,
CancelUserId,
CancelUserName ,
ConfirmTime,
ConfirmerId,
ConfirmerName,
EventValue ,
ReversalNum,
Meanings ,
EventFilePath ,
Description,
SourceHostId ,
InstructionId ,
InstructionStatus,
StandardAlarmNameId ,
StandardAlarmName,
BaseTypeId,
BaseTypeName ,
EquipmentCategory ,
EquipmentCategoryName,
MaintainState ,
SignalId ,
RelateSequenceId,
EventCategoryId,
EventStateId,
CenterId,
CenterName,
StructureName,
MonitorUnitName,
StructureId,
StationCategoryId,
EquipmentVendor)
   SELECT
   v_SequenceId,
v_StationId,
st.StationName,
v_EquipmentId,
eq.EquipmentName,
v_EventId,
ev.EventName,
v_EventConditionId,
v_EventSeverityId,
v_EventSeverity,
v_StartTime ,
v_EndTime ,
NULL AS CancelTime,
NULL AS CancelUserId,
NULL AS CancelUserName,
v_CurrentTime AS ConfirmTime,
-2 AS ConfirmerId,
'系统自动确认' AS ConfirmName,
v_EventValue ,
v_Overturn AS ReversalNum,
v_Meanings ,
NULL AS EventFilePath,
NULL AS Description,
eq.MonitorUnitId,
NULL AS InstructionId,
0 AS InstructionStatus,
v_StandardAlarmNameId,
v_StandardAlarmName ,
v_BaseTypeId,
v_BaseTypeName,
eq.EquipmentCategory ,
v_EquipmentCategoryName ,
v_StationState  AS MaintainState,
ev.SignalId ,
NULL AS RelateSequenceId ,
ev.EventCategory,
ev.Enable    ,
v_CenterId       ,
v_CenterName     ,
v_StructureName   ,
v_MonitorUnitName ,
v_StructureId ,
st.StationCategory,
v_Vender
   FROM TBL_EventCondition ec
   INNER JOIN TBL_Equipment eq ON ec.EquipmentTemplateId = eq.EquipmentTemplateId
   INNER JOIN TBL_Event ev ON  ev.EventId = ec.EventId  AND ec.EquipmentTemplateId = ev.EquipmentTemplateId
   INNER JOIN TBL_Station st ON eq.StationId = st.StationId
   WHERE eq.EquipmentId = v_EquipmentId
   AND eq.StationId = v_StationId
   AND ec.EventId = v_EventId
   AND ec.EventConditionId = v_EventConditionId;

-- 成功
   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_SaveActiveSignal]...';

DROP PROCEDURE IF EXISTS PBL_SaveActiveSignal;
CREATE PROCEDURE PBL_SaveActiveSignal(v_StationId   	INT       	,
v_HostId      	INT   	   	,
v_EquipmentId 	INT		    ,
v_SignalId    	INT        	,
v_Flag			INT     	,
v_SampleTime		DATETIME    ,
v_FloatValue		FLOAT       ,
v_StringValue		NATIONAL VARCHAR(255),
v_DateTimeValue	DATETIME    ,
v_BaseTypeId		NUMERIC(10,0) ,
v_ValueType		INT         ,
v_EventSeverity   INT,INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN
-- 返回结果
-- -1 不可知错误
--  0 成功
--  1 参数为0或空
--  2 配置是否存在

   DECLARE v_StartIndex INT;
   DECLARE v_EndIndex INT;
   DECLARE v_StationName NATIONAL VARCHAR(255);
   DECLARE v_EquipmentName NATIONAL VARCHAR(255);
   DECLARE v_SignalName NATIONAL VARCHAR(255);
   DECLARE v_SignalCategory INT;
   DECLARE v_ShowPrecision NATIONAL VARCHAR(255);
   DECLARE v_Unit NATIONAL VARCHAR(255);
   DECLARE v_BaseTypeName NATIONAL VARCHAR(255);
   DECLARE v_EventSeverityName NATIONAL VARCHAR(255);
   DECLARE v_Meanings NATIONAL VARCHAR(255);
   DECLARE v_BaseCondId INT;
   DECLARE v_BaseMeaning NATIONAL VARCHAR(255);
   DECLARE v_EquipmentTemplateId INT;
   DECLARE v_CurrentDateTime DATETIME;
   DECLARE v_Total INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;				

-- 参数检查
   SET @SWV_Error = 0;
   IF v_StationId IS NULL OR v_EquipmentId IS NULL OR v_SignalId IS NULL OR v_SampleTime IS NULL
   OR v_StationId = 0 OR v_EquipmentId = 0 OR v_SignalId = 0 then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;	

-- 当前时间
   SET v_CurrentDateTime = CURRENT_TIMESTAMP;			

-- 设备
   select   EquipmentName, EquipmentTemplateId INTO v_EquipmentName,v_EquipmentTemplateId FROM TBL_Equipment WHERE EquipmentId = v_EquipmentId AND StationId = v_StationId;

-- 信号
   select   SignalName, SignalCategory, ShowPrecision, Unit, BaseTypeId INTO v_SignalName,v_SignalCategory,v_ShowPrecision,v_Unit,v_BaseTypeId FROM TBL_Signal WHERE SignalId = v_SignalId	AND EquipmentTemplateId = v_EquipmentTemplateId;

-- 信号含义
   SET v_Meanings = '----';

-- 开关量信号
   IF v_SignalCategory = 2 AND v_FloatValue > -10000 AND v_FloatValue < 10000 then

      select   Meanings, BaseCondId INTO v_Meanings,v_BaseCondId FROM TBL_SignalMeanings WHERE SignalId = v_SignalId	AND EquipmentTemplateId = v_EquipmentTemplateId AND StateValue = cast(v_FloatValue as SIGNED INTEGER);
   end if;

-- 告警等级
   select   CASE WHEN ItemValue IS NOT NULL THEN ItemValue ELSE '' END INTO v_EventSeverityName FROM TBL_DataItem WHERE EntryId = 23 AND ItemId = v_EventSeverity;



   IF NOT EXISTS(SELECT 'X'
   FROM TBL_ActiveSignal
   WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId AND SignalId = v_SignalId) then


-- 局站
      select   StationName INTO v_StationName FROM TBL_Station WHERE StationId = v_StationId;

-- 基类信息
      select   BaseTypeName INTO v_BaseTypeName FROM TBL_SignalBaseDic WHERE BaseTypeId = v_BaseTypeId;

-- 不存在
      INSERT INTO TBL_ActiveSignal(StationId          ,
StationName        ,
EquipmentId        ,
EquipmentName      ,
SignalId           ,
SignalName         ,
SignalCategory     ,
DataType           ,
FloatValue         ,
StringValue		 ,
DateTimeValue      ,
SampleTime         ,
ShowPrecision      ,
Unit               ,
BaseTypeId         ,
BaseTypeName       ,
EventSeverity      ,
EventSeverityName  ,
Meanings			 ,
Flag				 ,
LastUpdate		 -- ,
-- SQLWAYS_EVAL# 	 ,
-- [BaseMeaning]
)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_ValueType,
v_FloatValue,
v_StringValue,
v_DateTimeValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_Flag,
v_CurrentDateTime-- ,
-- @BaseCondId,
-- @BaseMeaning
);
   ELSE
-- 存在
      UPDATE TBL_ActiveSignal
      SET FloatValue = v_FloatValue,StringValue = v_StringValue,DateTimeValue = v_DateTimeValue,
      SampleTime = v_SampleTime,Meanings = v_Meanings,LastUpdate = v_CurrentDateTime,
      EventSeverity = v_EventSeverity,EventSeverityName = v_EventSeverityName,
      Flag = v_Flag
      WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId AND SignalId = v_SignalId;
   end if;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;    

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_SaveControlResult]...';





DROP PROCEDURE IF EXISTS PBL_SaveControlResult;

CREATE PROCEDURE PBL_SaveControlResult(v_StationId                         INT         ,
v_HostId                              INT         ,
v_EquipmentId                  INT         ,
v_ControlId                         INT         ,
v_SerialNo                           INT         ,
v_StartTime          DATETIME    ,
v_EndTime            DATETIME    ,
v_UserId                              INT         ,
v_BaseTypeId         NUMERIC(10,0) ,
v_ResultCode         INT         ,
v_Result             NATIONAL VARCHAR(255),
v_ControlPhase       INT,INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN
--       处理流程
-- SQLWAYS_EVAL# 动加入确认时间和确认人

--  返回结果
-- -1 不可知错误
--  0 成功
--  1 参数为0或空
--  2 不存在对应活动控制

   DECLARE v_ConfirmTime DATETIME;
   DECLARE v_ConfirmerName NATIONAL VARCHAR(255);
   DECLARE v_ConfirmerId INT;
   DECLARE v_Retry INT;
   DECLARE v_ControlType INT;
   DECLARE v_Return INT;
   DECLARE v_ParameterValues NATIONAL VARCHAR(500);
   DECLARE v_ControlCategory INT;
   DECLARE v_Total INT;
   DECLARE v_DoorType INT; 
   DECLARE v_CmdToken NATIONAL VARCHAR(255);
   DECLARE v_EquipmentTemplateId INT; 

-- 错误处理
   IF v_StationId IS NULL OR v_EquipmentId IS NULL OR v_ControlId IS NULL
   OR v_StationId = 0 OR v_EquipmentId = 0 OR v_ControlId = 0 then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;                            

-- 控制成功
   IF v_ResultCode  = 1 then

      SET v_ConfirmTime = v_EndTime;
      SET v_ConfirmerId = -2;
      SET v_ControlPhase = 4;
      select   UserName INTO v_ConfirmerName FROM TBL_Account WHERE UserId = v_ConfirmerId;
   end if;

-- 查找活动控制       
   select   CASE WHEN EndTime       IS NULL THEN v_EndTime            ELSE  EndTime      END, CASE WHEN ConfirmTime   IS NULL THEN v_ConfirmTime        ELSE  ConfirmTime  END, CASE WHEN ConfirmerId   IS NULL THEN v_ConfirmerId        ELSE  ConfirmerId  END, CASE WHEN Retry         IS NULL THEN v_Retry              ELSE  Retry        END, ParameterValues, ControlType, CmdToken INTO v_EndTime,v_ConfirmTime,v_ConfirmerId,v_Retry,v_ParameterValues,v_ControlType,
   v_CmdToken FROM    TBL_ActiveControl WHERE  StationId            =   v_StationId
   AND    EquipmentId          =   v_EquipmentId
   AND    ControlId            =   v_ControlId
   AND    SerialNo             =   v_SerialNo
   AND    StartTime            =   v_StartTime;

-- 是否存在
   IF (ROW_COUNT() = 1) then
                     
-- 存在

-- 更新结果
      select   CASE WHEN v_Result IS NULL OR v_Result = '' THEN ItemValue ELSE v_Result END INTO v_Result FROM TBL_DataItem WHERE EntryId = 30 AND ItemId = v_ResultCode;
      UPDATE TBL_ActiveControl
      SET TBL_ActiveControl.EndTime = v_EndTime,TBL_ActiveControl.ControlPhase = v_ControlPhase,
      TBL_ActiveControl.ControlResult = v_Result,TBL_ActiveControl.ControlResultType = v_ResultCode,
      TBL_ActiveControl.ConfirmTime = v_ConfirmTime, 
      TBL_ActiveControl.ConfirmerId = v_ConfirmerId,TBL_ActiveControl.ConfirmerName = v_ConfirmerName, 
      TBL_ActiveControl.Retry = v_Retry
      WHERE  StationId            =   v_StationId
      AND    EquipmentId          =   v_EquipmentId
      AND    ControlId            =   v_ControlId
      AND    SerialNo             =   v_SerialNo
      AND    StartTime            =   v_StartTime;

-- 结束且确认迁移到历史表
      SET v_Return = 0;
      IF v_EndTime IS NOT NULL  AND  v_ConfirmTime IS NOT NULL then

-- Save History
         SET v_Return = PBL_SaveHistoryCommand(v_StationId,v_EquipmentId,v_ControlId,v_SerialNo,v_StartTime);
      end if;

-- 控制结果
      IF v_ResultCode = 1 then


         select   EquipmentTemplateId INTO v_EquipmentTemplateId FROM TBL_Equipment WHERE EquipmentId = v_EquipmentId AND StationId  = v_StationId; 

-- Control 
         select   ControlCategory INTO v_ControlCategory FROM TBL_Control tc
         LEFT JOIN TBL_CommandBaseDic cb ON tc.BaseTypeId = cb.BaseTypeId WHERE ControlId = v_ControlId AND EquipmentTemplateId = v_EquipmentTemplateId;

-- 控制成功
         IF v_ControlCategory IN(12,13,14,15,16,17,18,19,20,21,22)
         OR v_CmdToken IN('22','16','17','12','11','36','37','38','31','19') then

-- 设备门类型 
            SET v_DoorType = NULL;
            select   DoorControlId INTO v_DoorType FROM TBL_Door WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId   LIMIT 1;
            IF v_DoorType = 4 then

-- 走DDS门禁
               CALL PCT_SaveDDSDoorControl(v_StationId,v_EquipmentId,v_CmdToken,v_ParameterValues);
            ELSE
-- SQLWAYS_EVAL# 存门禁控制命令
               CALL PCT_SaveDoorControl(v_StationId,v_EquipmentId,v_ControlCategory,v_ParameterValues);
            end if;
         end if;
      end if;

-- 活动控制总数
      select   COUNT(*) INTO v_Total FROM TBL_ActiveControl;

-- 重置标志
-- SQLWAYS_EVAL# AND @SerialNo >= 1000000
-- BEGIN
-- SQLWAYS_EVAL# TBL_ActiveControl, 'identity_burn_max', 0, '1'
-- END

      SET SWP_Ret_Value = v_Return;
      LEAVE SWL_return;
   ELSE
      SELECT * FROM    TBL_HistoryControl
      WHERE  StationId            =   v_StationId
      AND    EquipmentId          =   v_EquipmentId
      AND    ControlId            =   v_ControlId
      AND    SerialNo             =   v_SerialNo
      AND    StartTime            =   v_StartTime;
      IF (ROW_COUNT() = 1) then

         SET SWP_Ret_Value = 0;
         LEAVE SWL_return;
      end if;
-- 不存在
      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;                    
END;



-- SELECT N'SQLWAYS_EVAL# L_SaveHistoryBattery]...';





DROP PROCEDURE IF EXISTS PBL_SaveHistoryBattery;

CREATE PROCEDURE PBL_SaveHistoryBattery(v_StationId   	INT       	,
v_HostId      	INT   	   	,
v_EquipmentId 	INT		    ,
v_SignalId    	INT        	,
v_SampleTime		DATETIME    ,
v_FloatValue		FLOAT		,
v_BaseTypeId		NUMERIC(10,0) ,
v_Status		    INT         ,
v_SignalType		INT         ,
v_EventSeverity  INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_StartIndex INT;
   DECLARE v_EndIndex INT;
   DECLARE v_StationName NATIONAL VARCHAR(255);
   DECLARE v_EquipmentName NATIONAL VARCHAR(255);
   DECLARE v_SignalName NATIONAL VARCHAR(255);
   DECLARE v_SignalCategory INT;
   DECLARE v_ShowPrecision NATIONAL VARCHAR(255);
   DECLARE v_Unit NATIONAL VARCHAR(255);
   DECLARE v_BaseTypeName NATIONAL VARCHAR(255);
   DECLARE v_EventSeverityName NATIONAL VARCHAR(255);
   DECLARE v_Meanings NATIONAL VARCHAR(255);
   DECLARE v_SQL NATIONAL VARCHAR(4000);
   DECLARE v_EquipmentTemplateId INT;
   DECLARE v_SignalSeverity INT;
   DECLARE v_StationState INT;
   DECLARE v_Total INT;
   DECLARE v_GetDate DATETIME;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 返回结果
-- -1 不可知错误
--  0 成功
--  1 参数为0或空
--  2 配置是否存在
--  3 工程状态数据一律丢弃

-- 参数检查
   SET @SWV_Error = 0;
   IF v_StationId IS NULL OR v_EquipmentId IS NULL OR v_SignalId IS NULL OR v_SampleTime IS NULL
   OR v_StationId = 0 OR v_EquipmentId = 0 OR v_SignalId = 0 then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;	

-- 配置是否存在
   select   COUNT(*) INTO v_Total FROM TBL_Station WHERE StationId = v_StationId;
   IF (v_Total <> 1) then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;
   select   COUNT(*) INTO v_Total FROM TBL_Equipment WHERE EquipmentId = v_EquipmentId AND StationId = v_StationId;
   IF (v_Total <> 1) then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;
   select   COUNT(*) INTO v_Total FROM TBL_Signal ts
   INNER JOIN TBL_Equipment te ON ts.EquipmentTemplateId = te.EquipmentTemplateId WHERE te.EquipmentId = v_EquipmentId AND te.StationId = v_StationId AND ts.SignalId = v_SignalId;
   IF (v_Total <> 1) then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;

-- 当前时间
   SET v_GetDate = CURRENT_TIMESTAMP;

-- Station Name
   select   StationName, StationState INTO v_StationName,v_StationState FROM TBL_Station WHERE StationId = v_StationId;

-- 非联网状态下的数据一律丢弃
   SET v_StationState = PNL_GetStationState(v_StationId,v_GetDate);
   IF v_StationState <> 1 then

      SET SWP_Ret_Value = 3;
      LEAVE SWL_return;
   end if;

-- Equipment Name
   select   EquipmentName, EquipmentTemplateId INTO v_EquipmentName,v_EquipmentTemplateId FROM TBL_Equipment WHERE EquipmentId = v_EquipmentId AND StationId = v_StationId;

-- Signal
   select   SignalName, SignalCategory, ShowPrecision, Unit INTO v_SignalName,v_SignalCategory,v_ShowPrecision,v_Unit FROM TBL_Signal WHERE EquipmentTemplateId = v_EquipmentTemplateId  AND SignalId = v_SignalId;

-- Meanings	
   SET v_Meanings = '----';
-- 开关量信号
   IF v_SignalCategory = 2 then

      select   Meanings INTO v_Meanings FROM TBL_SignalMeanings WHERE SignalId = v_SignalId	AND EquipmentTemplateId = v_EquipmentTemplateId AND StateValue = cast(v_FloatValue as SIGNED INTEGER);
   end if;

-- 基类信息
   select   BaseTypeName INTO v_BaseTypeName FROM TBL_SignalBaseDic WHERE BaseTypeId = v_BaseTypeId;

-- 告警等级
   select   CASE WHEN ItemValue IS NOT NULL THEN ItemValue ELSE '' END INTO v_EventSeverityName FROM TBL_DataItem WHERE EntryId = 23 AND ItemId = v_EventSeverity;

   SET v_StartIndex = EXTRACT(month FROM v_SampleTime);

   SET @SWV_Error = 0;
   IF v_StartIndex = 1 then

  INSERT INTO TBL_HistoryBattery1(StationId			,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
FloatValue        ,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings			,
ThresholdType		,
EquipmentState)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_FloatValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_Status);
   ELSE 
      IF v_StartIndex  = 2 then

  INSERT INTO TBL_HistoryBattery(StationId			,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
FloatValue        ,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings			,
ThresholdType		,
EquipmentState)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_FloatValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_Status);
      ELSE 
         IF v_StartIndex  = 3 then

  INSERT INTO TBL_HistoryBattery3(StationId			,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
FloatValue        ,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings			,
ThresholdType		,
EquipmentState)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_FloatValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_Status);
         ELSE 
            IF v_StartIndex  = 4 then

  INSERT INTO TBL_HistoryBattery4(StationId			,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
FloatValue        ,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings			,
ThresholdType		,
EquipmentState)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_FloatValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_Status);
            ELSE 
               IF v_StartIndex  = 5 then

  INSERT INTO TBL_HistoryBattery5(StationId			,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
FloatValue        ,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings			,
ThresholdType		,
EquipmentState)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_FloatValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_Status);
               ELSE 
                  IF v_StartIndex  = 6 then

  INSERT INTO TBL_HistoryBattery6(StationId			,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
FloatValue        ,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings			,
ThresholdType		,
EquipmentState)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_FloatValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_Status);
                  ELSE 
                     IF v_StartIndex  = 7 then

  INSERT INTO TBL_HistoryBattery7(StationId			,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
FloatValue        ,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings			,
ThresholdType		,
EquipmentState)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_FloatValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_Status);
                     ELSE 
                        IF v_StartIndex  = 8 then

  INSERT INTO TBL_HistoryBattery8(StationId			,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
FloatValue        ,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings			,
ThresholdType		,
EquipmentState)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_FloatValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_Status);
                        ELSE 
                           IF v_StartIndex  = 9 then

  INSERT INTO TBL_HistoryBattery9(StationId			,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
FloatValue        ,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings			,
ThresholdType		,
EquipmentState)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_FloatValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_Status);
                           ELSE 
                              IF v_StartIndex  = 10 then

  INSERT INTO TBL_HistoryBattery10(StationId			,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
FloatValue        ,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings			,
ThresholdType		,
EquipmentState)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_FloatValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_Status);
                              ELSE 
                                 IF v_StartIndex  = 11 then

  INSERT INTO TBL_HistoryBattery11(StationId			,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
FloatValue        ,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings			,
ThresholdType		,
EquipmentState)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_FloatValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_Status);
                                 ELSE 
                                    IF v_StartIndex  = 12 then

  INSERT INTO TBL_HistoryBattery1(StationId			,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
FloatValue        ,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings			,
ThresholdType		,
EquipmentState)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_FloatValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_Status);
                                    ELSE
                                       SET SWP_Ret_Value = -1;
                                       LEAVE SWL_return;
                                    end if;
                                 end if;
                              end if;
                           end if;
                        end if;
                     end if;
                  end if;
               end if;
            end if;
         end if;
      end if;
   end if;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;       

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_SaveHistorySignal]...';





DROP PROCEDURE IF EXISTS PBL_SaveHistorySignal;

CREATE PROCEDURE PBL_SaveHistorySignal(v_StationId   	INT       	,
v_HostId      	INT   	   	,
v_EquipmentId 	INT		    ,
v_SignalId    	INT        	,
v_SampleTime		DATETIME    ,
v_FloatValue		FLOAT       ,
v_StringValue		NATIONAL VARCHAR(255),
v_DateTimeValue	DATETIME    ,
v_BaseTypeId		NUMERIC(10,0) ,
v_ValueType		INT         ,
v_SignalType		INT         ,
v_EventSeverity	INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
--  返回结果
-- -1 不可知错误
--  0 成功
--  1 参数为0或空
--  2 配置是否存在
--  3 工程状态数据一律丢弃

   DECLARE v_StartIndex INT;
   DECLARE v_EndIndex INT;
   DECLARE v_StationName NATIONAL VARCHAR(255);
   DECLARE v_EquipmentName NATIONAL VARCHAR(255);
   DECLARE v_SignalName NATIONAL VARCHAR(255);
   DECLARE v_SignalCategory INT;
   DECLARE v_ShowPrecision NATIONAL VARCHAR(255);
   DECLARE v_Unit NATIONAL VARCHAR(255);
   DECLARE v_BaseTypeName NATIONAL VARCHAR(255);
   DECLARE v_EventSeverityName NATIONAL VARCHAR(255);
   DECLARE v_SQL NATIONAL VARCHAR(4000);
   DECLARE v_Meanings NATIONAL VARCHAR(255);
   DECLARE v_EquipmentTemplateId INT;
   DECLARE v_StationState INT;
   DECLARE v_Total INT;
   DECLARE v_GetDate DATETIME;
   DECLARE v_BaseCondId INT;
   DECLARE v_BaseMeaning NATIONAL VARCHAR(255);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 参数检查
   SET @SWV_Error = 0;
   IF v_StationId IS NULL OR v_EquipmentId IS NULL AND v_SignalId IS NULL AND v_SampleTime IS NULL
   OR v_StationId = 0 OR v_EquipmentId = 0 OR v_SignalId = 0 then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

-- 配置是否存在
   select   COUNT(*) INTO v_Total FROM TBL_Station WHERE StationId = v_StationId;
   IF (v_Total <> 1) then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;
   select   COUNT(*) INTO v_Total FROM TBL_Equipment WHERE EquipmentId = v_EquipmentId AND StationId = v_StationId;
   IF (v_Total <> 1) then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;
   select   COUNT(*) INTO v_Total FROM TBL_Signal ts
   INNER JOIN TBL_Equipment te ON ts.EquipmentTemplateId = te.EquipmentTemplateId WHERE te.EquipmentId = v_EquipmentId AND te.StationId = v_StationId AND ts.SignalId = v_SignalId;
   IF (v_Total <> 1) then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;

-- 当前时间
   SET v_GetDate = CURRENT_TIMESTAMP;

-- Station Name
   select   StationName, StationState INTO v_StationName,v_StationState FROM TBL_Station WHERE StationId = v_StationId;

-- 非联网状态下的数据一律丢弃
--    SET v_StationState = PNL_GetStationState(v_StationId,v_GetDate);
--    IF v_StationState <> 1 then

--       SET SWP_Ret_Value = 3;
--       LEAVE SWL_return;
--    end if;

-- Equipment Name
   select   EquipmentName, EquipmentTemplateId INTO v_EquipmentName,v_EquipmentTemplateId FROM TBL_Equipment WHERE EquipmentId = v_EquipmentId AND StationId = v_StationId;

-- Signal
   select   SignalName, SignalCategory, ShowPrecision, Unit, BaseTypeId INTO v_SignalName,v_SignalCategory,v_ShowPrecision,v_Unit,v_BaseTypeId FROM TBL_Signal WHERE EquipmentTemplateId = v_EquipmentTemplateId AND SignalId = v_SignalId;

-- Meanings
   SET v_Meanings = '----';	
-- 开关量信号
   IF v_SignalCategory = 2 then

      IF v_FloatValue >= -32768.0 AND v_FloatValue <= 32767.0 then

         select   Meanings, BaseCondId INTO v_Meanings,v_BaseCondId FROM TBL_SignalMeanings WHERE SignalId = v_SignalId	AND EquipmentTemplateId = v_EquipmentTemplateId AND StateValue = cast(v_FloatValue as SIGNED INTEGER);
         IF v_BaseCondId IS NOT NULL AND v_BaseTypeId IS NOT NULL AND v_BaseTypeId <> 0 then

            select   Meaning INTO v_BaseMeaning FROM TBL_StatusBaseDic A
            INNER JOIN TBL_SignalBaseDic B ON A.BaseStatusId = B.BaseStatusId WHERE A.BaseCondId = v_BaseCondId AND B.BaseTypeId = v_BaseTypeId;
         end if;
      end if;
   end if;

-- 基类信息
   select   BaseTypeName INTO v_BaseTypeName FROM TBL_SignalBaseDic WHERE BaseTypeId = v_BaseTypeId;

-- 告警等级
   select   CASE WHEN ItemValue IS NOT NULL THEN ItemValue ELSE '' END INTO v_EventSeverityName FROM TBL_DataItem WHERE EntryId = 23 AND ItemId = v_EventSeverity;

   IF v_BaseCondId IS NULL then
	SET v_BaseCondId = 0;
	end if;

   SET v_StartIndex = EXTRACT(month FROM v_SampleTime);
   IF v_StartIndex = 1 then

  INSERT INTO TBL_HistorySignal1(StationId			,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
DataType          ,
FloatValue		,
StringValue		,
DateTimeValue		,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings			,
ThresholdType		,
BaseCondId		,
BaseMeaning)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_ValueType,
v_FloatValue,
v_StringValue,
v_DateTimeValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_BaseCondId,
v_BaseMeaning);
   ELSE 
      IF v_StartIndex = 2 then

  INSERT INTO TBL_HistorySignal2(StationId			,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
DataType          ,
FloatValue		,
StringValue		,
DateTimeValue		,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings			,
ThresholdType		,
BaseCondId		,
BaseMeaning)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_ValueType,
v_FloatValue,
v_StringValue,
v_DateTimeValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_BaseCondId,
v_BaseMeaning);
      ELSE 
         IF v_StartIndex = 3 then

  INSERT INTO TBL_HistorySignal3(StationId			,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
DataType          ,
FloatValue		,
StringValue		,
DateTimeValue		,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings			,
ThresholdType		,
BaseCondId		,
BaseMeaning)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_ValueType,
v_FloatValue,
v_StringValue,
v_DateTimeValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_BaseCondId,
v_BaseMeaning);
         ELSE 
            IF v_StartIndex = 4 then

  INSERT INTO TBL_HistorySignal4(StationId			,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
DataType          ,
FloatValue		,
StringValue		,
DateTimeValue		,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings,
ThresholdType,
BaseCondId,
BaseMeaning)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_ValueType,
v_FloatValue,
v_StringValue,
v_DateTimeValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_BaseCondId,
v_BaseMeaning);
            ELSE 
               IF v_StartIndex = 5 then

  INSERT INTO TBL_HistorySignal5(StationId			,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
DataType          ,
FloatValue		,
StringValue		,
DateTimeValue		,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings			,
ThresholdType		,
BaseCondId		,
BaseMeaning)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_ValueType,
v_FloatValue,
v_StringValue,
v_DateTimeValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_BaseCondId,
v_BaseMeaning);
               ELSE 
                  IF v_StartIndex = 6 then

  INSERT INTO TBL_HistorySignal6(StationId			,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
DataType          ,
FloatValue		,
StringValue		,
DateTimeValue		,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings			,
ThresholdType		,
BaseCondId		,
BaseMeaning)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_ValueType,
v_FloatValue,
v_StringValue,
v_DateTimeValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_BaseCondId,
v_BaseMeaning);
                  ELSE 
                     IF v_StartIndex = 7 then

  INSERT INTO TBL_HistorySignal7(StationId			,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
DataType          ,
FloatValue		,
StringValue		,
DateTimeValue		,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings			,
ThresholdType		,
BaseCondId		,
BaseMeaning)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_ValueType,
v_FloatValue,
v_StringValue,
v_DateTimeValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_BaseCondId,
v_BaseMeaning);
                     ELSE 
                        IF v_StartIndex = 8 then

  INSERT INTO TBL_HistorySignal8(StationId			,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
DataType          ,
FloatValue		,
StringValue		,
DateTimeValue		,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings			,
ThresholdType		,
BaseCondId		,
BaseMeaning)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_ValueType,
v_FloatValue,
v_StringValue,
v_DateTimeValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_BaseCondId,
v_BaseMeaning);
                        ELSE 
                           IF v_StartIndex = 9 then

  INSERT INTO TBL_HistorySignal9(StationId			,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
DataType          ,
FloatValue		,
StringValue		,
DateTimeValue		,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings			,
ThresholdType		,
BaseCondId		,
BaseMeaning)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_ValueType,
v_FloatValue,
v_StringValue,
v_DateTimeValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_BaseCondId,
v_BaseMeaning);
                           ELSE 
                              IF v_StartIndex = 10 then

  INSERT INTO TBL_HistorySignal10(StationId			,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
DataType          ,
FloatValue		,
StringValue		,
DateTimeValue		,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings			,
ThresholdType		,
BaseCondId		,
BaseMeaning)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_ValueType,
v_FloatValue,
v_StringValue,
v_DateTimeValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_BaseCondId,
v_BaseMeaning);
                              ELSE 
                                 IF v_StartIndex = 11 then

  INSERT INTO TBL_HistorySignal11(StationId			,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
DataType          ,
FloatValue		,
StringValue		,
DateTimeValue		,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings			,
ThresholdType		,
BaseCondId		,
BaseMeaning)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_ValueType,
v_FloatValue,
v_StringValue,
v_DateTimeValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_BaseCondId,
v_BaseMeaning);
                                 ELSE 
                                    IF v_StartIndex = 12 then

  INSERT INTO TBL_HistorySignal12(StationId			,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
DataType          ,
FloatValue		,
StringValue		,
DateTimeValue		,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings			,
ThresholdType		,
BaseCondId		,
BaseMeaning)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_ValueType,
v_FloatValue,
v_StringValue,
v_DateTimeValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_BaseCondId,
v_BaseMeaning);
                                    ELSE
                                       SET SWP_Ret_Value = -1;
                                       LEAVE SWL_return;
                                    end if;
                                 end if;
                              end if;
                           end if;
                        end if;
                     end if;
                  end if;
               end if;
            end if;
         end if;
      end if;
   end if;

-- 电能，动能使用
--   SET @SWV_Error = 0;
--   CALL PNL_SavePowerHistoryData(v_StationId,v_HostId,v_EquipmentId,v_SignalId,v_SampleTime,v_FloatValue,
--   v_StringValue,v_DateTimeValue,v_BaseTypeId,v_ValueType,v_SignalType,
--   v_EventSeverity);


   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;


   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_SaveStatisticsSignal]...';





DROP PROCEDURE IF EXISTS PBL_SaveStatisticsSignal;

CREATE PROCEDURE PBL_SaveStatisticsSignal(v_StationId   		INT       	,
v_HostId      	INT   	   	,
v_EquipmentId 	INT		    ,
v_SignalId    	INT        	,
v_MaxTime    		DATETIME    ,
v_MaxValue    	FLOAT       ,
v_MinTime    		DATETIME    ,
v_MinValue    	FLOAT       ,
v_AvgValue    	FLOAT       ,
v_AvgTime    		DATETIME    ,
v_BaseTypeId		NUMERIC(10,0),INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
--  返回结果
-- -1 不可知错误
--  0 成功
--  1 参数为0或空
--  2 配置是否存在
--  3 工程状态数据一律丢弃

   DECLARE v_StartIndex INT;
   DECLARE v_EndIndex INT;
   DECLARE v_StationName NATIONAL VARCHAR(255);
   DECLARE v_EquipmentName NATIONAL VARCHAR(255);
   DECLARE v_SignalName NATIONAL VARCHAR(255);
   DECLARE v_SignalCategory INT;
   DECLARE v_ShowPrecision NATIONAL VARCHAR(255);
   DECLARE v_Unit NATIONAL VARCHAR(255);
   DECLARE v_BaseTypeName NATIONAL VARCHAR(255);
   DECLARE v_EventSeverityName NATIONAL VARCHAR(255);
   DECLARE v_SQL NATIONAL VARCHAR(4000);
   DECLARE v_EquipmentTemplateId INT;
   DECLARE v_StationState INT;
   DECLARE v_Total INT;
   DECLARE v_GetDate DATETIME;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;	

-- 参数检查
   SET @SWV_Error = 0;
   IF v_StationId IS NULL OR v_EquipmentId IS NULL OR v_SignalId IS NULL
   OR v_StationId = 0 OR v_EquipmentId = 0 OR v_SignalId = 0 then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

-- 配置是否存在
   select   COUNT(*) INTO v_Total FROM TBL_Station WHERE StationId = v_StationId;
   IF (v_Total <> 1) then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;
   select   COUNT(*) INTO v_Total FROM TBL_Equipment WHERE EquipmentId = v_EquipmentId AND StationId = v_StationId;
   IF (v_Total <> 1) then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;
   select   COUNT(*) INTO v_Total FROM TBL_Signal ts
   INNER JOIN TBL_Equipment te ON ts.EquipmentTemplateId = te.EquipmentTemplateId WHERE te.EquipmentId = v_EquipmentId AND te.StationId = v_StationId AND ts.SignalId = v_SignalId;
   IF (v_Total <> 1) then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;

-- Station Name
   select   StationName, StationState INTO v_StationName,v_StationState FROM TBL_Station WHERE StationId = v_StationId;

-- 当前时间
   SET v_GetDate = CURRENT_TIMESTAMP;

-- 非联网状态下的数据一律丢弃
   SET v_StationState = PNL_GetStationState(v_StationId,v_GetDate);
   IF v_StationState <> 1 then

      SET SWP_Ret_Value = 3;
      LEAVE SWL_return;
   end if;

-- Equipment Name
   select   EquipmentName, EquipmentTemplateId INTO v_EquipmentName,v_EquipmentTemplateId FROM TBL_Equipment WHERE EquipmentId = v_EquipmentId AND StationId = v_StationId;

-- Signal
   select   SignalName, SignalCategory, ShowPrecision, Unit INTO v_SignalName,v_SignalCategory,v_ShowPrecision,v_Unit FROM TBL_Signal WHERE EquipmentTemplateId = v_EquipmentTemplateId AND SignalId = v_SignalId;

-- 基类信息
   select   BaseTypeName INTO v_BaseTypeName FROM TBL_SignalBaseDic WHERE BaseTypeId = v_BaseTypeId;

   SET @SWV_Error = 0;
   INSERT INTO TBL_SignalStatistics(StationId     ,
StationName   ,
EquipmentId   ,
EquipmentName ,
SignalId      ,
SignalName    ,
StatisticsTime,
MinValue      ,
MinTime       ,
MaxValue      ,
MaxTime       ,
AvgValue      ,
AvgTime       ,
BaseTypeId    ,
BaseTypeName)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_AvgTime,
v_MinValue,
v_MinTime,
v_MaxValue,
v_MaxTime,
v_AvgValue,
v_AvgTime,
v_BaseTypeId,
v_BaseTypeName);      

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

   SET SWP_Ret_Value = 0;
END;












DROP PROCEDURE IF EXISTS PBL_SaveDistributeControl;


CREATE PROCEDURE PBL_SaveDistributeControl(v_StationId   	INT       	,
v_HostId      	INT   	   	,
v_EquipmentId 	INT		    ,
v_ControlId    	INT        	,
v_UserId   		INT        	,
v_ParameterValues NATIONAL VARCHAR(500),
v_Description		NATIONAL VARCHAR(255),
v_DirectInsert	INT ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
-- 处理：
-- 保存需要下发的控制
-- 1 工程状态不处理
-- 2 重复控制不处理

-- 返回结果
-- -1 不可知错误
--  0 成功
--  1 参数为0或空
--  2 该活动控制已经存在
--  3 工程状态数据一律丢弃
--  4 没有下发控制权限

   DECLARE v_StartIndex INT;
   DECLARE v_EndIndex INT;
   DECLARE v_ControlType INT;
   DECLARE v_ControlSeverity INT;
   DECLARE v_SendControl INT;
   DECLARE v_Return INT;
   DECLARE v_EquipmentCategory INT;
   DECLARE v_ControlCategory INT;
   DECLARE v_StationName NATIONAL VARCHAR(255);
   DECLARE v_EquipmentName NATIONAL VARCHAR(255);
   DECLARE v_ControlName NATIONAL VARCHAR(255);
   DECLARE v_BaseTypeId NUMERIC(10,0);
   DECLARE v_BaseTypeName NATIONAL VARCHAR(255);
   DECLARE v_CmdToken NATIONAL VARCHAR(500);
   DECLARE v_EquipmentTemplateId INT;
   DECLARE v_CurrentTime DATETIME;
   DECLARE v_StartTime DATETIME;
   DECLARE v_MaxSerialNo INT;
   DECLARE v_StationState INT;
   DECLARE v_ControlResultType INT;
   DECLARE v_ControlPhase INT;
   DECLARE v_GetDate DATETIME;
   DECLARE v_ExecuteName NATIONAL VARCHAR(255);
   DECLARE v_RecordMsg NATIONAL VARCHAR(1000);
   DECLARE v_SGetDate NATIONAL VARCHAR(255);
   DECLARE v_SUserId NATIONAL VARCHAR(255);
   DECLARE v_BaseCondId INT;
   DECLARE v_DoorType INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 错误处理
/*
   IF v_DirectInsert is null then
      set v_DirectInsert = 0;
   END IF;*/
   SET @SWV_Error = 0;
   IF v_StationId = 0 OR v_EquipmentId = 0 OR v_ControlId = 0
   OR v_StationId IS NULL OR v_EquipmentId  IS NULL OR v_ControlId IS NULL then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

-- 是否有下发控制权限 : 都有下发控制权限
   /*SET v_SendControl = 50;
   CALL PAM_OperationPrivilege(v_SendControl,v_UserId,v_Return);
   IF v_Return <> 1 then

      SET SWP_Ret_Value = 4;
      LEAVE SWL_return;
   end if;*/

-- 控制结果类型(未返回)
   SET v_ControlResultType = 4;
-- 控制执行阶段(待命)
   SET v_ControlPhase = 1;
-- 当前时间
   SET v_GetDate = CURRENT_TIMESTAMP;

-- HostId
   IF v_HostId = -1 then

      select   MonitorUnitId INTO v_HostId FROM TBL_Equipment WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId;
   end if;				

   IF EXISTS(SELECT 'X'
   FROM TBL_ActiveControl
   WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId AND ControlId = v_ControlId
   AND ParameterValues = v_ParameterValues AND ControlExecuterId = v_UserId AND EndTime IS NULL) then

-- 存在
      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   ELSE
-- Station Name
      select   StationName INTO v_StationName FROM TBL_Station WHERE StationId = v_StationId;

-- SQLWAYS_EVAL# 局站，无法给设备发送控制命令，36
-- 非联网状态下的数据一律丢弃
-- SQLWAYS_EVAL# = PNL_GetStationState @StationId, @GetDate
-- SQLWAYS_EVAL# <> 1
-- BEGIN
-- 	RETURN 3
-- END

-- Equipment Name
      select   EquipmentName, EquipmentTemplateId, EquipmentCategory INTO v_EquipmentName,v_EquipmentTemplateId,v_EquipmentCategory FROM TBL_Equipment WHERE EquipmentId = v_EquipmentId AND StationId  = v_StationId;

-- Control
      select   tc.ControlName, tc.CmdToken, tc.ControlSeverity, tc.ControlType, cb.BaseTypeId, cb.BaseTypeName, ControlCategory INTO v_ControlName,v_CmdToken,v_ControlSeverity,v_ControlType,v_BaseTypeId,
      v_BaseTypeName,v_ControlCategory FROM TBL_Control tc
      LEFT JOIN TBL_CommandBaseDic cb ON tc.BaseTypeId = cb.BaseTypeId WHERE ControlId = v_ControlId AND EquipmentTemplateId = v_EquipmentTemplateId;
      IF v_BaseTypeId IS NOT NULL AND v_BaseTypeId <> 0 then

         select   BaseCondId INTO v_BaseCondId FROM TBL_ControlMeanings WHERE EquipmentTemplateId = v_EquipmentTemplateId
         AND ControlId = v_ControlId
         AND CAST(ParameterValue AS CHAR(10)) = ltrim(rtrim(v_ParameterValues));
      end if;

-- UserName
      SET v_ExecuteName = '';
      select   UserName INTO v_ExecuteName FROM TBL_Account WHERE UserId = v_UserId;

-- 当前时间
      SET v_CurrentTime = CURRENT_TIMESTAMP;
      CALL PBL_GetSystemCurrentTime(v_StartTime,v_CurrentTime,SWP_Ret_Value);

-- SQLWAYS_EVAL# BEGIN
      SET v_DoorType = -1;
      IF v_EquipmentCategory = 82 then

         select   A.DoorControlId INTO v_DoorType FROM TBL_Door A
         INNER JOIN TBL_Equipment B ON A.StationId = B.StationId AND A.EquipmentId = B.EquipmentId WHERE B.StationId = v_StationId AND B.EquipmentId = v_EquipmentId;
      end if;
      IF v_DoorType = 4 AND v_CmdToken = '22' then

         SET v_ParameterValues = '0,0.0';
      end if;
      IF v_DoorType = 4 AND v_CmdToken = '23' then

         SET v_ParameterValues = '0,1';
      end if;
		
-- INSERT
  INSERT INTO TBL_ActiveControl(StationId				,
StationName			,
EquipmentId			,
EquipmentName			,
ControlId				,
ControlName			,
ControlSeverity		,
CmdToken				,
ControlPhase			,
StartTime				,
EndTime				,
ConfirmTime			,
ConfirmerId			,
ConfirmerName			,
ControlResultType		,
ControlResult			,
ControlExecuterId		,
ControlExecuterIdName	,
ControlType			,
ActionId				,
Description			,
Retry					,
BaseTypeId			,
BaseTypeName			,
ParameterValues		,
BaseCondId)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_ControlId,
v_ControlName,
v_ControlSeverity,
v_CmdToken,
v_ControlPhase,
v_StartTime,
NULL,
NULL,
NULL,
NULL,
v_ControlResultType,
NULL,
v_UserId,
v_ExecuteName,
v_ControlType,
NULL,
v_Description,
0,
v_BaseTypeId,
v_BaseTypeName,
v_ParameterValues,
v_BaseCondId);
      IF @SWV_Error <> 0 then
         SET SWP_Ret_Value = -1;
         LEAVE SWL_return;
      end if;
      SET SWP_Ret_Value = 0;
      LEAVE SWL_return;
   end if;
END;

 






-- SELECT N'SQLWAYS_EVAL# L_SendDistributeControlDoor]...';





DROP PROCEDURE IF EXISTS PBL_SendDistributeControlDoor;

CREATE PROCEDURE PBL_SendDistributeControlDoor(v_TopCount			NATIONAL VARCHAR(255), -- 分发上限
v_DataServerId		INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_CurrentTime DATETIME;
   DECLARE v_HostId INT;
   DECLARE v_SHostId NATIONAL VARCHAR(255);
   DECLARE v_MinIndex INT;
   DECLARE v_MaxIndex INT;
   DECLARE v_StationId INT;
   DECLARE v_CHostId INT;
   DECLARE v_EquipmentId INT;
   DECLARE v_ControlId INT;
   DECLARE v_UserId INT;
   DECLARE v_SerialNo INT;
   DECLARE v_ParameterValues NATIONAL VARCHAR(500);
   DECLARE v_Description NATIONAL VARCHAR(255);
   DECLARE v_Result INT;
   DECLARE SWV_ExecDyn VARCHAR(5000);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

--  返回结果
-- -1 不可知错误
--  0 成功

-- 当前时间
   SET v_CurrentTime = CURRENT_TIMESTAMP;	

-- 需要分发的HOST
   CREATE TEMPORARY TABLE tt_DistributeHost
   (
      Idx INT NOT NULL  AUTO_INCREMENT PRIMARY KEY,
      HostId INT,
      Total INT
   );

   INSERT INTO tt_DistributeHost(Total, HostId)
   SELECT COUNT(*) AS Total, ts.HostId
   FROM TBL_ActiveControlOfDoor ts
   INNER JOIN TSL_RealtimeRouting rr ON ts.HostId = rr.MonitorUnitId
   WHERE rr.DataServerId = v_DataServerId
   GROUP BY ts.HostId;		

-- 循环取出需要分发的门禁控制
   CREATE TEMPORARY TABLE tt_ActiveControlOfDoor 
   (
      Idx INT NOT NULL  AUTO_INCREMENT PRIMARY KEY,
      StationId INT NOT NULL,
      HostId INT NOT NULL,
      EquipmentId INT NOT NULL,
      ControlId INT NOT NULL,
      UserId INT NOT NULL,
      ParameterValues NATIONAL VARCHAR(500),
      Description NATIONAL VARCHAR(255)
   );

   select   min(Idx), max(Idx) INTO v_MinIndex,v_MaxIndex FROM tt_DistributeHost;
   WHILE(v_MinIndex <= v_MaxIndex) DO
      select   HostId INTO v_HostId FROM   tt_DistributeHost WHERE  Idx = v_MinIndex;
      SET v_SHostId = CAST(v_HostId AS CHAR(30));
      SET SWV_ExecDyn = CONCAT('INSERT INTO tt_ActiveControlOfDoor(StationId,HostId,EquipmentId,ControlId,UserId,ParameterValues,Description)
      SELECT  StationId,HostId,EquipmentId,ControlId,UserId,ParameterValues,Description
      FROM TBL_ActiveControlOfDoor
      WHERE HostId = ',v_SHostId,' ORDER BY LastUpdate LIMIT ',v_TopCount,' ');
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
      SET v_MinIndex = v_MinIndex+1;
   END WHILE;	

-- 循环分发门禁控制

   select   min(Idx), max(Idx) INTO v_MinIndex,v_MaxIndex FROM tt_ActiveControlOfDoor;
   WHILE(v_MinIndex <= v_MaxIndex) DO
      select   StationId, HostId, EquipmentId, ControlId, UserId, ParameterValues, Description INTO v_StationId,v_CHostId,v_EquipmentId,v_ControlId,v_UserId,v_ParameterValues,
      v_Description FROM   tt_ActiveControlOfDoor WHERE  Idx = v_MinIndex;
      START TRANSACTION;
-- 保存到活动控制分发表
      SET v_Result = PBL_SaveDistributeControl(v_StationId,v_CHostId,v_EquipmentId,v_ControlId,v_UserId,v_ParameterValues,
      v_Description,1);

-- 删除原始记录
      DELETE FROM TBL_ActiveControlOfDoor WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId AND ControlId = v_ControlId AND UserId = v_UserId AND ParameterValues = v_ParameterValues;
      COMMIT;
      SET v_MinIndex = v_MinIndex+1;
   END WHILE;	

   DROP TEMPORARY TABLE IF EXISTS tt_DistributeHost;
   SET @SWV_Error = 0;
   DROP TEMPORARY TABLE IF EXISTS tt_ActiveControlOfDoor;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;    

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_TimeoutControl]...';





DROP PROCEDURE IF EXISTS PBL_TimeoutControl;

CREATE PROCEDURE PBL_TimeoutControl(v_Timeout   	INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_CurrentTime DATETIME;
   DECLARE v_MinIndex INT;
   DECLARE v_MaxIndex INT;
   DECLARE v_StationId INT;
   DECLARE v_HostId INT;
   DECLARE v_EquipmentId INT;
   DECLARE v_ControlId INT;
   DECLARE v_SerialNo INT;
   DECLARE v_StartTime DATETIME;
   DECLARE v_EndTime DATETIME;
   DECLARE v_UserId INT;
   DECLARE v_BaseTypeId NUMERIC(10,0);
   DECLARE v_Return INT;
   DECLARE v_ResultCode INT;
   DECLARE v_Result NATIONAL VARCHAR(255);
   DECLARE v_ControlPhase INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- SQLWAYS_EVAL# 发次数已经到达并且超时时长也到达

--  返回结果
-- -1 不可知错误
--  0 成功

-- 控制超时
   SET v_ResultCode = 3;
   SET v_Result = '命令超时';
   SET v_ControlPhase = 4;

-- 当前时间
   SET v_CurrentTime = CURRENT_TIMESTAMP;	
   SET v_Return = 0;

-- SQLWAYS_EVAL# #ConfigControl
   CREATE TEMPORARY TABLE tt_ConfigControl
   (
      HostId INT,
      StationId INT,
      EquipmentId INT,
      ControlId INT,
      Timeout INT,
      Retry INT
   );
   INSERT INTO tt_ConfigControl(HostId, StationId, EquipmentId,
ControlId, Timeout, Retry)
   SELECT DISTINCT ce.MonitorUnitId AS HostId, ac.StationId, ac.EquipmentId,
ac.ControlId,
(CASE WHEN cc.TimeOut IS NULL THEN v_Timeout
   WHEN cc.TimeOut = 0 THEN v_Timeout
   WHEN cc.TimeOut < v_Timeout THEN v_Timeout
   ELSE cc.TimeOut END) AS Timeout,
(CASE WHEN cc.Retry IS NULL THEN 0
   ELSE cc.Retry END) AS Retry
   FROM TBL_ActiveControl ac
   INNER JOIN TBL_Equipment ce ON ac.StationId = ce.StationId AND ac.EquipmentId = ce.EquipmentId
   INNER JOIN TBL_Control cc ON ce.EquipmentTemplateId = cc.EquipmentTemplateId AND ac.ControlId = cc.ControlId
   WHERE ac.StartTime IS NOT NULL AND ac.EndTime IS NULL; 

-- Table
   CREATE TEMPORARY TABLE tt_TimeoutControl
   (
      Idx INT   AUTO_INCREMENT PRIMARY KEY,
      HostId INT,
      StationId INT,
      EquipmentId INT,
      ControlId INT,
      SerialNo INT,
      StartTime DATETIME,
      UserId INT,
      BaseTypeId NUMERIC(10,0)
   );

-- Result
   INSERT INTO tt_TimeoutControl(HostId, StationId, EquipmentId,
ControlId, SerialNo, StartTime,
UserId, BaseTypeId)
   SELECT ce.HostId AS HostId, ac.StationId, ac.EquipmentId,
ac.ControlId, ac.SerialNo, ac.StartTime,
ac.ControlExecuterId AS UserId, ac.BaseTypeId
   FROM TBL_ActiveControl ac
   INNER JOIN tt_ConfigControl ce ON ac.StationId = ce.StationId AND ac.EquipmentId = ce.EquipmentId
   AND ac.ControlId = ce.ControlId
   WHERE ac.StartTime IS NOT NULL AND ac.EndTime IS NULL
   AND ac.Retry > 0  AND ac.Retry >= ce.Retry
   AND TIMESTAMPDIFF(SECOND,ac.StartTime,v_CurrentTime) >=(ce.Timeout*ac.Retry);

-- Update Result
   select   Min(Idx), Max(Idx) INTO v_MinIndex,v_MaxIndex FROM tt_TimeoutControl;

   WHILE(v_MinIndex <= v_MaxIndex) DO
      select   StationId, HostId, EquipmentId, ControlId, SerialNo, StartTime, UserId, BaseTypeId INTO v_StationId,v_HostId,v_EquipmentId,v_ControlId,v_SerialNo,v_StartTime,
      v_UserId,v_BaseTypeId FROM tt_TimeoutControl WHERE Idx = v_MinIndex;

-- 保存超时控制结果
      SET v_Return = PBL_SaveControlResult(v_StationId,v_HostId,v_EquipmentId,v_ControlId,v_SerialNo,v_StartTime,
      v_CurrentTime,v_UserId,v_BaseTypeId,v_ResultCode,v_Result,v_ControlPhase);
      SET v_MinIndex = v_MinIndex+1;
   END WHILE;

-- DROP
   DROP TEMPORARY TABLE IF EXISTS tt_TimeoutControl;
   SET @SWV_Error = 0;
   DROP TEMPORARY TABLE IF EXISTS tt_ConfigControl;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;    

   SET SWP_Ret_Value = v_Return;
END;

DROP PROCEDURE IF EXISTS PNL_AutoConfirmEvent;

CREATE PROCEDURE PNL_AutoConfirmEvent(v_EventSeverity1 INT,
v_EventSeverity2 INT, 
v_EventSeverity3 INT, 
v_EventSeverity4 INT)
BEGIN
   DECLARE v_i INT;
   DECLARE v_RecordCount INT;
   DECLARE v_EventCount INT;
   DECLARE v_SequenceId NATIONAL VARCHAR(128);
   DECLARE v_StartTime DATETIME;
   DECLARE v_EndTime DATETIME;
   DECLARE v_ConfirmTime DATETIME;
   DECLARE v_EndAlarms NATIONAL VARCHAR(4000);

/*SQLWAYS_EVAL# table #AutoEndAlarm (
IndexId NUMERIC(8,0) IDENTITY,
SequenceId nvarchar(128)
)

INSERT INTO #AutoEndAlarm
SELECT SequenceId FROM TBL_ActiveEvent WHERE StationId NOT IN (SELECT StationId FROM TBL_Station)

INSERT INTO #AutoEndAlarm
SELECT SequenceId FROM TBL_ActiveEvent WHERE EquipmentId NOT IN (SELECT EquipmentId FROM TBL_Equipment)

SELECT @EventCount = COUNT(*) FROM #AutoEndAlarm 
IF @EventCount &gt;  0
BEGIN
SELECT @i = MIN(IndexId), @RecordCount = MAX(IndexId) FROM #AutoEndAlarm
WHILE @i &lt;= @RecordCount
BEGIN
SELECT   @SequenceId =  SequenceId  FROM #AutoEndAlarm WHERE IndexId = @i
set @EndAlarms = ''''+ @SequenceId + ''''
EXEC PAM_CancelEvent @EndAlarms, -2, '配置改变'
SELECT @i = @i + 1
END     
END
--清理配置不存在的遗留活动告警，END
*/

   DROP TEMPORARY TABLE IF EXISTS tt_AutoConfirmAlarm;
   create TEMPORARY table tt_AutoConfirmAlarm 
   (
      IndexId INT   AUTO_INCREMENT PRIMARY KEY,
      SequenceId NATIONAL VARCHAR(128),
      StartTime DATETIME,
      EndTime DATETIME
   );

   select   COUNT(*) INTO v_EventCount FROM TBL_ActiveEvent WHERE EndTime IS NOT  NULL AND EventSeverityId = 0;
   IF v_EventCount >  v_EventSeverity1 then

  INSERT INTO tt_AutoConfirmAlarm
      SELECT  SequenceId, StartTime, EndTime FROM TBL_ActiveEvent WHERE EndTime IS NOT NULL AND EventSeverityId = 0 LIMIT 200;
   end if;

   select   COUNT(*) INTO v_EventCount FROM TBL_ActiveEvent WHERE EndTime IS NOT NULL AND EventSeverityId = 1;
   IF v_EventCount >  v_EventSeverity2 then

  INSERT INTO tt_AutoConfirmAlarm
      SELECT  SequenceId, StartTime, EndTime FROM TBL_ActiveEvent WHERE EndTime IS NOT NULL AND EventSeverityId = 1 LIMIT 200;
   end if;

   select   COUNT(*) INTO v_EventCount FROM TBL_ActiveEvent WHERE EndTime IS NOT NULL AND EventSeverityId = 2;
   IF v_EventCount >  v_EventSeverity3 then

  INSERT INTO tt_AutoConfirmAlarm
      SELECT  SequenceId, StartTime, EndTime FROM TBL_ActiveEvent WHERE EndTime IS NOT NULL AND EventSeverityId = 2 LIMIT 200;
   end if;

   select   COUNT(*) INTO v_EventCount FROM TBL_ActiveEvent WHERE EndTime IS NOT NULL AND EventSeverityId = 3;
   IF v_EventCount >  v_EventSeverity4 then

  INSERT INTO tt_AutoConfirmAlarm
      SELECT  SequenceId, StartTime, EndTime FROM TBL_ActiveEvent WHERE EndTime IS NOT NULL AND EventSeverityId = 3 LIMIT 200;
   end if;

   select   MIN(IndexId), MAX(IndexId) INTO v_i,v_RecordCount FROM tt_AutoConfirmAlarm;
   WHILE v_i <= v_RecordCount DO
      SET v_ConfirmTime = CURRENT_TIMESTAMP;
      select   SequenceId, StartTime, EndTime INTO v_SequenceId,v_StartTime,v_EndTime FROM tt_AutoConfirmAlarm WHERE IndexId = v_i;
      INSERT INTO TBL_AlarmChange(SequenceId ,
OperationType ,
StationId ,
StationName ,
EquipmentId ,
EquipmentName ,
EventId ,
EventName ,
EventConditionId ,
EventSeverityId ,
EventSeverity ,
StartTime ,
EndTime ,
CancelTime ,
CancelUserId ,
CancelUserName ,
ConfirmTime ,
ConfirmerId ,
ConfirmerName ,
EventValue ,
ReversalNum ,
Meanings ,
EventFilePath ,
Description ,
SourceHostId ,
InstructionId ,
InstructionStatus ,
StandardAlarmNameId ,
StandardAlarmName ,
BaseTypeId ,
BaseTypeName ,
EquipmentCategory ,
EquipmentCategoryName ,
MaintainState  ,
SignalId ,
RelateSequenceId ,
EventCategoryId ,
EventStateId ,
CenterId ,
CenterName ,
StructureName ,
MonitorUnitName,
StructureId,
StationCategoryId,
EquipmentVendor)
      SELECT
      SequenceId,
3 AS OperationType,
StationId,
StationName,
EquipmentId,
EquipmentName,
EventId,
EventName,
EventConditionId,
EventSeverityId,
EventSeverity,
StartTime ,
EndTime ,
CancelTime,
CancelUserId,
CancelUserName,
v_ConfirmTime,
-2 AS ConfirmerId,
'系统自动确认' AS ConfirmerName,
EventValue ,
ReversalNum,
Meanings ,
EventFilePath,
Description,
SourceHostId,
InstructionId,
InstructionStatus,
StandardAlarmNameId,
StandardAlarmName ,
BaseTypeId,
BaseTypeName,
EquipmentCategory ,
EquipmentCategoryName ,
MaintainState,
SignalId ,
RelateSequenceId ,
EventCategoryId,
EventStateId    ,
CenterId       ,
CenterName     ,
StructureName   ,
MonitorUnitName ,
StructureId,
StationCategoryId,
EquipmentVendor
      FROM TBL_ActiveEvent WHERE SequenceId = v_SequenceId;


--  调用标准存告警确认流程
      CALL PNL_Ins_MidHistoryEvent(v_SequenceId,v_EndTime,v_ConfirmTime,-2,'系统自动确认');
      SET v_i = v_i+1;
   END WHILE;
END;

-- SELECT N'SQLWAYS_EVAL# L_BatchSaveSubscribeSignal]...';





DROP PROCEDURE IF EXISTS PNL_BatchSaveSubscribeSignal;

CREATE PROCEDURE PNL_BatchSaveSubscribeSignal(v_StationId          NATIONAL VARCHAR(4000)    ,
v_StationId2         NATIONAL VARCHAR(4000)    ,
v_StationId3         NATIONAL VARCHAR(4000)    ,
v_EquipmentId        NATIONAL VARCHAR(4000)    ,
v_EquipmentId2       NATIONAL VARCHAR(4000)    ,
v_EquipmentId3       NATIONAL VARCHAR(4000)    ,
v_SignalId	       NATIONAL VARCHAR(4000)    ,
v_SignalId2	       NATIONAL VARCHAR(4000)    ,
v_SignalId3	       NATIONAL VARCHAR(4000)    ,
v_SignalName         NATIONAL VARCHAR(4000)    ,
v_ReturnCount        NATIONAL VARCHAR(20)   	   ,
v_SubscribeType	   INT,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_RowCount INT;			   
   DECLARE v_Index INT;             
   DECLARE v_TotalRowCount INT;			  
   DECLARE v_MinIndex INT;			  
   DECLARE v_MaxIndex INT;			  
   DECLARE v_TmpStationId INT;			  
   DECLARE v_TmpEquipmentId INT;			  
   DECLARE v_TmpSignalId INT;			  
   DECLARE v_ReturnValue INT;			  
   DECLARE v_WhereSignalId1 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereSignalId2 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereSignalId3 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereBaseTypeId1 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereBaseTypeId2 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereBaseTypeId3 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereSignalProperty NATIONAL VARCHAR(4000);  
   DECLARE v_WhereSignalCategory NATIONAL VARCHAR(4000);  
   DECLARE v_WhereSignalName NATIONAL VARCHAR(4000);  
   DECLARE v_WhereBaseTypeName NATIONAL VARCHAR(4000);  
   DECLARE v_BaseTypeJoinString NATIONAL VARCHAR(4000);  
   DECLARE v_PropertyJoinString NATIONAL VARCHAR(4000);  
   DECLARE v_SQL NATIONAL VARCHAR(4000);  
	DECLARE SWV_ExecDyn VARCHAR(5000);

-- 处理权限后的局站
   IF v_StationId is null then
      set v_StationId = '-1';
   END IF;
   IF v_StationId2 is null then
      set v_StationId2 = '-1';
   END IF;
   IF v_StationId3 is null then
      set v_StationId3 = '-1';
   END IF;
   IF v_EquipmentId is null then
      set v_EquipmentId = '-1';
   END IF;
   IF v_EquipmentId2 is null then
      set v_EquipmentId2 = '-1';
   END IF;
   IF v_EquipmentId3 is null then
      set v_EquipmentId3 = '-1';
   END IF;
   IF v_SignalId is null then
      set v_SignalId = '-1';
   END IF;
   IF v_SignalId2 is null then
      set v_SignalId2 = '-1';
   END IF;
   IF v_SignalId3 is null then
      set v_SignalId3 = '-1';
   END IF;
   IF v_SignalName is null then
      set v_SignalName = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   CREATE TEMPORARY TABLE tt_TempStation
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      StationId INT,
      StationName VARCHAR(128),
      StationState INT,
      StationCategory INT,
      StationGrade INT
   );
   CALL PAM_FilterStation('-1','-1','-1','-1',v_StationId,v_StationId2,v_StationId3,'-1','#TempStation');

-- 处理权限后的设备
   CREATE TEMPORARY TABLE tt_TempEquipment
   (
      Idx INT NOT NULL  AUTO_INCREMENT PRIMARY KEY,
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      StationId INT,
      StationName VARCHAR(128),
      StationState INT,
      StationCategory INT,
      EquipmentId INT,
      EquipmentName VARCHAR(128),
      EquipmentTemplateId INT,
      EquipmentCategory INT
   );
   CALL PAM_FilterEquipmentCategory('-1',v_EquipmentId,v_EquipmentId2,v_EquipmentId3,'-1','#TempStation','#TempEquipment'); 

-- 信号ID
   SET v_WhereSignalId1 = '    ';
   IF IFNULL(v_SignalId,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_SignalId);
      IF v_Index = 0 then
         SET v_WhereSignalId1 = CONCAT('SQLWAYS_EVAL# = ',v_SignalId);
      ELSE
         SET v_WhereSignalId1 = CONCAT('SQLWAYS_EVAL# IN (',v_SignalId,')');
      end if;
   end if;

-- 信号ID2
   SET v_WhereSignalId2 = '   ';
   IF IFNULL(v_SignalId2,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_SignalId2);
      IF v_Index = 0 then
         SET v_WhereSignalId2 = CONCAT('SQLWAYS_EVAL# = ',v_SignalId2);
      ELSE
         SET v_WhereSignalId2 = CONCAT('SQLWAYS_EVAL# IN (',v_SignalId2,')');
      end if;
   end if;

-- 信号ID3
   SET v_WhereSignalId3 = '   ';
   IF IFNULL(v_SignalId3,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_SignalId3);
      IF v_Index = 0 then
         SET v_WhereSignalId3 = CONCAT('SQLWAYS_EVAL# = ',v_SignalId3);
      ELSE
         SET v_WhereSignalId3 = CONCAT('SQLWAYS_EVAL# IN (',v_SignalId3,')');
      end if;
   end if;

-- 信号名称
   SET v_WhereSignalName = '  ';
   IF IFNULL(v_SignalName,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_SignalName);
      IF v_Index = 0 then

         SET v_WhereSignalName = CONCAT('SQLWAYS_EVAL# LIKE ''%',v_SignalName,'%''');
      ELSE
         SET v_WhereSignalName = ' AND (( ';
         WHILE(v_Index != 0) DO
            SET v_WhereSignalName = CONCAT(v_WhereSignalName,'SQLWAYS_EVAL# like ','%',SUBSTRING(v_SignalName,1,v_Index -1),
            '%');
            SET v_SignalName = rtrim(ltrim(INSERT(v_SignalName,1,v_Index,' ')));
            SET v_Index = LOCATE(',',v_SignalName);
            IF(v_Index != 0) then

               SET v_WhereSignalName = CONCAT(v_WhereSignalName,' ) OR ( ');
            ELSE
               SET v_WhereSignalName = CONCAT(v_WhereSignalName,' )) ');
            end if;
         END WHILE;
      end if;
   end if;	

-- 查询结果条数
   SET v_RowCount = cast(v_ReturnCount as SIGNED INTEGER);
   SET SQL_SELECT_LIMIT = v_RowCount;      		

   IF v_SignalId <> '-1' OR v_SignalName <> '-1' then
				
-- 保存信号

-- 满足条件信号
      CREATE TEMPORARY TABLE tt_SignalTotal
      (
         Idx INT NOT NULL  AUTO_INCREMENT PRIMARY KEY,
         StationId INT,
         EquipmentId INT,
         SignalId INT
      );
      SET SWV_ExecDyn = 'INSERT INTO tt_SignalTotal(StationId, EquipmentId, SignalId)
      SELECT su.StationId,e.EquipmentId,es.SignalId
      FROM tt_TempEquipment e
      INNER JOIN tt_TempStation su ON e.StationId = su.StationId
      INNER JOIN TBL_Signal es ON e.EquipmentTemplateId = es.EquipmentTemplateId AND es.Enable = 1  AND es.Visible = 1  WHERE 1 = 1';
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt; 

-- 循环保存订阅
      select   min(Idx), max(Idx) INTO v_MinIndex,v_MaxIndex FROM tt_SignalTotal;
      WHILE(v_MinIndex <= v_MaxIndex) DO
         select   StationId, EquipmentId, SignalId INTO v_TmpStationId,v_TmpEquipmentId,v_TmpSignalId FROM   tt_SignalTotal WHERE  Idx = v_MinIndex;
         SET v_ReturnValue = PNL_SaveSubscribeSignal(v_TmpStationId,v_TmpEquipmentId,v_TmpSignalId,-1,v_SubscribeType);
         SET v_MinIndex = v_MinIndex+1;
      END WHILE;
      DROP TEMPORARY TABLE IF EXISTS tt_SignalTotal;
   ELSE
-- 循环保存订阅
      select   min(Idx), max(Idx) INTO v_MinIndex,v_MaxIndex FROM tt_TempEquipment;
      IF v_MaxIndex > v_RowCount then

         SET v_MaxIndex = v_RowCount;
      end if;
      WHILE(v_MinIndex <= v_MaxIndex) DO
         select   StationId, EquipmentId INTO v_TmpStationId,v_TmpEquipmentId FROM   tt_TempEquipment WHERE Idx = v_MinIndex;
         SET v_ReturnValue = PNL_SaveSubscribeSignal(v_TmpStationId,v_TmpEquipmentId,-1,-1,v_SubscribeType);
         SET v_MinIndex = v_MinIndex+1;
      END WHILE;
   end if;

   SET SQL_SELECT_LIMIT = DEFAULT;

   DROP TEMPORARY TABLE IF EXISTS tt_TempEquipment;
   DROP TEMPORARY TABLE IF EXISTS tt_TempStation;

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_GetEquipmentState]...';


DROP PROCEDURE IF EXISTS PNL_GetEquipmentState;


CREATE PROCEDURE PNL_GetEquipmentState(
			-- 事件开始时间	
v_StationId		   INT,
v_EquipmentId		   INT,
v_StartTime		   DATETIME,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_EngineerStartTime DATETIME;
   DECLARE v_EngineerEndTime DATETIME;
   DECLARE v_EquipmentState INT;

   select   StartTime, EndTime, EquipmentState INTO v_EngineerStartTime,v_EngineerEndTime,v_EquipmentState FROM TBL_EquipmentMaintain WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId;

   IF (v_EquipmentState = 3) then

      IF (v_EngineerStartTime IS NOT NULL AND v_StartTime > v_EngineerStartTime AND v_StartTime < v_EngineerEndTime) then

         SET SWP_Ret_Value = 0;
         LEAVE SWL_return;
      ELSE
         SET SWP_Ret_Value = 1;
         LEAVE SWL_return;
      end if;
   ELSE
      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;
END;


-- SELECT N'SQLWAYS_EVAL# L_SaveAftEventResponse]...';


DROP PROCEDURE IF EXISTS PNL_SaveAftEventResponse;

CREATE PROCEDURE PNL_SaveAftEventResponse(
 -- 基类ID(可空)
v_StationId				INT, -- 局站Id
v_EquipmentId			INT, -- 设备Id
v_EventId				INT, -- 事件Id
v_EventConditionId		INT, -- 产生事件的条件Id
v_SequenceId			NATIONAL VARCHAR(128), -- 事件流水号
v_StartTime				DATETIME, -- 事件开始时间
v_EndTime				DATETIME, -- 事件结束时间
v_Overturn				INT, -- 事件翻转次数
v_Meanings				NATIONAL VARCHAR(255), -- 事件描述
v_EventValue			FLOAT, 	-- 触发值
v_BaseTypeId			NUMERIC(10,0),INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_EventCategory INT;
   DECLARE v_EventSeverityId INT;
   DECLARE v_EventSeverity NATIONAL VARCHAR(255);
   DECLARE v_StationState INT;
   DECLARE v_MaskStartTime DATETIME;
   DECLARE v_MaskEndTime DATETIME;
   DECLARE v_ConfirmTime DATETIME;
   DECLARE v_ConfirmerId INT;   
   DECLARE v_ConfirmerName NATIONAL VARCHAR(256);
   DECLARE v_StandardAlarmNameId INT;
   DECLARE v_StandardAlarmName NATIONAL VARCHAR(256);
   DECLARE v_OperationType INT;
   DECLARE v_CenterId INT;
   DECLARE v_CenterName NATIONAL VARCHAR(255);
   DECLARE v_StructureName NATIONAL VARCHAR(255);
   DECLARE v_MonitorUnitName NATIONAL VARCHAR(255);
   DECLARE v_EquipmentCategoryName NATIONAL VARCHAR(255);
   DECLARE v_BaseTypeName NATIONAL VARCHAR(255);
   DECLARE v_ret INT;
   DECLARE v_ResetSequenceId NATIONAL VARCHAR(128);
   DECLARE v_IsProcess INT;
   DECLARE v_StructureId INT;
   DECLARE v_StandardMeaning NATIONAL VARCHAR(255);
   DECLARE v_Vender NATIONAL VARCHAR(255);
   DECLARE v_StationCategory INT;
   DECLARE v_EquipmentState INT;
   DECLARE v_StandardVer INT;
   DECLARE v_NewEventSeverityId INT;

-- SQLWAYS_EVAL# 通信状态事件，则更新设备表相应记录的通信状态字段
   IF v_EventId = -3 then

      IF v_EndTime IS NULL then
         UPDATE TBL_Equipment SET ConnectState = 0
         WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId;
      ELSE
         UPDATE TBL_Equipment SET ConnectState = 1
         WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId;
      end if;
   end if;

-- SQLWAYS_EVAL# 被屏蔽，则将告警转移到屏蔽记录表（最大10000条）
   CALL PNL_SaveMaskHistoryEvent(v_StationId,v_EquipmentId,v_SequenceId,v_EventId,v_EventConditionId,v_EventValue,
   v_Meanings,v_BaseTypeId,v_StartTime,v_EndTime,v_ret);
   IF v_ret != 1 then
      SET SWP_Ret_Value = -3;
      LEAVE SWL_return;
   end if;


-- 3 修改告警表
   IF v_EndTime IS NULL then

      IF NOT EXISTS(SELECT 'X' FROM TBL_ActiveEvent WHERE SequenceId = v_SequenceId) then

-- SQLWAYS_EVAL# ，设备，信号名，基类ID，及常用事件属性形成ActiveEvent，加快界面和告警通知速度
         CALL PNL_GetStationState(v_StationId,v_StartTime,v_StationState);

-- SQLWAYS_EVAL# YD,
-- SQLWAYS_EVAL# 状态；3设备工程状态；0局站和设备都是工程状态
         CALL PNL_GetEquipmentState(v_StationId,v_EquipmentId,v_StartTime,v_EquipmentState);
         IF v_EquipmentState = 1 AND v_StationState = 1 then -- 设备是正常状态

            SET v_StationState = 1;
         ELSE 
            IF v_EquipmentState = 0 AND v_StationState = 1 then

               SET v_StationState = 3;
            ELSE 
               IF v_EquipmentState = 1 AND v_StationState = 0 then

                  SET v_StationState = 2;
               ELSE 
                  IF v_EquipmentState = 0 AND v_StationState = 0 then

                     SET v_StationState = 0;
                  end if;
               end if;
            end if;
         end if;
         select   StructureId, StructureName INTO v_CenterId,v_CenterName FROM TBL_StationStructure WHERE ParentStructureId = 0;
         select   structure.StructureId, structure.StructureName INTO v_StructureId,v_StructureName FROM TBL_StationStructureMap map, TBL_StationStructure structure WHERE map.StationId = v_StationId
         AND map.StructureId = structure.StructureId
         AND structure.StructureGroupId = 1;
         select   MonitorUnitName, dataItem.ItemValue INTO v_MonitorUnitName,v_EquipmentCategoryName FROM TSL_MonitorUnit monitorUnit, TBL_Equipment equipment, TBL_DataItem dataItem WHERE monitorUnit.MonitorUnitId = equipment.MonitorUnitId
         AND equipment.EquipmentId = v_EquipmentId
         AND equipment.StationId = v_StationId
         AND dataItem.EntryId = 7
         AND equipment.EquipmentCategory = dataItem.ItemId;
         select   EventSeverity, Meanings, A.BaseTypeId INTO v_EventSeverityId,v_StandardMeaning,v_BaseTypeId FROM TBL_EventCondition A, TBL_Equipment B WHERE B.StationId = v_StationId AND B.EquipmentId = v_EquipmentId
         AND A.EquipmentTemplateId = B.EquipmentTemplateId
         AND A.EventId = v_EventId AND A.EventConditionId = v_EventConditionId;
         select   BaseTypeName INTO v_BaseTypeName FROM TBL_EventBaseDic WHERE BaseTypeId = v_BaseTypeId;        
/*SQLWAYS_EVAL# = srule.StandardDicId  
FROM TBL_Event configEvent, TBL_StandardTemplateMap map, TBL_StandardRule srule, TBL_Station station,TBL_Equipment equipment
WHERE equipment.EquipmentTemplateId = map.EquipmentTemplateId
AND configEvent.EquipmentTemplateId = equipment.EquipmentTemplateId
AND map.StandardTemplateId = srule.StandardTemplateId
AND configEvent.EventName LIKE srule.EventName
AND station.StationCategory = map.StationCategory
AND configEvent.EventId = @EventId
AND station.StationId = @StationId
AND equipment.StationId = @StationId
AND equipment.EquipmentId = @EquipmentId
AND srule.Meanings = @StandardMeaning
*/

         CALL PAM_GetStandardVer(v_StandardVer); -- 黑龙江本地标准化需求修改

         IF v_BaseTypeId IS NOT NULL then

-- SQLWAYS_EVAL# = PAM_GetStandardVer

            select   A.StandardDicId, replace(D.EventStandardName,'XX',CAST(v_BaseTypeId -floor(v_BaseTypeId/1000)*1000 AS CHAR(10))) INTO v_StandardAlarmNameId,v_StandardAlarmName FROM TBL_EventBaseMap A
            INNER JOIN TBL_StationBaseMap B ON A.StationBaseType = B.StationBaseType AND B.StandardType = v_StandardVer
            INNER JOIN TBL_Station C ON C.StationCategory = B.StationCategory
            INNER JOIN TBL_StandardDicEvent D ON D.StandardDicId = A.StandardDicId
            AND (D.StationCategory = B.StationBaseType OR D.StationCategory = 0)
            AND D.StandardType = v_StandardVer WHERE A.BaseTypeId = floor(v_BaseTypeId/1000)*1000+1
            AND C.StationId = v_StationId;
         end if;  

-- SQLWAYS_EVAL# 警设置为地方标准化
         IF v_StandardAlarmNameId IS NULL AND v_StandardVer = 1 then

            select   F.StandardDicId, F.EventStandardName, F.EventSeverity INTO v_StandardAlarmNameId,v_StandardAlarmName,v_NewEventSeverityId FROM TBL_Equipment A
            INNER JOIN TBL_EquipmentTemplate B ON A.EquipmentTemplateId = B.EquipmentTemplateId
            INNER JOIN TBL_Station C ON A.StationId = C.StationId
            INNER JOIN TBL_StationBaseMap D ON D.StationCategory = C.StationCategory AND D.StandardType = v_StandardVer
            INNER JOIN TBL_BaseEquipmentMap E
            ON E.StationBaseType = D.StationBaseType AND E.EquipmentBaseType = B.EquipmentBaseType AND E.StandardType = v_StandardVer
            INNER JOIN TBL_StandardDicEvent F
            ON F.StandardDicId = E.StandardDicId
            AND (F.StationCategory = D.StationBaseType OR F.StationCategory = 0)  AND F.StandardType = v_StandardVer WHERE A.StationId = v_StationId AND A.EquipmentId = v_EquipmentId;
            IF v_NewEventSeverityId IS NOT NULL then

               SET v_EventSeverityId = v_NewEventSeverityId;
            end if;
         end if;

/*SQLWAYS_EVAL# is NOT NULL
BEGIN
SELECT @EventSeverityId = EventSeverity
FROM TBL_StandardDic
WHERE StandardDicId = @StandardAlarmNameId
END
ELSE
BEGIN
SELECT @StationCategory = StationCategory
FROM TBL_Station
WHERE StationId = @StationId

IF @StationCategory = 1 OR @StationCategory = 17
OR @StationCategory = 8 OR @StationCategory = 23
BEGIN
SELECT @EventSeverityId = 0
END
END
*/

         select   ItemValue INTO v_EventSeverity FROM TBL_DataItem WHERE EntryId = 23 AND ItemId = v_EventSeverityId;
/*SQLWAYS_EVAL# = StandardName
FROM TBL_StandardDic
WHERE StandardDicId = @StandardAlarmNameId    
*/

         select   Vendor INTO v_Vender FROM   TBL_Equipment equipment WHERE equipment.EquipmentId = v_EquipmentId;
         INSERT INTO TBL_ActiveEvent(SequenceId ,
StationId ,
StationName ,
EquipmentId ,
EquipmentName ,
EventId ,
EventName ,
EventConditionId ,
EventSeverityId ,
EventSeverity,
StartTime ,
EndTime ,
CancelTime ,
CancelUserId ,
CancelUserName ,
ConfirmTime ,
ConfirmerId ,
ConfirmerName ,
EventValue ,
ReversalNum ,
Meanings ,
EventFilePath ,
Description,
SourceHostId ,
InstructionId,
InstructionStatus ,
StandardAlarmNameId,
StandardAlarmName ,
BaseTypeId ,
BaseTypeName ,
EquipmentCategory ,
EquipmentCategoryName ,
MaintainState ,
SignalId ,
RelateSequenceId ,
EventCategoryId ,
EventStateId ,
CenterId ,
CenterName ,
StructureName,
MonitorUnitName,
StructureId,
StationCategoryId,
EquipmentVendor)
         SELECT
         v_SequenceId,
v_StationId,
st.StationName,
v_EquipmentId,
eq.EquipmentName,
v_EventId,
ev.EventName,
v_EventConditionId,
v_EventSeverityId,
v_EventSeverity,
v_StartTime ,
v_EndTime ,
NULL AS CancelTime,
NULL AS CancelUserId,
NULL AS CancelUserName,
NULL AS ConfirmTime,
NULL AS ConfirmerId,
NULL AS ConfirmName,
v_EventValue ,
v_Overturn AS ReversalNum,
v_Meanings ,
NULL AS EventFilePath,
NULL AS Description,
eq.MonitorUnitId,
NULL AS InstructionId,
0 AS InstructionStatus,
v_StandardAlarmNameId,
v_StandardAlarmName ,
v_BaseTypeId,
v_BaseTypeName,
eq.EquipmentCategory ,
v_EquipmentCategoryName ,
v_StationState  AS MaintainState,
ev.SignalId ,
NULL AS RelateSequenceId ,
ev.EventCategory,
ev.Enable    ,
v_CenterId       ,
v_CenterName     ,
v_StructureName   ,
v_MonitorUnitName ,
v_StructureId ,
st.StationCategory,
v_Vender
         FROM TBL_EventCondition ec
         INNER JOIN TBL_Equipment eq ON ec.EquipmentTemplateId = eq.EquipmentTemplateId
         INNER JOIN TBL_Event ev ON  ev.EventId = ec.EventId  AND ec.EquipmentTemplateId = ev.EquipmentTemplateId
         INNER JOIN TBL_Station st ON eq.StationId = st.StationId
         WHERE eq.EquipmentId = v_EquipmentId
         AND eq.StationId = v_StationId
         AND ec.EventId = v_EventId
         AND ec.EventConditionId = v_EventConditionId;
         IF ROW_COUNT() = 0 then
            SET SWP_Ret_Value = -4;
            LEAVE SWL_return;
         end if;
      end if;
   ELSE
-- 结束告警，修改告警结束时间
      UPDATE TBL_ActiveEvent SET EndTime = v_EndTime WHERE SequenceId = v_SequenceId;
   end if;

-- SQLWAYS_EVAL# 变化表
   IF v_EndTime IS NULL then
      SET v_OperationType = 1;
   ELSE
      SET v_OperationType = 2;
   end if;

   INSERT INTO TBL_AlarmChange(SequenceId ,
OperationType ,
StationId ,
StationName ,
EquipmentId ,
EquipmentName ,
EventId ,
EventName ,
EventConditionId ,
EventSeverityId ,
EventSeverity ,
StartTime ,
EndTime ,
CancelTime ,
CancelUserId ,
CancelUserName ,
ConfirmTime ,
ConfirmerId ,
ConfirmerName ,
EventValue ,
ReversalNum ,
Meanings ,
EventFilePath ,
Description ,
SourceHostId ,
InstructionId ,
InstructionStatus ,
StandardAlarmNameId ,
StandardAlarmName ,
BaseTypeId ,
BaseTypeName ,
EquipmentCategory ,
EquipmentCategoryName ,
MaintainState  ,
SignalId ,
RelateSequenceId ,
EventCategoryId ,
EventStateId ,
CenterId ,
CenterName ,
StructureName ,
MonitorUnitName,
StructureId,
StationCategoryId,
EquipmentVendor)
   SELECT
   v_SequenceId,
v_OperationType,
StationId,
StationName,
EquipmentId,
EquipmentName,
EventId,
EventName,
EventConditionId,
EventSeverityId,
EventSeverity,
StartTime ,
EndTime ,
CancelTime,
CancelUserId,
CancelUserName,
ConfirmTime,
ConfirmerId,
ConfirmerName,
EventValue ,
ReversalNum,
Meanings ,
EventFilePath,
Description,
SourceHostId,
InstructionId,
InstructionStatus,
StandardAlarmNameId,
StandardAlarmName ,
BaseTypeId,
BaseTypeName,
EquipmentCategory ,
EquipmentCategoryName ,
MaintainState,
SignalId ,
RelateSequenceId ,
EventCategoryId,
EventStateId    ,
CenterId       ,
CenterName     ,
StructureName   ,
MonitorUnitName ,
StructureId,
StationCategoryId,
EquipmentVendor
   FROM TBL_ActiveEvent WHERE SequenceId = v_SequenceId;


-- SQLWAYS_EVAL# 告警表
-- modify by rook
   IF v_EndTime IS NOT NULL then
         CALL PNL_Ins_MidHistoryEvent(v_SequenceId,v_EndTime,v_EndTime,-1,'system');
   end if;

-- 6 所有步骤执行成功，返回0
   SET SWP_Ret_Value = 0;
END;




-- SELECT N'SQLWAYS_EVAL# L_SaveEventResponse]...';


DROP PROCEDURE IF EXISTS PNL_SaveEventResponse;
CREATE PROCEDURE PNL_SaveEventResponse(
 -- 基类ID(可空)
v_StationId INT, -- 局站Id
v_EquipmentId INT, -- 设备Id
v_EventId INT, -- 事件Id
v_EventConditionId INT, -- 产生事件的条件Id
v_SequenceId NATIONAL VARCHAR(128), -- 事件流水号
v_StartTime DATETIME, -- 事件开始时间
v_EndTime DATETIME, -- 事件结束时间
v_Overturn INT, -- 事件翻转次数
v_Meanings NATIONAL VARCHAR(255), -- 事件描述
v_EventValue FLOAT, 	-- 触发值
v_BaseTypeId NUMERIC(10,0),INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN
   DECLARE v_ExeResult INT;
	DECLARE v_count INT;

-- 1告警预处理
   CALL PNL_SavePreEventResponse(v_StationId,v_EquipmentId,v_EventId,v_EventConditionId,v_SequenceId,v_StartTime,
   v_EndTime,v_Overturn,v_Meanings,v_EventValue,v_BaseTypeId,v_ExeResult);
   IF v_ExeResult <> 0 then

      SET SWP_Ret_Value = v_ExeResult;
      LEAVE SWL_return;
   end if;

-- 2 告警关联处理
--   CALL PNL_SaveSARPreEventResponse(v_StationId,v_EquipmentId,v_EventId,v_EventConditionId,v_SequenceId,v_StartTime,
--   v_EndTime,v_Overturn,v_Meanings,v_EventValue,v_BaseTypeId,v_ExeResult);
--   IF v_ExeResult = 1 then

-- 需要BS去处理告警关联
--      SET SWP_Ret_Value = 0;
--      LEAVE SWL_return;
--   end if;

-- 3 告警逻辑处理
   CALL PNL_SaveAftEventResponse(v_StationId,v_EquipmentId,v_EventId,v_EventConditionId,v_SequenceId,v_StartTime,
   v_EndTime,v_Overturn,v_Meanings,v_EventValue,v_BaseTypeId,v_ExeResult);

   SET SWP_Ret_Value = v_ExeResult;
-- 插入告警通知
	SET v_count = 0;
	SELECT count(*) INTO v_count FROM nt_eventnotifyrule;

	IF(v_count > 0 AND SWP_Ret_Value = 0) then
	INSERT INTO nt_event(SequenceId,StartTime,EndTime) VALUES(v_SequenceId,v_StartTime,v_EndTime);
	END IF;
END;
-- SELECT N'SQLWAYS_EVAL# L_SaveResetEvent]...';




DROP PROCEDURE IF EXISTS PNL_SaveResetEvent;
CREATE PROCEDURE PNL_SaveResetEvent(v_StationId          INT ,
v_EquipmentId        INT ,
v_Events1             NATIONAL VARCHAR(20000))
SWL_return:
BEGIN
   DECLARE v_StartIndex INT;          
   DECLARE v_EndIndex INT;          
   DECLARE v_Index INT;          
   DECLARE v_EventId INT;          
   DECLARE v_ConditionId INT;          
   DECLARE v_ResetSequenceId NATIONAL VARCHAR(255);
   DECLARE v_SequenceId NATIONAL VARCHAR(255);
   DECLARE v_StartTime DATETIME;     
   DECLARE v_EndTime DATETIME;     
   DECLARE v_Meanings NATIONAL VARCHAR(255);			
   DECLARE v_EventValue FLOAT;		           
   DECLARE v_BaseTypeId NUMERIC(10,0);          
   DECLARE v_Event NATIONAL VARCHAR(3000);
   DECLARE v_EventLen INT;          
   DECLARE v_i INT;          
   DECLARE v_RecordCount INT;
   DECLARE SWV_Event_Str NATIONAL VARCHAR(3000);
   DECLARE SWV_Events1_Str NATIONAL VARCHAR(20000); 
	DECLARE v_ExeResult INT;   
-- 处理：
-- SQLWAYS_EVAL# 备告警，无需处理，直接返回
   IF v_Events1 IS NULL OR v_Events1 = '' then

      IF NOT EXISTS(SELECT 1 FROM TSL_ActiveEvent where StationId = v_StationId and EquipmentId = v_EquipmentId) then

-- SQLWAYS_EVAL# 重启包处理逻辑，建议加上红色部分的内容，提高设备通讯状态处理的容错能力)
         UPDATE TBL_Equipment SET ConnectState = 1
         WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId;
         LEAVE SWL_return;
      end if;
   end if;

-- SQLWAYS_EVAL# 时表
   DROP TEMPORARY TABLE IF EXISTS tt_EquipmentAlarm;
   create TEMPORARY table tt_EquipmentAlarm 
   (
      AlarmId INT,
      ConditionId INT,
      SequenceId NATIONAL VARCHAR(255),
      Meanings NATIONAL VARCHAR(255),
      EventValue FLOAT,
      BaseTypeId NUMERIC(10,0),
      StartTime DATETIME
   );
   DROP TEMPORARY TABLE IF EXISTS tt_DataBaseAlarm;
   create TEMPORARY table tt_DataBaseAlarm 
   (
      AlarmId INT,
      ConditionId INT,
      SequenceId NATIONAL VARCHAR(255),
      Meanings NATIONAL VARCHAR(255),
      EventValue FLOAT,
      BaseTypeId NUMERIC(10,0),
      StartTime DATETIME
   );
   DROP TEMPORARY TABLE IF EXISTS tt_AddAlarm;
   create TEMPORARY table tt_AddAlarm 
   (
      IndexId INT   AUTO_INCREMENT PRIMARY KEY,
      AlarmId INT,
      ConditionId INT,
      SequenceId NATIONAL VARCHAR(255),
      Meanings NATIONAL VARCHAR(255),
      EventValue FLOAT,
      BaseTypeId NUMERIC(10,0),
      StartTime DATETIME
   );
   DROP TEMPORARY TABLE IF EXISTS tt_EndAlarm;
   create TEMPORARY table tt_EndAlarm 
   (
      IndexId INT   AUTO_INCREMENT PRIMARY KEY,
      AlarmId INT,
      ConditionId INT,
      SequenceId NATIONAL VARCHAR(255),
      Meanings NATIONAL VARCHAR(255),
      EventValue FLOAT,
      BaseTypeId NUMERIC(10,0),
      StartTime DATETIME
   );

   DROP TEMPORARY TABLE IF EXISTS tt_ModifyAlarm;

   create TEMPORARY table tt_ModifyAlarm 
   (
      IndexId INT   AUTO_INCREMENT PRIMARY KEY,
      AlarmId INT,
      ConditionId INT,
      SequenceId NATIONAL VARCHAR(255),
      ResetSequenceId NATIONAL VARCHAR(255)
   );

   SET v_StartIndex = LOCATE('[',v_Events1);
   SET v_EndIndex = LOCATE(']',v_Events1);         

   WHILE(v_StartIndex > 0) DO
-- 事件ID
      SET v_Event = SUBSTRING(v_Events1,v_StartIndex+1,v_EndIndex -v_StartIndex -1);
      SET v_Index = LOCATE('#',v_Event);
      SET v_EventLen = LENGTH(v_Event);
      SET v_EventId = cast(SUBSTRING(v_Event,1,v_Index -1) as SIGNED INTEGER);
-- 条件ID
      SET SWV_Event_Str = SUBSTRING(v_Event,v_Index+1,v_EventLen -v_Index);
      SET v_Event = SWV_Event_Str;
      SET v_Index = LOCATE('#',v_Event);
      SET v_ConditionId = cast(SUBSTRING(v_Event,1,v_Index -1) as SIGNED INTEGER);

-- Sequence ID
      SET SWV_Event_Str = SUBSTRING(v_Event,v_Index+1,v_EventLen -v_Index);
      SET v_Event = SWV_Event_Str;
      SET v_Index = LOCATE('#',v_Event);
      SET v_SequenceId = CAST(SUBSTRING(v_Event,1,v_Index -1) AS CHAR(256));

-- @Meanings	
      SET SWV_Event_Str = SUBSTRING(v_Event,v_Index+1,v_EventLen -v_Index);
      SET v_Event = SWV_Event_Str;
      SET v_Index = LOCATE('#',v_Event);
      SET v_Meanings = CAST(SUBSTRING(v_Event,1,v_Index -1) AS CHAR(256));

-- @EventValue
      SET SWV_Event_Str = SUBSTRING(v_Event,v_Index+1,v_EventLen -v_Index);
      SET v_Event = SWV_Event_Str;
      SET v_Index = LOCATE('#',v_Event);
      SET v_EventValue = cast(SUBSTRING(v_Event,1,v_Index -1) as DECIMAL(15,6));

-- @BaseTypeId   
      SET SWV_Event_Str = SUBSTRING(v_Event,v_Index+1,v_EventLen -v_Index);
      SET v_Event = SWV_Event_Str;
      SET v_Index = LOCATE('#',v_Event);
      SET v_BaseTypeId = cast(SUBSTRING(v_Event,1,v_Index -1) as SIGNED INTEGER);

-- 开始时间
      SET v_StartTime = CAST(SUBSTRING(v_Event,v_Index+1,v_EventLen -v_Index) AS DATETIME);
      INSERT INTO tt_EquipmentAlarm VALUES(v_EventId, v_ConditionId, v_SequenceId, v_Meanings, v_EventValue, v_BaseTypeId, v_StartTime);

      SET SWV_Events1_Str = SUBSTRING(v_Events1,v_EndIndex+1,LENGTH(v_Events1) -v_EndIndex);
      SET v_Events1 = SWV_Events1_Str;
      SET v_StartIndex = LOCATE('[',v_Events1);
      SET v_EndIndex = LOCATE(']',v_Events1);
   END WHILE;


-- SQLWAYS_EVAL# 告警
   INSERT into tt_DataBaseAlarm
   SELECT
   EventId,
EventConditionId,
SequenceId,
Meanings,
EventValue,
BaseTypeId,
StartTime
   FROM   TSL_ActiveEvent
   WHERE  EquipmentId = v_EquipmentId
   AND StationId = v_StationId;


-- SQLWAYS_EVAL# 告警

-- 2.1 找出上下相同的告警
   INSERT into tt_ModifyAlarm(AlarmId,ConditionId,SequenceId,ResetSequenceId) 
   SELECT 	tt_EquipmentAlarm.AlarmId, tt_EquipmentAlarm.ConditionId, tt_DataBaseAlarm.SequenceId,  tt_EquipmentAlarm.SequenceId
   FROM tt_EquipmentAlarm, tt_DataBaseAlarm
   where   tt_EquipmentAlarm.AlarmId   =   tt_DataBaseAlarm.AlarmId
   AND tt_EquipmentAlarm.ConditionId = tt_DataBaseAlarm.ConditionId;


-- 2.2应该结束的告警
   INSERT into tt_EndAlarm(AlarmId,ConditionId,SequenceId,Meanings,EventValue,BaseTypeId,StartTime) 
   SELECT 	tt_DataBaseAlarm.AlarmId, tt_DataBaseAlarm.ConditionId, tt_DataBaseAlarm.SequenceId, tt_DataBaseAlarm.Meanings, tt_DataBaseAlarm.EventValue, tt_DataBaseAlarm.BaseTypeId, tt_DataBaseAlarm.StartTime
   FROM  tt_DataBaseAlarm
   where  tt_DataBaseAlarm.SequenceId NOT IN(SELECT SequenceId FROM tt_ModifyAlarm);

   select   MIN(IndexId), MAX(IndexId) INTO v_i,v_RecordCount FROM tt_EndAlarm;
   WHILE v_i <= v_RecordCount DO
      select   AlarmId, ConditionId, SequenceId, StartTime, Meanings, EventValue, BaseTypeId INTO v_EventId,v_ConditionId,v_SequenceId,v_StartTime,v_Meanings,v_EventValue,
      v_BaseTypeId FROM tt_EndAlarm WHERE IndexId = v_i;
      SET v_EndTime = CURRENT_TIMESTAMP;
      IF v_EndTime < v_StartTime then
         SET v_EndTime = TIMESTAMPADD(minute,2,v_StartTime);
      end if;

-- 调用标准存告警流程
      CALL PNL_SaveEventResponse(v_StationId,v_EquipmentId,v_EventId,v_ConditionId,v_SequenceId,v_StartTime,
      v_EndTime,0,v_Meanings,v_EventValue,v_BaseTypeId,v_ExeResult);
      SET v_i = v_i+1;
   END WHILE;

-- 2.3应该新增的告警
   INSERT into tt_AddAlarm(AlarmId,ConditionId,SequenceId,Meanings,EventValue,BaseTypeId,StartTime) 
   SELECT 	tt_EquipmentAlarm.AlarmId, tt_EquipmentAlarm.ConditionId, tt_EquipmentAlarm.SequenceId, tt_EquipmentAlarm.Meanings, tt_EquipmentAlarm.EventValue, tt_EquipmentAlarm.BaseTypeId, tt_EquipmentAlarm.StartTime
   FROM tt_EquipmentAlarm
   where  tt_EquipmentAlarm.SequenceId NOT IN(SELECT ResetSequenceId FROM tt_ModifyAlarm);


   select   MIN(IndexId), MAX(IndexId) INTO v_i,v_RecordCount FROM tt_AddAlarm;
   WHILE v_i <= v_RecordCount DO
      select   AlarmId, ConditionId, SequenceId, StartTime, Meanings, EventValue, BaseTypeId INTO v_EventId,v_ConditionId,v_SequenceId,v_StartTime,v_Meanings,v_EventValue,
      v_BaseTypeId FROM tt_AddAlarm WHERE IndexId = v_i;

--  调用标准存告警流程
      CALL PNL_SaveEventResponse(v_StationId,v_EquipmentId,v_EventId,v_ConditionId,v_SequenceId,v_StartTime,
      NULL,0,v_Meanings,v_EventValue,v_BaseTypeId,v_ExeResult);
      SET v_i = v_i+1;
   END WHILE;

-- 如果不包含设备通信状态事件，则更新设备表相应记录的通信状态字段
   IF NOT exists(select * from tt_EquipmentAlarm WHERE AlarmId = -3) then

      UPDATE TBL_Equipment SET ConnectState = 1
      WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId;
   end if;

-- 2.4应该修改的告警
   select   MIN(IndexId), MAX(IndexId) INTO v_i,v_RecordCount FROM tt_ModifyAlarm;
   WHILE v_i <= v_RecordCount DO
      select   SequenceId, ResetSequenceId INTO v_SequenceId,v_ResetSequenceId FROM tt_ModifyAlarm WHERE IndexId = v_i;
      UPDATE TSL_ActiveEvent SET ResetSequenceId = v_ResetSequenceId WHERE SequenceId = v_SequenceId;
      SET v_i = v_i+1;
   END WHILE;
END;
-- SELECT N'SQLWAYS_EVAL# L_SaveSARAftEventResponse]...';


-- 告警关联处理模块



DROP PROCEDURE IF EXISTS PNL_SaveSARAftEventResponse;

CREATE PROCEDURE PNL_SaveSARAftEventResponse(
				-- SQLWAYS_EVAL# 主告警,2次告警,3翻转,4累计,5同时)
v_StationId				INT,			-- 局站Id
v_StationCategoryId		INT,			-- 局站类型ID
v_EquipmentId			INT,			-- 设备Id
v_EventId				INT,			-- 事件Id
v_EventConditionId		INT,			-- 产生事件的条件Id
v_SequenceId				NATIONAL VARCHAR(128),	-- 事件流水号
v_StartTime				DATETIME,		-- 事件开始时间
v_EndTime				DATETIME,		-- 事件结束时间
v_Overturn				INT,			-- 事件翻转次数
v_Meanings				NATIONAL VARCHAR(255),	-- 事件描述
v_EventValue				FLOAT,			-- 触发值
v_BaseTypeId				NUMERIC(10,0),	-- 基类ID(可空)
v_StandardId				INT,			-- 标准化
v_Tag					NATIONAL VARCHAR(255),	-- Tag
v_RelationType			INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_ExeResult INT;
   DECLARE v_Total INT;
   DECLARE v_CurrentTime DATETIME; -- 当前时间
   DECLARE v_TempSequenceId NATIONAL VARCHAR(128); -- 事件流水号
   DECLARE v_TempStartTime DATETIME; -- 事件结束时间
   DECLARE v_TempEndTime DATETIME; -- 事件结束时间
   DECLARE v_TempTime DATETIME;  -- 事件结束时间
   DECLARE v_StartDelay INT;
   DECLARE v_OriginalRelationType INT;

-- 0    正常
-- SQLWAYS_EVAL# 不存在
-- SQLWAYS_EVAL# L_SARAlarmActiveRecord中存在
-- SQLWAYS_EVAL# SARAlarmActiveRecord不存在
-- -4   直接丢弃
-- -5   不能转换为普通告警

-- 当前时间
   SET v_CurrentTime = CURRENT_TIMESTAMP;

   IF v_Tag = '1' then

-- 表明直接丢弃
-- SQLWAYS_EVAL# Queue移除告警
      DELETE FROM TBL_SARAlarmQueue
      WHERE SequenceId = v_SequenceId;
      SET SWP_Ret_Value = -4;
      LEAVE SWL_return;
   end if;



-- SQLWAYS_EVAL# L_SARAlarmActiveRecord
   IF v_RelationType <> 0 then

-- 是否存在
      select   COUNT(*) INTO v_Total FROM TBL_SARAlarmActiveRecord WHERE SequenceId = v_SequenceId;

-- SQLWAYS_EVAL# RAlarmActiveRecord表
      IF v_Total = 0 then

         IF v_EndTime IS NOT NULL then

-- SQLWAYS_EVAL# RAlarmActiveRecord中
-- 则表明已经转换为普通告警了
            SET v_RelationType = 0;
         ELSE
 INSERT INTO TBL_SARAlarmActiveRecord(StationId					,
StationCategoryId			,
EquipmentId       		,
EventId					,
EventConditionId  		,
SequenceId				,
StartTime         		,
EndTime					,
Overturn					,
Meanings					,
EventValue        		,
BaseTypeId				,
StandardId       			,
InsertDateTime			,
RelationType)
VALUES(v_StationId					,
v_StationCategoryId			,
v_EquipmentId				,
v_EventId					,
v_EventConditionId			,
v_SequenceId					,
v_StartTime					,
v_EndTime					,
v_Overturn					,
v_Meanings					,
v_EventValue					,
v_BaseTypeId					,
v_StandardId					,
v_CurrentTime				,
v_RelationType);
         end if;
      ELSE             
-- 更新属性值
         UPDATE TBL_SARAlarmActiveRecord
         SET EndTime = v_EndTime,Overturn = v_Overturn,Meanings = v_Meanings,EventValue = v_EventValue, 
         RelationType = v_RelationType
         WHERE SequenceId = v_SequenceId;
      end if;
   ELSE
-- SQLWAYS_EVAL# 转化而来，如果是主次告警，则要转化为主告警)
-- 是否存在
      select   SequenceId, StartTime, EndTime, RelationType INTO v_TempSequenceId,v_TempStartTime,v_TempEndTime,v_OriginalRelationType FROM TBL_SARAlarmActiveRecord WHERE SequenceId = v_SequenceId   LIMIT 1;
      IF v_TempSequenceId IS NOT NULL AND v_TempEndTime IS NULL then

         IF v_OriginalRelationType = 6 then

            UPDATE TBL_SARAlarmActiveRecord SET RelationType = 1 WHERE SequenceId = v_SequenceId;
         ELSE
            DELETE FROM TBL_SARAlarmActiveRecord WHERE SequenceId = v_SequenceId;
         end if;
      ELSE 
         IF v_TempSequenceId IS NOT NULL AND v_TempEndTime IS NOT NULL then

            SET SWP_Ret_Value = -5;
            LEAVE SWL_return;
         end if;
      end if;
   end if;

-- SQLWAYS_EVAL# ctiveEvent
   IF (v_RelationType <> 2 AND v_RelationType <> 6) then

-- 最新一条活动告警
      select   SequenceId, StartTime, EndTime INTO v_TempSequenceId,v_TempStartTime,v_TempEndTime FROM TBL_ActiveEvent WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId
      AND EventId = v_EventId AND EventConditionId = v_EventConditionId   ORDER BY StartTime DESC LIMIT 1;

-- 翻转开始告警
      IF v_RelationType = 3 AND v_EndTime IS NULL AND v_TempSequenceId IS NOT NULL AND v_TempEndTime IS NULL
      AND  EXISTS(SELECT 'X' FROM TBL_ActiveEvent  WHERE SequenceId = v_SequenceId) then

-- 更新属性值
         UPDATE TBL_ActiveEvent
         SET ReversalNum = v_Overturn,Meanings = v_Meanings,EventValue = v_EventValue
         WHERE SequenceId = v_SequenceId;

-- SQLWAYS_EVAL# hange表
         INSERT INTO TBL_AlarmChange(SequenceId ,
OperationType ,
StationId ,
StationName ,
EquipmentId ,
EquipmentName ,
EventId ,
EventName ,
EventConditionId ,
EventSeverityId ,
EventSeverity ,
StartTime ,
EndTime ,
CancelTime ,
CancelUserId ,
CancelUserName ,
ConfirmTime ,
ConfirmerId ,
ConfirmerName ,
EventValue ,
ReversalNum ,
Meanings ,
EventFilePath ,
Description ,
SourceHostId ,
InstructionId ,
InstructionStatus ,
StandardAlarmNameId ,
StandardAlarmName ,
BaseTypeId ,
BaseTypeName ,
EquipmentCategory ,
EquipmentCategoryName ,
MaintainState  ,
SignalId ,
RelateSequenceId ,
EventCategoryId ,
EventStateId ,
CenterId ,
CenterName ,
StructureName ,
MonitorUnitName,
StructureId,
StationCategoryId,
EquipmentVendor)
         SELECT
         v_SequenceId,
5,
StationId,
StationName,
EquipmentId,
EquipmentName,
EventId,
EventName,
EventConditionId,
EventSeverityId,
EventSeverity,
StartTime ,
EndTime ,
CancelTime,
CancelUserId,
CancelUserName,
ConfirmTime,
ConfirmerId,
ConfirmerName,
EventValue ,
ReversalNum,
Meanings ,
EventFilePath,
Description,
SourceHostId,
InstructionId,
InstructionStatus,
StandardAlarmNameId,
StandardAlarmName ,
BaseTypeId,
BaseTypeName,
EquipmentCategory ,
EquipmentCategoryName ,
MaintainState,
SignalId ,
RelateSequenceId ,
EventCategoryId,
EventStateId    ,
CenterId       ,
CenterName     ,
StructureName   ,
MonitorUnitName ,
StructureId,
StationCategoryId,
EquipmentVendor
         FROM TBL_ActiveEvent
         WHERE SequenceId = v_SequenceId;

-- SQLWAYS_EVAL# Queue移除告警
         DELETE FROM TBL_SARAlarmQueue
         WHERE SequenceId = v_Tag;
      ELSE
         SET v_ExeResult = PNL_SaveAftEventResponse(v_StationId,v_EquipmentId,v_EventId,v_EventConditionId,v_SequenceId,v_StartTime,
         v_EndTime,v_Overturn,v_Meanings,v_EventValue,v_BaseTypeId);
      end if;
   end if;


-- SQLWAYS_EVAL# Queue移除告警
   IF v_EndTime IS NULL then

      DELETE FROM TBL_SARAlarmQueue
      WHERE SequenceId = v_SequenceId AND EndTime IS NULL;
   ELSE
      DELETE FROM TBL_SARAlarmQueue
      WHERE SequenceId = v_SequenceId;
   end if; 

   IF v_RelationType = 3 then

      DELETE FROM TBL_SARAlarmQueue
      WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId AND EventId = v_EventId AND EventConditionId = v_EventConditionId;
   end if; 

   SET SWP_Ret_Value = v_ExeResult;
END;


-- SELECT N'SQLWAYS_EVAL# L_UptMUConnectState]...';





DROP PROCEDURE IF EXISTS PNL_UptMUConnectState;

CREATE PROCEDURE PNL_UptMUConnectState(v_HostId			   INT,						-- 监控单元ID
v_HostType		   INT,						-- SQLWAYS_EVAL# DS(1),AS(2),DSC(3),DSCBak(4),RAS(5),Watchdog(6),CFG(7),RMU(10)
v_ConnectState       INT,INOUT SWP_Ret_Value INT)						-- 连接状态
   SWL_return:
BEGIN
-- 处理：
-- 1 修改监控单元状态
-- 2 修改局站状态
-- SQLWAYS_EVAL# 改采集器，设备状态为离线
-- SQLWAYS_EVAL# 单元在线则自诊断设备的状态为在线

-- 返回结果
-- -1 不可知错误
--  0 成功
--  1 参数为0或空
--  2 配置不存在或超过一个

   DECLARE v_StationId INT;
   DECLARE v_Return INT;
   DECLARE v_WorkStationId INT;
   DECLARE v_GetDate DATETIME;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 参数检查
   SET @SWV_Error = 0;
   IF v_HostId IS NULL OR v_HostType IS NULL OR v_ConnectState IS NULL OR v_HostId = 0 then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

-- 配置是否存在
   SELECT MonitorUnitId FROM TSL_MonitorUnit WHERE MonitorUnitId = v_HostId;
   IF (ROW_COUNT() <> 1) then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;

-- 更新监控单元状态
   UPDATE TSL_MonitorUnit
   SET ConnectState = v_ConnectState
   WHERE MonitorUnitId = v_HostId;

-- 更新局站状态
   SET v_Return = PNL_UptStationConnectState(v_HostId,v_HostType,v_ConnectState);

   IF v_ConnectState = 0 then

-- SQLWAYS_EVAL# 设备状态
      SET v_GetDate = CURRENT_TIMESTAMP;
      SET v_Return = PNL_UptSampleConnectState(v_HostId,-1,-1,v_GetDate,v_ConnectState);
      SET v_Return = PNL_UptEquipConnectState(v_HostId,-1,v_GetDate,v_ConnectState);
   ELSE 
      IF v_ConnectState = 1 then

-- SQLWAYS_EVAL# 备状态
         CALL PNL_UptEquipOfMURegister(v_HostId,v_ConnectState);
      end if;
   end if;

-- RMU下MU如果在线
-- 更新自诊断设备的状态为在线
-- 99自诊断设备类型	
   select   WorkStationId INTO v_WorkStationId FROM TSL_MonitorUnit WHERE MonitorUnitId = v_HostId;
   SET @SWV_Error = 0;
   IF (v_WorkStationId IS NOT NULL) then

      IF v_ConnectState <> 0 then

         UPDATE TBL_Equipment
         SET ConnectState = v_ConnectState
         WHERE MonitorUnitId = v_HostId AND EquipmentCategory = 99;
      end if;
   end if;


   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;                                                                       

   SET SWP_Ret_Value = v_Return;
END;

-- SELECT N'SQLWAYS_EVAL# L_BatchSaveActiveSignal]...';





DROP PROCEDURE IF EXISTS PBL_BatchSaveActiveSignal;
CREATE PROCEDURE PBL_BatchSaveActiveSignal(v_StationId   	INT       	,
v_HostId      	INT   	   	,
v_EquipmentId 	INT		    ,
v_SignalTotal	 	INT		    ,
v_BSignalId    	NATIONAL VARCHAR(4000),
v_BFlag			NATIONAL VARCHAR(4000),
v_BSampleTime		NATIONAL VARCHAR(4000),
v_BFloatValue		NATIONAL VARCHAR(4000),
v_BStringValue	NATIONAL VARCHAR(4000),
v_BDateTimeValue	NATIONAL VARCHAR(4000),
v_BBaseTypeId		NATIONAL VARCHAR(4000),
v_BValueType		NATIONAL VARCHAR(4000),
v_BEventSeverity  NATIONAL VARCHAR(4000),INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN
   DECLARE v_Index INT;			
   DECLARE v_MinIndex INT;			
   DECLARE v_MaxIndex INT;			
   DECLARE v_TempValue NATIONAL VARCHAR(255);
   DECLARE v_SignalId INT;        	
   DECLARE v_Flag INT;     	
   DECLARE v_SampleTime DATETIME;    
   DECLARE v_FloatValue FLOAT;       
   DECLARE v_StringValue NATIONAL VARCHAR(255);
   DECLARE v_DateTimeValue DATETIME;    
   DECLARE v_BaseTypeId NUMERIC(10,0);         
   DECLARE v_ValueType INT;         
   DECLARE v_EventSeverity INT;			
   DECLARE v_Return INT;			
   DECLARE v_Spliter NATIONAL VARCHAR(255);
   DECLARE SWV_BSignalId_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BFlag_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BSampleTime_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BFloatValue_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BStringValue_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BDateTimeValue_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BBaseTypeId_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BValueType_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BEventSeverity_Str NATIONAL VARCHAR(4000);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 设置分隔符
   SET v_Spliter = ',';

-- 设置个数
   SET v_MinIndex = 1;
   SET v_MaxIndex = v_SignalTotal;

-- 批量保存实时信号
   SET @SWV_Error = 0;
   WHILE(v_MinIndex <= v_MaxIndex) DO
-- @SignalId
      SET v_Index = LOCATE(v_Spliter,v_BSignalId);
      IF v_Index = 0 then

         SET v_SignalId = cast(v_BSignalId as SIGNED INTEGER);
      ELSE
         SET v_SignalId = cast(SUBSTRING(v_BSignalId,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BSignalId_Str = SUBSTRING(v_BSignalId,v_Index+1,9999);
         SET v_BSignalId = SWV_BSignalId_Str;
      end if;

-- @Flag
      SET v_Index = LOCATE(v_Spliter,v_BFlag);
      IF v_Index = 0 then

         SET v_Flag = cast(v_BFlag as SIGNED INTEGER);
      ELSE
         SET v_Flag = cast(SUBSTRING(v_BFlag,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BFlag_Str = SUBSTRING(v_BFlag,v_Index+1,9999);
         SET v_BFlag = SWV_BFlag_Str;
      end if;

-- @SampleTime
      SET v_Index = LOCATE(v_Spliter,v_BSampleTime);
      IF v_Index = 0 then

         SET v_SampleTime = CAST(v_BSampleTime AS DATETIME);
      ELSE
         SET v_SampleTime = CAST(SUBSTRING(v_BSampleTime,1,v_Index -1) AS DATETIME);
         SET SWV_BSampleTime_Str = SUBSTRING(v_BSampleTime,v_Index+1,9999);
         SET v_BSampleTime = SWV_BSampleTime_Str;
      end if;

-- @FloatValue
      SET v_Index = LOCATE(v_Spliter,v_BFloatValue);
      IF v_Index = 0 then

         SET v_FloatValue = cast(v_BFloatValue as DECIMAL(15,6));
      ELSE
         SET v_FloatValue = cast(SUBSTRING(v_BFloatValue,1,v_Index -1) as DECIMAL(15,6));
         SET SWV_BFloatValue_Str = SUBSTRING(v_BFloatValue,v_Index+1,9999);
         SET v_BFloatValue = SWV_BFloatValue_Str;
      end if;

-- @StringValue
      SET v_Index = LOCATE(v_Spliter,v_BStringValue);
      IF v_Index = 0 then

         SET v_StringValue = v_BStringValue;
      ELSE
         SET v_StringValue = SUBSTRING(v_BStringValue,1,v_Index -1);
         SET SWV_BStringValue_Str = SUBSTRING(v_BStringValue,v_Index+1,9999);
         SET v_BStringValue = SWV_BStringValue_Str;
      end if;

-- @DateTimeValue
      SET v_Index = LOCATE(v_Spliter,v_BDateTimeValue);
      IF v_Index = 0 then

         SET v_DateTimeValue = CAST(v_BDateTimeValue AS DATETIME);
      ELSE
         SET v_DateTimeValue = CAST(SUBSTRING(v_BDateTimeValue,1,v_Index -1) AS DATETIME);
         SET SWV_BDateTimeValue_Str = SUBSTRING(v_BDateTimeValue,v_Index+1,9999);
         SET v_BDateTimeValue = SWV_BDateTimeValue_Str;
      end if;

-- @BaseTypeId
      SET v_Index = LOCATE(v_Spliter,v_BBaseTypeId);
      IF v_Index = 0 then

         SET v_BaseTypeId = cast(v_BBaseTypeId as SIGNED INTEGER);
      ELSE
         SET v_BaseTypeId = cast(SUBSTRING(v_BBaseTypeId,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BBaseTypeId_Str = SUBSTRING(v_BBaseTypeId,v_Index+1,9999);
         SET v_BBaseTypeId = SWV_BBaseTypeId_Str;
      end if;

-- @ValueType
      SET v_Index = LOCATE(v_Spliter,v_BValueType);
      IF v_Index = 0 then

         SET v_ValueType = cast(v_BValueType as SIGNED INTEGER);
      ELSE
         SET v_ValueType = cast(SUBSTRING(v_BValueType,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BValueType_Str = SUBSTRING(v_BValueType,v_Index+1,9999);
         SET v_BValueType = SWV_BValueType_Str;
      end if;

-- @EventSeverity
      SET v_Index = LOCATE(v_Spliter,v_BEventSeverity);
      IF v_Index = 0 then

         SET v_EventSeverity = cast(v_BEventSeverity as SIGNED INTEGER);
      ELSE
         SET v_EventSeverity = cast(SUBSTRING(v_BEventSeverity,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BEventSeverity_Str = SUBSTRING(v_BEventSeverity,v_Index+1,9999);
         SET v_BEventSeverity = SWV_BEventSeverity_Str;
      end if;
      CALL PBL_SaveActiveSignal(v_StationId,v_HostId,v_EquipmentId,v_SignalId,v_Flag,v_SampleTime,v_FloatValue,
      v_StringValue,v_DateTimeValue,v_BaseTypeId,v_ValueType,v_EventSeverity,v_Return);
      SET v_MinIndex = v_MinIndex+1;
   END WHILE;	

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;    

   SET SWP_Ret_Value = v_Return;
END;


DROP PROCEDURE IF EXISTS PBL_BatchSaveHistoryBattery;

CREATE PROCEDURE PBL_BatchSaveHistoryBattery(v_StationId   	INT       	,
v_HostId      	INT   	   	,
v_EquipmentId 	INT		    ,
v_SignalTotal	 	INT		    ,
v_BSignalId    	NATIONAL VARCHAR(4000),		   
v_BSampleTime		NATIONAL VARCHAR(4000),
v_BFloatValue		NATIONAL VARCHAR(4000),
v_BBaseTypeId		NATIONAL VARCHAR(4000),
v_BStatus			NATIONAL VARCHAR(4000),
v_BSignalType		NATIONAL VARCHAR(4000),
v_BEventSeverity  NATIONAL VARCHAR(4000),INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_Index INT;			
   DECLARE v_MinIndex INT;			
   DECLARE v_MaxIndex INT;			
   DECLARE v_TempValue NATIONAL VARCHAR(255);
   DECLARE v_SignalId INT;        	
   DECLARE v_SignalType INT;     	
   DECLARE v_SampleTime DATETIME;    
   DECLARE v_FloatValue FLOAT;       
   DECLARE v_StringValue NATIONAL VARCHAR(255);
   DECLARE v_DateTimeValue DATETIME;    
   DECLARE v_BaseTypeId NUMERIC(10,0);         
   DECLARE v_Status INT;         
   DECLARE v_EventSeverity INT;			
   DECLARE v_Return INT;			
   DECLARE v_Spliter NATIONAL VARCHAR(255);
   DECLARE SWV_BSignalId_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BSampleTime_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BFloatValue_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BBaseTypeId_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BStatus_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BSignalType_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BEventSeverity_Str NATIONAL VARCHAR(4000);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
-- SQLWAYS_EVAL# 
-- SQLWAYS_EVAL# + ','+ @BSampleTime + ','+ @BFloatValue + ','+ @BBaseTypeId + ','+ @BStatus + ','+ @BSignalType + ','+ @BEventSeverity + ',')

-- 设置分隔符
   SET v_Spliter = ',';

-- 设置个数
   SET v_MinIndex = 1;
   SET v_MaxIndex = v_SignalTotal;

-- 批量保存电池信号
   SET @SWV_Error = 0;
   WHILE(v_MinIndex <= v_MaxIndex) DO
-- @SignalId
      SET v_Index = LOCATE(v_Spliter,v_BSignalId);
      IF v_Index = 0 then

         SET v_SignalId = cast(v_BSignalId as SIGNED INTEGER);
      ELSE
         SET v_SignalId = cast(SUBSTRING(v_BSignalId,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BSignalId_Str = SUBSTRING(v_BSignalId,v_Index+1,9999);
         SET v_BSignalId = SWV_BSignalId_Str;
      end if;

-- @SampleTime
      SET v_Index = LOCATE(v_Spliter,v_BSampleTime);
      IF v_Index = 0 then

         SET v_SampleTime = CAST(v_BSampleTime AS DATETIME);
      ELSE
         SET v_SampleTime = CAST(SUBSTRING(v_BSampleTime,1,v_Index -1) AS DATETIME);
         SET SWV_BSampleTime_Str = SUBSTRING(v_BSampleTime,v_Index+1,9999);
         SET v_BSampleTime = SWV_BSampleTime_Str;
      end if;

-- @FloatValue
      SET v_Index = LOCATE(v_Spliter,v_BFloatValue);
      IF v_Index = 0 then

         SET v_FloatValue = cast(v_BFloatValue as DECIMAL(15,15));
      ELSE
         SET v_FloatValue = cast(SUBSTRING(v_BFloatValue,1,v_Index -1) as DECIMAL(15,15));
         SET SWV_BFloatValue_Str = SUBSTRING(v_BFloatValue,v_Index+1,9999);
         SET v_BFloatValue = SWV_BFloatValue_Str;
      end if;

-- @BaseTypeId
      SET v_Index = LOCATE(v_Spliter,v_BBaseTypeId);
      IF v_Index = 0 then

         SET v_BaseTypeId = cast(v_BBaseTypeId as SIGNED INTEGER);
      ELSE
         SET v_BaseTypeId = cast(SUBSTRING(v_BBaseTypeId,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BBaseTypeId_Str = SUBSTRING(v_BBaseTypeId,v_Index+1,9999);
         SET v_BBaseTypeId = SWV_BBaseTypeId_Str;
      end if;

-- @ValueType
      SET v_Index = LOCATE(v_Spliter,v_BStatus);
      IF v_Index = 0 then

         SET v_Status = cast(v_BStatus as SIGNED INTEGER);
      ELSE
         SET v_Status = cast(SUBSTRING(v_BStatus,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BStatus_Str = SUBSTRING(v_BStatus,v_Index+1,9999);
         SET v_BStatus = SWV_BStatus_Str;
      end if;			

-- @SignalType
      SET v_Index = LOCATE(v_Spliter,v_BSignalType);
      IF v_Index = 0 then

         SET v_SignalType = cast(v_BSignalType as SIGNED INTEGER);
      ELSE
         SET v_SignalType = cast(SUBSTRING(v_BSignalType,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BSignalType_Str = SUBSTRING(v_BSignalType,v_Index+1,9999);
         SET v_BSignalType = SWV_BSignalType_Str;
      end if;

-- @EventSeverity
      SET v_Index = LOCATE(v_Spliter,v_BEventSeverity);
      IF v_Index = 0 then

         SET v_EventSeverity = cast(v_BEventSeverity as SIGNED INTEGER);
      ELSE
         SET v_EventSeverity = cast(SUBSTRING(v_BEventSeverity,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BEventSeverity_Str = SUBSTRING(v_BEventSeverity,v_Index+1,9999);
         SET v_BEventSeverity = SWV_BEventSeverity_Str;
      end if;
      CALL PBL_SaveHistoryBattery(v_StationId,v_HostId,v_EquipmentId,v_SignalId,v_SampleTime,v_FloatValue,
      v_BaseTypeId,v_Status,v_SignalType,v_EventSeverity, v_Return);
      SET v_MinIndex = v_MinIndex+1;
   END WHILE;	

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;    

   SET SWP_Ret_Value = v_Return;
END;

-- SELECT N'SQLWAYS_EVAL# L_BatchSaveHistorySignal]...';



DROP PROCEDURE IF EXISTS PBL_BatchSaveHistorySignal;

CREATE PROCEDURE PBL_BatchSaveHistorySignal(v_StationId   	INT       	,
v_HostId      	INT   	   	,
v_EquipmentId 	INT		    ,
v_SignalTotal	 	INT		    ,
v_BSignalId    	NATIONAL VARCHAR(4000),		   
v_BSampleTime		NATIONAL VARCHAR(4000),
v_BFloatValue		NATIONAL VARCHAR(4000),
v_BStringValue	NATIONAL VARCHAR(4000),
v_BDateTimeValue	NATIONAL VARCHAR(4000),
v_BBaseTypeId		NATIONAL VARCHAR(4000),
v_BValueType		NATIONAL VARCHAR(4000),
v_BSignalType		NATIONAL VARCHAR(4000),
v_BEventSeverity  NATIONAL VARCHAR(4000),INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_Index INT;			
   DECLARE v_MinIndex INT;			
   DECLARE v_MaxIndex INT;			
   DECLARE v_TempValue NATIONAL VARCHAR(255);
   DECLARE v_SignalId INT;        	
   DECLARE v_SignalType INT;     	
   DECLARE v_SampleTime DATETIME;    
   DECLARE v_FloatValue FLOAT;       
   DECLARE v_StringValue NATIONAL VARCHAR(255);
   DECLARE v_DateTimeValue DATETIME;    
   DECLARE v_BaseTypeId NUMERIC(10,0);         
   DECLARE v_ValueType INT;         
   DECLARE v_EventSeverity INT;			
   DECLARE v_Return INT;			
   DECLARE v_Spliter NATIONAL VARCHAR(255);
   DECLARE SWV_BSignalId_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BSampleTime_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BFloatValue_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BStringValue_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BDateTimeValue_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BBaseTypeId_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BValueType_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BSignalType_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BEventSeverity_Str NATIONAL VARCHAR(4000);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 设置分隔符
   SET v_Spliter = ',';

-- 设置个数
   SET v_MinIndex = 1;
   SET v_MaxIndex = v_SignalTotal;

-- 批量保存历史信号
   SET @SWV_Error = 0;
   WHILE(v_MinIndex <= v_MaxIndex) DO
-- @SignalId
      SET v_Index = LOCATE(v_Spliter,v_BSignalId);
      IF v_Index = 0 then

         SET v_SignalId = cast(v_BSignalId as SIGNED INTEGER);
      ELSE
         SET v_SignalId = cast(SUBSTRING(v_BSignalId,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BSignalId_Str = SUBSTRING(v_BSignalId,v_Index+1,9999);
         SET v_BSignalId = SWV_BSignalId_Str;
      end if;

-- @SampleTime
      SET v_Index = LOCATE(v_Spliter,v_BSampleTime);
      IF v_Index = 0 then

         SET v_SampleTime = CAST(v_BSampleTime AS DATETIME);
      ELSE
         SET v_SampleTime = CAST(SUBSTRING(v_BSampleTime,1,v_Index -1) AS DATETIME);
         SET SWV_BSampleTime_Str = SUBSTRING(v_BSampleTime,v_Index+1,9999);
         SET v_BSampleTime = SWV_BSampleTime_Str;
      end if;

-- @FloatValue
      SET v_Index = LOCATE(v_Spliter,v_BFloatValue);
      IF v_Index = 0 then

         SET v_FloatValue = cast(v_BFloatValue as DECIMAL(15,6));
      ELSE
         SET v_FloatValue = cast(SUBSTRING(v_BFloatValue,1,v_Index -1) as DECIMAL(15,6));
         SET SWV_BFloatValue_Str = SUBSTRING(v_BFloatValue,v_Index+1,9999);
         SET v_BFloatValue = SWV_BFloatValue_Str;
      end if;

-- @StringValue
      SET v_Index = LOCATE(v_Spliter,v_BStringValue);
      IF v_Index = 0 then

         SET v_StringValue = v_BStringValue;
      ELSE
         SET v_StringValue = SUBSTRING(v_BStringValue,1,v_Index -1);
         SET SWV_BStringValue_Str = SUBSTRING(v_BStringValue,v_Index+1,9999);
         SET v_BStringValue = SWV_BStringValue_Str;
      end if;

-- @DateTimeValue
      SET v_Index = LOCATE(v_Spliter,v_BDateTimeValue);
      IF v_Index = 0 then

         SET v_DateTimeValue = CAST(v_BDateTimeValue AS DATETIME);
      ELSE
         SET v_DateTimeValue = CAST(SUBSTRING(v_BDateTimeValue,1,v_Index -1) AS DATETIME);
         SET SWV_BDateTimeValue_Str = SUBSTRING(v_BDateTimeValue,v_Index+1,9999);
         SET v_BDateTimeValue = SWV_BDateTimeValue_Str;
      end if;

-- @BaseTypeId
      SET v_Index = LOCATE(v_Spliter,v_BBaseTypeId);
      IF v_Index = 0 then

         SET v_BaseTypeId = cast(v_BBaseTypeId as SIGNED INTEGER);
      ELSE
         SET v_BaseTypeId = cast(SUBSTRING(v_BBaseTypeId,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BBaseTypeId_Str = SUBSTRING(v_BBaseTypeId,v_Index+1,9999);
         SET v_BBaseTypeId = SWV_BBaseTypeId_Str;
      end if;

-- @ValueType
      SET v_Index = LOCATE(v_Spliter,v_BValueType);
      IF v_Index = 0 then

         SET v_ValueType = cast(v_BValueType as SIGNED INTEGER);
      ELSE
         SET v_ValueType = cast(SUBSTRING(v_BValueType,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BValueType_Str = SUBSTRING(v_BValueType,v_Index+1,9999);
         SET v_BValueType = SWV_BValueType_Str;
      end if;			

-- @SignalType
      SET v_Index = LOCATE(v_Spliter,v_BSignalType);
      IF v_Index = 0 then

         SET v_SignalType = cast(v_BSignalType as SIGNED INTEGER);
      ELSE
         SET v_SignalType = cast(SUBSTRING(v_BSignalType,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BSignalType_Str = SUBSTRING(v_BSignalType,v_Index+1,9999);
         SET v_BSignalType = SWV_BSignalType_Str;
      end if;

-- @EventSeverity
      SET v_Index = LOCATE(v_Spliter,v_BEventSeverity);
      IF v_Index = 0 then

         SET v_EventSeverity = cast(v_BEventSeverity as SIGNED INTEGER);
      ELSE
         SET v_EventSeverity = cast(SUBSTRING(v_BEventSeverity,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BEventSeverity_Str = SUBSTRING(v_BEventSeverity,v_Index+1,9999);
         SET v_BEventSeverity = SWV_BEventSeverity_Str;
      end if;
      CALL PBL_SaveHistorySignal(v_StationId,v_HostId,v_EquipmentId,v_SignalId,v_SampleTime,v_FloatValue,
      v_StringValue,v_DateTimeValue,v_BaseTypeId,v_ValueType,v_SignalType,
      v_EventSeverity,v_Return);
      SET v_MinIndex = v_MinIndex+1;
   END WHILE;	

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;    

   SET SWP_Ret_Value = v_Return;
END;

-- SELECT N'SQLWAYS_EVAL# L_BatchSaveStatisticsSignal]...';





DROP PROCEDURE IF EXISTS PBL_BatchSaveStatisticsSignal;

CREATE PROCEDURE PBL_BatchSaveStatisticsSignal(v_StationId   	INT       	,
v_HostId      	INT   	   	,
v_EquipmentId 	INT		    ,
v_SignalTotal	 	INT		    ,
v_BSignalId    	NATIONAL VARCHAR(4000),		   
v_BMaxTime		NATIONAL VARCHAR(4000),
v_BMaxValue		NATIONAL VARCHAR(4000),
v_BMinTime		NATIONAL VARCHAR(4000),
v_BMinValue		NATIONAL VARCHAR(4000),
v_BAvgTime		NATIONAL VARCHAR(4000),
v_BAvgValue		NATIONAL VARCHAR(4000),
v_BBaseTypeId		NATIONAL VARCHAR(4000),INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_Index INT;			
   DECLARE v_MinIndex INT;			
   DECLARE v_MaxIndex INT;			
   DECLARE v_TempValue NATIONAL VARCHAR(255);
   DECLARE v_SignalId INT;        	
   DECLARE v_MaxTime DATETIME;    
   DECLARE v_MaxValue FLOAT;		
   DECLARE v_MinTime DATETIME;    
   DECLARE v_MinValue FLOAT;		
   DECLARE v_AvgValue FLOAT;		
   DECLARE v_AvgTime DATETIME;    
   DECLARE v_BaseTypeId NUMERIC(10,0);         
   DECLARE v_Return INT;			
   DECLARE v_Spliter NATIONAL VARCHAR(255);
   DECLARE SWV_BSignalId_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BMaxTime_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BMaxValue_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BMinTime_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BMinValue_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BAvgTime_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BAvgValue_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BBaseTypeId_Str NATIONAL VARCHAR(4000);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 设置分隔符
   SET v_Spliter = ',';

-- 设置个数
   SET v_MinIndex = 1;
   SET v_MaxIndex = v_SignalTotal;

-- 批量保存统计信号
   SET @SWV_Error = 0;
   WHILE(v_MinIndex <= v_MaxIndex) DO
-- @SignalId
      SET v_Index = LOCATE(v_Spliter,v_BSignalId);
      IF v_Index = 0 then

         SET v_SignalId = cast(v_BSignalId as SIGNED INTEGER);
      ELSE
         SET v_SignalId = cast(SUBSTRING(v_BSignalId,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BSignalId_Str = SUBSTRING(v_BSignalId,v_Index+1,9999);
         SET v_BSignalId = SWV_BSignalId_Str;
      end if;

-- @MaxTime
      SET v_Index = LOCATE(v_Spliter,v_BMaxTime);
      IF v_Index = 0 then

         SET v_MaxTime = CAST(v_BMaxTime AS DATETIME);
      ELSE
         SET v_MaxTime = CAST(SUBSTRING(v_BMaxTime,1,v_Index -1) AS DATETIME);
         SET SWV_BMaxTime_Str = SUBSTRING(v_BMaxTime,v_Index+1,9999);
         SET v_BMaxTime = SWV_BMaxTime_Str;
      end if;

-- @MaxValue
      SET v_Index = LOCATE(v_Spliter,v_BMaxValue);
      IF v_Index = 0 then

         SET v_MaxValue = cast(v_BMaxValue as DECIMAL(15,15));
      ELSE
         SET v_MaxValue = cast(SUBSTRING(v_BMaxValue,1,v_Index -1) as DECIMAL(15,15));
         SET SWV_BMaxValue_Str = SUBSTRING(v_BMaxValue,v_Index+1,9999);
         SET v_BMaxValue = SWV_BMaxValue_Str;
      end if;

-- @MinTime
      SET v_Index = LOCATE(v_Spliter,v_BMinTime);
      IF v_Index = 0 then

         SET v_MinTime = CAST(v_BMinTime AS DATETIME);
      ELSE
         SET v_MinTime = CAST(SUBSTRING(v_BMinTime,1,v_Index -1) AS DATETIME);
         SET SWV_BMinTime_Str = SUBSTRING(v_BMinTime,v_Index+1,9999);
         SET v_BMinTime = SWV_BMinTime_Str;
      end if;

-- @MinValue
      SET v_Index = LOCATE(v_Spliter,v_BMinValue);
      IF v_Index = 0 then

         SET v_MinValue = cast(v_BMinValue as DECIMAL(15,15));
      ELSE
         SET v_MinValue = cast(SUBSTRING(v_BMinValue,1,v_Index -1) as DECIMAL(15,15));
         SET SWV_BMinValue_Str = SUBSTRING(v_BMinValue,v_Index+1,9999);
         SET v_BMinValue = SWV_BMinValue_Str;
      end if;

-- @AvgTime
      SET v_Index = LOCATE(v_Spliter,v_BAvgTime);
      IF v_Index = 0 then

         SET v_AvgTime = CAST(v_BAvgTime AS DATETIME);
      ELSE
         SET v_AvgTime = CAST(SUBSTRING(v_BAvgTime,1,v_Index -1) AS DATETIME);
         SET SWV_BAvgTime_Str = SUBSTRING(v_BAvgTime,v_Index+1,9999);
         SET v_BAvgTime = SWV_BAvgTime_Str;
      end if;

-- @AvgValue
      SET v_Index = LOCATE(v_Spliter,v_BAvgValue);
      IF v_Index = 0 then

         SET v_AvgValue = cast(v_BAvgValue as DECIMAL(15,15));
      ELSE
         SET v_AvgValue = cast(SUBSTRING(v_BAvgValue,1,v_Index -1) as DECIMAL(15,15));
         SET SWV_BAvgValue_Str = SUBSTRING(v_BAvgValue,v_Index+1,9999);
         SET v_BAvgValue = SWV_BAvgValue_Str;
      end if;

-- @BaseTypeId
      SET v_Index = LOCATE(v_Spliter,v_BBaseTypeId);
      IF v_Index = 0 then

         SET v_BaseTypeId = cast(v_BBaseTypeId as SIGNED INTEGER);
      ELSE
         SET v_BaseTypeId = cast(SUBSTRING(v_BBaseTypeId,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BBaseTypeId_Str = SUBSTRING(v_BBaseTypeId,v_Index+1,9999);
         SET v_BBaseTypeId = SWV_BBaseTypeId_Str;
      end if;
      SET v_Return = PBL_SaveStatisticsSignal(v_StationId,v_HostId,v_EquipmentId,v_SignalId,v_MaxTime,v_MaxValue,v_MinTime,
      v_MinValue,v_AvgValue,v_AvgTime,v_BaseTypeId);
      SET v_MinIndex = v_MinIndex+1;
   END WHILE;	

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;    

   SET SWP_Ret_Value = v_Return;
END;

-- SELECT N'SQLWAYS_EVAL# L_DiagnosesEvent]...';





DROP PROCEDURE IF EXISTS PBL_DiagnosesEvent;

CREATE PROCEDURE PBL_DiagnosesEvent(v_Expired   			INT,
v_SupportType			NATIONAL VARCHAR(4000) ,
v_NoSupportType		NATIONAL VARCHAR(4000) ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_CurrentTime DATETIME;
   DECLARE v_SCurrentTime NATIONAL VARCHAR(128);
   DECLARE v_SExpired NATIONAL VARCHAR(128);
   DECLARE v_ReturnValue INT;
   DECLARE v_MinIndex INT;
   DECLARE v_MaxIndex INT;
   DECLARE v_Total INT;
   DECLARE v_TmpWorkStationId INT;
   DECLARE v_TmpStationId INT;
   DECLARE v_TmpEquipmentId INT;
   DECLARE v_TmpEventId INT;
   DECLARE v_TmpEventConditionId INT;
   DECLARE v_TmpBaseTypeId NUMERIC(10,0);
   DECLARE v_Index INT;
   DECLARE v_TmpMeanings NATIONAL VARCHAR(255);
   DECLARE v_WhereWorkstationType NATIONAL VARCHAR(4000);
   DECLARE v_WhereNoWorkstationType NATIONAL VARCHAR(4000);
   DECLARE v_TmpEventValue FLOAT;
   DECLARE v_TmpSequenceId NATIONAL VARCHAR(128);
   DECLARE v_TmpStartTime DATETIME;
		DECLARE SWV_ExecDyn VARCHAR(5000);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- SQLWAYS_EVAL# me跟当前时间的间隔到达@Expired(以秒为单位)
-- 则生成自诊断告警
-- 否则结束自诊断告警

--  返回结果
-- -1 不可知错误
--  0 成功
--  1 配置不存在

-- 当前时间
/*liangyj
   IF v_SupportType is null then
      set v_SupportType = '-1';
   END IF;
   IF v_NoSupportType is null then
      set v_NoSupportType = '-1';
   END IF;*/
   SET v_CurrentTime = CURRENT_TIMESTAMP;	
   SET v_SCurrentTime = DATE_FORMAT(v_CurrentTime,'SQLWAYS_EVAL# :%s:%f%p');
   SET v_SExpired = CAST(v_Expired AS CHAR(30));

   SET v_ReturnValue = 0;

-- 工作站告警信息
   DROP TEMPORARY TABLE IF EXISTS tt_TempEvent;
   CREATE TEMPORARY TABLE tt_TempEvent
   (
      WorkStationId INT,
      StationId INT,
      EquipmentId INT,
      EventId INT,
      EventConditionId INT,
      BaseTypeId NUMERIC(10,0),
      Meanings NATIONAL VARCHAR(255)
   );

-- 赋值
   INSERT INTO tt_TempEvent(WorkStationId,StationId,EquipmentId,EventId,EventConditionId,BaseTypeId,Meanings)
   SELECT DISTINCT ws.WorkStationId, ee.StationId, ee.EquipmentId, et.EventId, ec.EventConditionId,ec.BaseTypeId,ec.Meanings
   FROM TBL_WorkStation ws
   INNER JOIN TBL_Event et ON ws.WorkStationId = et.EventId
   INNER JOIN TBL_EventCondition ec ON et.EventId = ec.EventId AND et.EquipmentTemplateId = ec.EquipmentTemplateId
   INNER JOIN TBL_Equipment ee ON et.EquipmentTemplateId = ee.EquipmentTemplateId;

-- 临时工作站
   DROP TEMPORARY TABLE IF EXISTS tt_TempWorkStation;
   CREATE TEMPORARY TABLE tt_TempWorkStation
   (
      Idx INT   AUTO_INCREMENT PRIMARY KEY,
      WorkStationId INT
   );

-- 支持的工作站类型
   SET v_WhereWorkstationType = '  ';
   IF IFNULL(v_SupportType,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_SupportType);
      IF v_Index = 0 then
         SET v_WhereWorkstationType = CONCAT('SQLWAYS_EVAL# = ',v_SupportType);
      ELSE
         SET v_WhereWorkstationType = CONCAT('SQLWAYS_EVAL# IN (',v_SupportType,')');
      end if;
   end if;

-- 不支持的工作站类型
   SET v_WhereNoWorkstationType = '  ';
   IF IFNULL(v_NoSupportType,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_NoSupportType);
      IF v_Index = 0 then
         SET v_WhereNoWorkstationType = CONCAT('SQLWAYS_EVAL# <> ',v_NoSupportType);
      ELSE
         SET v_WhereNoWorkstationType = CONCAT('SQLWAYS_EVAL# NOT IN (',v_NoSupportType,')');
      end if;
   end if;


-- 需要结束告警
   SET SWV_ExecDyn = CONCAT('INSERT INTO tt_TempWorkStation(WorkStationId)
   SELECT ws.WorkStationId
   FROM TBL_WorkStation ws
   WHERE TIMESTAMPDIFF(SECOND,IFNULL(ws.UpdateTime,''',v_SCurrentTime,'''),''',v_SCurrentTime,''') <= ',v_SExpired,' AND ws.IsUsed = 1');
   SET @SWV_Stmt = SWV_ExecDyn;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;

-- 更新为在线状态
   UPDATE TBL_WorkStation ws
   INNER JOIN tt_TempWorkStation ts ON ws.WorkStationId = ts.WorkStationId
   SET ws.ConnectState = 1;

-- 结束告警
   select   Min(Idx), Max(Idx) INTO v_MinIndex,v_MaxIndex FROM tt_TempWorkStation;
   SWL_Label16:
   WHILE(v_MinIndex <= v_MaxIndex) DO
      select   WorkStationId INTO v_TmpWorkStationId FROM tt_TempWorkStation WHERE Idx = v_MinIndex;
      select   StationId, EquipmentId, EventId, EventConditionId, BaseTypeId, Meanings INTO v_TmpStationId,v_TmpEquipmentId,v_TmpEventId,v_TmpEventConditionId,v_TmpBaseTypeId,
      v_TmpMeanings FROM tt_TempEvent WHERE WorkStationId = v_TmpWorkStationId   LIMIT 1;
      IF v_TmpStationId IS NULL then

         SET v_MinIndex = v_MinIndex+1;
         ITERATE SWL_Label16;
      end if;

-- 是否已经存在
      select   SequenceId, StartTime INTO v_TmpSequenceId,v_TmpStartTime FROM TBL_ActiveEvent WHERE EventId = v_TmpEventId AND StationId = v_TmpStationId
      AND EquipmentId = v_TmpEquipmentId AND EventConditionId = v_TmpEventConditionId
      AND EndTime IS NULL;
      IF v_TmpSequenceId IS NOT NULL AND v_TmpStartTime IS NOT NULL then

         CALL PNL_SaveEventResponse(v_TmpStationId,v_TmpEquipmentId,v_TmpEventId,v_TmpEventConditionId,v_TmpSequenceId,
         v_TmpStartTime,v_CurrentTime,0,v_TmpMeanings,1,v_TmpBaseTypeId);
      end if;
      SET v_MinIndex = v_MinIndex+1;
   END WHILE;


-- 清除旧数据
   TRUNCATE TABLE tt_TempWorkStation;

-- 需要产生告警
   SET SWV_ExecDyn = CONCAT('INSERT INTO tt_TempWorkStation(WorkStationId)
   SELECT ws.WorkStationId
   FROM TBL_WorkStation ws
   WHERE TIMESTAMPDIFF(SECOND,IFNULL(ws.UpdateTime,''',v_SCurrentTime,'''),''',v_SCurrentTime,''') > ',v_SExpired,' AND ws.IsUsed = 1');
   SET @SWV_Stmt = SWV_ExecDyn;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;

-- 更新为离线状态
   UPDATE TBL_WorkStation ws
   INNER JOIN tt_TempWorkStation ts ON ws.WorkStationId = ts.WorkStationId
   SET ws.ConnectState = 0;

-- 发送告警
   select   Min(Idx), Max(Idx) INTO v_MinIndex,v_MaxIndex FROM tt_TempWorkStation;
   SET @SWV_Error = 0;
   SWL_Label17:
   WHILE(v_MinIndex <= v_MaxIndex) DO
      select   WorkStationId INTO v_TmpWorkStationId FROM tt_TempWorkStation WHERE Idx = v_MinIndex;
      select   StationId, EquipmentId, EventId, EventConditionId, BaseTypeId, Meanings INTO v_TmpStationId,v_TmpEquipmentId,v_TmpEventId,v_TmpEventConditionId,v_TmpBaseTypeId,
      v_TmpMeanings FROM tt_TempEvent WHERE WorkStationId = v_TmpWorkStationId   LIMIT 1;
      IF v_TmpStationId IS NULL then

         SET v_MinIndex = v_MinIndex+1;
         ITERATE SWL_Label17;
      end if;

-- 是否已经存在
      select   COUNT(*) INTO v_Total FROM TSL_ActiveEvent WHERE EventId = v_TmpEventId AND StationId = v_TmpStationId
      AND EquipmentId = v_TmpEquipmentId AND EventConditionId = v_TmpEventConditionId
      AND EndTime IS NULL;
      IF v_Total = 0 then

         SET v_TmpSequenceId = UUID();
         CALL PNL_SaveEventResponse(v_TmpStationId,v_TmpEquipmentId,v_TmpEventId,v_TmpEventConditionId,v_TmpSequenceId,
         v_CurrentTime,NULL,0,v_TmpMeanings,0,v_TmpBaseTypeId);
      end if;
      SET v_MinIndex = v_MinIndex+1;
   END WHILE;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;     

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_MUDiagnosesEvent]...';




DROP PROCEDURE IF EXISTS PBL_MUDiagnosesEvent;


CREATE PROCEDURE PBL_MUDiagnosesEvent(INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_CurrentTime DATETIME;
   DECLARE v_ReturnValue INT;
   DECLARE v_MinIndex INT;
   DECLARE v_MaxIndex INT;
   DECLARE v_Total INT;
   DECLARE v_TmpWorkStationId INT;
   DECLARE v_TmpMonitorUnitId INT;
   DECLARE v_TmpStationId INT;
   DECLARE v_TmpEquipmentId INT;
   DECLARE v_TmpEventId INT;
   DECLARE v_TmpEventConditionId INT;
   DECLARE v_TmpBaseTypeId NUMERIC(10,0);
   DECLARE v_TmpMeanings NATIONAL VARCHAR(255);
   DECLARE v_TmpEventValue FLOAT;
   DECLARE v_TmpSequenceId NATIONAL VARCHAR(128);
   DECLARE v_TmpStartTime DATETIME;
   DECLARE v_DataServerId INT; 
   DECLARE v_StartTime DATETIME; 
   DECLARE v_StartTimeEvent DATETIME;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- MU
-- SQLWAYS_EVAL# 不能产生
-- 2:挂在RMU下的MU
-- SQLWAYS_EVAL# 不产生告警，只产生RMU告警
-- 3
-- SQLWAYS_EVAL# 0则生成自诊断告警
-- SQLWAYS_EVAL# 1否则结束自诊断告警

--  返回结果
-- -1 不可知错误
--  0 成功
--  1 配置不存在
--  2 RMU有告警
--  3 DS离线

-- DS是否在线
   select   COUNT(*) INTO v_Total FROM TBL_WorkStation WHERE WorkStationType = 2 AND ConnectState = 1;
   IF v_Total = 0 then

      SET SWP_Ret_Value = 3;
      LEAVE SWL_return;
   end if;

/*SQLWAYS_EVAL# ************************
修改DS重启导致MU大量中断告警的问题
****************************************/  

   SET v_StartTime = TIMESTAMPADD(SECOND,-121,CURRENT_TIMESTAMP);
   DROP TEMPORARY TABLE IF EXISTS tt_DataServer;
   CREATE TEMPORARY TABLE tt_DataServer
   (
      Idx INT   AUTO_INCREMENT PRIMARY KEY,
      DataServerId INT,
      StartTime DATETIME
   );
   INSERT INTO tt_DataServer(DataServerId,StartTime)
   SELECT WorkStationId DataServerId , v_StartTime StartTime
   FROM TBL_WorkStation WHERE WorkStationType = 2;
-- SQLWAYS_EVAL# e(),@StartTime
   select   Min(Idx), Max(Idx) INTO v_MinIndex,v_MaxIndex FROM tt_DataServer;
   WHILE(v_MinIndex <= v_MaxIndex) DO
      select   DataServerId, StartTime INTO v_DataServerId,v_StartTime FROM tt_DataServer WHERE Idx = v_MinIndex;
      select   EndTime INTO v_StartTimeEvent FROM TBL_ActiveEvent WHERE EventId = v_DataServerId AND StartTime =(SELECT max(StartTime) FROM TBL_ActiveEvent WHERE EventId = v_DataServerId);
-- SQLWAYS_EVAL# TimeEvent
      IF v_StartTimeEvent IS NULL then

         select   EndTime INTO v_StartTimeEvent FROM TBL_HistoryEvent WHERE EventId = v_DataServerId AND StartTime =(SELECT max(StartTime) FROM TBL_HistoryEvent WHERE EventId = v_DataServerId);
      end if; 
-- SQLWAYS_EVAL# TimeEvent
      IF ((v_StartTimeEvent IS NOT  NULL) AND (v_StartTimeEvent > v_StartTime)) then

         UPDATE tt_DataServer SET StartTime = v_StartTimeEvent WHERE Idx = v_MinIndex;
      end if;
      SET v_MinIndex = v_MinIndex+1;
   END WHILE; 		
-- SQLWAYS_EVAL# #DataServer
-- 当前时间
   SET v_CurrentTime = CURRENT_TIMESTAMP;	

   SET v_ReturnValue = 0;

-- 工作站告警信息
   DROP TEMPORARY TABLE IF EXISTS tt_WSConfigEvent;
   CREATE TEMPORARY TABLE tt_WSConfigEvent
   (
      WorkStationId INT,
      StationId INT,
      EquipmentId INT,
      EventId INT,
      EventConditionId INT,
      BaseTypeId NUMERIC(10,0),
      Meanings NATIONAL VARCHAR(255)
   );
-- 赋值
   INSERT INTO tt_WSConfigEvent(WorkStationId,StationId,EquipmentId,EventId,EventConditionId,BaseTypeId,Meanings)
   SELECT DISTINCT ws.WorkStationId, ee.StationId, ee.EquipmentId, et.EventId, ec.EventConditionId,ec.BaseTypeId,ec.Meanings
   FROM TBL_WorkStation ws
   INNER JOIN TBL_Event et ON ws.WorkStationId = et.EventId
   INNER JOIN TBL_EventCondition ec ON et.EventId = ec.EventId AND et.EquipmentTemplateId = ec.EquipmentTemplateId
   INNER JOIN TBL_Equipment ee ON et.EquipmentTemplateId = ee.EquipmentTemplateId
   WHERE ws.WorkStationType = 8; 

-- RMU自诊断告警信息
   DROP TEMPORARY TABLE IF EXISTS tt_WorkstationEvent;
   CREATE TEMPORARY TABLE tt_WorkstationEvent
   (
      WorkStationId INT,
      StationId INT,
      EquipmentId INT,
      EventId INT,
      EventConditionId INT,
      BaseTypeId NUMERIC(10,0),
      Meanings NATIONAL VARCHAR(255)
   );

-- 为RMU自诊断告警赋值
   INSERT INTO tt_WorkstationEvent(WorkStationId,StationId,EquipmentId,EventId,EventConditionId,BaseTypeId,Meanings)
   SELECT DISTINCT ws.WorkStationId,  ws.StationId,  ws.EquipmentId,  ws.EventId,  ws.EventConditionId, ws.BaseTypeId, ws.Meanings
   FROM tt_WSConfigEvent ws
   INNER JOIN TBL_ActiveEvent ae ON ws.StationId = ae.StationId AND  ws.EquipmentId = ae.EquipmentId AND  ws.EventId = ae.EventId AND ws.EventConditionId = ae.EventConditionId
   WHERE ae.EndTime IS NULL; 

-- MU告警信息
   DROP TEMPORARY TABLE IF EXISTS tt_TempEvent;
   CREATE TEMPORARY TABLE tt_TempEvent
   (
      StationId INT,
      EquipmentId INT,
      MonitorUnitId INT,
      EventId INT,
      EventConditionId INT,
      BaseTypeId NUMERIC(10,0),
      Meanings NATIONAL VARCHAR(255)
   );
-- SQLWAYS_EVAL# 状态事件
   INSERT INTO tt_TempEvent(StationId,EquipmentId,MonitorUnitId,EventId,EventConditionId,BaseTypeId,Meanings)
   SELECT et.StationId,et.EquipmentId,mu.MonitorUnitId,ee.EventId,ec.EventConditionId,ec.BaseTypeId,ec.Meanings
   FROM TBL_Event ee
   INNER JOIN TBL_EventCondition ec ON ee.EventId = ec.EventId AND ee.EquipmentTemplateId = ec.EquipmentTemplateId
   INNER JOIN TBL_Equipment et ON ee.EquipmentTemplateId = et.EquipmentTemplateId
   INNER JOIN TSL_MonitorUnit mu ON et.StationId = mu.StationId AND et.MonitorUnitId = mu.MonitorUnitId
   WHERE et.EquipmentCategory = 99 AND ee.EventCategory = 7;

-- 临时MU
   DROP TEMPORARY TABLE IF EXISTS tt_TempMU;
   CREATE TEMPORARY TABLE tt_TempMU
   (
      Idx INT   AUTO_INCREMENT PRIMARY KEY,
      MonitorUnitId INT,
      WorkStationId INT
   );

-- 需要结束告警
   INSERT INTO tt_TempMU(MonitorUnitId, WorkStationId)
   SELECT mu.MonitorUnitId, mu.WorkStationId
   FROM TSL_MonitorUnit mu
   WHERE mu.ConnectState = 1;

-- 结束告警
   select   Min(Idx), Max(Idx) INTO v_MinIndex,v_MaxIndex FROM tt_TempMU;
   SWL_Label19:
   WHILE(v_MinIndex <= v_MaxIndex) DO
      select   MonitorUnitId INTO v_TmpMonitorUnitId FROM tt_TempMU WHERE Idx = v_MinIndex;
      select   StationId, EquipmentId, EventId, EventConditionId, BaseTypeId, Meanings INTO v_TmpStationId,v_TmpEquipmentId,v_TmpEventId,v_TmpEventConditionId,v_TmpBaseTypeId,
      v_TmpMeanings FROM tt_TempEvent WHERE MonitorUnitId = v_TmpMonitorUnitId   LIMIT 1;
      IF v_TmpStationId IS NULL then

         SET v_MinIndex = v_MinIndex+1;
         ITERATE SWL_Label19;
      end if;

-- 是否已经存在
      select   SequenceId, StartTime INTO v_TmpSequenceId,v_TmpStartTime FROM TBL_ActiveEvent WHERE EventId = v_TmpEventId AND StationId = v_TmpStationId
      AND EquipmentId = v_TmpEquipmentId AND EventConditionId = v_TmpEventConditionId
      AND EndTime IS NULL;
      IF v_TmpSequenceId IS NOT NULL AND v_TmpStartTime IS NOT NULL then

         CALL PNL_SaveEventResponse(v_TmpStationId,v_TmpEquipmentId,v_TmpEventId,v_TmpEventConditionId,v_TmpSequenceId,
         v_TmpStartTime,v_CurrentTime,0,v_TmpMeanings,1,v_TmpBaseTypeId);
      end if;
      SET v_MinIndex = v_MinIndex+1;
   END WHILE;

-- 需要产生告警
-- 清除旧数据
   TRUNCATE TABLE tt_TempMU;
   INSERT INTO tt_TempMU(MonitorUnitId, WorkStationId)
   SELECT mu.MonitorUnitId, mu.WorkStationId
   FROM TSL_MonitorUnit mu
/*SQLWAYS_EVAL# ************************
修改DS重启导致MU大量中断告警的问题
****************************************/  		
   INNER JOIN TSL_RealtimeRouting rr ON rr.MonitorUnitId = mu.MonitorUnitId
   INNER JOIN tt_DataServer ds ON rr.DataServerId = ds.DataServerId AND ds.StartTime < TIMESTAMPADD(MINUTE,-2,CURRENT_TIMESTAMP)
   WHERE mu.ConnectState = 0;

-- SQLWAYS_EVAL# 不在路由表中的局站
   INSERT INTO tt_TempMU(MonitorUnitId, WorkStationId)
   SELECT mu.MonitorUnitId, mu.WorkStationId
   FROM TSL_MonitorUnit mu
   WHERE mu.ConnectState = 0 AND NOT EXISTS(SELECT  1  FROM TSL_RealtimeRouting rr WHERE mu.MonitorUnitId = rr.MonitorUnitId);	

-- SQLWAYS_EVAL# d(mi,-2,getdate())
-- SQLWAYS_EVAL# #TempMU
-- 发送告警
   select   Min(Idx), Max(Idx) INTO v_MinIndex,v_MaxIndex FROM tt_TempMU;
   SET @SWV_Error = 0;
   SWL_Label20:
   WHILE(v_MinIndex <= v_MaxIndex) DO
      SET v_TmpMonitorUnitId = null;
      SET v_TmpWorkStationId = null;
      SET v_TmpStationId = null;
      SET v_TmpEquipmentId = null;
      SET v_TmpEventId = null;
      SET v_TmpEventConditionId = null;
      SET v_TmpBaseTypeId = null;
      SET v_TmpMeanings = null;
      select   MonitorUnitId, WorkStationId INTO v_TmpMonitorUnitId,v_TmpWorkStationId FROM tt_TempMU WHERE Idx = v_MinIndex;
      select   StationId, EquipmentId, EventId, EventConditionId, BaseTypeId, Meanings INTO v_TmpStationId,v_TmpEquipmentId,v_TmpEventId,v_TmpEventConditionId,v_TmpBaseTypeId,
      v_TmpMeanings FROM tt_TempEvent WHERE MonitorUnitId = v_TmpMonitorUnitId   LIMIT 1;
      IF v_TmpStationId IS NULL then

         SET v_MinIndex = v_MinIndex+1;
         ITERATE SWL_Label20;
      end if;

-- RMU告警是否存在
      IF v_TmpWorkStationId IS NOT NULL then

         select   COUNT(*) INTO v_Total FROM tt_WorkstationEvent WHERE WorkStationId = v_TmpWorkStationId;
         IF v_Total > 0 then

            SET v_MinIndex = v_MinIndex+1;
            ITERATE SWL_Label20;
         end if;
      end if;

-- 是否已经存在
      select   COUNT(*) INTO v_Total FROM TSL_ActiveEvent WHERE EventId = v_TmpEventId AND StationId = v_TmpStationId
      AND EquipmentId = v_TmpEquipmentId AND EventConditionId = v_TmpEventConditionId
      AND EndTime IS NULL;
      IF v_Total = 0 then

         SET v_TmpSequenceId = UUID();
         CALL PNL_SaveEventResponse(v_TmpStationId,v_TmpEquipmentId,v_TmpEventId,v_TmpEventConditionId,v_TmpSequenceId,
         v_CurrentTime,NULL,0,v_TmpMeanings,0,v_TmpBaseTypeId);
      end if;
      SET v_MinIndex = v_MinIndex+1;
   END WHILE;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;     

   SET SWP_Ret_Value = 0;
END;




-- SELECT N'SQLWAYS_EVAL# L_SARAlarmQueueAnalysis]...';






DROP PROCEDURE IF EXISTS PBL_SARAlarmQueueAnalysis;

CREATE PROCEDURE PBL_SARAlarmQueueAnalysis(INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_IsProcess INT;
   DECLARE v_Result INT;
   DECLARE v_Total INT;
   DECLARE v_MinIndex INT;
   DECLARE v_MaxIndex INT;
   DECLARE v_CurrentTime DATETIME;
   DECLARE v_PrimaryId INT;			
   DECLARE v_ProcessDelay INT;
   DECLARE v_PrimaryStationId INT;-- 关联的告警(如主告警)
   DECLARE v_PrimaryEquipmentId INT;
   DECLARE v_PrimaryEventId INT;
   DECLARE v_PrimaryEventConditionId INT;
   DECLARE v_PrimaryStartTime DATETIME;
   DECLARE v_PrimaryEndTime DATETIME;	
   DECLARE v_PrimaryStandardId INT;
   DECLARE v_PrimarySequenceId NATIONAL VARCHAR(128);	
   DECLARE v_StationId INT;			-- 局站Id
   DECLARE v_StationCategoryId INT;			-- 局站类型Id
   DECLARE v_EquipmentId INT;			-- 设备Id
   DECLARE v_EventId INT;			-- 事件Id
   DECLARE v_EventConditionId INT;			-- 产生事件的条件Id
   DECLARE v_SequenceId NATIONAL VARCHAR(128);	-- 事件流水号
   DECLARE v_StartTime DATETIME;		-- 事件开始时间
   DECLARE v_EndTime DATETIME;		-- 事件结束时间
   DECLARE v_Overturn INT;			-- 事件翻转次数
   DECLARE v_Meanings NATIONAL VARCHAR(255);	-- 事件描述
   DECLARE v_EventValue FLOAT; 			-- 触发值
   DECLARE v_BaseTypeId NUMERIC(10,0);			-- 基类ID(可空)
   DECLARE v_StandardId INT;			-- 标准化
   DECLARE v_Tag NATIONAL VARCHAR(255);	-- Tag


-- SQLWAYS_EVAL# ，则将开始次告警从TBL_SARAlarmQueue移动到TBL_ActiveEvent
-- 0  成功

-- 当前时间
   SET v_CurrentTime = CURRENT_TIMESTAMP;

-- 获取结束次告警
   CREATE TEMPORARY TABLE tt_SecondaryRecord 
   (
      Idx INT   AUTO_INCREMENT PRIMARY KEY,
      StationId INT NOT NULL,
      StationCategoryId INT NOT NULL,
      EquipmentId INT NOT NULL,
      EventId INT NOT NULL,
      EventConditionId INT NOT NULL,
      SequenceId NATIONAL VARCHAR(128) NOT NULL,
      StartTime DATETIME NOT NULL,
      EndTime DATETIME,
      Overturn INT,
      Meanings NATIONAL VARCHAR(255),
      EventValue FLOAT,
      BaseTypeId NUMERIC(10,0),
      StandardId INT,
      InsertDateTime DATETIME NOT NULL,-- 数据插入时间
      RelationType INT NOT NULL-- SQLWAYS_EVAL# 转告警4:衍生关系(累计)5:衍生关系(同时)
   );

-- 是否需要处理告警关联
   select   IsProcess INTO v_IsProcess FROM TBL_SARIsProcess;

-- 不需要处理告警关联
   IF (v_IsProcess IS NULL) OR (v_IsProcess < 1) then

-- SQLWAYS_EVAL# armQueue
  INSERT INTO tt_SecondaryRecord(StationId					,
StationCategoryId			,
EquipmentId       		,
EventId					,
EventConditionId  		,
SequenceId				,
StartTime         		,
EndTime					,
Overturn					,
Meanings					,
EventValue        		,
BaseTypeId				,
StandardId       			,
InsertDateTime			,
RelationType)
      SELECT
      StationId					,
StationCategoryId			,
EquipmentId       		,
EventId					,
EventConditionId  		,
SequenceId				,
StartTime         		,
EndTime					,
Overturn					,
Meanings					,
EventValue        		,
BaseTypeId				,
StandardId       			,
InsertDateTime			,
-1
      FROM TBL_SARAlarmQueue
      ORDER BY StartTime;
      select   Min(Idx), Max(Idx) INTO v_MinIndex,v_MaxIndex FROM tt_SecondaryRecord;
      WHILE(v_MinIndex <= v_MaxIndex) DO
-- 获取次告警
         select   StationId, StationCategoryId, EquipmentId, EventId, EventConditionId, SequenceId, StartTime, EndTime, Overturn, Meanings, EventValue, BaseTypeId, StandardId INTO v_StationId,v_StationCategoryId,v_EquipmentId,v_EventId,v_EventConditionId,
         v_SequenceId,v_StartTime,v_EndTime,v_Overturn,v_Meanings,v_EventValue,
         v_BaseTypeId,v_StandardId FROM tt_SecondaryRecord WHERE Idx = v_MinIndex;
         CALL PNL_SaveAftEventResponse(v_StationId,v_EquipmentId,v_EventId,v_EventConditionId,v_SequenceId,v_StartTime,
         v_EndTime,v_Overturn,v_Meanings,v_EventValue,v_BaseTypeId);
         DELETE FROM TBL_SARAlarmQueue WHERE SequenceId = v_SequenceId;
      END WHILE;
   end if;

-- 清除临时表
   DROP TEMPORARY TABLE IF EXISTS tt_SecondaryRecord;

-- 成功
   SET SWP_Ret_Value = 0;
END;



-- SELECT N'SQLWAYS_EVAL# L_SARPriSecAnalysis]...';


DROP PROCEDURE IF EXISTS PBL_SARPriSecAnalysis;


CREATE PROCEDURE PBL_SARPriSecAnalysis(INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_IsProcess INT;
   DECLARE v_Result INT;
   DECLARE v_Total INT;
   DECLARE v_MinIndex INT;
   DECLARE v_MaxIndex INT;
   DECLARE v_CurrentTime DATETIME;
   DECLARE v_PrimaryId INT;			
   DECLARE v_ProcessDelay INT;
   DECLARE v_PrimaryStationId INT;-- 关联的告警(如主告警)
   DECLARE v_PrimaryEquipmentId INT;
   DECLARE v_PrimaryEventId INT;
   DECLARE v_PrimaryEventConditionId INT;
   DECLARE v_PrimaryStartTime DATETIME;
   DECLARE v_PrimaryEndTime DATETIME;	
   DECLARE v_PrimaryStandardId INT;
   DECLARE v_StationId INT;			-- 局站Id
   DECLARE v_StationCategoryId INT;			-- 局站类型Id
   DECLARE v_EquipmentId INT;			-- 设备Id
   DECLARE v_EventId INT;			-- 事件Id
   DECLARE v_EventConditionId INT;			-- 产生事件的条件Id
   DECLARE v_SequenceId NATIONAL VARCHAR(128);	-- 事件流水号
   DECLARE v_StartTime DATETIME;		-- 事件开始时间
   DECLARE v_EndTime DATETIME;		-- 事件结束时间
   DECLARE v_Overturn INT;			-- 事件翻转次数
   DECLARE v_Meanings NATIONAL VARCHAR(255);	-- 事件描述
   DECLARE v_EventValue FLOAT; 			-- 触发值
   DECLARE v_BaseTypeId NUMERIC(10,0);	-- 基类ID
   DECLARE v_Tag NATIONAL VARCHAR(255);	-- Tag
   DECLARE v_FilterId INT;

-- SQLWAYS_EVAL# ARAlarmActiveRecord并在TBL_SARSecondaryAlarmByFilter中插入数据
-- SQLWAYS_EVAL# ARAlarmActiveRecord移除
-- SQLWAYS_EVAL# ，则将开始次告警从TBL_SARAlarmActiveRecord移动到TBL_ActiveEvent
-- 0  成功

-- 当前时间
   SET v_CurrentTime = CURRENT_TIMESTAMP;

-- 获取结束次告警
   CREATE TEMPORARY TABLE tt_SecondaryRecord 
   (
      Idx INT   AUTO_INCREMENT PRIMARY KEY,
      StationId INT NOT NULL,
      StationCategoryId INT NOT NULL,
      EquipmentId INT NOT NULL,
      EventId INT NOT NULL,
      EventConditionId INT NOT NULL,
      SequenceId NATIONAL VARCHAR(128) NOT NULL,
      StartTime DATETIME NOT NULL,
      EndTime DATETIME,
      Overturn INT,
      Meanings NATIONAL VARCHAR(255),
      EventValue FLOAT,
      BaseTypeId NUMERIC(10,0),
      StandardId INT,
      InsertDateTime DATETIME NOT NULL,-- 数据插入时间
      RelationType INT NOT NULL-- SQLWAYS_EVAL# 转告警4:衍生关系(累计)5:衍生关系(同时)
   );
   INSERT INTO tt_SecondaryRecord(StationId					,
StationCategoryId			,
EquipmentId       		,
EventId					,
EventConditionId  		,
SequenceId				,
StartTime         		,
EndTime					,
Overturn					,
Meanings					,
EventValue        		,
BaseTypeId				,
InsertDateTime			,
RelationType)
   SELECT
   StationId					,
StationCategoryId			,
EquipmentId       		,
EventId					,
EventConditionId  		,
SequenceId				,
StartTime         		,
EndTime					,
Overturn					,
Meanings					,
EventValue        		,
BaseTypeId				,
InsertDateTime			,
RelationType
   FROM TBL_SARAlarmActiveRecord
   WHERE EndTime IS NOT NULL AND RelationType in(2,6)
   ORDER BY StartTime;

-- 记录次告警
   select   Min(Idx), Max(Idx) INTO v_MinIndex,v_MaxIndex FROM tt_SecondaryRecord;
   WHILE(v_MinIndex <= v_MaxIndex) DO
-- 获取次告警
      select   StationId, StationCategoryId, EquipmentId, EventId, EventConditionId, SequenceId, StartTime, EndTime, Overturn, Meanings, EventValue, BaseTypeId INTO v_StationId,v_StationCategoryId,v_EquipmentId,v_EventId,v_EventConditionId,
      v_SequenceId,v_StartTime,v_EndTime,v_Overturn,v_Meanings,v_EventValue,
      v_BaseTypeId FROM tt_SecondaryRecord WHERE Idx = v_MinIndex;	


-- 查找对应主告警
      select   FilterId INTO v_FilterId FROM TBL_SecondaryAlarm WHERE SecondaryBaseTypeId = v_BaseTypeId;
      select   ProcessDelay INTO v_ProcessDelay FROM TBL_PrimarySecondMapRule WHERE FilterId = v_FilterId;


-- 保存次关系记录
      IF NOT EXISTS(SELECT 1 FROM TBL_PrimaryAlarm a WHERE NOT EXISTS(SELECT '1' FROM TBL_SARAlarmActiveRecord b
         WHERE (a.PrimaryBaseTypeId = BaseTypeId AND a.PrimaryStationId = -1)
         OR (a.PrimaryStationId = StationId AND a.PrimaryEquipmentId = EquipmentId AND a.PrimaryBaseTypeId = BaseTypeId))
      AND a.FilterId = v_FilterId) then

  INSERT INTO TBL_SARSecondaryAlarmByFilter
         SELECT v_SequenceId, v_StationId,v_EquipmentId,v_EventId, v_EventConditionId, v_StartTime, SequenceId,v_CurrentTime
         FROM TBL_SARAlarmActiveRecord
         WHERE RelationType = 1 AND BaseTypeId IN(SELECT PrimaryBaseTypeId FROM TBL_PrimaryAlarm WHERE FilterId = v_FilterId)
         AND ABS(TIMESTAMPDIFF(SECOND,v_StartTime,StartTime)) <= v_ProcessDelay;
      end if; 

-- 保存历史告警
-- SQLWAYS_EVAL# PBL_SARSaveHistoryEvent @StationId,@EquipmentId,@EventId,@EventConditionId,@SequenceId,@StartTime,@EndTime,@Overturn,@Meanings,@EventValue,@BaseTypeId
-- IF @Result = 0
-- BEGIN
      DELETE FROM TBL_SARAlarmActiveRecord WHERE SequenceId = v_SequenceId;
-- END

      SET v_MinIndex = v_MinIndex+1;
   END WHILE;

-- 结束主告警
   DELETE FROM TBL_SARAlarmActiveRecord
   WHERE EndTime IS NOT NULL
   AND TIMESTAMPDIFF(SECOND,EndTime,CURRENT_TIMESTAMP) > 360
   AND RelationType = 1;



-- 是否需要处理告警关联
   select   IsProcess INTO v_IsProcess FROM TBL_SARIsProcess;

-- 不需要处理告警关联
   IF (v_IsProcess IS NULL) OR (v_IsProcess < 1) then

-- 获取开始次告警
      TRUNCATE TABLE tt_SecondaryRecord;
      INSERT INTO tt_SecondaryRecord(StationId					,
StationCategoryId			,
EquipmentId       		,
EventId					,
EventConditionId  		,
SequenceId				,
StartTime         		,
EndTime					,
Overturn					,
Meanings					,
EventValue        		,
BaseTypeId				,
StandardId       			,
InsertDateTime			,
RelationType)
      SELECT
      StationId					,
StationCategoryId			,
EquipmentId       		,
EventId					,
EventConditionId  		,
SequenceId				,
StartTime         		,
EndTime					,
Overturn					,
Meanings					,
EventValue        		,
BaseTypeId				,
StandardId       			,
InsertDateTime			,
RelationType
      FROM TBL_SARAlarmActiveRecord
      WHERE EndTime IS NULL AND RelationType = 2
      ORDER BY StartTime;
      select   Min(Idx), Max(Idx) INTO v_MinIndex,v_MaxIndex FROM tt_SecondaryRecord;
      WHILE(v_MinIndex <= v_MaxIndex) DO
-- 获取次告警
         select   StationId, StationCategoryId, EquipmentId, EventId, EventConditionId, SequenceId, StartTime, EndTime, Overturn, Meanings, EventValue, BaseTypeId INTO v_StationId,v_StationCategoryId,v_EquipmentId,v_EventId,v_EventConditionId,
         v_SequenceId,v_StartTime,v_EndTime,v_Overturn,v_Meanings,v_EventValue,
         v_BaseTypeId FROM tt_SecondaryRecord WHERE Idx = v_MinIndex;
         CALL PNL_SaveAftEventResponse(v_StationId,v_EquipmentId,v_EventId,v_EventConditionId,v_SequenceId,v_StartTime,
         v_EndTime,v_Overturn,v_Meanings,v_EventValue,v_BaseTypeId);
         DELETE FROM TBL_SARAlarmActiveRecord WHERE SequenceId = v_SequenceId;
      END WHILE;
   end if;

-- 清除临时表
   DROP TEMPORARY TABLE IF EXISTS tt_SecondaryRecord;

-- 成功
   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_SyncConnectState]...';





DROP PROCEDURE IF EXISTS PNL_SyncConnectState;

CREATE PROCEDURE PNL_SyncConnectState(v_DataServerId		INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
-- SQLWAYS_EVAL# 

-- 返回结果
-- -1 不可知错误
--  0 成功

   DECLARE v_CurrentTime DATETIME;
   DECLARE v_ReturnValue INT;
   DECLARE v_MinIndex INT;
   DECLARE v_MaxIndex INT;
   DECLARE v_MonitorUnitId INT;
   DECLARE v_ConnectState INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 当前时间
   SET v_CurrentTime = CURRENT_TIMESTAMP;	

-- MU临时表
   CREATE TEMPORARY TABLE tt_TempMU
   (
      Idx INT   AUTO_INCREMENT PRIMARY KEY,
      MonitorUnitId INT,
      HostType INT,
      ConnectState INT
   );
   INSERT INTO tt_TempMU(MonitorUnitId, HostType, ConnectState)
   SELECT mu.MonitorUnitId, 0, mu.ConnectState
   FROM TSL_MonitorUnit mu
   INNER JOIN TSL_RealtimeRouting rr ON mu.MonitorUnitId = rr.MonitorUnitId
   WHERE rr.DataServerId = v_DataServerId;

-- 循环计算状态
   select   Min(Idx), Max(Idx) INTO v_MinIndex,v_MaxIndex FROM tt_TempMU;
   WHILE(v_MinIndex <= v_MaxIndex) DO
      select   MonitorUnitId, ConnectState INTO v_MonitorUnitId,v_ConnectState FROM tt_TempMU WHERE Idx = v_MinIndex;
      IF v_ConnectState <> 2 then

         CALL PNL_UptMUConnectState(v_MonitorUnitId,0,v_ConnectState);
      end if;
      SET v_MinIndex = v_MinIndex+1;
   END WHILE;

   SET @SWV_Error = 0;
   DROP TEMPORARY TABLE IF EXISTS tt_TempMU;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;                                                                       

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_UptHostConnectState]...';





DROP PROCEDURE IF EXISTS PNL_UptHostConnectState;

CREATE PROCEDURE PNL_UptHostConnectState(v_HostId			   INT,						-- 监控单元ID
v_HostType		   INT,						-- SQLWAYS_EVAL# DS(1),AS(2),DSC(3),DSCBak(4),RAS(5),Watchdog(6),CFG(7),RMU(10)
v_ConnectState       INT,INOUT SWP_Ret_Value INT)						-- 连接状态
   SWL_return:
BEGIN
-- 处理：
-- 1 修改主机状态
-- SQLWAYS_EVAL# 的存储过程

-- 返回结果
-- -2 该主机类型不处理
-- -1 不可知错误
--  0 成功
--  1 参数为0或空
--  2 配置不存在或超过一个

   DECLARE v_Return INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 参数检查
   SET @SWV_Error = 0;
   IF v_HostId IS NULL OR v_HostType IS NULL OR v_ConnectState IS NULL OR v_HostId = 0 then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

-- 更新主机连接状态
   SET v_Return = 0;
   SET @SWV_Error = 0;
   IF v_HostType = 0 then-- MU

      SET v_Return = PNL_UptMUConnectState(v_HostId,v_HostType,v_ConnectState);
   ELSE
      SET SWP_Ret_Value = -2;
      LEAVE SWL_return;
   end if;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;                                                                       

   SET SWP_Ret_Value = v_Return;
END;

-- SELECT N'SQLWAYS_EVAL# L_MUDiagnosesState]...';





DROP PROCEDURE IF EXISTS PBL_MUDiagnosesState;

CREATE PROCEDURE PBL_MUDiagnosesState(v_Expired			   INT 						-- 过期时间(预设120秒)
)
BEGIN
   DECLARE v_CurrentTime DATETIME;
   DECLARE v_SCurrentTime NATIONAL VARCHAR(128);
   DECLARE v_SExpired NATIONAL VARCHAR(128);
   DECLARE v_ReturnValue INT;
   DECLARE v_MinIndex INT;
   DECLARE v_MaxIndex INT;
   DECLARE v_Total INT;
   DECLARE v_TmpMonitorUnitId INT;
   DECLARE v_TmpStationId INT;
   DECLARE v_TmpEquipmentId INT;
   DECLARE v_TmpEventId INT;
   DECLARE v_TmpEventConditionId INT;
   DECLARE v_TmpBaseTypeId NUMERIC(10,0);
   DECLARE v_TmpMeanings NATIONAL VARCHAR(255);
   DECLARE v_TmpEventValue FLOAT;
   DECLARE v_TmpSequenceId NATIONAL VARCHAR(128);
   DECLARE v_TmpConnectState INT;

-- MU
-- SQLWAYS_EVAL# 大于@Expired则设置状态为ConnectState=0
-- SQLWAYS_EVAL# 小于@Expired则设置状态为ConnectState=1

-- 当前时间
   IF v_Expired is null then
      set v_Expired = 120;
   END IF;
   SET v_CurrentTime = CURRENT_TIMESTAMP;	
   SET v_SCurrentTime = CAST(v_CurrentTime AS CHAR(30));
   SET v_SExpired = CAST(v_Expired AS CHAR(30));

-- MU临时表
   CREATE TEMPORARY TABLE tt_TempMU
   (
      Idx INT   AUTO_INCREMENT PRIMARY KEY,
      MonitorUnitId INT,
      StartTime DATETIME,
      HeartbeatTime DATETIME,
      ConnectState INT    DEFAULT 2
   );

-- 需要设置为离线的MU
   INSERT INTO tt_TempMU(MonitorUnitId,StartTime,HeartbeatTime,ConnectState)
   SELECT MonitorUnitId,StartTime,HeartbeatTime,0
   FROM TSL_MonitorUnit
   WHERE StartTime IS NOT NULL AND ConnectState <> 0
   AND TIMESTAMPDIFF(SECOND,IFNULL(HeartbeatTime,StartTime),v_CurrentTime) > v_Expired;

-- 需要设置为在线的MU
   INSERT INTO tt_TempMU(MonitorUnitId,StartTime,HeartbeatTime,ConnectState)
   SELECT MonitorUnitId,StartTime,HeartbeatTime,1
   FROM TSL_MonitorUnit
   WHERE StartTime IS NOT NULL AND ConnectState <> 1
   AND TIMESTAMPDIFF(SECOND,IFNULL(HeartbeatTime,StartTime),v_CurrentTime) < v_Expired;

-- 设置MU状态
   select   Min(Idx), Max(Idx) INTO v_MinIndex,v_MaxIndex FROM tt_TempMU;
   WHILE(v_MinIndex <= v_MaxIndex) DO
      select   ConnectState, MonitorUnitId INTO v_TmpConnectState,v_TmpMonitorUnitId FROM tt_TempMU WHERE Idx = v_MinIndex;
      IF v_TmpConnectState = 1 OR v_TmpConnectState = 0 then

-- 设置MU状态
         CALL PNL_UptHostConnectState(v_TmpMonitorUnitId,0,v_TmpConnectState);
      end if;
      SET v_MinIndex = v_MinIndex+1;
   END WHILE;

   DROP TEMPORARY TABLE IF EXISTS tt_TempMU;
END;

-- SQLWAYS_EVAL# ---------------------
-- SQLWAYS_EVAL# 界面操作专用)
-- SQLWAYS_EVAL# ---------------------
DROP PROCEDURE IF EXISTS PAM_UpdateMonitorUnitIP;


CREATE PROCEDURE PAM_UpdateMonitorUnitIP(v_MonitorUnitId      INT ,
v_NewIpAddress       VARCHAR(128)
-- SQLWAYS_EVAL#       VARCHAR(128),
-- SQLWAYS_EVAL#       VARCHAR(128)
)
BEGIN

   IF EXISTS(SELECT 'X' FROM TSL_MonitorUnit WHERE MonitorUnitId = v_MonitorUnitId AND IpAddress = v_NewIpAddress) then

      UPDATE TSL_MonitorUnitIpMap
      SET IsConflict = 1
      WHERE MonitorUnitId = v_MonitorUnitId;
   ELSE
      UPDATE TSL_MonitorUnit
      SET IpAddress = v_NewIpAddress
      WHERE MonitorUnitId = v_MonitorUnitId;
      UPDATE TSL_MonitorUnitIpMap
      SET IsSync = 1
      WHERE MonitorUnitId = v_MonitorUnitId;
   end if; 
END; 




DROP PROCEDURE IF EXISTS PBL_ReSendActiveControlBySeq;

CREATE PROCEDURE PBL_ReSendActiveControlBySeq(v_UserId   		INT,
v_SerialNo		INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
-- 返回结果
-- -2 不存在该控制命令
-- -1 不可知错误
--  0 成功
--  1 没有确认控制命令的权限
-- SQLWAYS_EVAL# 的权限

   DECLARE v_Return INT;
   DECLARE v_StationId INT;
   DECLARE v_EquipmentId INT;
   DECLARE v_ControlId INT;
   DECLARE v_StartTime DATETIME;
   DECLARE v_Total INT;
   DECLARE v_ParameterValues NATIONAL VARCHAR(500);
   DECLARE v_Description NATIONAL VARCHAR(255);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 活动控制总数
   select   COUNT(*) INTO v_Total FROM TBL_ActiveControl WHERE SerialNo = v_SerialNo;

-- 重发控制
   SET @SWV_Error = 0;
   IF v_Total > 0 then

      select   StationId, EquipmentId, ControlId, StartTime, ParameterValues, Description INTO v_StationId,v_EquipmentId,v_ControlId,v_StartTime,v_ParameterValues,v_Description FROM TBL_ActiveControl WHERE SerialNo = v_SerialNo;

-- 确认控制
      SET v_Return = PBL_ConfirmActiveControl(v_StationId,v_EquipmentId,v_ControlId,v_UserId,v_SerialNo,v_StartTime);

-- 发送控制
      IF v_Return = 0 then

         SET v_Return = PBL_SaveDistributeControl(v_StationId,-1,v_EquipmentId,v_ControlId,v_UserId,v_ParameterValues,v_Description);
      end if;
   ELSE
      SET v_Return = -2;
   end if;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;    

   SET SWP_Ret_Value = v_Return;
END;


DROP PROCEDURE IF EXISTS PBL_SaveEquipmentMaitain;


CREATE PROCEDURE PBL_SaveEquipmentMaitain(v_StationId INT ,
v_EquipmentId INT ,
v_EquipmentState INT,
v_StartTime	DATETIME ,
v_EndTime	DATETIME ,
v_UserId INT ,
v_Description NATIONAL VARCHAR(255) ,
v_ExtendFiled1 NATIONAL VARCHAR(255) ,INOUT SWP_Ret_Value INT)
BEGIN

   IF NOT EXISTS(SELECT * FROM TBL_EquipmentMaintain WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId) then

  INSERT INTO TBL_EquipmentMaintain(StationId,
EquipmentId,
EquipmentState,
StartTime,
EndTime,
UserId,
Description,
ExtendFiled1)
VALUES(v_StationId,
v_EquipmentId,
v_EquipmentState,
v_StartTime,
v_EndTime,
v_UserId,
v_Description,
v_ExtendFiled1);
   ELSE
      UPDATE TBL_EquipmentMaintain2
      SET EquipmentState = v_EquipmentState,StartTime = v_StartTime,EndTime = v_EndTime,
      UserId = v_UserId,Description = v_Description,ExtendFiled1 = v_ExtendFiled1
      WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId;
   end if;

   SET SWP_Ret_Value = 0;

END;


-- SELECT N'SQLWAYS_EVAL# T_AddDoor]...';





DROP PROCEDURE IF EXISTS PCT_AddDoor;

CREATE PROCEDURE PCT_AddDoor(v_StationId     INT  ,
v_EquipmentId   INT   ,
v_DoorNo    INT ,
v_DoorName   VARCHAR(128),
v_Description   VARCHAR(128) , 
v_Address VARCHAR(128))  
BEGIN
   DECLARE v_SamplerUnitId INT;         
   DECLARE v_DoorControlId INT;         
   DECLARE v_DoorId INT;
   DELETE TBL_DoorCard m
   FROM   TBL_DoorCard m      INNER JOIN TBL_DoorTimeGroup d  ON m.DoorId          = d.DoorId
   AND m.TimeGroupId           = d.TimeGroupId
   INNER JOIN TBL_Door          e  ON d.DoorId          = e.DoorId
   AND e.StationId   = v_StationId
   AND e.EquipmentId = v_EquipmentId;
   DELETE TBL_DoorTimeGroup m
   FROM   TBL_DoorTimeGroup m INNER JOIN TBL_Door d  ON m.DoorId          = d.DoorId
   AND d.StationId   = v_StationId
   AND d.EquipmentId = v_EquipmentId;
-- 采集单元ID
   select   SamplerUnitId INTO v_SamplerUnitId FROM   TBL_Equipment WHERE  StationId      = v_StationId
   AND    EquipmentId    = v_EquipmentId;

-- 门禁类型
   select   cast(a.Expression as SIGNED INTEGER) INTO v_DoorControlId FROM   TBL_Signal a,TBL_Equipment b WHERE  a.EquipmentTemplateId = b.EquipmentTemplateId
   AND    b.StationId    = v_StationId
   AND    b.EquipmentId  = v_EquipmentId
   AND    a.ChannelNo    = 39;

   CALL PBL_GetSystemUniqueIdentity(v_DoorId,'TBL_Door');
   INSERT INTO TBL_Door(DoorId          ,
DoorNo          ,
DoorName        ,
StationId   ,
EquipmentId ,
SamplerUnitId  ,
Category    ,
WorkMode    ,
DoorControlId  ,
Description,
Address,
Password)
VALUES(v_DoorId         ,
v_DoorNo         ,
v_DoorName        ,
v_StationId            ,
v_EquipmentId          ,
v_SamplerUnitId        ,
v_DoorControlId        ,
1                     ,
v_DoorControlId        ,
v_Description,
v_Address,
'00000');
END;


-- SELECT N'SQLWAYS_EVAL# T_GetAllCardAuthInfo]...';





DROP PROCEDURE IF EXISTS PCT_GetAllCardAuthInfo;

CREATE PROCEDURE PCT_GetAllCardAuthInfo()
BEGIN
   SELECT st.StationId          StationId,
st.StationName        StationName,
md.DoorId       DoorId,
md.DoorNo       DoorNo,
md.DoorName     DoorName,
md.Password,
md.EquipmentId,
tg.TimeGroupId        TimeGroupId,
mg.TimeGroupType -10 TimeGroupNo,
tg.TimeGroupName      TimeGroupName,
mc.CardId       CardId,
mc.CardCode     CardCode,
mc.CardName     CardName,
em.EmployeeName       CardClerk,
mdc.StartTime         StartTime,
TIMESTAMPADD(second,-1,TIMESTAMPADD(day,1,mdc.EndTime))           EndTime
   FROM   TBL_Station st
   INNER  JOIN TBL_Door md                 ON md.StationId = st.StationId
   INNER  JOIN TBL_DoorTimeGroup mg        ON mg.DoorId        = md.DoorId
   INNER  JOIN TBL_TimeGroup tg                  ON mg.TimeGroupId         = tg.TimeGroupId
   INNER  JOIN TBL_DoorCard mdc            ON mg.DoorId        = mdc.DoorId AND mg.TimeGroupId = mdc.TimeGroupId
   INNER  JOIN TBL_Card mc                 ON mc.CardId        = mdc.CardId
   INNER  JOIN TBL_Employee em                   ON em.EmployeeId          = mc.UserId
   WHERE 1 = 1;
END;


DROP PROCEDURE IF EXISTS PCT_GetDoorTimeGroup1;
CREATE PROCEDURE PCT_GetDoorTimeGroup1(INOUT SWP_Ret_Value INT)
BEGIN
   SELECT st.StationId    StationId   ,
st.StationName  StationName ,
md.DoorId DoorId,
md.DoorName DoorName,
tg.TimeGroupId,
mg.TimeGroupType -10 TimeGroupNo,
tg.TimeGroupName TimeGroupName,
sp.Week Week,
SUBSTRING(sp.TimeSpanChar,1,11)  TimeSpanChar1,
SUBSTRING(sp.TimeSpanChar,12,11) TimeSpanChar2,
SUBSTRING(sp.TimeSpanChar,23,11) TimeSpanChar3
   FROM   TBL_Station st
   INNER JOIN TBL_Door md ON md.StationId = st.StationId
   INNER JOIN TBL_DoorTimeGroup  mg ON mg.DoorId = md.DoorId
   INNER JOIN TBL_TimeGroup tg ON mg.TimeGroupId = tg.TimeGroupId
   INNER JOIN TBL_TimeGroupSpan sp ON tg.TimeGroupId = sp.TimeGroupId
   ORDER BY st.StationName,md.DoorName;
   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# .[PBL_ClearChaosActiveEvent]...';

DROP PROCEDURE IF EXISTS PBL_ClearChaosActiveEvent;

CREATE PROCEDURE PBL_ClearChaosActiveEvent(INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_Index INT;
   DECLARE v_RoleId INT;
   DECLARE v_PrivilegeId INT;
   DECLARE v_Admin INT;
   DECLARE v_MinIndex INT;
   DECLARE v_MaxIndex INT;
   DECLARE v_TempSequenceId NATIONAL VARCHAR(128); 
   DECLARE v_TempEndTime DATETIME;
   DECLARE v_WhereEquipmentCategory NATIONAL VARCHAR(4000);  
   DECLARE v_WhereEquipmentBaseType NATIONAL VARCHAR(4000);  
   DECLARE v_WhereEquipmentId1 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereEquipmentId2 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereEquipmentId3 NATIONAL VARCHAR(4000);  

-- SQLWAYS_EVAL# 动告警
-- SQLWAYS_EVAL# ent中数据直接强制确认
-- SQLWAYS_EVAL# ent中数据直接删除


-- 需要处理的活动告警
   CREATE TEMPORARY TABLE tt_TempEvent
   (
      Idx INT   AUTO_INCREMENT PRIMARY KEY,
      SequenceId NATIONAL VARCHAR(128),
      ResetSequenceId NATIONAL VARCHAR(128),
      EndTime DATETIME,
      ProcessType INT
   );

-- 需要强制结束的活动告警
   INSERT INTO tt_TempEvent(SequenceId,
ResetSequenceId,
EndTime,
ProcessType)
   SELECT
   ae.SequenceId,
'' AS ResetSequenceId,
ae.EndTime,
1 AS ProcessType
   FROM TBL_ActiveEvent ae
   LEFT JOIN TBL_Equipment et ON ae.StationId = et.StationId AND ae.EquipmentId = et.EquipmentId
   WHERE et.StationId IS NULL OR et.EquipmentId IS NULL; 

-- 设置个数
   select   Min(Idx), Max(Idx) INTO v_MinIndex,v_MaxIndex FROM tt_TempEvent;

-- 强制结束
   WHILE(v_MinIndex <= v_MaxIndex) DO
-- 获取序列号
      select   CONCAT('''',SequenceId,''''), EndTime INTO v_TempSequenceId,v_TempEndTime FROM tt_TempEvent WHERE Idx = v_MinIndex;
      IF v_TempEndTime IS NULL then

-- 强制结束
         CALL PAM_CancelEvent(v_TempSequenceId,-2,'配置已经失效，强制结束');
      ELSE
-- 确认告警
         CALL PAM_ConfirmedEvent(v_TempSequenceId,-2);
      end if;
      SET v_MinIndex = v_MinIndex+1;
   END WHILE;

-- 需要直接删除的数据
   INSERT INTO tt_TempEvent(SequenceId,
ResetSequenceId,
EndTime,
ProcessType)
   SELECT
   ae.SequenceId,
ae.ResetSequenceId,
ae.EndTime,
0 AS ProcessType
   FROM TSL_ActiveEvent ae
   LEFT JOIN TBL_Equipment et ON ae.StationId = et.StationId AND ae.EquipmentId = et.EquipmentId
   WHERE et.StationId IS NULL OR et.EquipmentId IS NULL; 

-- 直接删除
   DELETE TSL_ActiveEvent se
   FROM TSL_ActiveEvent se
   INNER JOIN tt_TempEvent te ON se.SequenceId = te.SequenceId AND te.ProcessType = 0;

-- 返回数据
   SELECT
   SequenceId,
ResetSequenceId,
ProcessType
   FROM tt_TempEvent;

-- 清除临时表
   DROP TEMPORARY TABLE IF EXISTS tt_TempEvent;

   SET SWP_Ret_Value = 0;
END;


/*SQLWAYS_EVAL# added by DingShuhua in 20141027
*************************************************************************/
-- SELECT N'SQLWAYS_EVAL# L_BackupHistoryEventMask]...';

DROP PROCEDURE IF EXISTS PBL_BackupHistoryEventMask;

CREATE PROCEDURE PBL_BackupHistoryEventMask(v_StartTime   DATETIME           ,
v_EndTime     DATETIME           ,
INOUT v_RowCount    INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL# 结束时间获取历史事件数据暂存到HistroyEventMaskMid中,同时返回备份记录数.
*/
   DECLARE v_ErrorCode INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 初始化暂存表
   SET @SWV_Error = 0;
   TRUNCATE TABLE TBL_HistoryEventMaskMid;
   START TRANSACTION;

-- 初始化
   SET @SWV_Error = 0;
   INSERT INTO  TBL_HistoryEventMaskMid(SequenceId,
StationId,
EquipmentId,
EventId,
EventConditionId,
EventValue,
Meanings,
BaseTypeId,
StartTime,
EndTime)
   SELECT
   SequenceId,
StationId,
EquipmentId,
EventId,
EventConditionId,
EventValue,
Meanings,
BaseTypeId,
StartTime,
EndTime
   FROM  TBL_HistoryEventMask
   WHERE StartTime     >=  v_StartTime
   AND   StartTime     <   v_EndTime;

-- 记录备份记录数
   SET v_RowCount = ROW_COUNT();
   SET v_ErrorCode = @SWV_Error;

   IF v_ErrorCode <> 0 then

      SELECT  1;
      ROLLBACK;
      LEAVE SWL_return;
   end if;

   COMMIT;
   SELECT 0;
   LEAVE SWL_return;
END;


-- SELECT N'SQLWAYS_EVAL# L_BackupLoginInfo]...';

DROP PROCEDURE IF EXISTS PBL_BackupLoginInfo;

CREATE PROCEDURE PBL_BackupLoginInfo(v_StartTime   DATETIME           ,
v_EndTime     DATETIME           ,
INOUT v_RowCount    INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL# 结束时间获取历史事件数据暂存到LoginInfoMid中,同时返回备份记录数.
*/
   DECLARE v_ErrorCode INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 初始化暂存表
   SET @SWV_Error = 0;
   TRUNCATE TABLE TBL_LoginInfoMid;
   START TRANSACTION;

-- 初始化
   SET @SWV_Error = 0;
   INSERT INTO  TBL_LoginInfoMid(UserId,
LoginType,
LoginTime,
IPAddress)
   SELECT
   UserId,
LoginType,
LoginTime,
IPAddress
   FROM  TBL_LoginInfo
   WHERE LoginTime     >=  v_StartTime
   AND   LoginTime     <   v_EndTime;

-- 记录备份记录数
   SET v_RowCount = ROW_COUNT();
   SET v_ErrorCode = @SWV_Error;

   IF v_ErrorCode <> 0 then

      SELECT  1;
      ROLLBACK;
      LEAVE SWL_return;
   end if;

   COMMIT;
   SELECT 0;
   LEAVE SWL_return;
END;


-- SELECT N'SQLWAYS_EVAL# L_BackupNotificationLog]...';


DROP PROCEDURE IF EXISTS PBL_BackupNotificationLog;

CREATE PROCEDURE PBL_BackupNotificationLog(v_StartTime   DATETIME           ,
v_EndTime     DATETIME           ,
INOUT v_RowCount    INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL# 结束时间获取历史事件数据暂存到HistoryEventMid中,同时返回备份记录数.
*/
   DECLARE v_ErrorCode INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 初始化暂存表
   SET @SWV_Error = 0;
   TRUNCATE TABLE NotificationLogMid;
   START TRANSACTION;

-- 初始化
   SET @SWV_Error = 0;
   INSERT INTO  NotificationLogMid(NotificationLogId,
StationId,
EquipmentId,
EventId,
EventConditionId,
StartTime,
EventStatus,
NotifyResult,
NotifyReciever,
NotifyAddress,
NotifyCategory,
Description,
SMSSentTime,
ExtendField1,
ExtendField2,
ExtendField3)
   SELECT
   NotificationLogId,
StationId,
EquipmentId,
EventId,
EventConditionId,
StartTime,
EventStatus,
NotifyResult,
NotifyReciever,
NotifyAddress,
NotifyCategory,
Description,
SMSSentTime,
ExtendField1,
ExtendField2,
ExtendField3
   FROM  NotificationLog
   WHERE StartTime     >=  v_StartTime
   AND   StartTime     <   v_EndTime;

-- 记录备份记录数
   SET v_RowCount = ROW_COUNT();
   SET v_ErrorCode = @SWV_Error;

   IF v_ErrorCode <> 0 then

      SELECT  1;
      ROLLBACK;
      LEAVE SWL_return;
   end if;

   COMMIT;
   SELECT 0;
   LEAVE SWL_return;
END;


-- SELECT N'SQLWAYS_EVAL# L_BackupOperationDetail]...';


DROP PROCEDURE IF EXISTS PBL_BackupOperationDetail;

CREATE PROCEDURE PBL_BackupOperationDetail(v_StartTime   DATETIME           ,
v_EndTime     DATETIME           ,
INOUT v_RowCount    INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL# 结束时间获取历史事件数据暂存到OperationDetailMid中,同时返回备份记录数.
*/
   DECLARE v_ErrorCode INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 初始化暂存表
   SET @SWV_Error = 0;
   TRUNCATE TABLE TBL_OperationDetailMid;
   START TRANSACTION;

-- 初始化
   SET @SWV_Error = 0;
   INSERT INTO  TBL_OperationDetailMid(UserId,
ObjectId,
ObjectType,
PropertyName,
OperationTime,
OperationType,
OldValue,
NewValue)
   SELECT
   UserId,
ObjectId,
ObjectType,
PropertyName,
OperationTime,
OperationType,
OldValue,
NewValue
   FROM  TBL_OperationDetail
   WHERE OperationTime     >=  v_StartTime
   AND   OperationTime     <   v_EndTime;

-- 记录备份记录数
   SET v_RowCount = ROW_COUNT();
   SET v_ErrorCode = @SWV_Error;

   IF v_ErrorCode <> 0 then

      SELECT  1;
      ROLLBACK;
      LEAVE SWL_return;
   end if;

   COMMIT;
   SELECT 0;
   LEAVE SWL_return;
END;


-- SELECT N'SQLWAYS_EVAL# L_BackupRelatingSignal]...';


DROP PROCEDURE IF EXISTS PBL_BackupRelatingSignal;

CREATE PROCEDURE PBL_BackupRelatingSignal(v_StartTime   DATETIME           ,
v_EndTime     DATETIME           ,
INOUT v_RowCount    INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL# 结束时间获取历史信号数据暂存到TBL_HistorySignalMid中,同时返回备份记录数.
*/
/*liangyj
   DECLARE v_ErrorCode INT;			
   DECLARE v_ObjName NATIONAL VARCHAR(64);
	DECLARE SWV_ExecDyn VARCHAR(5000);
   DECLARE NO_DATA INT DEFAULT 0;
   declare cur_table cursor for select name from sysobjects 
   where type = 'U' and name like 'TBL_Mid%' and name not like 'TBL_MidXXXX%Mid';
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
      SET NO_DATA = -2;
   END;
   DECLARE CONTINUE HANDLER FOR NOT FOUND SET NO_DATA = -1;
   SET @SWV_Error = 0;
   TRUNCATE TABLE TBL_MidXXXXMid;
   START TRANSACTION;
-- 初始化暂存表
-- SQLWAYS_EVAL# BL_HistorySignalMid

-- 初始化
   SET v_RowCount = 0;

-- SQLWAYS_EVAL# 号表名称


-- ---打开游标 
   open     cur_table; 
   SET NO_DATA = 0;
   fetch    cur_table   into  v_ObjName; 
   while    (NO_DATA = 0) DO
      SET SWV_ExecDyn = CONCAT('INSERT INTO TBL_MidXXXXMid(BusinessTypeId,
ExpressionId,
SerialId,
BusinessTypeName,
ExpressionName,
StationId,
StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,
DataType,
FloatValue,
StringValue,
DateTimeValue,
SampleTime,
ShowPrecision,
Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,
Meanings,
ThresholdType,
BusinessState,
BaseCondId,
BaseMeaning,
ComeFromTableName)
      SELECT
      BusinessTypeId,
ExpressionId,
SerialId,
BusinessTypeName,
ExpressionName,
StationId,

      StationName,
EquipmentId,
EquipmentName,
SignalId,
SignalName,
SignalCategory,

      DataType,
FloatValue,
StringValue,
DateTimeValue,
SampleTime,
ShowPrecision,

      Unit,
BaseTypeId,
BaseTypeName,
EventSeverity,
EventSeverityName,

      Meanings,
ThresholdType,
BusinessState,
BaseCondId,
BaseMeaning,''',v_ObjName,'''
      FROM ',v_ObjName,' WHERE SampleTime   >= ''',v_StartTime,'''
      AND   SampleTime   <  ''',v_EndTime,''');
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;

-- 记录备份记录数
      SET v_RowCount = v_RowCount+ROW_COUNT();
      SET v_ErrorCode = @SWV_Error;
      IF v_ErrorCode <> 0 then

         SELECT  1;
         ROLLBACK;
         LEAVE SWL_return;
      end if;
      SET NO_DATA = 0;
      fetch  cur_table   into v_ObjName;
   END WHILE; 
   close        cur_table; 


   COMMIT;

   SELECT 0;
   LEAVE SWL_return;*/
END;


-- SELECT N'SQLWAYS_EVAL# L_BackupHistoryAmeter]...';


DROP PROCEDURE IF EXISTS PBL_BackupHistoryAmeter;

CREATE PROCEDURE PBL_BackupHistoryAmeter(v_StartTime   DATETIME           ,
v_EndTime     DATETIME           ,
INOUT v_RowCount    INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL# 结束时间获取历史电表数据暂存到HistroyAmeterRecordMid中,同时返回备份记录数.
*/
   DECLARE v_ErrorCode INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 初始化暂存表
   SET @SWV_Error = 0;
   TRUNCATE TABLE TBL_HistoryAmeterRecordMid;
   START TRANSACTION;

-- 初始化
   SET @SWV_Error = 0;
   INSERT INTO  TBL_HistoryAmeterRecordMid(StationId,
EquipmentId,
SignalId,
RecordTime,
RecordValue,
ReportTime,
RevisedValue)
   SELECT
   StationId,
EquipmentId,
SignalId,
RecordTime,
RecordValue,
ReportTime,
RevisedValue
   FROM  TBL_HistoryAmeterRecord
   WHERE RecordTime     >=  v_StartTime
   AND   RecordTime     <   v_EndTime;

-- 记录备份记录数
   SET v_RowCount = ROW_COUNT();
   SET v_ErrorCode = @SWV_Error;

   IF v_ErrorCode <> 0 then

      SELECT  1;
      ROLLBACK;
      LEAVE SWL_return;
   end if;

   COMMIT;
   SELECT 0;
   LEAVE SWL_return;
END;


-- SELECT N'SQLWAYS_EVAL# L_Database_SpaceUsed]...';


DROP PROCEDURE IF EXISTS PBL_Database_SpaceUsed;

CREATE procedure PBL_Database_SpaceUsed()
BEGIN 
   DECLARE v_id INT; 
   DECLARE v_type VARCHAR(255); 
   DECLARE v_pages INT; 
   DECLARE v_dbname NATIONAL VARCHAR(128);           -- --数据库名 
   DECLARE v_dbsize DECIMAL(15,0);         -- --数据库大小 
   DECLARE v_logsize DECIMAL(15,0); 
   DECLARE v_bytesperpage DECIMAL(15,0); 
   DECLARE v_pagesperMB DECIMAL(15,0); 
   DECLARE v_ObjName VARCHAR(776);       -- --记录表名 

   DECLARE v_database_size VARCHAR(776); 
   DECLARE v_unallocated_space VARCHAR(776);
   DECLARE NO_DATA INT DEFAULT 0;
   declare  cur_table  cursor for 
   select   name 
   from     sysobjects 
   where    xtype = 'U' or xtype = 'S' 
   order    by  xtype  asc;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET NO_DATA = -2;
   END;
   DECLARE CONTINUE HANDLER FOR NOT FOUND SET NO_DATA = -1; 
   SET v_dbname = DATABASE();                   -- --数据库为当前数据库 
   create TEMPORARY table tt_spt_space
   (
      rows INT,
      reserved DECIMAL(15,0),         -- --保留的空间总量 
      data DECIMAL(15,0),         -- --数据使用的空间总量 
      indexp DECIMAL(15,0),         -- --索引使用的空间 
      unused DECIMAL(15,0)          -- --未用的空间量 
   ); 

   DELETE FROM TBL_SpaceUsedResult;


-- SQLWAYS_EVAL# 
   select   sum(CAST(`size` AS DECIMAL(15,0))) INTO v_dbsize from    sysfiles where   (status & 64 = 0); 

-- SQLWAYS_EVAL# 
   select   sum(CAST(`size` AS DECIMAL(15,0))) INTO v_logsize from    sysfiles where   (status & 64 <> 0); 

-- SQLWAYS_EVAL# 
   select   low INTO v_bytesperpage from    spt_values where   number = 1 and type = 'E'; 

-- SQLWAYS_EVAL# = 1048576B） 
   SET v_pagesperMB = 1048576/v_bytesperpage; 

-- -- 计算数据库大小 
   set  v_database_size   = ltrim(CONCAT(FORMAT((v_dbsize+v_logsize)/v_pagesperMB,2),' MB')); 

-- SQLWAYS_EVAL# 
   set     v_unallocated_space   = ltrim(CONCAT(FORMAT((v_dbsize -(select sum(CAST(reserved AS DECIMAL(15,0)))
   from sysindexes
   where indid in(0,1,255)))/v_pagesperMB,2),' MB')); 

-- -- 保留的空间总量 
   insert into tt_spt_space(reserved)
   select sum(CAST(reserved AS DECIMAL(15,0)))
   from   sysindexes
   where  indid in(0,1,255); 

   select   sum(CAST(dpages AS DECIMAL(15,0))) INTO v_pages from   sysindexes where  indid < 2; 

   select   v_pages+IFNULL(sum(CAST(used AS DECIMAL(15,0))),0) INTO v_pages from   sysindexes where  indid = 255; 

-- -- 数据使用的空间总量 
   update tt_spt_space
   set    data = v_pages; 

-- -- 索引使用的空间 
   update tt_spt_space
   set    indexp =(select sum(CAST(used AS DECIMAL(15,0)))
   from   sysindexes
   where  indid in(0,1,255)) -data; 

-- -- 未用的空间量 
   update tt_spt_space
   set    unused = reserved -(select sum(CAST(used AS DECIMAL(15,0)))
   from   sysindexes
   where  indid in(0,1,255)); 
-- -- 输出数据库大小信息 
   select
   v_dbname database_name,
v_database_size database_size,
v_unallocated_space unallocated_space,
ltrim(CONCAT(FORMAT(reserved*d.low/1024.,0),' ','KB')) reserved,
ltrim(CONCAT(FORMAT(data*d.low/1024.,0),' ','KB')) data,
ltrim(CONCAT(FORMAT(indexp*d.low/1024.,0),' ','KB')) index_size,
ltrim(CONCAT(FORMAT(unused*d.low/1024.,0),' ','KB')) unused
   from   tt_spt_space, spt_values d
   where  d.number = 1
   and    d.type = 'E'; 

-- SQLWAYS_EVAL# 
   delete from  tt_spt_space; 

-- SQLWAYS_EVAL# 
 

-- ---打开游标 
   open     cur_table; 
   SET NO_DATA = 0;
   fetch    cur_table   into  v_ObjName; 
   while    (NO_DATA = 0) DO
      SET v_id = null;
      select   id, xtype INTO v_id,v_type from   sysobjects where  id = object_id(v_ObjName); 

-- SQLWAYS_EVAL# with no_infomsgs 

      insert into tt_spt_space(reserved)
      select sum(reserved)
      from   sysindexes
      where  indid in(0,1,255)
      and    id = v_id;
      select   sum(dpages) INTO v_pages from   sysindexes where  indid < 2
      and    id = v_id;
      select   v_pages+IFNULL(sum(used),0) INTO v_pages from   sysindexes where  indid = 255
      and    id = v_id;
      update tt_spt_space
      set    data = v_pages;
      update tt_spt_space
      set    indexp =(select sum(used)
      from   sysindexes
      where  indid in(0,1,255)
      and    id = v_id) -data;
      update tt_spt_space
      set    unused = reserved -(select sum(used)
      from   sysindexes
      where  indid in(0,1,255)
      and    id = v_id);
      UPDATE tt_spt_space, sysindexes i
      set    tt_spt_space.rows = i.rows
      where  i.indid < 2
      and    i.id = v_id;
      insert into TBL_SpaceUsedResult
      select object_name(v_id) tablename, 
-- SQLWAYS_EVAL# rows), 
-- SQLWAYS_EVAL# * d.low / 1024.,15,0) +  ' ' + 'KB'), 
-- SQLWAYS_EVAL# * d.low / 1024.,15,0) +  ' ' + 'KB'), 
-- SQLWAYS_EVAL# ltrim(str(indexp * d.low / 1024.,15,0) + ' ' + 'KB'), 
-- SQLWAYS_EVAL# * d.low / 1024.,15,0) + ' ' + 'KB') 
rows rows,
reserved*d.low/1024. reserved,
data*d.low/1024. data,
indexp*d.low/1024. index_size,
unused*d.low/1024. unused
      from   tt_spt_space, spt_values d
      where  d.number = 1
      and    d.type = 'E';
      truncate table  tt_spt_space;
      SET NO_DATA = 0;
      fetch   cur_table   into v_ObjName;
   END WHILE; 
   close        cur_table; 
 

   select * from TBL_SpaceUsedResult where tablename is not null; 
   drop TEMPORARY table IF EXISTS tt_spt_space; 
END;



-- SELECT N'SQLWAYS_EVAL# L_Del_HistoryEventMask]...';


DROP PROCEDURE IF EXISTS PBL_Del_HistoryEventMask;

CREATE PROCEDURE PBL_Del_HistoryEventMask(v_StartTime          DATETIME    ,
v_EndTime            DATETIME    ,
v_StationId          INT    ,
v_EquipmentId        INT    ,
v_EventId            INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL#       @StartTime          datetime    -- 开始时间      必须输入
@EndTime            datetime    -- 结束时间      必须输入
@StationId          int         -- 局站ID
@EquipmentId        int         -- 设备ID
@EventId            int         -- 事件ID

Comments:           删除历史事件数据
Return:             0       成功代码
-1      开始时间不能大于结束时间
-2      删除出错代码
*/
-- 检验删除时间
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   IF v_StartTime > v_EndTime then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

   SET @SWV_Error = 0;
   DELETE
   FROM TBL_HistoryEventMask
   WHERE StartTime >= v_StartTime
   AND StartTime < v_EndTime
   AND StationId = IFNULL(v_StationId,StationId)
   AND EquipmentId = IFNULL(v_EquipmentId,EquipmentId)
   AND EventId = IFNULL(v_EventId,EventId);

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -2;
      LEAVE SWL_return;
   end if;

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_Del_LoginInfo]...';


DROP PROCEDURE IF EXISTS PBL_Del_LoginInfo;

CREATE PROCEDURE PBL_Del_LoginInfo(v_StartTime          DATETIME    ,
v_EndTime            DATETIME,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL#       @StartTime          datetime    -- 开始时间      必须输入
@EndTime            datetime    -- 结束时间      

Comments:           删除历史事件数据
Return:             0       成功代码
-1      开始时间不能大于结束时间
-2      删除出错代码
*/
-- 检验删除时间
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   IF v_StartTime > v_EndTime then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

   SET @SWV_Error = 0;
   DELETE
   FROM TBL_LoginInfo
   WHERE LoginTime >= v_StartTime
   AND LoginTime < v_EndTime;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -2;
      LEAVE SWL_return;
   end if;

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_Del_NotificationLog]...';


DROP PROCEDURE IF EXISTS PBL_Del_NotificationLog;

CREATE PROCEDURE PBL_Del_NotificationLog(v_StartTime          DATETIME    ,
v_EndTime            DATETIME    ,
v_StationId          INT    ,
v_EquipmentId        INT    ,
v_EventId            INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL#       @StartTime          datetime    -- 开始时间      必须输入
@EndTime            datetime    -- 结束时间      必须输入
@StationId          int         -- 局站ID
@EquipmentId        int         -- 设备ID
@EventId            int         -- 事件ID

Comments:           删除历史事件数据
Return:             0       成功代码
-1      开始时间不能大于结束时间
-2      删除出错代码
*/
-- 检验删除时间
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   IF v_StartTime > v_EndTime then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

   SET @SWV_Error = 0;
   DELETE
   FROM NotificationLog
   WHERE StartTime >= v_StartTime
   AND StartTime < v_EndTime
   AND StationId = IFNULL(v_StationId,StationId)
   AND EquipmentId = IFNULL(v_EquipmentId,EquipmentId)
   AND EventId = IFNULL(v_EventId,EventId);

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -2;
      LEAVE SWL_return;
   end if;

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_Del_OperationDetail]...';


DROP PROCEDURE IF EXISTS PBL_Del_OperationDetail;

CREATE PROCEDURE PBL_Del_OperationDetail(v_StartTime          DATETIME    ,
v_EndTime            DATETIME,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL#       @StartTime          datetime    -- 开始时间      必须输入
@EndTime            datetime    -- 结束时间      

Comments:           删除历史事件数据
Return:             0       成功代码
-1      开始时间不能大于结束时间
-2      删除出错代码
*/
-- 检验删除时间
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   IF v_StartTime > v_EndTime then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

   SET @SWV_Error = 0;
   DELETE
   FROM TBL_OperationDetail
   WHERE OperationTime >= v_StartTime
   AND OperationTime < v_EndTime;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -2;
      LEAVE SWL_return;
   end if;

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_Del_RelatingSignal]...';


DROP PROCEDURE IF EXISTS PBL_Del_RelatingSignal;

CREATE PROCEDURE PBL_Del_RelatingSignal(v_StartTime DATETIME,
v_EndTime DATETIME,
v_StationId INT,
v_EquipmentId INT,
v_SignalId INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL#      PBL_Del_RelatingSignal
Parameters:         @StartTime          datetime        -- 开始时间      必须输入
@EndTime            datetime        -- 结束时间      必须输入
@StationId          int             -- 局站ID
@EquipmentId        int             -- 设备ID
@SignalId           int             -- 信号ID

Comments:           删除关联信号数据
Return:             0       成功
-1      开始日期不能大于结束日期
-2      删除执行语法出错代码
*/

-- 声明变量
   DECLARE v_ObjName NATIONAL VARCHAR(64);       -- 关联表名称
   DECLARE v_SQL NATIONAL VARCHAR(255);

-- 验证时间正确性
   DECLARE NO_DATA INT DEFAULT 0;
   declare cur_table cursor for select name from sysobjects 
   where type = 'U' and name like 'TBL_Mid%' and name not like 'TBL_MidXXXX%Mid';
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
      SET NO_DATA = -2;
   END;
   DECLARE CONTINUE HANDLER FOR NOT FOUND SET NO_DATA = -1;
   SET @SWV_Error = 0;
   IF v_StartTime > v_EndTime then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

-- SQLWAYS_EVAL# 号表名称

/*liangyj
   open     cur_table; 
   SET NO_DATA = 0;
   fetch    cur_table   into  v_ObjName; 
   while    (NO_DATA = 0) DO
      SET v_SQL = CONCAT('DELETE FROM ',v_ObjName,' WHERE SampleTime >= ''',DATE_FORMAT(v_StartTime,'SQLWAYS_EVAL# :%s:%f%p'),''' AND SampleTime < ''',DATE_FORMAT(v_EndTime,'SQLWAYS_EVAL# :%s:%f%p'),''');
      IF v_StationId IS NOT NULL then
         SET v_SQL = CONCAT(replace(v_SQL,';',' '),'SQLWAYS_EVAL# = ',CAST(v_StationId AS CHAR(20)));
      end if;
      IF v_EquipmentId IS NOT NULL then
         SET v_SQL = CONCAT(replace(v_SQL,';',' '),'SQLWAYS_EVAL# = ',CAST(v_EquipmentId AS CHAR(20)));
      end if;
      IF v_SignalId IS NOT NULL then
         SET v_SQL = CONCAT(replace(v_SQL,';',' '),'SQLWAYS_EVAL# ',CAST(v_SignalId AS CHAR(20)));
      end if;
      SET @SWV_Stmt = v_SQL;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
      IF @SWV_Error <> 0 then

         close cur_table;

         SET SWP_Ret_Value = -2;
         LEAVE SWL_return;
      end if;
      SET NO_DATA = 0;
      fetch    cur_table   into  v_ObjName;
   END WHILE;
   close cur_table;*/


   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_Del_HistoryAmeter]...';


DROP PROCEDURE IF EXISTS PBL_Del_HistoryAmeter;

CREATE PROCEDURE PBL_Del_HistoryAmeter(v_StartTime          DATETIME    ,
v_EndTime            DATETIME    ,
v_StationId          INT    ,
v_EquipmentId        INT    ,
v_SignalId           INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL#       @StartTime          datetime    -- 开始时间      必须输入
@EndTime            datetime    -- 结束时间      必须输入
@StationId          int         -- 局站ID
@EquipmentId        int         -- 设备ID
@SignalId           int         -- 信号ID

Comments:           删除历史电表数据
Return:             0       成功代码
-1      开始时间不能大于结束时间
-2      删除出错代码
*/
-- 检验删除时间
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   IF v_StartTime > v_EndTime then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

   SET @SWV_Error = 0;
   DELETE
   FROM TBL_HistoryAmeterRecord
   WHERE RecordTime >= v_StartTime
   AND RecordTime < v_EndTime
   AND StationId = IFNULL(v_StationId,StationId)
   AND EquipmentId = IFNULL(v_EquipmentId,EquipmentId)
   AND SignalId = IFNULL(v_SignalId,SignalId);

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -2;
      LEAVE SWL_return;
   end if;

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_Del_MidTable]...';


DROP PROCEDURE IF EXISTS PBL_Del_MidTable;

CREATE PROCEDURE PBL_Del_MidTable(v_DataCategory       INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL#       @HistoryCategory int         -- 数据种类     必须输入
0.全部数据
1.历史事件
2.控制命令
3.历史信号
4.蓄电池数据
5.信号统计
6.刷卡记录
7.操作记录
8.通知服务记录
9.历史告警屏蔽记录
10.人员登录信息
11.关联信号数据
12.历史电表数据

Comments:           删除中间表数据
Return:             0           成功
-1          参数存在空值代码
1..12       相关数据种类执行语法出错代码
*/
-- 声明变量
   DECLARE v_ErrorCode INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 参数验证
   SET @SWV_Error = 0;
   IF v_DataCategory IS NULL then /*SQLWAYS_EVAL# IS NULL OR @EndTime IS NULL */

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

   IF v_DataCategory = 1 or v_DataCategory = 0 then

      SET @SWV_Error = 0;
      Delete from TBL_HistoryEventMid;
      IF @SWV_Error <> 0 then 
         SET SWP_Ret_Value = 1;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_DataCategory = 2 or v_DataCategory = 0 then

      SET @SWV_Error = 0;
      Delete from TBL_HistoryControlMid;
      IF @SWV_Error <> 0 then 
         SET SWP_Ret_Value = 2;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_DataCategory = 3 or v_DataCategory = 0 then

      SET @SWV_Error = 0;
      Delete from TBL_HistorySignalMid;
      IF @SWV_Error <> 0 then 
         SET SWP_Ret_Value = 3;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_DataCategory = 4 or v_DataCategory = 0 then

      SET @SWV_Error = 0;
      Delete from TBL_HistoryBatteryMid;
      IF @SWV_Error <> 0 then 
         SET SWP_Ret_Value = 4;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_DataCategory = 5 or v_DataCategory = 0 then

      SET @SWV_Error = 0;
      Delete from TBL_SignalStatisticsMid;
      IF @SWV_Error <> 0 then 
         SET SWP_Ret_Value = 5;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_DataCategory = 6 or v_DataCategory = 0 then

      SET @SWV_Error = 0;
      Delete from TBL_SwapCardRecordMid;
      IF @SWV_Error <> 0 then 
         SET SWP_Ret_Value = 6;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_DataCategory = 7 or v_DataCategory = 0 then

      Delete from TBL_OperationRecordMid;
      SET @SWV_Error = 0;
      Delete from TBL_OperationDetailMid2;
      IF @SWV_Error <> 0 then 
         SET SWP_Ret_Value = 7;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_DataCategory = 8 or v_DataCategory = 0 then

      SET @SWV_Error = 0;
      Delete from NotificationLogMid2;
      IF @SWV_Error <> 0 then 
         SET SWP_Ret_Value = 8;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_DataCategory = 9 or v_DataCategory = 0 then

      SET @SWV_Error = 0;
      Delete from TBL_HistoryEventMaskMid2;
      IF @SWV_Error <> 0 then 
         SET SWP_Ret_Value = 9;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_DataCategory = 10 or v_DataCategory = 0 then

      SET @SWV_Error = 0;
      Delete from TBL_LoginInfoMid2;
      IF @SWV_Error <> 0 then 
         SET SWP_Ret_Value = 10;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_DataCategory = 11 or v_DataCategory = 0 then

      SET @SWV_Error = 0;
      Delete from TBL_MidXXXXMid2;
      IF @SWV_Error <> 0 then 
         SET SWP_Ret_Value = 11;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_DataCategory = 12 or v_DataCategory = 0 then

      SET @SWV_Error = 0;
      Delete from TBL_HistoryAmeterRecordMid2;
      IF @SWV_Error <> 0 then 
         SET SWP_Ret_Value = 12;
         LEAVE SWL_return;
      end if;
   end if;

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_Diagnose_DB]...';


DROP PROCEDURE IF EXISTS PBL_Diagnose_DB;

CREATE PROCEDURE PBL_Diagnose_DB(v_WarningThreshold		FLOAT ,
v_ClearThreshold			FLOAT ,
v_WarningThresholdSize	INT ,
v_ClearThresholdSize		INT ,
v_BaseEventTypeId			NUMERIC(10,0) ,INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN
/*liangyj
   DECLARE v_DataSize FLOAT;
   DECLARE v_logsize FLOAT;
   DECLARE v_DatabaseSize FLOAT;
   DECLARE v_FreeSpaceSize FLOAT;
   DECLARE v_DataSpaceUsedRate FLOAT;
   DECLARE v_DBSpaceUsedRate FLOAT;
   DECLARE v_LogSpaceUsedRate FLOAT;
   DECLARE v_Driver VARCHAR(1);
   DECLARE v_dbname VARCHAR(50);
   DECLARE v_LogName VARCHAR(50);
   DECLARE v_SQL VARCHAR(200);
   DECLARE v_Result INT;
   DECLARE v_objectInfo INT;
   DECLARE v_OutDrive INT;
   DECLARE v_TotalSizeStr VARCHAR(20);
   DECLARE v_UnitMB BIGINT;
   DECLARE v_TotalSize FLOAT;
   DECLARE v_CurrentTime DATETIME;
   DECLARE v_TmpStationId INT;
   DECLARE v_TmpEquipTemplateId INT;
   DECLARE v_TmpEquipmentId INT;
   DECLARE v_TmpEventId INT;
   DECLARE v_TmpEventConditionId INT;
   DECLARE v_TmpBaseTypeId NUMERIC(10,0);
   DECLARE v_TmpMeanings NATIONAL VARCHAR(255);
   DECLARE v_TmpEventStartValue FLOAT;
   DECLARE v_TmpEventEndValue FLOAT;
   DECLARE v_TmpSequenceId NATIONAL VARCHAR(128);
   DECLARE v_TmpStartTime DATETIME;
   DECLARE v_TmpEndTime DATETIME;
   DECLARE v_MinStartTime DATETIME;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

   IF v_WarningThreshold is null then
      set v_WarningThreshold = 0.9;
   END IF;
   IF v_ClearThreshold is null then
      set v_ClearThreshold = 0.95;
   END IF;
   IF v_WarningThresholdSize is null then
      set v_WarningThresholdSize = 1024;
   END IF;
   IF v_ClearThresholdSize is null then
      set v_ClearThresholdSize = 512;
   END IF;
   IF v_BaseEventTypeId is null then
      set v_BaseEventTypeId = 1302322001;
   END IF;
   SET @SWV_Error = 0;
   DROP TEMPORARY TABLE IF EXISTS tt_drivefreespace;
   CREATE TEMPORARY TABLE tt_drivefreespace
   (
      Drive CHAR(1), 
      FreeMb BIGINT
   );
   SET @xp_fixeddrives_Call = 1;
   CALL xp_fixeddrives();
   SET @xp_fixeddrives_Call = null;

   select   round(FILEPROPERTY(name,'SpaceUsed')/128.0,1), b.FreeMb, name, b.Drive, case when growth = 0 then  FILEPROPERTY(name,'SpaceUsed')/`size`
   when growth > 0 and max_size = -1 then FILEPROPERTY(name,'SpaceUsed')/128.0/(`size`/128.0+b.FreeMb)
   when growth > 0 and max_size <> -1 and(max_size/128.0 -b.FreeMb) >= 0 then FILEPROPERTY(name,'SpaceUsed')/128.0/(`size`/128.0+b.FreeMb)
   when growth > 0 and max_size <> -1 and(max_size/128.0 -b.FreeMb) <  0 then FILEPROPERTY(name,'SpaceUsed')/max_size
   else null
   end INTO v_DataSize,v_FreeSpaceSize,v_dbname,v_Driver,v_DataSpaceUsedRate from database_files a, tt_drivefreespace b where data_space_id = 1 and SUBSTRING(a.physical_name,1,1) = b.Drive;

   select   round(FILEPROPERTY(name,'SpaceUsed')/128.0,1), name, case when growth = 0 then  FILEPROPERTY(name,'SpaceUsed')/`size`
   when growth > 0 and max_size = -1 then FILEPROPERTY(name,'SpaceUsed')/128.0/(`size`/128.0+b.FreeMb)
   when growth > 0 and max_size <> -1 and(max_size/128.0 -b.FreeMb) >= 0 then FILEPROPERTY(name,'SpaceUsed')/128.0/(`size`/128.0+b.FreeMb)
   when growth > 0 and max_size <> -1 and(max_size/128.0 -b.FreeMb) <  0 then FILEPROPERTY(name,'SpaceUsed')/max_size
   else null
   end INTO v_logsize,v_LogName,v_LogSpaceUsedRate from database_files a, tt_drivefreespace b where data_space_id = 0 and SUBSTRING(a.physical_name,1,1) = b.Drive;

   set v_DatabaseSize = v_DataSize+v_logsize;
   set v_CurrentTime = CURRENT_TIMESTAMP;
   delete from ZDatabaseSize where DateTime > DATE_FORMAT(v_CurrentTime,'%Y-%m-%d');
   insert into ZDatabaseSize select v_CurrentTime,v_DatabaseSize, v_DataSize, v_logsize, v_FreeSpaceSize,NULL,NULL,NULL,NULL;
-- SQLWAYS_EVAL# 求出当天增量
   DROP TEMPORARY TABLE IF EXISTS tt_SpaceUsedCompute;

   CREATE TEMPORARY TABLE tt_SpaceUsedCompute
   (
      DateTime DATETIME NOT NULL,
      DatabaseMBSize FLOAT,
      DataMBSize FLOAT,
      LogMBSize FLOAT,
      FreeSpaceMBSize FLOAT,
      DatabaseMBSizeTodayUsed FLOAT,
      DataMBSizeTodayUsed FLOAT,
      LogMBSizeTodayUsed FLOAT,
      FreeSpaceMBSizeTodayUsed FLOAT,
      CONSTRAINT PK_TSL_DatabaseSize PRIMARY KEY(DateTime)
   );
   INSERT tt_SpaceUsedCompute
   SELECT
   Tomorrow.DateTime,
Tomorrow.DatabaseMBSize,
Tomorrow.DataMBSize,
Tomorrow.LogMBSize,
Tomorrow.FreeSpaceMBSize,
Tomorrow.DatabaseMBSize -Today.DatabaseMBSize DatabaseMBSizeTodayUsed,
Tomorrow.DataMBSize -Today.DataMBSize DataMBSizeTodayUsed,
Tomorrow.LogMBSize -Today.LogMBSize LogMBSizeTodayUsed,
Tomorrow.FreeSpaceMBSize -Today.FreeSpaceMBSize FreeSpaceMBSizeTodayUsed
   FROM ZDatabaseSize Tomorrow,ZDatabaseSize Today
   WHERE CAST(STR_TO_DATE(DATE_FORMAT(Tomorrow.DateTime,'%Y-%m-%d'),'%Y-%m-%d') AS DATETIME) = TIMESTAMPADD(day,1,CAST(STR_TO_DATE(DATE_FORMAT(Today.DateTime,'%Y-%m-%d'),'%Y-%m-%d') AS DATETIME))
   AND CAST(STR_TO_DATE(DATE_FORMAT(Today.DateTime,'%Y-%m-%d'),'%Y-%m-%d') AS DATETIME) = TIMESTAMPADD(day,-1,CAST(STR_TO_DATE(DATE_FORMAT(v_CurrentTime,'%Y-%m-%d'),'%Y-%m-%d') AS DATETIME));
   UPDATE ZDatabaseSize, tt_SpaceUsedCompute
   SET
   ZDatabaseSize.DatabaseMBSizeTodayUsed = round(tt_SpaceUsedCompute.DatabaseMBSizeTodayUsed,1),ZDatabaseSize.DataMBSizeTodayUsed = round(tt_SpaceUsedCompute.DataMBSizeTodayUsed,1),ZDatabaseSize.LogMBSizeTodayUsed = round(tt_SpaceUsedCompute.LogMBSizeTodayUsed,1),ZDatabaseSize.FreeSpaceMBSizeTodayUsed = round(tt_SpaceUsedCompute.FreeSpaceMBSizeTodayUsed,1)
   WHERE tt_SpaceUsedCompute.DateTime = ZDatabaseSize.DateTime; 

   DROP TEMPORARY TABLE IF EXISTS tt_SpaceUsedCompute;
-- End By JN
-- SQLWAYS_EVAL# Database Disk Space TotalSize
   CALL sp_configure('SQLWAYS_EVAL# options',1);
   reconfigure;
   CALL sp_configure('SQLWAYS_EVAL# Procedures',1);
   reconfigure;
   set v_UnitMB = 1024*1024;
   SET v_Result = sp_OACreate('SQLWAYS_EVAL# SystemObject',v_objectInfo);
   SET v_Result = sp_OAMethod(v_objectInfo,'GetDrive',v_OutDrive,v_Driver);
   SET v_Result = sp_OAGetProperty(v_OutDrive,'TotalSize',v_TotalSizeStr);
   SET v_TotalSize = v_TotalSizeStr/v_UnitMB;
   CALL sp_configure('SQLWAYS_EVAL# options',1);
   reconfigure;
   CALL sp_configure('SQLWAYS_EVAL# Procedures',0);
   reconfigure;
   CALL sp_configure('SQLWAYS_EVAL# options',0);
   reconfigure;
-- End Compute
   set v_DBSpaceUsedRate =(v_TotalSize -v_FreeSpaceSize)/v_TotalSize;
   if v_DataSpaceUsedRate < v_DBSpaceUsedRate then 
      set v_DataSpaceUsedRate = v_DBSpaceUsedRate;
   end if;

   select   EquipmentTemplateId, EventId, EventConditionId, StartCompareValue, EndCompareValue, Meanings INTO v_TmpEquipTemplateId,v_TmpEventId,v_TmpEventConditionId,v_TmpEventStartValue,
   v_TmpEventEndValue,v_TmpMeanings from TBL_EventCondition where BaseTypeId = v_BaseEventTypeId;
   select   StationId, EquipmentId INTO v_TmpStationId,v_TmpEquipmentId from TBL_Equipment where EquipmentTemplateId = v_TmpEquipTemplateId;

   IF v_DataSpaceUsedRate >= v_ClearThreshold or v_LogSpaceUsedRate >= v_ClearThreshold or v_FreeSpaceSize <= v_ClearThresholdSize then

      IF v_DataSpaceUsedRate >= v_ClearThreshold or v_FreeSpaceSize <= v_ClearThresholdSize then

         select   IFNULL(min(a.s),CURRENT_TIMESTAMP) INTO v_MinStartTime from(select min(SampleTime) as s from TBL_HistorySignal13 union select min(SampleTime) as s from TBL_HistorySignal22
            union select min(SampleTime) as s from TBL_HistorySignal3 union select min(SampleTime) as s from TBL_HistorySignal42
            union select min(SampleTime) as s from TBL_HistorySignal5 union select min(SampleTime) as s from TBL_HistorySignal62
            union select min(SampleTime) as s from TBL_HistorySignal7 union select min(SampleTime) as s from TBL_HistorySignal82
            union select min(SampleTime) as s from TBL_HistorySignal9 union select min(SampleTime) as s from TBL_HistorySignal102
            union select min(SampleTime) as s from TBL_HistorySignal11 union select min(SampleTime) as s from TBL_HistorySignal22) a;
         set v_TmpStartTime = CAST(STR_TO_DATE(DATE_FORMAT(v_MinStartTime,'%Y-%m-%d'),'%Y-%m-%d') AS DATETIME);
         set v_TmpEndTime = TIMESTAMPADD(Year,-1,v_CurrentTime);
         if v_TmpStartTime >= v_TmpEndTime then 
            set v_TmpEndTime = TIMESTAMPADD(Day,1,v_TmpStartTime);
         end if;
         select v_TmpStartTime as StartTime, v_TmpEndTime as EndTime;
      end if;
      IF v_LogSpaceUsedRate >= v_ClearThreshold then

         set v_SQL = '';
         SET @SWV_Stmt = v_SQL;
         PREPARE SWT_Stmt FROM @SWV_Stmt;
         EXECUTE SWT_Stmt;
         DEALLOCATE PREPARE SWT_Stmt;
      end if;
   ELSE 
      IF v_DataSpaceUsedRate >= v_WarningThreshold or v_LogSpaceUsedRate >= v_WarningThreshold or v_FreeSpaceSize <= v_WarningThresholdSize then

         select   SequenceId INTO v_TmpSequenceId FROM TBL_ActiveEvent WHERE EventId = v_TmpEventId AND StationId = v_TmpStationId
         AND EquipmentId = v_TmpEquipmentId AND EventConditionId = v_TmpEventConditionId
         AND EndTime IS NULL;
         IF v_TmpSequenceId IS NULL then

            SET v_TmpSequenceId = UUID();
            CALL PNL_SaveEventResponse(v_TmpStationId,v_TmpEquipmentId,v_TmpEventId,v_TmpEventConditionId,v_TmpSequenceId,
            v_CurrentTime,NULL,0,v_TmpMeanings,v_TmpEventStartValue,v_BaseEventTypeId);
         end if;
      ELSE
         select   SequenceId, StartTime INTO v_TmpSequenceId,v_TmpStartTime FROM TBL_ActiveEvent WHERE EventId = v_TmpEventId AND StationId = v_TmpStationId
         AND EquipmentId = v_TmpEquipmentId AND EventConditionId = v_TmpEventConditionId
         AND EndTime IS NULL;
         IF v_TmpSequenceId IS NOT NULL AND v_TmpStartTime IS NOT NULL then

            CALL PNL_SaveEventResponse(v_TmpStationId,v_TmpEquipmentId,v_TmpEventId,v_TmpEventConditionId,v_TmpSequenceId,
            v_TmpStartTime,v_CurrentTime,0,v_TmpMeanings,v_TmpEventEndValue,
            v_BaseEventTypeId);
         end if;
      end if;
   end if;

   SET @SWV_Error = 0;
   Drop table IF EXISTS TempDBServiceStatus;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if; */    

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_Diagnose_DBPerformance]...';


DROP PROCEDURE IF EXISTS PBL_Diagnose_DBPerformance;

CREATE PROCEDURE PBL_Diagnose_DBPerformance(INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_StartTime DATETIME;
   DECLARE v_EndTime DATETIME;
   DECLARE v_Index INT;
   DECLARE v_InsertSec INT;
   DECLARE v_UpdateSec INT;
   DECLARE v_DeleteSec INT;
   DECLARE v_SQL VARCHAR(200);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

   SET @SWV_Error = 0;
   DROP TEMPORARY TABLE IF EXISTS tt_Temp;
   Create TEMPORARY Table tt_Temp
   (
      Id INT not null,
      Name NATIONAL VARCHAR(64),
      `Value` INT
   );

   set v_Index = 0;
   set v_StartTime = CURRENT_TIMESTAMP;
   while(v_Index < 1000) DO

 insert into tt_Temp values(v_Index, CAST(v_Index AS CHAR(64)), v_Index);

      set v_Index = v_Index+1;
   END WHILE;
   set v_EndTime = CURRENT_TIMESTAMP;
   set v_InsertSec = TIMESTAMPDIFF(MICROSECOND,v_StartTime,v_EndTime);

   set v_Index = 0;
   set v_StartTime = CURRENT_TIMESTAMP;
   while(v_Index < 1000) DO
      update tt_Temp set `Value` = v_Index+1 where Id = v_Index;
      set v_Index = v_Index+1;
   END WHILE;
   set v_EndTime = CURRENT_TIMESTAMP;
   set v_UpdateSec = TIMESTAMPDIFF(MICROSECOND,v_StartTime,v_EndTime);

   set v_Index = 0;
   set v_StartTime = CURRENT_TIMESTAMP;
   while(v_Index < 1000) DO
      Delete from tt_Temp where Id = v_Index;
      set v_Index = v_Index+1;
   END WHILE;
   set v_EndTime = CURRENT_TIMESTAMP;
   set v_DeleteSec = TIMESTAMPDIFF(MICROSECOND,v_StartTime,v_EndTime);

   SET @SWV_Error = 0;
   insert into ZDBPerformance
   select CURRENT_TIMESTAMP, v_InsertSec, v_UpdateSec, v_DeleteSec;
   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;     

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_Diagnose_HistoryEvent]...';


DROP PROCEDURE IF EXISTS PBL_Diagnose_HistoryEvent;

CREATE PROCEDURE PBL_Diagnose_HistoryEvent(v_StatisticDate		DATETIME,INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN
   DECLARE v_StartTime DATETIME; 
   DECLARE v_EndTime DATETIME;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;	
   SET @SWV_Error = 0;
   set v_StartTime = STR_TO_DATE(DATE_FORMAT(v_StatisticDate,'%Y-%m-%d'),'%Y-%m-%d');
   set v_EndTime = TIMESTAMPADD(day,1,v_StartTime);
   set v_StatisticDate = v_StartTime;
   delete from ZHistoryEventTop100 where StatisticDate = v_StatisticDate;
   delete from ZHistoryEventStatistic where StatisticDate = v_StatisticDate;
   delete from ZHistoryEventTop100 where StatisticDate < TIMESTAMPADD(month,-1,v_StatisticDate);
   delete from ZHistoryEventStatistic where StatisticDate < TIMESTAMPADD(month,-1,v_StatisticDate);

   insert into ZHistoryEventTop100(StatisticDate, ItemType, ItemId, ItemName, `Count`)
   select  v_StatisticDate,0, STATIONID,(select STATIONNAME from TBL_Station where STATIONID = a.STATIONID), count(*) as NUM
   from TBL_HistoryEvent a where STARTTIME between v_StartTime and v_EndTime group by STATIONID order by NUM desc LIMIT 100;

   insert into ZHistoryEventTop100(StatisticDate, ItemType, ItemId, ItemName, TemplateId, TemplateName, `Count`)
   select  v_StatisticDate,1, EVENTID,(select EVENTNAME from TBL_EVENT where EQUIPMENTTEMPLATEID = b.EQUIPMENTTEMPLATEID and EVENTID = a.EVENTID),
b.EQUIPMENTTEMPLATEID,(Select EQUIPMENTTEMPLATENAME from TBL_EQUIPMENTTEMPLATE where EQUIPMENTTEMPLATEID = b.EQUIPMENTTEMPLATEID), count(*) as NUM
   from TBL_HistoryEvent a, TBL_Equipment b where a.STATIONID = b.STATIONID and a.EQUIPMENTID = b.EQUIPMENTID and
   a.STARTTIME between v_StartTime and v_EndTime group by a.EVENTID,b.EQUIPMENTTEMPLATEID order by NUM desc LIMIT 100;

   insert into ZHistoryEventTop100(StatisticDate, ItemType, ItemId, ItemName, `Count`)
   select  v_StatisticDate,2, EQUIPMENTID,(select EQUIPMENTNAME from TBL_Equipment where EQUIPMENTID = a.EQUIPMENTID), count(*) as NUM
   from TBL_HistoryEvent a where STARTTIME between v_StartTime and v_EndTime group by EQUIPMENTID order by NUM desc LIMIT 100;

   SET @SWV_Error = 0;
   insert into ZHistoryEventStatistic
   select v_StatisticDate,STATIONID,(select STATIONNAME from TBL_Station where STATIONID = a.STATIONID) AS STATIONNAME,
EQUIPMENTID,(select EQUIPMENTNAME from TBL_Equipment where EQUIPMENTID = a.EQUIPMENTID) AS EQUIPMENTNAME,
EVENTID,(select EVENTNAME from TBL_EVENT x, TBL_Equipment y where x.EQUIPMENTTEMPLATEID = y.EQUIPMENTTEMPLATEID and y.EQUIPMENTID = a.EQUIPMENTID and x.EVENTID = a.EVENTID) AS EVENTNAME,
COUNT(*) as NUM
   from TBL_HistoryEvent a where STARTTIME between v_StartTime and v_EndTime and (STATIONID in(select ITEMID from ZHistoryEventTop100 where StatisticDate = v_StatisticDate and ItemType = 0)
   or Exists(select 1 from ZHistoryEventTop100 x, TBL_Equipment y  where x.ITEMID = a.EVENTID and x.TEMPLATEID = y.EQUIPMENTTEMPLATEID and a.EQUIPMENTID = y.EQUIPMENTID and
      x.StatisticDate = v_StatisticDate and x.ItemType = 1)
   or EQUIPMENTID in(select ITEMID from ZHistoryEventTop100 where StatisticDate = v_StatisticDate and ItemType = 2))
   group by STATIONID,EQUIPMENTID,EVENTID;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;     

   SET SWP_Ret_Value = 0;
END;



-- SELECT N'SQLWAYS_EVAL# L_Diagnose_HistorySignal]...';


DROP PROCEDURE IF EXISTS PBL_Diagnose_HistorySignal;

CREATE PROCEDURE PBL_Diagnose_HistorySignal(v_StatisticDate		DATETIME,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_StartTime NATIONAL VARCHAR(20); 
   DECLARE v_EndTime NATIONAL VARCHAR(20);
   DECLARE v_Index NATIONAL VARCHAR(2);
   DECLARE v_SQL NATIONAL VARCHAR(3000);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;	
   SET @SWV_Error = 0;
   set v_StartTime = DATE_FORMAT(v_StatisticDate,'SQLWAYS_EVAL# %p');
   set v_EndTime = DATE_FORMAT(TIMESTAMPADD(day,1,v_StatisticDate),'SQLWAYS_EVAL# %p');
   set v_Index = CAST(month(v_StatisticDate) AS CHAR(2));
-- liangyj   set v_SQL = CONCAT('delete from ZHistorySignalTop100 where StatisticDate = ''',v_StartTime,''');

   SET @SWV_Stmt = v_SQL;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;     

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_RecoveryHistoryEventMask]...';


DROP PROCEDURE IF EXISTS PBL_RecoveryHistoryEventMask;

CREATE PROCEDURE PBL_RecoveryHistoryEventMask(INOUT v_RowCount    INT ,
v_StartTime	DATETIME ,
v_EndTime	DATETIME ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL#     正确
1     恢复异常
13 			TRUNCATE TABLE TBL_HistoryEventMaskMid错误
*/
-- 声明变量
   DECLARE v_ErrorCode INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
-- 初始化
   SET v_RowCount = 0;

   SET @SWV_Error = 0;
   INSERT INTO TBL_HistoryEventMask
   SELECT * FROM TBL_HistoryEventMaskMid
   WHERE StartTime >= IFNULL(v_StartTime,StartTime) AND StartTime <= IFNULL(v_EndTime,StartTime);

   SET v_RowCount = ROW_COUNT();
   SET v_ErrorCode = @SWV_Error;

   IF v_ErrorCode <> 0 then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

-- 清除BCP数据暂存表数据.
   SET @SWV_Error = 0;
   TRUNCATE TABLE TBL_HistoryEventMaskMid;

   IF @SWV_Error <> 0 then

      SET SWP_Ret_Value = 13;
      LEAVE SWL_return;
   end if;

-- 恢复成功
   SET SWP_Ret_Value = 0;
END;



-- SELECT N'SQLWAYS_EVAL# L_RecoveryLoginInfo]...';


DROP PROCEDURE IF EXISTS PBL_RecoveryLoginInfo;

CREATE PROCEDURE PBL_RecoveryLoginInfo(INOUT v_RowCount    INT ,
v_StartTime	DATETIME ,
v_EndTime	DATETIME ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL#     正确
1     恢复异常
13 			TRUNCATE TABLE TBL_LoginInfoMid错误
*/
-- 声明变量
   DECLARE v_ErrorCode INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
-- 初始化
   SET v_RowCount = 0;

   SET @SWV_Error = 0;
   INSERT INTO TBL_LoginInfo
   SELECT * FROM TBL_LoginInfoMid
   WHERE LoginTime >= IFNULL(v_StartTime,LoginTime) AND LoginTime <= IFNULL(v_EndTime,LoginTime);

   SET v_RowCount = ROW_COUNT();
   SET v_ErrorCode = @SWV_Error;

   IF v_ErrorCode <> 0 then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

-- 清除BCP数据暂存表数据.
   SET @SWV_Error = 0;
   TRUNCATE TABLE TBL_LoginInfoMid;

   IF @SWV_Error <> 0 then

      SET SWP_Ret_Value = 13;
      LEAVE SWL_return;
   end if;

-- 恢复成功
   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_RecoveryNotificationLog]...';


DROP PROCEDURE IF EXISTS PBL_RecoveryNotificationLog;

CREATE PROCEDURE PBL_RecoveryNotificationLog(INOUT v_RowCount    INT ,
v_StartTime	DATETIME ,
v_EndTime	DATETIME ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL#     正确
1     恢复异常
13 			TRUNCATE TABLE NotificationLogMid错误
*/
-- 声明变量
   DECLARE v_ErrorCode INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
-- 初始化
   SET v_RowCount = 0;

   SET @SWV_Error = 0;
   INSERT INTO NotificationLog
   SELECT * FROM NotificationLogMid
   WHERE StartTime >= IFNULL(v_StartTime,StartTime) AND StartTime <= IFNULL(v_EndTime,StartTime);

   SET v_RowCount = ROW_COUNT();
   SET v_ErrorCode = @SWV_Error;

   IF v_ErrorCode <> 0 then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

-- 清除BCP数据暂存表数据.
   SET @SWV_Error = 0;
   TRUNCATE TABLE NotificationLogMid;

   IF @SWV_Error <> 0 then

      SET SWP_Ret_Value = 13;
      LEAVE SWL_return;
   end if;

-- 恢复成功
   SET SWP_Ret_Value = 0;
END;




-- SELECT N'SQLWAYS_EVAL# L_RecoveryOperationDetail]...';


DROP PROCEDURE IF EXISTS PBL_RecoveryOperationDetail;

CREATE PROCEDURE PBL_RecoveryOperationDetail(INOUT v_RowCount    INT ,
v_StartTime	DATETIME ,
v_EndTime	DATETIME ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL#     正确
1     恢复异常
13 			TRUNCATE TABLE TBL_OperationDetailMid错误
*/
-- 声明变量
   DECLARE v_ErrorCode INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
-- 初始化
   SET v_RowCount = 0;

   SET @SWV_Error = 0;
   INSERT INTO TBL_OperationDetail
   SELECT * FROM TBL_OperationDetailMid
   WHERE OperationTime >= IFNULL(v_StartTime,OperationTime) AND OperationTime <= IFNULL(v_EndTime,OperationTime);

   SET v_RowCount = ROW_COUNT();
   SET v_ErrorCode = @SWV_Error;

   IF v_ErrorCode <> 0 then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

-- 清除BCP数据暂存表数据.
   SET @SWV_Error = 0;
   TRUNCATE TABLE TBL_OperationDetailMid;

   IF @SWV_Error <> 0 then

      SET SWP_Ret_Value = 13;
      LEAVE SWL_return;
   end if;

-- 恢复成功
   SET SWP_Ret_Value = 0;
END;




-- SELECT N'SQLWAYS_EVAL# L_RecoveryRelatingSignal]...';


DROP PROCEDURE IF EXISTS PBL_RecoveryRelatingSignal;

CREATE PROCEDURE PBL_RecoveryRelatingSignal(INOUT v_RowCount INT ,
v_StartTime	DATETIME ,
v_EndTime	DATETIME ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL#     正确
1     恢复异常
13    TRUNCATE TABLE  TBL_MidXXXXRestoreMid异常
*/

-- 声明变量
   DECLARE v_Index INT;
   DECLARE v_ErrorCode INT;
   DECLARE v_SQL NATIONAL VARCHAR(1024);
   DECLARE v_TableName NATIONAL VARCHAR(256);

-- 获取恢复开始时间、结束时间

-- 初始化
   DECLARE NO_DATA INT DEFAULT 0;
   declare cur_table cursor for select name from sysobjects 
   where type = 'U' and name like 'TBL_Mid%' and name not like 'TBL_MidXXXX%Mid';
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
      SET NO_DATA = -2;
   END;
   DECLARE CONTINUE HANDLER FOR NOT FOUND SET NO_DATA = -1;
   SET v_RowCount = 0;

-- 循环恢复每个关联信息表数据.
   START TRANSACTION;

-- SQLWAYS_EVAL# 号表名称

/* liangyj

   open     cur_table; 
   SET NO_DATA = 0;
   fetch    cur_table   into  v_TableName; 
   while    (NO_DATA = 0) DO
      SET v_SQL = CONCAT('INSERT INTO ',v_TableName,' (BusinessTypeId, ExpressionId, SerialId, BusinessTypeName, ExpressionName,
StationId, StationName, EquipmentId, EquipmentName, SignalId, SignalName,
SignalCategory, DataType, FloatValue, StringValue, DateTimeValue, SampleTime,
ShowPrecision, Unit, BaseTypeId, BaseTypeName, EventSeverity, EventSeverityName,
Meanings, ThresholdType, BusinessState, BaseCondId, BaseMeaning)
      SELECT BusinessTypeId, ExpressionId, SerialId, BusinessTypeName, ExpressionName,
StationId, 
      StationName, EquipmentId, EquipmentName, SignalId, SignalName,
SignalCategory, 
      DataType, FloatValue, StringValue, DateTimeValue, SampleTime,
ShowPrecision, 
      Unit, BaseTypeId, BaseTypeName, EventSeverity, EventSeverityName,

      Meanings, ThresholdType, BusinessState, BaseCondId, BaseMeaning
      FROM TBL_MidXXXXMid WHERE ComeFromTableName  =  ''',v_TableName,''');
      if v_StartTime is not null then
         SET v_SQL = CONCAT(replace(v_SQL,';',' '),'SQLWAYS_EVAL# >=''',DATE_FORMAT(v_StartTime,'SQLWAYS_EVAL# :%s:%f%p'),
         '''');
      end if;
      if v_EndTime is not null then
         SET v_SQL = CONCAT(replace(v_SQL,';',' '),'SQLWAYS_EVAL# <=''',DATE_FORMAT(v_EndTime,'SQLWAYS_EVAL# :%s:%f%p'),
         '''');
      end if;
      SET @SWV_Stmt = v_SQL;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;


      SET v_RowCount = v_RowCount+ROW_COUNT();
      SET v_ErrorCode = @SWV_Error;
      IF v_ErrorCode <> 0 then

         ROLLBACK;
         SET SWP_Ret_Value = 1;
         LEAVE SWL_return;
      end if;
      SET NO_DATA = 0;
      fetch    cur_table   into  v_TableName;
   END WHILE;
   close cur_table;


   COMMIT;*/

-- 清除BCP数据暂存表
   SET @SWV_Error = 0;
   TRUNCATE TABLE  TBL_MidXXXXMid;

   IF @SWV_Error <> 0 then

      SET SWP_Ret_Value = 13;
      LEAVE SWL_return;
   end if;

-- 恢复成功
   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_RecoveryHistoryAmeter]...';


DROP PROCEDURE IF EXISTS PBL_RecoveryHistoryAmeter;

CREATE PROCEDURE PBL_RecoveryHistoryAmeter(INOUT v_RowCount    INT ,
v_StartTime	DATETIME ,
v_EndTime	DATETIME ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL#     正确
1     恢复异常
13 			TRUNCATE TABLE TBL_HistoryAmeterRecordMid错误
*/
-- 声明变量
   DECLARE v_ErrorCode INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
-- 初始化
   SET v_RowCount = 0;

   SET @SWV_Error = 0;
   INSERT INTO TBL_HistoryAmeterRecord
   SELECT * FROM TBL_HistoryAmeterRecordMid
   WHERE RecordTime >= IFNULL(v_StartTime,RecordTime) AND RecordTime <= IFNULL(v_EndTime,RecordTime);

   SET v_RowCount = ROW_COUNT();
   SET v_ErrorCode = @SWV_Error;

   IF v_ErrorCode <> 0 then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

-- 清除BCP数据暂存表数据.
   SET @SWV_Error = 0;
   TRUNCATE TABLE TBL_HistoryAmeterRecordMid;

   IF @SWV_Error <> 0 then

      SET SWP_Ret_Value = 13;
      LEAVE SWL_return;
   end if;

-- 恢复成功
   SET SWP_Ret_Value = 0;
END;



-- SELECT N'SQLWAYS_EVAL# L_Generate_Event]...';


DROP PROCEDURE IF EXISTS PBL_Generate_Event;

CREATE PROCEDURE PBL_Generate_Event(v_BaseEventTypeId			NUMERIC(10,0) ,INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN
   DECLARE v_CurrentTime DATETIME;
   DECLARE v_TmpStationId INT;
   DECLARE v_TmpEquipTemplateId INT;
   DECLARE v_TmpEquipmentId INT;
   DECLARE v_TmpEventId INT;
   DECLARE v_TmpEventConditionId INT;
   DECLARE v_TmpBaseTypeId NUMERIC(10,0);
   DECLARE v_TmpMeanings NATIONAL VARCHAR(255);
   DECLARE v_TmpEventStartValue FLOAT;
   DECLARE v_TmpEventEndValue FLOAT;
   DECLARE v_TmpSequenceId NATIONAL VARCHAR(128);
   DECLARE v_TmpStartTime DATETIME;
   DECLARE v_TmpEndTime DATETIME;
   DECLARE v_MinStartTime DATETIME;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
/*liangyj
   IF v_BaseEventTypeId is null then
      set v_BaseEventTypeId = 1302322001;
   END IF;*/
   SET @SWV_Error = 0;
   set v_CurrentTime = CURRENT_TIMESTAMP;
   select   EquipmentTemplateId, EventId, EventConditionId, StartCompareValue, EndCompareValue, Meanings INTO v_TmpEquipTemplateId,v_TmpEventId,v_TmpEventConditionId,v_TmpEventStartValue,
   v_TmpEventEndValue,v_TmpMeanings from TBL_EventCondition where BaseTypeId = v_BaseEventTypeId;
   select   StationId, EquipmentId INTO v_TmpStationId,v_TmpEquipmentId from TBL_Equipment where EquipmentTemplateId = v_TmpEquipTemplateId;

   select   SequenceId, StartTime INTO v_TmpSequenceId,v_TmpStartTime FROM TBL_ActiveEvent WHERE EventId = v_TmpEventId AND StationId = v_TmpStationId
   AND EquipmentId = v_TmpEquipmentId AND EventConditionId = v_TmpEventConditionId
   AND EndTime IS NULL;
   SET @SWV_Error = 0;
   IF v_TmpSequenceId IS NOT NULL AND v_TmpStartTime IS NOT NULL then

      CALL PNL_SaveEventResponse(v_TmpStationId,v_TmpEquipmentId,v_TmpEventId,v_TmpEventConditionId,v_TmpSequenceId,
      v_TmpStartTime,v_CurrentTime,0,v_TmpMeanings,v_TmpEventEndValue,
      v_BaseEventTypeId);
   ELSE
      SET v_TmpSequenceId = UUID();
      CALL PNL_SaveEventResponse(v_TmpStationId,v_TmpEquipmentId,v_TmpEventId,v_TmpEventConditionId,v_TmpSequenceId,
      v_CurrentTime,NULL,0,v_TmpMeanings,v_TmpEventStartValue,v_BaseEventTypeId);
   end if;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;     

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_Statistic_HistoryData]...';


DROP PROCEDURE IF EXISTS PBL_Statistic_HistoryData;
CREATE PROCEDURE PBL_Statistic_HistoryData(v_DataType		INT,
v_StartTime		DATETIME,
v_EndTime		DATETIME,INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN
   DECLARE v_TmpDate DATETIME;
   DECLARE v_OldCount INT;
   DECLARE v_NewCount INT;
   DECLARE v_SQL NATIONAL VARCHAR(300);
   DECLARE v_ObjName VARCHAR(50);
   DECLARE v_Result VARCHAR(1000);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   set v_Result = '';
   delete from ZHistoryDataCount where StatisticDate < v_StartTime and DataType = v_DataType;
   while(v_StartTime < v_EndTime) DO
      set v_TmpDate = TIMESTAMPADD(day,1,v_StartTime);
      set v_OldCount = null;
      select   `Count` INTO v_OldCount from ZHistoryDataCount where DataType = v_DataType and StatisticDate = v_StartTime;
      if v_DataType = 1 then
         select   count(*) INTO v_NewCount from TBL_HistoryEvent where StartTime >= v_StartTime and StartTime < v_TmpDate;
      else 
         if v_DataType = 2 then
            select   count(*) INTO v_NewCount from TBL_HistoryControl where StartTime >= v_StartTime and StartTime < v_TmpDate;
         else 
            if v_DataType = 3 then

               set v_SQL = CONCAT(N'SQLWAYS_EVAL# from TBL_HistorySignal',CAST(month(v_StartTime) AS CHAR(30)),
               'SQLWAYS_EVAL# ime>=''',DATE_FORMAT(v_StartTime,'%Y-%m-%d %T'),
               'SQLWAYS_EVAL# ime<''',DATE_FORMAT(v_TmpDate,'%Y-%m-%d %T'),'''');
               SET @SWV_Stmt = v_SQL;
               PREPARE SWT_Stmt FROM @SWV_Stmt;
               EXECUTE SWT_Stmt;
               DEALLOCATE PREPARE SWT_Stmt;
            else 
               if v_DataType = 4 then

                  set v_SQL = CONCAT(N'SQLWAYS_EVAL# from TBL_HistoryBattery',CAST(month(v_StartTime) AS CHAR(30)),
                  'SQLWAYS_EVAL# ime>=''',DATE_FORMAT(v_StartTime,'%Y-%m-%d %T'),
                  'SQLWAYS_EVAL# ime<''',DATE_FORMAT(v_TmpDate,'%Y-%m-%d %T'),'''');
                  SET @SWV_Stmt = v_SQL;
                  PREPARE SWT_Stmt FROM @SWV_Stmt;
                  EXECUTE SWT_Stmt;
                  DEALLOCATE PREPARE SWT_Stmt;
               else 
                  if v_DataType = 5 then
                     select   count(*) INTO v_NewCount from TBL_SignalStatistics where StatisticsTime >= v_StartTime and StatisticsTime < v_TmpDate;
                  else 
                     if v_DataType = 6 then
                        select   count(*) INTO v_NewCount from TBL_SwapCardRecord where RecordTime >= v_StartTime and RecordTime < v_TmpDate;
                     else 
                        if v_DataType = 7 then
                           select   count(*) INTO v_NewCount from TBL_OperationRecord where OperationTime >= v_StartTime and OperationTime < v_TmpDate;
                        else 
                           if v_DataType = 8 then
                              select   count(*) INTO v_NewCount from NotificationLog where StartTime >= v_StartTime and StartTime < v_TmpDate;
                           else 
                              if v_DataType = 9 then
                                 select   count(*) INTO v_NewCount from TBL_HistoryEventMask where StartTime >= v_StartTime and StartTime < v_TmpDate;
                              else 
                                 if v_DataType = 10 then
                                    select   count(*) INTO v_NewCount from TBL_LoginInfo where LoginTime >= v_StartTime and LoginTime < v_TmpDate;
                                 else 
                                    if v_DataType = 11 then

                                       select   name INTO v_ObjName from sysobjects where type = 'U' and name like 'TBL_Mid%' and name not like 'TBL_MidXXXX%Mid'   order by name LIMIT 1;
                                       set v_SQL = CONCAT(N'SQLWAYS_EVAL# from ',v_ObjName,'SQLWAYS_EVAL# ime>=''',DATE_FORMAT(v_StartTime,'%Y-%m-%d %T'),
                                       'SQLWAYS_EVAL# ime<''',DATE_FORMAT(v_TmpDate,'%Y-%m-%d %T'),
                                       '''');
                                       SET @SWV_Stmt = v_SQL;
                                       PREPARE SWT_Stmt FROM @SWV_Stmt;
                                       EXECUTE SWT_Stmt;
                                       DEALLOCATE PREPARE SWT_Stmt;
                                    else 
                                       if v_DataType = 12 then
                                          select   count(*) INTO v_NewCount from TBL_HistoryAmeterRecord where RecordTime >= v_StartTime and RecordTime < v_TmpDate;
                                       end if;
                                    end if;
                                 end if;
                              end if;
                           end if;
                        end if;
                     end if;
                  end if;
               end if;
            end if;
         end if;
      end if;
      if v_OldCount is null then
 insert into ZHistoryDataCount values(v_StartTime, v_DataType, v_NewCount);
      else 
         if v_OldCount < v_NewCount then

            update ZHistoryDataCount set `Count` = v_NewCount where DataType = v_DataType and StatisticDate = v_StartTime;
            if v_DataType = 1 then
               CALL PBL_Diagnose_HistoryEvent(v_StartTime);
            else 
               if v_DataType = 3 then
                  CALL PBL_Diagnose_HistorySignal(v_StartTime);
               end if;
            end if;
            SET v_Result = CONCAT(v_Result,',',DATE_FORMAT(v_StartTime,'%Y.%m.%d'));
         end if;
      end if;
      if v_DataType = 1 and v_NewCount > 0 and not exists(select 1 from ZHistoryEventTop100 where StatisticDate = v_StartTime) then
         CALL PBL_Diagnose_HistoryEvent(v_StartTime);
      end if;
      if v_DataType = 3 and v_NewCount > 0 and not exists(select 1 from ZHistorySignalTop100 where StatisticDate = v_StartTime) then
         CALL PBL_Diagnose_HistorySignal(v_StartTime);
      end if;
      set v_StartTime = v_TmpDate;
   END WHILE;
   SET @SWV_Error = 0;
   select v_Result;
   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;     

   SET SWP_Ret_Value = 0;
END;





-- SELECT N'SQLWAYS_EVAL# M_SaveEquipmentSeprateMask]...';


DROP PROCEDURE IF EXISTS PAM_SaveEquipmentSeprateMask;
CREATE PROCEDURE PAM_SaveEquipmentSeprateMask(v_StationId       INT,
v_EquipmentId     INT,
v_TimeGroupId     INT,
v_TimeMaskChar    NATIONAL VARCHAR(256),
v_Week         	INT,
v_UserId			INT ,
v_Reason          NATIONAL VARCHAR(256))
BEGIN
   DECLARE v_EventId INT; 
   DECLARE v_EventConditionId INT;
   DECLARE v_SequenceId NATIONAL VARCHAR(256);
   DECLARE v_EventStartTime DATETIME;
   DECLARE v_Meanings NATIONAL VARCHAR(256);
   DECLARE v_EventValue FLOAT;
   DECLARE v_BaseTypeId NUMERIC(10,0);
   DECLARE v_Overturn INT;
   DECLARE v_CurrentTime DATETIME;
   DECLARE v_i INT; 
   DECLARE v_RecordCount INT;
   DECLARE v_TimeSpanId INT;
   IF EXISTS(SELECT 'X' FROM TBL_EquipmentMask WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId) then

      UPDATE TBL_EquipmentMask SET TimeGroupId = v_TimeGroupId,Reason = v_Reason,UserId = v_UserId
      WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId;
   ELSE
 INSERT INTO TBL_EquipmentMask(StationId, EquipmentId, TimeGroupId, Reason, StartTime, EndTime, UserId)
VALUES(v_StationId, v_EquipmentId, v_TimeGroupId,v_Reason, NULL,NULL, v_UserId);
   end if;

   IF EXISTS(SELECT 'X' FROM TBL_TimeGroupSpan WHERE TimeGroupId = v_TimeGroupId AND Week = v_Week) then

      UPDATE TBL_TimeGroupSpan SET TimeSpanChar = v_TimeMaskChar,LastUpdateDate = CURRENT_TIMESTAMP
      WHERE TimeGroupId = v_TimeGroupId AND Week = v_Week;
   ELSE
      select   max(TimeSpanId) INTO v_TimeSpanId FROM TBL_TimeGroupSpan2;
      IF v_TimeSpanId IS NULL then

         SET v_TimeSpanId = 0;
      end if;
      SET v_TimeSpanId = v_TimeSpanId+1;
      INSERT INTO TBL_TimeGroupSpan(TimeSpanId,TimeGroupId, StartTime,EndTime, Week, TimeSpanChar, LastUpdateDate)
VALUES(v_TimeSpanId, v_TimeGroupId, NULL,NULL, v_Week, v_TimeMaskChar, CURRENT_TIMESTAMP);
   end if;

-- 结束存量活动告警
   DROP TEMPORARY TABLE IF EXISTS tt_ActiveEvent;
   CREATE TEMPORARY TABLE tt_ActiveEvent
   (
      IndexId INT   AUTO_INCREMENT PRIMARY KEY,
      SequenceId NATIONAL VARCHAR(128) NOT NULL,
      EquipmentId INT NOT NULL,
      EventId INT NOT NULL,
      EventConditionId INT NOT NULL,
      StartTime DATETIME,
      Overturn INT NOT NULL,
      Meanings NATIONAL VARCHAR(256),
      EventValue FLOAT,
      BaseTypeId NUMERIC(10,0)
   );
   CREATE UNIQUE INDEX MaskEvent_IDX1 ON tt_ActiveEvent
   (IndexId);

   INSERT INTO tt_ActiveEvent(SequenceId,EquipmentId, EventId, EventConditionId,StartTime,Overturn,Meanings, EventValue, BaseTypeId)
   SELECT SequenceId, EquipmentId, EventId,  EventConditionId, StartTime, ReversalNum,Meanings, EventValue, BaseTypeId FROM TBL_ActiveEvent
   WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId
   AND EndTime IS  NULL;  


   select   MIN(IndexId), MAX(IndexId) INTO v_i,v_RecordCount FROM tt_ActiveEvent;
   WHILE v_i <= v_RecordCount DO
      select   SequenceId, EventId, EventConditionId, StartTime, Overturn, Meanings, EventValue, BaseTypeId INTO v_SequenceId,v_EventId,v_EventConditionId,v_EventStartTime,v_Overturn,
      v_Meanings,v_EventValue,v_BaseTypeId FROM tt_ActiveEvent WHERE IndexId = v_i;
      SET v_CurrentTime = CURRENT_TIMESTAMP;
      CALL PNL_SaveAftEventResponse(v_StationId,v_EquipmentId,v_EventId,v_EventConditionId,v_SequenceId,v_EventStartTime,
      v_CurrentTime,v_Overturn,v_Meanings,v_EventValue,v_BaseTypeId);
      INSERT INTO TBL_EventMaskHistory(SequenceId, StationId, EquipmentId, EventId, EventConditionId,EventValue, Meanings, BaseTypeId, StartTime)
VALUES(v_SequenceId, v_StationId, v_EquipmentId, v_EventId, v_EventConditionId,v_EventValue, v_Meanings, v_BaseTypeId, v_EventStartTime);

      SET v_i = v_i+1;
   END WHILE;
END;


-- SELECT N'SQLWAYS_EVAL# L_MaskEventRestart]...';


DROP PROCEDURE IF EXISTS PNL_MaskEventRestart;


CREATE PROCEDURE PNL_MaskEventRestart(
 -- 基类ID(可空)
v_StationId INT, -- 局站Id
v_EquipmentId INT, -- 设备Id
v_EventId INT, -- 事件Id
v_EventConditionId INT, -- 产生事件的条件Id
v_SequenceId NATIONAL VARCHAR(128), -- 事件流水号
v_OldSequenceId NATIONAL VARCHAR(128), -- 事件流水号
v_StartTime DATETIME, -- 事件开始时间
v_EndTime DATETIME, -- 事件结束时间
v_Overturn INT, -- 事件翻转次数
v_Meanings NATIONAL VARCHAR(255), -- 事件描述
v_EventValue FLOAT, 	-- 触发值
v_BaseTypeId NUMERIC(10,0),INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_ExeResult INT;
   DECLARE v_ResetSequenceId NATIONAL VARCHAR(128);



-- SQLWAYS_EVAL# quenceId是否为NULL，如果为NULL,老的SequenceId赋给ResetSequenceId，新的SequenceId赋给SequenceId
   select   ResetSequenceId INTO v_ResetSequenceId FROM TSL_ActiveEvent WHERE SequenceId = v_OldSequenceId;


   IF  v_ResetSequenceId IS NULL then

      UPDATE TSL_ActiveEvent SET ResetSequenceId = v_OldSequenceId  WHERE SequenceId = v_OldSequenceId;
   end if;


   UPDATE TSL_ActiveEvent SET SequenceId = v_SequenceId WHERE SequenceId = v_OldSequenceId;


-- 2 告警关联处理
   SET v_ExeResult = PNL_SaveSARPreEventResponse(v_StationId,v_EquipmentId,v_EventId,v_EventConditionId,v_SequenceId,v_StartTime,
   v_EndTime,v_Overturn,v_Meanings,v_EventValue,v_BaseTypeId);
   IF v_ExeResult = 1 then

-- 需要BS去处理告警关联
      SET SWP_Ret_Value = 0;
      LEAVE SWL_return;
   end if;

-- 3 告警逻辑处理
   SET v_ExeResult = PNL_SaveAftEventResponse(v_StationId,v_EquipmentId,v_EventId,v_EventConditionId,v_SequenceId,v_StartTime,
   v_EndTime,v_Overturn,v_Meanings,v_EventValue,v_BaseTypeId);

   SET SWP_Ret_Value = v_ExeResult;
END;



-- SELECT N'SQLWAYS_EVAL# M_SaveEventSeprateMask]...';



DROP PROCEDURE IF EXISTS PAM_SaveEventSeprateMask;
CREATE PROCEDURE PAM_SaveEventSeprateMask(v_StationId       INT,
v_EquipmentId     INT,
v_EventId         INT,
v_TimeMaskChar    NATIONAL VARCHAR(256),
v_Week         	INT,
v_UserId          INT ,
v_Reason          NATIONAL VARCHAR(256))
BEGIN
   DECLARE v_EventConditionId INT;
   DECLARE v_SequenceId NATIONAL VARCHAR(256);
   DECLARE v_EventStartTime DATETIME;
   DECLARE v_Meanings NATIONAL VARCHAR(256);
   DECLARE v_EventValue FLOAT;
   DECLARE v_BaseTypeId NUMERIC(10,0);
   DECLARE v_Overturn INT;
   DECLARE v_CurrentTime DATETIME;
   DECLARE v_i INT; 
   DECLARE v_RecordCount INT;
   DECLARE v_TimeSpanId INT;
   DECLARE v_TimeGroupId INT;
   select   max(TimeGroupId) INTO v_TimeGroupId FROM TBL_EventMask;
   IF v_TimeGroupId IS NULL then

      SET v_TimeGroupId = 0;
   end if; 

   IF EXISTS(SELECT 'X' FROM TBL_EventMask WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId AND EventId = v_EventId) then

      UPDATE TBL_EventMask SET Reason = v_Reason,UserId = v_UserId,v_TimeGroupId = TimeGroupId
      WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId AND EventId = v_EventId;
   ELSE
      SET v_TimeGroupId = v_TimeGroupId+1;
      INSERT INTO TBL_EventMask(StationId,EquipmentId,EventId,TimeGroupId,Reason, UserId, StartTime,EndTime)
VALUES(v_StationId,v_EquipmentId,v_EventId, v_TimeGroupId, v_Reason, v_UserId,NULL,NULL);
   end if;


   IF EXISTS(SELECT 'X' FROM TBL_TimeGroupSpan WHERE TimeGroupId = v_TimeGroupId AND Week = v_Week) then

      UPDATE TBL_TimeGroupSpan SET TimeSpanChar = v_TimeMaskChar,LastUpdateDate = CURRENT_TIMESTAMP
      WHERE TimeGroupId = v_TimeGroupId AND Week = v_Week;
   ELSE
      select   max(TimeSpanId) INTO v_TimeSpanId FROM TBL_TimeGroupSpan2;
      IF v_TimeSpanId IS NULL then

         SET v_TimeSpanId = 0;
      end if;
      INSERT INTO TBL_TimeGroupSpan(TimeSpanId,TimeGroupId, StartTime,EndTime, Week, TimeSpanChar, LastUpdateDate)
VALUES(v_TimeSpanId+1, v_TimeGroupId, NULL,NULL, v_Week, v_TimeMaskChar, CURRENT_TIMESTAMP);
   end if;

-- 结束存量活动告警
   DROP TEMPORARY TABLE IF EXISTS tt_ActiveEvent;
   CREATE TEMPORARY TABLE tt_ActiveEvent
   (
      IndexId INT   AUTO_INCREMENT PRIMARY KEY,
      SequenceId NATIONAL VARCHAR(128) NOT NULL,
      EquipmentId INT NOT NULL,
      EventId INT NOT NULL,
      EventConditionId INT NOT NULL,
      StartTime DATETIME,
      Overturn INT NOT NULL,
      Meanings NATIONAL VARCHAR(256),
      EventValue FLOAT,
      BaseTypeId NUMERIC(10,0)
   );
   CREATE UNIQUE INDEX MaskEvent_IDX1 ON tt_ActiveEvent
   (IndexId);

   INSERT INTO tt_ActiveEvent(SequenceId,EquipmentId, EventId, EventConditionId,StartTime,Overturn,Meanings, EventValue, BaseTypeId)
   SELECT SequenceId, EquipmentId, EventId,  EventConditionId, StartTime, ReversalNum,Meanings, EventValue, BaseTypeId FROM TBL_ActiveEvent
   WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId AND EventId = v_EventId
   AND EndTime IS NULL; 


   select   MIN(IndexId), MAX(IndexId) INTO v_i,v_RecordCount FROM tt_ActiveEvent;
   WHILE v_i <= v_RecordCount DO
      select   SequenceId, EventConditionId, StartTime, Overturn, Meanings, EventValue, BaseTypeId INTO v_SequenceId,v_EventConditionId,v_EventStartTime,v_Overturn,v_Meanings,
      v_EventValue,v_BaseTypeId FROM tt_ActiveEvent WHERE IndexId = v_i;
      SET v_CurrentTime = CURRENT_TIMESTAMP;
      CALL PNL_SaveEndEventByMask(v_StationId,v_EquipmentId,v_EventId,v_SequenceId,v_CurrentTime);
      INSERT INTO TBL_EventMaskHistory(SequenceId, StationId, EquipmentId, EventId, EventConditionId,EventValue, Meanings, BaseTypeId, StartTime)
VALUES(v_SequenceId, v_StationId, v_EquipmentId, v_EventId, v_EventConditionId,v_EventValue, v_Meanings, v_BaseTypeId, v_EventStartTime);

      SET v_i = v_i+1;
   END WHILE;

   SELECT  v_TimeGroupId;
END;




-- SELECT N'SQLWAYS_EVAL# M_SaveStationSeprateMask]...';


DROP PROCEDURE IF EXISTS PAM_SaveStationSeprateMask;
CREATE PROCEDURE PAM_SaveStationSeprateMask(v_StationId       INT,
v_TimeGroupId     INT,
v_TimeMaskChar    NATIONAL VARCHAR(256),
v_Week         	INT,
v_UserId			INT ,
v_Reason          NATIONAL VARCHAR(256))
BEGIN
   DECLARE v_EquipmentId INT;			   
   DECLARE v_EventId INT; 
   DECLARE v_EventConditionId INT;
   DECLARE v_SequenceId NATIONAL VARCHAR(256);
   DECLARE v_EventStartTime DATETIME;
   DECLARE v_Meanings NATIONAL VARCHAR(256);
   DECLARE v_EventValue FLOAT;
   DECLARE v_BaseTypeId NUMERIC(10,0);
   DECLARE v_Overturn INT;
   DECLARE v_CurrentTime DATETIME;
   DECLARE v_i INT; 
   DECLARE v_RecordCount INT;
   DECLARE v_TimeSpanId INT;
   IF EXISTS(SELECT 'X' FROM TBL_StationMask WHERE StationId = v_StationId) then

      UPDATE TBL_StationMask SET TimeGroupId = v_TimeGroupId,Reason = v_Reason,UserId = v_UserId
      WHERE StationId = v_StationId;
   ELSE
 INSERT INTO TBL_StationMask(StationId,TimeGroupId, Reason,StartTime,EndTime, UserId)
VALUES(v_StationId, v_TimeGroupId, v_Reason, NULL,NULL, v_UserId);
   end if;

   IF EXISTS(SELECT 'X' FROM TBL_TimeGroupSpan WHERE TimeGroupId = v_TimeGroupId AND Week = v_Week) then

      UPDATE TBL_TimeGroupSpan SET TimeSpanChar = v_TimeMaskChar,LastUpdateDate = CURRENT_TIMESTAMP
      WHERE TimeGroupId = v_TimeGroupId AND Week = v_Week;
   ELSE
      select   max(TimeSpanId) INTO v_TimeSpanId FROM TBL_TimeGroupSpan2;
      IF v_TimeSpanId IS NULL then

         SET v_TimeSpanId = 0;
      end if;
      INSERT INTO TBL_TimeGroupSpan(TimeSpanId,TimeGroupId, StartTime,EndTime, Week, TimeSpanChar, LastUpdateDate)
VALUES(v_TimeSpanId+1, v_TimeGroupId, NULL,NULL, v_Week, v_TimeMaskChar, CURRENT_TIMESTAMP);
   end if;

-- 结束存量活动告警
   DROP TEMPORARY TABLE IF EXISTS tt_ActiveEvent;
   CREATE TEMPORARY TABLE tt_ActiveEvent
   (
      IndexId INT   AUTO_INCREMENT PRIMARY KEY,
      SequenceId NATIONAL VARCHAR(128) NOT NULL,
      EquipmentId INT NOT NULL,
      EventId INT NOT NULL,
      EventConditionId INT NOT NULL,
      StartTime DATETIME,
      Overturn INT NOT NULL,
      Meanings NATIONAL VARCHAR(256),
      EventValue FLOAT,
      BaseTypeId NUMERIC(10,0)
   );
   CREATE UNIQUE INDEX MaskEvent_IDX1 ON tt_ActiveEvent
   (IndexId);

   INSERT INTO tt_ActiveEvent(SequenceId,EquipmentId, EventId, EventConditionId,StartTime,Overturn,Meanings, EventValue, BaseTypeId)
   SELECT SequenceId, EquipmentId, EventId,  EventConditionId, StartTime, ReversalNum,Meanings, EventValue, BaseTypeId FROM TBL_ActiveEvent
   WHERE StationId = v_StationId
   AND EndTime IS NULL;  


   select   MIN(IndexId), MAX(IndexId) INTO v_i,v_RecordCount FROM tt_ActiveEvent;
   WHILE v_i <= v_RecordCount DO
      select   SequenceId, EquipmentId, EventId, EventConditionId, StartTime, Overturn, Meanings, EventValue, BaseTypeId INTO v_SequenceId,v_EquipmentId,v_EventId,v_EventConditionId,v_EventStartTime,
      v_Overturn,v_Meanings,v_EventValue,v_BaseTypeId FROM tt_ActiveEvent WHERE IndexId = v_i;
      SET v_CurrentTime = CURRENT_TIMESTAMP;
      CALL PNL_SaveEndEventByMask(v_StationId,v_EquipmentId,v_EventId,v_SequenceId,v_CurrentTime);
      INSERT INTO TBL_EventMaskHistory(SequenceId, StationId, EquipmentId, EventId, EventConditionId,EventValue, Meanings, BaseTypeId, StartTime)
VALUES(v_SequenceId, v_StationId, v_EquipmentId, v_EventId, v_EventConditionId,v_EventValue, v_Meanings, v_BaseTypeId, v_EventStartTime);

      SET v_i = v_i+1;
   END WHILE;
END;


DROP PROCEDURE IF EXISTS PNL_SaveEventTemplate;

CREATE PROCEDURE PNL_SaveEventTemplate(v_EquipmentId 		 INT,
v_EventId 		     INT,
v_SourceTemplateId 	 INT,
v_DestTemplateId 		 INT,
v_StartType 		 INT,
v_EndType  		INT,
v_EventName  NATIONAL VARCHAR(255),
v_StartExpression NATIONAL VARCHAR(255),
v_SuppressExpression NATIONAL VARCHAR(255),
v_EventCategory  INT,
v_DisplayIndex  INT)
BEGIN
   DECLARE v_StartExpressionEquipmentId NATIONAL VARCHAR(40);
   DECLARE v_SuppressExpressionEquipmentId NATIONAL VARCHAR(40);
   DECLARE v_MonitorUnitId INT;
   DECLARE v_StationId INT;
   DECLARE v_count INT;
   IF EXISTS(SELECT 'X' FROM TBL_EquipmentTemplate WHERE EquipmentTemplateId = v_SourceTemplateId AND Memo = '动态配置') then

      UPDATE TBL_Event a SET a.EventName = v_EventName,a.StartType = v_StartType,a.EndType = v_EndType,
      a.EventCategory = v_EventCategory,a.DisplayIndex = v_DisplayIndex
      WHERE a.EquipmentTemplateId = v_SourceTemplateId
      AND a.EventId = v_EventId;
      SET v_StartExpressionEquipmentId = SUBSTRING(v_StartExpression,2,2);
      SET v_SuppressExpressionEquipmentId = SUBSTRING(v_SuppressExpression,2,2);
      select   StationId, MonitorUnitId INTO v_StationId,v_MonitorUnitId FROM TBL_Equipment WHERE EquipmentId = v_EquipmentId;
      IF (v_StartExpressionEquipmentId = '-1'  OR  v_StartExpressionEquipmentId IS NULL OR v_StartExpressionEquipmentId = '')
      AND  (v_SuppressExpressionEquipmentId IS NULL  OR  v_SuppressExpressionEquipmentId = '-1' OR v_SuppressExpressionEquipmentId = '') then

         UPDATE TBL_Event a SET a.StartExpression = v_StartExpression,a.SuppressExpression = v_SuppressExpression
         WHERE a.EquipmentTemplateId = v_SourceTemplateId
         AND a.EventId = v_EventId;
         select   count(*) INTO v_count FROM TSL_MonitorUnitEvent WHERE EquipmentId = v_EquipmentId AND EventId = v_EventId;
         IF v_count > 0 then
            UPDATE TSL_MonitorUnitEvent SET StartExpression = v_StartExpression,SuppressExpression = v_SuppressExpression
            WHERE EquipmentId = v_EquipmentId AND EventId = v_EventId;
         end if;
      ELSE
         select   count(*) INTO v_count FROM TSL_MonitorUnitEvent WHERE EquipmentId = v_EquipmentId AND EventId = v_EventId;
         IF v_count > 0 then
            UPDATE TSL_MonitorUnitEvent SET StartExpression = v_StartExpression,SuppressExpression = v_SuppressExpression
            WHERE EquipmentId = v_EquipmentId AND EventId = v_EventId;
         ELSE
INSERT INTO TSL_MonitorUnitEvent VALUES(v_StationId,  v_MonitorUnitId, v_EquipmentId,v_EventId, v_StartExpression, v_SuppressExpression);
         end if;
      end if;
      SELECT 0;
   ELSE
-- SQLWAYS_EVAL# Template
 INSERT INTO TBL_EquipmentTemplate(EquipmentTemplateId,EquipmentTemplateName,ParentTemplateId,
Memo,ProtocolCode,EquipmentCategory,EquipmentType,Property,
Description,EquipmentStyle,Unit,Vendor,EquipmentBaseType)
      SELECT v_DestTemplateId,EquipmentTemplateName,EquipmentTemplateId,
'动态配置',a.ProtocolCode,a.EquipmentCategory,a.EquipmentType,a.Property,
a.Description,a.EquipmentStyle,a.Unit,a.Vendor,a.EquipmentBaseType
      FROM TBL_EquipmentTemplate a WHERE a.EquipmentTemplateId = v_SourceTemplateId;

-- TBL_Signal
      INSERT INTO TBL_Signal(EquipmentTemplateId, SignalId, Enable, Visible, Description, SignalName,
SignalCategory, SignalType, ChannelNo, ChannelType, Expression, DataType,
ShowPrecision, Unit, StoreInterval, AbsValueThreshold, PercentThreshold,
StaticsPeriod, BaseTypeId, ChargeStoreInterVal, ChargeAbsValue, DisplayIndex, ModuleNo)
      SELECT v_DestTemplateId, a.SignalId, a.Enable, a.Visible, a.Description, a.SignalName,
a.SignalCategory, a.SignalType, a.ChannelNo, a.ChannelType, a.Expression, a.DataType,
a.ShowPrecision, a.Unit, a.StoreInterval, a.AbsValueThreshold, a.PercentThreshold,
a.StaticsPeriod, a.BaseTypeId, a.ChargeStoreInterVal, a.ChargeAbsValue, a.DisplayIndex,a.ModuleNo
      FROM TBL_Signal a WHERE a.EquipmentTemplateId = v_SourceTemplateId; 

-- SQLWAYS_EVAL# nings
      INSERT INTO TBL_SignalMeanings(EquipmentTemplateId, SignalId, StateValue, Meanings)
      SELECT v_DestTemplateId, a.SignalId, a.StateValue, a.Meanings
      FROM TBL_SignalMeanings a WHERE a.EquipmentTemplateId = v_SourceTemplateId;

-- SQLWAYS_EVAL# perty
      INSERT INTO TBL_SignalProperty(EquipmentTemplateId, SignalId, SignalPropertyId)
      SELECT v_DestTemplateId, a.SignalId, a.SignalPropertyId
      FROM TBL_SignalProperty a WHERE a.EquipmentTemplateId = v_SourceTemplateId;


-- TBL_Event
      INSERT INTO TBL_Event(EquipmentTemplateId, EventId, EventName, StartType, EndType, StartExpression,
SuppressExpression, EventCategory, SignalId, Enable, Visible, Description, DisplayIndex, ModuleNo)
      SELECT v_DestTemplateId, a.EventId, a.EventName, a.StartType, a.EndType, a.StartExpression,
a.SuppressExpression, a.EventCategory, a.SignalId, a.Enable, a.Visible, a.Description, a.DisplayIndex, a.ModuleNo
      FROM TBL_Event a WHERE a.EquipmentTemplateId = v_SourceTemplateId;
      UPDATE TBL_Event a SET a.EventName = v_EventName,a.StartType = v_StartType,a.EndType = v_EndType,
      a.EventCategory = v_EventCategory,a.DisplayIndex = v_DisplayIndex
      WHERE a.EquipmentTemplateId = v_DestTemplateId
      AND a.EventId = v_EventId;
      SET v_StartExpressionEquipmentId = SUBSTRING(v_StartExpression,2,2);
      SET v_SuppressExpressionEquipmentId = SUBSTRING(v_SuppressExpression,2,2);
      IF (v_StartExpressionEquipmentId = '-1'  OR  v_StartExpressionEquipmentId IS NULL OR v_StartExpressionEquipmentId = '')
      AND  (v_SuppressExpressionEquipmentId IS NULL  OR  v_SuppressExpressionEquipmentId = '-1' OR v_SuppressExpressionEquipmentId = '') then

         UPDATE TBL_Event a SET a.StartExpression = v_StartExpression,a.SuppressExpression = v_SuppressExpression
         WHERE a.EquipmentTemplateId = v_DestTemplateId
         AND a.EventId = v_EventId;
         select   count(*) INTO v_count FROM TSL_MonitorUnitEvent WHERE EquipmentId = v_EquipmentId AND EventId = v_EventId;
         IF v_count > 0 then
            UPDATE TSL_MonitorUnitEvent SET StartExpression = v_StartExpression,SuppressExpression = v_SuppressExpression
            WHERE EquipmentId = v_EquipmentId AND EventId = v_EventId;
         end if;
      ELSE
         select   count(*) INTO v_count FROM TSL_MonitorUnitEvent WHERE EquipmentId = v_EquipmentId AND EventId = v_EventId;
         IF v_count > 0 then
            UPDATE TSL_MonitorUnitEvent SET StartExpression = v_StartExpression,SuppressExpression = v_SuppressExpression
            WHERE EquipmentId = v_EquipmentId AND EventId = v_EventId;
         ELSE
INSERT INTO TSL_MonitorUnitEvent VALUES(v_StationId,  v_MonitorUnitId, v_EquipmentId,v_EventId, v_StartExpression, v_SuppressExpression);
         end if;
      end if;


-- SQLWAYS_EVAL# ition
      INSERT INTO TBL_EventCondition(EventConditionId, EquipmentTemplateId, EventId, StartOperation, StartCompareValue,
StartDelay, EndOperation, EndCompareValue, EndDelay, Frequency,
FrequencyThreshold, Meanings, EquipmentState, BaseTypeId, EventSeverity, StandardName)
      SELECT a.EventConditionId, v_DestTemplateId, a.EventId, a.StartOperation, a.StartCompareValue,
a.StartDelay, a.EndOperation, a.EndCompareValue, a.EndDelay, a.Frequency,
a.FrequencyThreshold, a.Meanings, a.EquipmentState, a.BaseTypeId, a.EventSeverity, a.StandardName
      FROM TBL_EventCondition a WHERE a.EquipmentTemplateId = v_SourceTemplateId;

-- TBL_Control
      INSERT INTO TBL_Control(EquipmentTemplateId, ControlId, ControlName, ControlCategory, CmdToken,
BaseTypeId, ControlSeverity, SignalId, TimeOut, Retry, Description, Enable, Visible,
DisplayIndex, CommandType, ControlType, DataType, MaxValue, MinValue, DefaultValue, ModuleNo)
      SELECT v_DestTemplateId, a.ControlId, a.ControlName, a.ControlCategory, a.CmdToken,
a.BaseTypeId, a.ControlSeverity, a.SignalId, a.TimeOut, a.Retry, a.Description, a.Enable, a.Visible,
a.DisplayIndex, a.CommandType, a.ControlType, a.DataType, a.MaxValue, a.MinValue, a.DefaultValue, a.ModuleNo
      FROM TBL_Control a WHERE a.EquipmentTemplateId = v_SourceTemplateId;

-- SQLWAYS_EVAL# anings
      INSERT INTO TBL_ControlMeanings(EquipmentTemplateId, ControlId, ParameterValue, Meanings)
      SELECT v_DestTemplateId, a.ControlId, a.ParameterValue, a.Meanings
      FROM TBL_ControlMeanings a WHERE a.EquipmentTemplateId = v_SourceTemplateId;
      UPDATE TBL_Equipment SET EquipmentTemplateId = v_DestTemplateId
      WHERE EquipmentId = v_EquipmentId;
      SELECT 1;
   end if;
END;



DROP PROCEDURE IF EXISTS PNL_SaveSignalTemplate;

CREATE PROCEDURE PNL_SaveSignalTemplate(v_EquipmentId				 INT,
v_SourceTemplateId 		 INT,
v_DestTemplateId 		     INT,
v_SignalId          	     INT,
v_SignalName        NATIONAL VARCHAR(255),		
v_Expression        NATIONAL VARCHAR(255),
v_ShowPrecision     NATIONAL VARCHAR(255),
v_StoreInterval           FLOAT,
v_AbsValueThreshold		FLOAT,
v_PercentThreshold	    FLOAT,
v_StaticsPeriod           INT)
BEGIN
   DECLARE v_ExpressionEquipmentId NATIONAL VARCHAR(40);
   DECLARE v_MonitorUnitId INT;
   DECLARE v_StationId INT;
   DECLARE v_count INT;
   DECLARE v_ReferanceSamplerUnitId INT;
   DECLARE v_ReferanceChannelId INT;
   IF EXISTS(SELECT 'X' FROM TBL_EquipmentTemplate WHERE EquipmentTemplateId = v_SourceTemplateId AND Memo = '动态配置') then

      UPDATE TBL_Signal a SET a.SignalName = v_SignalName,a.Expression = v_Expression,a.ShowPrecision = v_ShowPrecision,
      a.StoreInterval = v_StoreInterval,a.AbsValueThreshold = v_AbsValueThreshold, 
      a.PercentThreshold = v_PercentThreshold,a.StaticsPeriod = v_StaticsPeriod
      WHERE a.EquipmentTemplateId = v_SourceTemplateId
      AND a.SignalId = v_SignalId;
      SET v_ExpressionEquipmentId = SUBSTRING(v_Expression,2,2);
      IF v_ExpressionEquipmentId = '-1' OR v_ExpressionEquipmentId IS NULL OR v_ExpressionEquipmentId = '' then

         UPDATE TBL_Signal a SET a.Expression = v_Expression
         WHERE a.EquipmentTemplateId = v_SourceTemplateId
         AND a.SignalId = v_SignalId;
         select   count(*) INTO v_count FROM TSL_MonitorUnitSignal WHERE EquipmentId = v_EquipmentId AND SignalId = v_SignalId;
         IF v_count > 0 then
            DELETE FROM TSL_MonitorUnitSignal WHERE EquipmentId = v_EquipmentId AND SignalId = v_SignalId;
         end if;
      ELSE
         select   count(*) INTO v_count FROM TSL_MonitorUnitSignal WHERE EquipmentId = v_EquipmentId AND SignalId = v_SignalId;
         IF v_count > 0 then
            UPDATE TSL_MonitorUnitSignal SET Expression = v_Expression
            WHERE EquipmentId = v_EquipmentId AND SignalId = v_SignalId;
         ELSE
            select   StationId, MonitorUnitId, SamplerUnitId INTO v_StationId,v_MonitorUnitId,v_ReferanceSamplerUnitId FROM TBL_Equipment WHERE EquipmentId = v_EquipmentId;
            select   ChannelNo INTO v_ReferanceChannelId FROM TBL_Signal WHERE EquipmentTemplateId = v_SourceTemplateId AND SignalId = v_SignalId;
            INSERT INTO TSL_MonitorUnitSignal VALUES(v_StationId,  v_MonitorUnitId, v_EquipmentId,v_SignalId,v_ReferanceSamplerUnitId,v_ReferanceChannelId, v_Expression, 2);
         end if;
      end if;
      SELECT 0;
   ELSE

-- SQLWAYS_EVAL# Template
 INSERT INTO TBL_EquipmentTemplate(EquipmentTemplateId,EquipmentTemplateName,ParentTemplateId,
Memo,ProtocolCode,EquipmentCategory,EquipmentType,Property,
Description,EquipmentStyle,Unit,Vendor,EquipmentBaseType,StationCategory)
      SELECT v_DestTemplateId,EquipmentTemplateName,EquipmentTemplateId,
'动态配置',a.ProtocolCode,a.EquipmentCategory,a.EquipmentType,a.Property,
a.Description,a.EquipmentStyle,a.Unit,a.Vendor,a.EquipmentBaseType,a.StationCategory
      FROM TBL_EquipmentTemplate a WHERE a.EquipmentTemplateId = v_SourceTemplateId;

-- TBL_Signal
      INSERT INTO TBL_Signal(EquipmentTemplateId, SignalId, Enable, Visible, Description, SignalName,
SignalCategory, SignalType, ChannelNo, ChannelType, Expression, DataType,
ShowPrecision, Unit, StoreInterval, AbsValueThreshold, PercentThreshold,
StaticsPeriod, BaseTypeId, ChargeStoreInterVal, ChargeAbsValue, DisplayIndex, ModuleNo)
      SELECT v_DestTemplateId, a.SignalId, a.Enable, a.Visible, a.Description, a.SignalName,
a.SignalCategory, a.SignalType, a.ChannelNo, a.ChannelType, a.Expression, a.DataType,
a.ShowPrecision, a.Unit, a.StoreInterval, a.AbsValueThreshold, a.PercentThreshold,
a.StaticsPeriod, a.BaseTypeId, a.ChargeStoreInterVal, a.ChargeAbsValue, a.DisplayIndex,a.ModuleNo
      FROM TBL_Signal a WHERE a.EquipmentTemplateId = v_SourceTemplateId;
      UPDATE TBL_Signal a SET a.SignalName = v_SignalName,a.ShowPrecision = v_ShowPrecision,a.StoreInterval = v_StoreInterval,
      a.AbsValueThreshold = v_AbsValueThreshold,a.PercentThreshold = v_PercentThreshold,
      a.StaticsPeriod = v_StaticsPeriod
      WHERE a.EquipmentTemplateId = v_DestTemplateId
      AND a.SignalId = v_SignalId;
      SET v_ExpressionEquipmentId = SUBSTRING(v_Expression,2,2);
      IF v_ExpressionEquipmentId = '-1' OR v_ExpressionEquipmentId IS NULL OR v_ExpressionEquipmentId = '' then

         UPDATE TBL_Signal a SET a.Expression = v_Expression
         WHERE a.EquipmentTemplateId = v_DestTemplateId
         AND a.SignalId = v_SignalId;
         select   count(*) INTO v_count FROM TSL_MonitorUnitSignal WHERE EquipmentId = v_EquipmentId AND SignalId = v_SignalId;
         IF v_count > 0 then
            DELETE FROM TSL_MonitorUnitSignal WHERE EquipmentId = v_EquipmentId AND SignalId = v_SignalId;
         end if;
      ELSE
         select   count(*) INTO v_count FROM TSL_MonitorUnitSignal WHERE EquipmentId = v_EquipmentId AND SignalId = v_SignalId;
         IF v_count > 0 then
            UPDATE TSL_MonitorUnitSignal SET Expression = v_Expression
            WHERE EquipmentId = v_EquipmentId AND SignalId = v_SignalId;
         ELSE
            select   StationId, MonitorUnitId, SamplerUnitId INTO v_StationId,v_MonitorUnitId,v_ReferanceSamplerUnitId FROM TBL_Equipment WHERE EquipmentId = v_EquipmentId;
            select   ChannelNo INTO v_ReferanceChannelId FROM TBL_Signal WHERE EquipmentTemplateId = v_SourceTemplateId AND SignalId = v_SignalId;
            INSERT INTO TSL_MonitorUnitSignal VALUES(v_StationId,  v_MonitorUnitId, v_EquipmentId,v_SignalId,v_ReferanceSamplerUnitId,v_ReferanceChannelId, v_Expression, 2);
         end if;
      end if;


-- SQLWAYS_EVAL# nings
      INSERT INTO TBL_SignalMeanings(EquipmentTemplateId, SignalId, StateValue, Meanings,BaseCondId)
      SELECT v_DestTemplateId, a.SignalId, a.StateValue, a.Meanings,a.BaseCondId
      FROM TBL_SignalMeanings a WHERE a.EquipmentTemplateId = v_SourceTemplateId;

-- SQLWAYS_EVAL# perty
      INSERT INTO TBL_SignalProperty(EquipmentTemplateId, SignalId, SignalPropertyId)
      SELECT v_DestTemplateId, a.SignalId, a.SignalPropertyId
      FROM TBL_SignalProperty a WHERE a.EquipmentTemplateId = v_SourceTemplateId;


-- TBL_Event
      INSERT INTO TBL_Event(EquipmentTemplateId, EventId, EventName, StartType, EndType, StartExpression,
SuppressExpression, EventCategory, SignalId, Enable, Visible, Description, DisplayIndex, ModuleNo)
      SELECT v_DestTemplateId, a.EventId, a.EventName, a.StartType, a.EndType, a.StartExpression,
a.SuppressExpression, a.EventCategory, a.SignalId, a.Enable, a.Visible, a.Description, a.DisplayIndex, a.ModuleNo
      FROM TBL_Event a WHERE a.EquipmentTemplateId = v_SourceTemplateId;

-- SQLWAYS_EVAL# ition
      INSERT INTO TBL_EventCondition(EventConditionId, EquipmentTemplateId, EventId, StartOperation, StartCompareValue,
StartDelay, EndOperation, EndCompareValue, EndDelay, Frequency,
FrequencyThreshold, Meanings, EquipmentState, BaseTypeId, EventSeverity, StandardName)
      SELECT a.EventConditionId, v_DestTemplateId, a.EventId, a.StartOperation, a.StartCompareValue,
a.StartDelay, a.EndOperation, a.EndCompareValue, a.EndDelay, a.Frequency,
a.FrequencyThreshold, a.Meanings, a.EquipmentState, a.BaseTypeId, a.EventSeverity, a.StandardName
      FROM TBL_EventCondition a WHERE a.EquipmentTemplateId = v_SourceTemplateId;

-- TBL_Control
      INSERT INTO TBL_Control(EquipmentTemplateId, ControlId, ControlName, ControlCategory, CmdToken,
BaseTypeId, ControlSeverity, SignalId, TimeOut, Retry, Description, Enable, Visible,
DisplayIndex, CommandType, ControlType, DataType, MaxValue, MinValue, DefaultValue, ModuleNo)
      SELECT v_DestTemplateId, a.ControlId, a.ControlName, a.ControlCategory, a.CmdToken,
a.BaseTypeId, a.ControlSeverity, a.SignalId, a.TimeOut, a.Retry, a.Description, a.Enable, a.Visible,
a.DisplayIndex, a.CommandType, a.ControlType, a.DataType, a.MaxValue, a.MinValue, a.DefaultValue, a.ModuleNo
      FROM TBL_Control a WHERE a.EquipmentTemplateId = v_SourceTemplateId;

-- SQLWAYS_EVAL# anings
      INSERT INTO TBL_ControlMeanings(EquipmentTemplateId, ControlId, ParameterValue, Meanings,BaseCondId)
      SELECT v_DestTemplateId, a.ControlId, a.ParameterValue, a.Meanings,a.BaseCondId
      FROM TBL_ControlMeanings a WHERE a.EquipmentTemplateId = v_SourceTemplateId;
      UPDATE TBL_Equipment SET EquipmentTemplateId = v_DestTemplateId
      WHERE EquipmentId = v_EquipmentId;
      SELECT 1;
   end if;
END;

/*SQLWAYS_EVAL# Name  :       PIL_SaveDictionaryItemByEntry
Parameters      :       @EntryId            int            字典实体ID
@ItemValue          varchar(255)   字典项文本
@ParentEntryItemId  int =0         父字典项ID  默认为 0
@ItemId             int =-1        数据项ID    默认为 -1
@IsSystem           int =0         系统默认项  默认为 0

Comment         :       根据字典实体ID新增数据字典项
Return          :       -1      参数不能为空
-2      执行出错
0       成功  返回新增实体项.

Author              Date            Comment       CODE[YYYYMMDD]
-----------------------------------------------------------------------------------------------
l96186              2007-11-27      Created
**********************************************************************************************/

DROP PROCEDURE IF EXISTS  PIL_SaveDictionaryItemByEntry;


CREATE PROCEDURE  PIL_SaveDictionaryItemByEntry(v_EntryId            INT                ,
v_ItemValue          VARCHAR(255)  ,
v_ItemAlias          VARCHAR(255)  ,
v_Description        VARCHAR(255)  ,
v_ExtendField1       VARCHAR(255)  ,
v_ExtendField2       VARCHAR(255)  ,
v_ExtendField3       VARCHAR(255)  ,
v_ExtendField4       VARCHAR(255)  ,
v_ExtendField5       VARCHAR(255)  ,
v_ParentEntryId      INT              ,
v_ParentItemId       INT              ,
v_ItemId             INT             ,
v_IsSystem           INT ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL# D新增数据字典项
*/
   DECLARE v_EntryItemId INT;           
   DECLARE v_Image VARCHAR(255);  
   DECLARE v_MaxEntryItemId INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 参数检验
/*liangyj
   IF v_ParentEntryId is null then
      set v_ParentEntryId = 0;
   END IF;
   IF v_ParentItemId is null then
      set v_ParentItemId = 0;
   END IF;
   IF v_ItemId is null then
      set v_ItemId = -1;
   END IF;
   IF v_IsSystem is null then
      set v_IsSystem = 0;
   END IF;
   SET @SWV_Error = 0;
   IF v_EntryId  IS NULL OR v_ItemValue IS NULL then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;


   IF NOT EXISTS(SELECT 'X' FROM TBL_DataEntry WHERE EntryId = v_EntryId) then

      SET SWP_Ret_Value = -2;
      LEAVE SWL_return;
   end if;*/

   SET v_ParentEntryId = IFNULL(v_ParentEntryId,0);
   SET v_ParentItemId = IFNULL(v_ParentItemId,0);

-- SQLWAYS_EVAL# @EntryItemId output,'TBL_DataItem'

   select   MAX(EntryItemId)+1 INTO v_MaxEntryItemId FROM TBL_DataItem;

   IF v_MaxEntryItemId IS NULL then
      SET v_MaxEntryItemId = 0;
   end if;

-- SQLWAYS_EVAL# > @EntryItemId
-- BEGIN
   SET v_EntryItemId = v_MaxEntryItemId+1;
   UPDATE TBL_PrimaryKeyValue SET CurrentValue = v_MaxEntryItemId+1 WHERE TableId = 61;
-- END

-- 获取最大ItemId
   IF v_ItemId = -1 then

      select   max(ItemId) INTO v_ItemId FROM    TBL_DataItem WHERE   EntryId = v_EntryId;
      SET v_ItemId = IFNULL(v_ItemId,0)+1;
   end if;

-- 新增
   SET @SWV_Error = 0;
   INSERT  INTO TBL_DataItem(EntryItemId          ,
ParentEntryId        ,
ParentItemId         ,
EntryId              ,
ItemId               ,
ItemValue            ,
ItemAlias            ,
IsSystem             ,
Description          ,
ExtendField1         ,
ExtendField2         ,
ExtendField3         ,
ExtendField4         ,
ExtendField5)
VALUES(v_EntryItemId         ,
v_ParentEntryId       ,
v_ParentItemId        ,
v_EntryId             ,
v_ItemId              ,
v_ItemValue           ,
v_ItemAlias           ,
v_IsSystem            ,
v_Description         ,
v_ExtendField1        ,
v_ExtendField2        ,
v_ExtendField3        ,
v_ExtendField4        ,
v_ExtendField5);

   IF @SWV_Error <> 0 then

      SET SWP_Ret_Value = -2;
      LEAVE SWL_return;
   end if;
   SET SWP_Ret_Value = 0;
END;


-- liangyj GRANT EXECUTE ON  PIL_SaveDictionaryItemByEntry TO `PUBLIC`;



DROP PROCEDURE IF EXISTS PIL_InitDictionaryEntryItem;


CREATE PROCEDURE PIL_InitDictionaryEntryItem(v_EntryId      INT                   ,
v_ItemId       INT                   ,
v_ParentEntryId INT                  ,
v_ParentItemId  INT                  ,
v_IsSystem     INT                   ,
v_ItemValue    VARCHAR(255)          ,
v_Description  VARCHAR(255)          ,
v_ItemAlias VARCHAR(255))
BEGIN
	DECLARE	SWP_Ret_Value INT;
	--	增加SWP_Ret_Value返回值
   CALL PIL_SaveDictionaryItemByEntry(v_EntryId,v_ItemValue,v_ItemAlias,v_Description,NULL,NULL,NULL,NULL,NULL,
   v_ParentEntryId,v_ParentItemId,v_ItemId,1,SWP_Ret_Value);
END;




DROP PROCEDURE IF EXISTS PCT_SaveNotifyServer;


CREATE PROCEDURE PCT_SaveNotifyServer(v_NotifyServerCategory   INT)
BEGIN
   DECLARE v_NotifyServerId INT;
   DECLARE v_NotifyServerCategoryString NATIONAL VARCHAR(128);
   DECLARE v_NotifyServerName NATIONAL VARCHAR(128);

   select   NotifyModeName INTO v_NotifyServerCategoryString FROM NotifyMode WHERE NotifyModeId = v_NotifyServerCategory;

   select   max(NotifyServerId) INTO v_NotifyServerId FROM NotifyServer;
   IF(v_NotifyServerId IS NULL) then

      SET v_NotifyServerId = 0;
   end if;

   SET v_NotifyServerName = CONCAT(v_NotifyServerCategoryString,cast(v_NotifyServerId as CHAR(64)));

   SET v_NotifyServerId = v_NotifyServerId+1;
   INSERT INTO NotifyServer(NotifyServerId, NotifyServerCategory, NotifyServerName,	Description)
VALUES(v_NotifyServerId, v_NotifyServerCategory, v_NotifyServerName, v_NotifyServerCategoryString);


   SELECT v_NotifyServerId;
END;




DROP PROCEDURE IF EXISTS PCT_SaveNotifyReceiver;


CREATE PROCEDURE PCT_SaveNotifyReceiver(v_NotifyReceiverName       NATIONAL VARCHAR(128) ,
v_NotifyReceiverContact    NATIONAL VARCHAR(128),
v_NotifyServerCategory       INT)
BEGIN
   DECLARE v_NotifyReceiverId INT; 
   DECLARE v_NotifyServerCategoryString NATIONAL VARCHAR(128);

   select   NotifyModeName INTO v_NotifyServerCategoryString FROM NotifyMode WHERE NotifyModeId = v_NotifyServerCategory;

   select   max(NotifyReceiverId) INTO v_NotifyReceiverId FROM NotifyReceiver;

   IF(v_NotifyReceiverId IS NULL) then

      SET v_NotifyReceiverId = 0;
   end if;

   SET v_NotifyReceiverId = v_NotifyReceiverId+1;
   INSERT INTO NotifyReceiver(NotifyReceiverId, NotifyReceiverCategory, NotifyReceiverName, NotifyAddress, NotifyContent, Description)
VALUES(v_NotifyReceiverId, v_NotifyServerCategory,v_NotifyReceiverName, v_NotifyReceiverContact, v_NotifyServerCategoryString, v_NotifyServerCategoryString);


   SELECT v_NotifyReceiverId;
END;





DROP PROCEDURE IF EXISTS PCT_SaveNotifyReceiverMap;


CREATE PROCEDURE PCT_SaveNotifyReceiverMap(v_NotifyServerId       INT ,
v_NotifyReceiverId     INT,
v_EventFilterId        INT,
v_NotifyServerCategory  INT)
   SWL_return:
BEGIN
   DECLARE v_EventFilterConditionId INT;
   DECLARE v_i INT; 
   DECLARE v_RecordCount INT;    



   DROP TEMPORARY TABLE IF EXISTS tt_EventFilterConditionTemp;
   create TEMPORARY table tt_EventFilterConditionTemp 
   (
      IndexId INT   AUTO_INCREMENT PRIMARY KEY,
      EventFilterConditionId INT 
   ); 

   INSERT into tt_EventFilterConditionTemp
   SELECT EventFilterConditionId FROM EventFilterCondition WHERE EventFilterId = v_EventFilterId; 


   select   MIN(IndexId), MAX(IndexId) INTO v_i,v_RecordCount FROM tt_EventFilterConditionTemp;
   WHILE v_i <= v_RecordCount DO
      select   EventFilterConditionId INTO v_EventFilterConditionId FROM tt_EventFilterConditionTemp WHERE IndexId = v_i;
      INSERT INTO NotifyReceiverMap(EventFilterId,EventFilterConditionId, NotifyReceiverId,NotifyReceiverCategory,NotifyServerId,NotifyServerCategory)
VALUES(v_EventFilterId, v_EventFilterConditionId, v_NotifyReceiverId, v_NotifyServerCategory, v_NotifyServerId, v_NotifyServerCategory);

      SET v_i = v_i+1;
   END WHILE;

   LEAVE SWL_return; 
END;




DROP PROCEDURE IF EXISTS PCT_SaveEventFilter;


CREATE PROCEDURE PCT_SaveEventFilter()
BEGIN
   DECLARE v_EventFilterIdId INT;

   select   max(EventFilterId) INTO v_EventFilterIdId FROM EventFilter;

   IF(v_EventFilterIdId IS NULL) then

      SET v_EventFilterIdId = 0;
   end if; 

   SET v_EventFilterIdId = v_EventFilterIdId+1;
   INSERT INTO EventFilter(EventFilterId, EventFilterName, Description) VALUES(v_EventFilterIdId, v_EventFilterIdId,v_EventFilterIdId);


   SELECT v_EventFilterIdId;
END;













-- SELECT N'SQLWAYS_EVAL# M_EquipTypePrivilege]...';





DROP PROCEDURE IF EXISTS PAM_EquipTypePrivilege;

CREATE PROCEDURE PAM_EquipTypePrivilege(v_EquipmentTypeId	   INT,
v_QueryUserId        INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
-- SQLWAYS_EVAL# 、专业(设备类）4、界面权限5.控制命令权限级
-- 用户是否可以浏览模块
-- 1(可以)
-- 0(不可以)

   DECLARE v_Index INT;            
   DECLARE v_RoleId INT;            
   DECLARE v_Admin INT;            

-- 系统管理员
   SET v_Admin = -1;

-- 是否包含所有权限
   select   RoleId INTO v_RoleId FROM TBL_UserRoleMap WHERE UserId = v_QueryUserId AND RoleId = v_Admin;

-- SELECT @RoleId

   IF  IFNULL(v_RoleId,-3) = -3 then

-- 非系统管理员返回结果
      SELECT DISTINCT
      am.EntryItemId AS EquipmentTypeId, su.ItemValue AS EquipmentTypeName
      FROM   TBL_Account            ul
      INNER JOIN  TBL_UserRoleMap        mp   ON ul.UserId       =   mp.UserId
      INNER JOIN  TBL_UserRole           ur   ON mp.RoleId       =   ur.RoleId
      INNER JOIN  TBL_UserRoleRight      urr  ON ur.RoleId       =   urr.RoleId        AND urr.OperationType = 2
      INNER JOIN  TBL_SpecialtyGroup     a    ON a.SpecialtyGroupId        =   urr.OperationId
      INNER JOIN  TBL_SpecialtyGroupMap  am   ON a.SpecialtyGroupId        =   am.SpecialtyGroupId
      INNER JOIN  TBL_DataItem           su    ON am.EntryItemId    =   su.ItemId AND su.EntryId = 7
      WHERE ul.UserId = v_QueryUserId AND am.EntryItemId = v_EquipmentTypeId
      ORDER BY su.ItemValue;
      IF (ROW_COUNT() > 0) then

         SET SWP_Ret_Value = 1;
         LEAVE SWL_return;
      ELSE
         SET SWP_Ret_Value = 0;
         LEAVE SWL_return;
      end if;
   ELSE
-- 系统管理员返回结果
      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;
END;


-- SELECT N'SQLWAYS_EVAL# M_GetCfgEquipments]...';






DROP PROCEDURE IF EXISTS PAM_GetCfgEquipments;

CREATE PROCEDURE PAM_GetCfgEquipments(v_UserId             INT    ,
v_StationId          NATIONAL VARCHAR(4000)    ,
v_EquipmentCategoryId  NATIONAL VARCHAR(4000))
BEGIN
   DECLARE v_RoleId INT;

   DECLARE v_Index INT;         
   DECLARE v_WhereStationId NATIONAL VARCHAR(4000);  
   DECLARE v_WhereEquipmentCategory NATIONAL VARCHAR(4000);  
   DECLARE v_SQL NATIONAL VARCHAR(4000);
   IF v_StationId is null then
      set v_StationId = '-1';
   END IF;
   IF v_EquipmentCategoryId is null then
      set v_EquipmentCategoryId = '-1';
   END IF;
   DROP TEMPORARY TABLE IF EXISTS tt_Equipments;
   create TEMPORARY table tt_Equipments 
   (
      StationId INT, 
      EquipmentId INT
   );      
   IF(v_UserId = -1) then
-- 系统管理员，

  INSERT INTO tt_Equipments(StationId, EquipmentId)
      SELECT DISTINCT StationId, EquipmentId FROM TBL_Equipment;
   ELSE 
      IF EXISTS(SELECT 1 FROM TBL_UserRoleMap WHERE UserId = v_UserId AND RoleId = -1) then
-- 有系统管理员角色，

  INSERT INTO tt_Equipments(StationId, EquipmentId)
         SELECT DISTINCT StationId, EquipmentId FROM TBL_Equipment;
      ELSE 
         IF EXISTS(SELECT 1 FROM TBL_UserRoleRight A, TBL_UserRoleMap B
         WHERE B.UserId = v_UserId AND A.RoleId = B.RoleId
         AND A.OperationId = -1 AND A.OperationType = 2) then	 
-- 有所有专业权限， 

  INSERT INTO tt_Equipments(StationId, EquipmentId)
            SELECT DISTINCT StationId, EquipmentId FROM TBL_Equipment;
         ELSE
 INSERT INTO tt_Equipments
            SELECT DISTINCT d.StationId, d.EquipmentId
            FROM TBL_AreaMap a, TBL_UserRoleRight b, TBL_UserRoleMap c, TBL_Equipment d
            WHERE a.AreaId = b.OperationId
            AND b.RoleId = c.RoleId AND b.OperationType = 2
            AND c.UserId = v_UserId
            AND d.StationId = a.StationId;
         end if;
      end if;
   end if;                

-- 局站
   SET v_WhereStationId = '  ';
   IF IFNULL(v_StationId,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_StationId);
      IF v_Index = 0 then
         SET v_WhereStationId = CONCAT('SQLWAYS_EVAL# = ',v_StationId);
      ELSE
         SET v_WhereStationId = CONCAT('SQLWAYS_EVAL# IN (',v_StationId,')');
      end if;
   end if; 

-- 设备类型
   SET v_WhereEquipmentCategory = '  ';
   IF IFNULL(v_EquipmentCategoryId,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_EquipmentCategoryId);
      IF v_Index = 0 then
         SET v_WhereEquipmentCategory = CONCAT('SQLWAYS_EVAL# = ',v_EquipmentCategoryId);
      ELSE
         SET v_WhereEquipmentCategory = CONCAT('SQLWAYS_EVAL# IN (',v_EquipmentCategoryId,')');
      end if;
   end if; 

   SET v_SQL = 'SELECT equipment.EquipmentId, equipment.EquipmentName,  equipment.EquipmentCategory
   FROM  TBL_Equipment equipment, tt_Equipments equipmentIndex
   WHERE equipment.EquipmentId = equipmentIndex.EquipmentId';

   SET @SWV_Stmt = v_SQL;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;
END;

-- SELECT N'SQLWAYS_EVAL# M_GetCfgStations]...';





DROP PROCEDURE IF EXISTS PAM_GetCfgStations;

CREATE PROCEDURE PAM_GetCfgStations(v_UserId		       INT ,
v_CenterId           NATIONAL VARCHAR(512)    ,
v_GroupId            NATIONAL VARCHAR(4000)    ,
v_StationState       NATIONAL VARCHAR(256)    ,
v_StationGrade       NATIONAL VARCHAR(256)    ,
v_StationCategory    NATIONAL VARCHAR(4000))
BEGIN
   DECLARE v_RoleId INT;
   DECLARE v_OperationId INT;
   DECLARE v_Index INT;           
   DECLARE v_TotalRowCount INT;			  
   DECLARE v_WhereStrCenterId NATIONAL VARCHAR(4000);  
   DECLARE v_WhereStrGroupId NATIONAL VARCHAR(4000);  
   DECLARE v_WhereStationState NATIONAL VARCHAR(4000);  
   DECLARE v_WhereStationGrade NATIONAL VARCHAR(4000);  
   DECLARE v_WhereStationCategory NATIONAL VARCHAR(4000);  
   DECLARE v_SQL NATIONAL VARCHAR(4000);
   IF v_CenterId is null then
      set v_CenterId = '-1';
   END IF;
   IF v_GroupId is null then
      set v_GroupId = '-1';
   END IF;
   IF v_StationState is null then
      set v_StationState = '-1';
   END IF;
   IF v_StationGrade is null then
      set v_StationGrade = '-1';
   END IF;
   IF v_StationCategory is null then
      set v_StationCategory = '-1';
   END IF;
   DROP TEMPORARY TABLE IF EXISTS tt_Stations;
   create TEMPORARY table tt_Stations 
   (
      StationId INT
   );
   DROP TEMPORARY TABLE IF EXISTS tt_Result;
   create TEMPORARY table tt_Result 
   (
      StationId INT, 
      StationName NATIONAL VARCHAR(256)
   );

   IF(v_UserId = -1) then
-- 系统管理员，

  INSERT INTO tt_Stations(StationId)
      SELECT DISTINCT StationId FROM TBL_Station;
   ELSE 
      IF EXISTS(SELECT 1 FROM TBL_UserRoleMap WHERE UserId = v_UserId AND RoleId = -1) then
-- 有系统管理员角色，

  INSERT INTO tt_Stations(StationId)
         SELECT DISTINCT StationId FROM TBL_Station;
      ELSE 
         IF EXISTS(SELECT 1 FROM TBL_UserRoleRight A, TBL_UserRoleMap B
         WHERE B.UserId = v_UserId AND A.RoleId = B.RoleId
         AND A.OperationId = -1 AND A.OperationType = 2) then	 
-- 有所有片区权限， 

  INSERT INTO tt_Stations(StationId)
            SELECT DISTINCT StationId FROM TBL_Station;
         ELSE
 INSERT INTO tt_Stations
            SELECT DISTINCT a.StationId
            FROM TBL_AreaMap a, TBL_UserRoleRight b, TBL_UserRoleMap c
            WHERE a.AreaId = b.OperationId
            AND b.RoleId = c.RoleId AND b.OperationType = 2
            AND c.UserId = v_UserId;
         end if;
      end if;
   end if;        	


-- 局站状态
   SET v_WhereStationState = '  ';
   IF IFNULL(v_StationState,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_StationState);
      IF v_Index = 0 then
         SET v_WhereStationState = CONCAT('SQLWAYS_EVAL# = ',v_StationState);
      ELSE
         SET v_WhereStationState = CONCAT('SQLWAYS_EVAL# IN (',v_StationState,')');
      end if;
   end if; 

-- 局站类型
   SET v_WhereStationCategory = '  ';
   IF IFNULL(v_StationCategory,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_StationCategory);
      IF v_Index = 0 then
         SET v_WhereStationCategory = CONCAT('SQLWAYS_EVAL# = ',v_StationCategory);
      ELSE
         SET v_WhereStationCategory = CONCAT('SQLWAYS_EVAL# IN (',v_StationCategory,')');
      end if;
   end if; 

-- 局站等级
   SET v_WhereStationGrade = '  ';
   IF IFNULL(v_StationGrade,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_StationGrade);
      IF v_Index = 0 then
         SET v_WhereStationGrade = CONCAT('SQLWAYS_EVAL# = ',v_StationGrade);
      ELSE
         SET v_WhereStationGrade = CONCAT('SQLWAYS_EVAL# IN (',v_StationGrade,')');
      end if;
   end if; 

-- 局站分组
   SET v_WhereStrGroupId = '  ';
   IF IFNULL(v_GroupId,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_GroupId);
      IF v_Index = 0 then
         SET v_WhereStrGroupId = CONCAT('SQLWAYS_EVAL# = map.StationId AND map.StructureId = ',v_GroupId);
      ELSE
         SET v_WhereStrGroupId = CONCAT('SQLWAYS_EVAL# = map.StationId AND map.StructureId IN (',v_GroupId,
         ')');
      end if;
   end if; 

   IF(v_GroupId = '-1') then
      SET v_SQL = 'SELECT su.StationId, su.StationName
      FROM  tt_Stations stationIndex, TBL_Station su
      WHERE su.StationId = stationIndex.StationId';
   ELSE
      SET v_SQL = 'SELECT su.StationId, su.StationName
      FROM  tt_Stations stationIndex, TBL_Station su, TBL_StationStructureMap map
      WHERE su.StationId = stationIndex.StationId';
   end if;
   -- NOT SUPPORTED PRINT @sql
SET @SWV_Stmt = v_SQL;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;
END;


/*SQLWAYS_EVAL# *****816补丁更新********************/
DROP PROCEDURE IF EXISTS PAM_GetStations;


CREATE PROCEDURE PAM_GetStations(v_UserId		   INT ,
v_StructGroupId  INT)
   SWL_return:
BEGIN
   DROP TEMPORARY TABLE IF EXISTS tt_Result;
   create TEMPORARY table tt_Result
   (
      StationId INT,
      StationName NATIONAL VARCHAR(256),
      ConnectState INT,
      ParentStructureId INT,
      NodeType INT,
      StationCategory INT,
      Latitude NUMERIC(20,17),
      Longitude NUMERIC(20,17)
   );

   IF(v_UserId = -1) then

-- SQLWAYS_EVAL# 组下所有局站
  INSERT INTO tt_Result
      SELECT StructureId StationId,
StructureName StationName,
1 ConnectState,
ParentStructureId,
20001 NodeType,
1 StationCategory,
0 Latitude,
0 Longitude
      FROM TBL_StationStructure
      WHERE StructureGroupId IN(v_StructGroupId,0);
      INSERT INTO tt_Result
      SELECT DISTINCT A.StationId,
A.StationName,
A.ConnectState,
B.StructureId ParentStructureId,
20002 NodeType,
A.StationCategory,
A.Latitude,
A.Longitude
      FROM TBL_Station A,
TBL_StationStructureMap B,
TBL_StationStructure C
      WHERE A.StationId = B.StationId
      AND B.StructureId = C.StructureId
      AND A.StationCategory <> 3
      AND C.StructureGroupId IN(v_StructGroupId,0)
      ORDER BY A.StationName;
      SELECT tt_Result.StationId,
tt_Result.StationName,
tt_Result.ConnectState,
tt_Result.ParentStructureId,
tt_Result.NodeType,
tt_Result.StationCategory,
tt_Result.Latitude,
tt_Result.Longitude
      FROM tt_Result
      ORDER BY tt_Result.NodeType,tt_Result.ParentStructureId,tt_Result.StationName;
      LEAVE SWL_return;
   end if; 

   IF EXISTS(SELECT 1 FROM TBL_UserRoleMap WHERE UserId = v_UserId AND RoleId = -1) then

-- SQLWAYS_EVAL# 组和该分组下所有局站
  INSERT INTO tt_Result
      SELECT StructureId StationId,
StructureName StationName,
1 ConnectState,
ParentStructureId,
20001 NodeType,
1 StationCategory,
0 Latitude,
0 Longitude
      FROM TBL_StationStructure
      WHERE StructureGroupId IN(v_StructGroupId,0);
      INSERT INTO tt_Result
      SELECT DISTINCT A.StationId,
A.StationName,
A.ConnectState,
B.StructureId ParentStructureId,
20002 NodeType,
A.StationCategory,
A.Latitude,
A.Longitude
      FROM TBL_Station A, TBL_StationStructureMap B, TBL_StationStructure C
      WHERE A.StationId = B.StationId
      AND B.StructureId = C.StructureId
      AND A.StationCategory <> 3
      AND C.StructureGroupId IN(v_StructGroupId,0)
      ORDER BY A.StationName;
      SELECT tt_Result.StationId,
tt_Result.StationName,
tt_Result.ConnectState,
tt_Result.ParentStructureId,
tt_Result.NodeType,
tt_Result.StationCategory,
tt_Result.Latitude,
tt_Result.Longitude
      FROM tt_Result
      ORDER BY tt_Result.NodeType,tt_Result.ParentStructureId,tt_Result.StationName;
      LEAVE SWL_return;
   end if;

   IF EXISTS(SELECT 1 FROM TBL_UserRoleRight A, TBL_UserRoleMap B
   WHERE B.UserId = v_UserId AND A.RoleId = B.RoleId
   AND A.OperationId = -1 AND A.OperationType = 2) then

-- SQLWAYS_EVAL# 分组和该分组下所有局站
  INSERT INTO tt_Result
      SELECT StructureId StationId,
StructureName StationName,
1 ConnectState,
ParentStructureId,
20001 NodeType,
1 StationCategory,
0 Latitude,
0 Longitude
      FROM TBL_StationStructure
      WHERE StructureGroupId IN(v_StructGroupId,0);
      INSERT INTO tt_Result
      SELECT DISTINCT A.StationId,
A.StationName,
A.ConnectState,
B.StructureId ParentStructureId,
20002 NodeType,
A.StationCategory,
A.Latitude,
A.Longitude
      FROM TBL_Station A,
TBL_StationStructureMap B,
TBL_StationStructure C
      WHERE A.StationId = B.StationId
      AND B.StructureId = C.StructureId
      AND A.StationCategory <> 3
      AND C.StructureGroupId IN(v_StructGroupId,0)
      ORDER BY A.StationName;
      SELECT tt_Result.StationId,
tt_Result.StationName,
tt_Result.ConnectState,
tt_Result.ParentStructureId,
tt_Result.NodeType,
tt_Result.StationCategory,
tt_Result.Latitude,
tt_Result.Longitude
      FROM tt_Result
      ORDER BY tt_Result.NodeType,tt_Result.ParentStructureId,tt_Result.StationName;
      LEAVE SWL_return;
   end if;

-- SQLWAYS_EVAL# 局站
   INSERT INTO tt_Result
   SELECT StructureId StationId,
StructureName StationName,
1 ConnectState,
ParentStructureId,
20001 NodeType,
1 StationCategory,
0 Latitude,
0 Longitude
   FROM TBL_StationStructure
   WHERE StructureGroupId IN(v_StructGroupId,0);

   INSERT INTO tt_Result
   SELECT DISTINCT A.StationId,
A.StationName,
A.ConnectState,
B.StructureId ParentStructureId,
20002 NodeType,
A.StationCategory,
A.Latitude,
A.Longitude
   FROM TBL_Station A,
TBL_StationStructureMap B,
TBL_StationStructure C,
TBL_AreaMap D,
TBL_UserRoleRight E,
TBL_UserRoleMap F
   WHERE A.StationId = B.StationId
   AND B.StructureId = C.StructureId
   AND A.StationCategory <> 3
   AND C.StructureGroupId IN(v_StructGroupId,0)
   AND F.UserId = v_UserId
   AND E.RoleId = F.RoleId
   AND E.OperationType = 2
   AND D.AreaId = E.OperationId
   AND A.StationId = D.StationId
   ORDER BY A.StationName;

   SELECT tt_Result.StationId,
tt_Result.StationName,
tt_Result.ConnectState,
tt_Result.ParentStructureId,
tt_Result.NodeType,
tt_Result.StationCategory,
tt_Result.Latitude,
tt_Result.Longitude
   FROM tt_Result
   ORDER BY tt_Result.NodeType,tt_Result.ParentStructureId,tt_Result.StationName;
   LEAVE SWL_return;
END;

/*SQLWAYS_EVAL# *****816补丁更新结束********************/



-- SELECT N'SQLWAYS_EVAL# M_HaltStaticOfStructure]...';






DROP PROCEDURE IF EXISTS PAM_HaltStaticOfStructure;

CREATE PROCEDURE PAM_HaltStaticOfStructure(
				-- SQLWAYS_EVAL# 包含
v_StructureId				INT ,			-- 分组编号，预设为中心
v_StructureGroupId			INT ,			-- 分组类型，预设为区域分组
v_IncludeChild				INT	,			-- 是否包含子分组，预设为1级
v_IncludeUngrpup				INT	,			-- SQLWAYS_EVAL# 	
v_IncludEqupCategory			NATIONAL VARCHAR(4000) ,	-- 包含的设备类型(预设为3个)
v_IncludeVirtualEquipment	INT ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
-- 	返回子分组
-- SQLWAYS_EVAL# = 0 返回所有子分组 > 0 返回N级 
-- SQLWAYS_EVAL# = 0 不包含未分组局站
-- 0  成功

   DECLARE v_Return INT;
   DECLARE v_Total INT;
   DECLARE v_CenterId INT;
   DECLARE v_CurrentTime DATETIME;
   DECLARE v_LevelPath NATIONAL VARCHAR(200);
   DECLARE v_WhereIncludeUngrpup NATIONAL VARCHAR(4000);
   DECLARE v_WhereIncludeChild NATIONAL VARCHAR(4000);
   DECLARE v_WhereStructureGroupId NATIONAL VARCHAR(4000);
   DECLARE v_SQL NATIONAL VARCHAR(4000);
   DECLARE v_MinIndex INT;
   DECLARE v_MaxIndex INT;
   DECLARE v_TempParentId INT;
   DECLARE v_TempStructureId INT;
   DECLARE v_TempOnline INT;
   DECLARE v_TempOffline INT;
   DECLARE v_TempError INT;
   DECLARE v_TotalOfStation INT;
   DECLARE v_TotalOfOnline INT;
   DECLARE v_TotalOfOffline INT;
   DECLARE v_TempEquipCategory INT;
   DECLARE v_CMinIndex INT;
   DECLARE v_CMaxIndex INT;
   DECLARE v_TmpOnlineOfflineEquip NATIONAL VARCHAR(4000);
   DECLARE v_Index INT;			
   DECLARE v_Spliter NATIONAL VARCHAR(255);
   DECLARE SWV_IncludEqupCategory_Str NATIONAL VARCHAR(4000);
		DECLARE SWV_ExecDyn VARCHAR(5000);
-- 当前时间
   IF v_StructureId is null then
      set v_StructureId = 0;
   END IF;
   IF v_StructureGroupId is null then
      set v_StructureGroupId = 1;
   END IF;
   IF v_IncludeChild is null then
      set v_IncludeChild = 1;
   END IF;
   IF v_IncludeUngrpup is null then
      set v_IncludeUngrpup = 1;
   END IF;
   IF v_IncludEqupCategory is null then
      set v_IncludEqupCategory = '22,12,82';
   END IF;
   IF v_IncludeVirtualEquipment is null then
      set v_IncludeVirtualEquipment = 0;
   END IF;
   SET v_CurrentTime = CURRENT_TIMESTAMP;

-- 预设为中心ID
   IF v_StructureId = 0 then

      select   LevelPath INTO v_LevelPath FROM TBL_StationStructure WHERE StructureGroupId = 0 AND ParentStructureId = 0 AND Enable = 1;
   ELSE
      select   LevelPath INTO v_LevelPath FROM TBL_StationStructure WHERE StructureId = v_StructureId AND Enable = 1;
   end if;

-- 分组是否存在
   IF v_LevelPath IS NULL then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

-- 获取设备分类
   CREATE TEMPORARY TABLE tt_TempEquipmentCategory
   (
      Idx INT   AUTO_INCREMENT PRIMARY KEY,
      EquipmentCategory INT,
      OnlineOfTotal INT,
      OfflineOfTotal INT,
      ErrorOfTotal INT
   );

-- 设置分隔符
   SET v_Spliter = ',';

-- 设置个数
   SET v_Index = 0;

-- 获取设备分类
   WHILE(v_Index >= 0 AND v_IncludEqupCategory <> '') DO
      SET v_Index = LOCATE(v_Spliter,v_IncludEqupCategory);
      IF v_Index = 0 then

         SET v_TempEquipCategory = cast(v_IncludEqupCategory as SIGNED INTEGER);
         SET v_Index = -1;
      ELSE
         SET v_TempEquipCategory = cast(SUBSTRING(v_IncludEqupCategory,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_IncludEqupCategory_Str = SUBSTRING(v_IncludEqupCategory,v_Index+1,9999);
         SET v_IncludEqupCategory = SWV_IncludEqupCategory_Str;
      end if;
      INSERT INTO tt_TempEquipmentCategory(EquipmentCategory, OnlineOfTotal, OfflineOfTotal, ErrorOfTotal) VALUES(v_TempEquipCategory, 0, 0, 0);
   END WHILE;

-- 是否包含未分组局站
   SET v_WhereIncludeUngrpup = 'SQLWAYS_EVAL# <> 1  ';
   IF IFNULL(v_IncludeUngrpup,0) <> 0 then

      SET v_WhereIncludeUngrpup = '  ';
   end if;

-- 分组类型
   SET v_WhereStructureGroupId = CONCAT('SQLWAYS_EVAL# = ',CAST(v_StructureGroupId AS CHAR(30)));

-- 包含子分组
   SET v_WhereIncludeChild = '';
   IF v_IncludeChild = 1 then

      SET v_WhereIncludeChild = CONCAT('SQLWAYS_EVAL# LIKE ''',v_LevelPath,'._________''');
   ELSE
      SET v_WhereIncludeChild = CONCAT('SQLWAYS_EVAL# LIKE ''',v_LevelPath,'.%''');
   end if;

-- 获取分组
   CREATE TEMPORARY TABLE tt_TempStructure
   (
      Idx INT   AUTO_INCREMENT PRIMARY KEY,
      StructureId INT,
      StructureGroupId INT,
      ParentStructureId INT,
      StructureName VARCHAR(128),
      IsUngroup BOOLEAN NOT NULL,
      StructureType INT,
      MapZoom FLOAT,
      Longitude NUMERIC(20,17),
      Latitude NUMERIC(20,17),
      Description NATIONAL VARCHAR(255),
      LevelPath NATIONAL VARCHAR(200),
      Enable BOOLEAN NOT NULL,
      OnlineStation INT,
      OfflineStation INT,
      OnlineOfflineEquip NATIONAL VARCHAR(4000)
   );

-- 执行
   SET SWV_ExecDyn = 'INSERT INTO tt_TempStructure(StructureId,
StructureGroupId,
ParentStructureId,
StructureName,
IsUngroup,
StructureType,
MapZoom,
Longitude,
Latitude,
Description,
LevelPath,
Enable,
OnlineStation,
OfflineStation,
OnlineOfflineEquip)
   SELECT 	StructureId,
StructureGroupId,
ParentStructureId,
StructureName,
IsUngroup,

   StructureType,
MapZoom,
Longitude,
Latitude,
Description,
LevelPath,
Enable,

   0,
0,
''''
   FROM TBL_StationStructure ss
   WHERE 1 = 1';
   SET @SWV_Stmt = SWV_ExecDyn;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;

-- 设置个数
   select   Min(Idx), Max(Idx) INTO v_MinIndex,v_MaxIndex FROM tt_TempStructure;
   SET v_TotalOfOnline = 0;
   SET v_TotalOfOffline = 0;
   SET v_TmpOnlineOfflineEquip = '';

-- 统计断站个数
   WHILE(v_MinIndex <= v_MaxIndex) DO
-- 获取分组编号
      select   StructureId, ParentStructureId INTO v_TempStructureId,v_TempParentId FROM tt_TempStructure WHERE Idx = v_MinIndex;

-- 计数分组下在线数
      select   COUNT(*) INTO v_TempOnline FROM TBL_Station st
      INNER JOIN TBL_StationStructureMap mp ON st.StationId = mp.StationId WHERE mp.StructureId = v_TempStructureId AND st.ConnectState = 1;
      SET v_TotalOfOnline = v_TotalOfOnline+v_TempOnline;
      SET v_TotalOfStation = v_TotalOfStation+v_TempOnline;

-- 计数分组下离线数
      select   COUNT(*) INTO v_TempOffline FROM TBL_Station st
      INNER JOIN TBL_StationStructureMap mp ON st.StationId = mp.StationId WHERE mp.StructureId = v_TempStructureId AND st.ConnectState <> 1;
      SET v_TotalOfOffline = v_TotalOfOffline+v_TempOffline;
      SET v_TotalOfStation = v_TotalOfStation+v_TempOffline;

-- 更新结果
      UPDATE tt_TempStructure
      SET OnlineStation = v_TempOnline,OfflineStation = v_TempOffline
      WHERE StructureId = v_TempStructureId;

-- 设置个数
      select   Min(Idx), Max(Idx) INTO v_CMinIndex,v_CMaxIndex FROM tt_TempEquipmentCategory;
      select   COUNT(*) INTO v_Total FROM tt_TempEquipmentCategory;

-- 统计设备分类中断个数
      WHILE(v_CMinIndex <= v_CMaxIndex AND v_Total > 0) DO
-- 获取设备分类 
         select   EquipmentCategory INTO v_TempEquipCategory FROM tt_TempEquipmentCategory WHERE Idx = v_CMinIndex;
         SET v_TmpOnlineOfflineEquip = CONCAT(v_TmpOnlineOfflineEquip,CAST(v_TempEquipCategory AS CHAR(30)),':');

-- 计数分组下在线设备数
         IF v_IncludeVirtualEquipment  = 0 then

-- 不包含虚拟设备
            select   COUNT(*) INTO v_TempOnline FROM TBL_Equipment st
            INNER JOIN TBL_StationStructureMap mp ON st.StationId = mp.StationId WHERE mp.StructureId = v_TempStructureId AND st.ConnectState = 1 AND st.EquipmentCategory = v_TempEquipCategory
            AND LOCATE('8',st.Property) = 0;
         ELSE
-- 包含虚拟设备
            select   COUNT(*) INTO v_TempOnline FROM TBL_Equipment st
            INNER JOIN TBL_StationStructureMap mp ON st.StationId = mp.StationId WHERE mp.StructureId = v_TempStructureId AND st.ConnectState = 1 AND st.EquipmentCategory = v_TempEquipCategory;
         end if;
         SET v_TmpOnlineOfflineEquip = CONCAT(v_TmpOnlineOfflineEquip,CAST(v_TempOnline AS CHAR(30)),':');

-- SQLWAYS_EVAL# 故障)设备异常,采集单元异常
         IF v_IncludeVirtualEquipment  = 0 then

-- 不包含虚拟设备
            select   COUNT(*) INTO v_TempOffline FROM TBL_Equipment st
            INNER JOIN TBL_StationStructureMap mp ON st.StationId = mp.StationId
            INNER JOIN TSL_SamplerUnit spu ON spu.SamplerUnitId = st.SamplerUnitId WHERE mp.StructureId = v_TempStructureId AND st.ConnectState <> 1 AND st.EquipmentCategory = v_TempEquipCategory
            AND LOCATE('8',st.Property) = 0 AND spu.ConnectState <> 1;
         ELSE
-- 包含虚拟设备
            select   COUNT(*) INTO v_TempOffline FROM TBL_Equipment st
            INNER JOIN TBL_StationStructureMap mp ON st.StationId = mp.StationId
            INNER JOIN TSL_SamplerUnit spu ON spu.SamplerUnitId = st.SamplerUnitId WHERE mp.StructureId = v_TempStructureId AND st.ConnectState <> 1 AND st.EquipmentCategory = v_TempEquipCategory
            AND spu.ConnectState <> 1;
         end if;
         SET v_TmpOnlineOfflineEquip = CONCAT(v_TmpOnlineOfflineEquip,CAST(v_TempOffline AS CHAR(30)),':');

-- SQLWAYS_EVAL# 故障)设备异常,采集单元正常
         IF v_IncludeVirtualEquipment  = 0 then

-- 不包含虚拟设备
            select   COUNT(*) INTO v_TempError FROM TBL_Equipment st
            INNER JOIN TBL_StationStructureMap mp ON st.StationId = mp.StationId
            INNER JOIN TSL_SamplerUnit spu ON spu.SamplerUnitId = st.SamplerUnitId WHERE mp.StructureId = v_TempStructureId AND st.ConnectState <> 1 AND st.EquipmentCategory = v_TempEquipCategory
            AND LOCATE('8',st.Property) = 0 AND spu.ConnectState = 1;
         ELSE
-- 包含虚拟设备
            select   COUNT(*) INTO v_TempError FROM TBL_Equipment st
            INNER JOIN TBL_StationStructureMap mp ON st.StationId = mp.StationId
            INNER JOIN TSL_SamplerUnit spu ON spu.SamplerUnitId = st.SamplerUnitId WHERE mp.StructureId = v_TempStructureId AND st.ConnectState <> 1 AND st.EquipmentCategory = v_TempEquipCategory
            AND spu.ConnectState = 1;
         end if;
         SET v_TmpOnlineOfflineEquip = CONCAT(v_TmpOnlineOfflineEquip,CAST(v_TempError AS CHAR(30)),',');

-- 更新总计
         UPDATE tt_TempEquipmentCategory ec
         SET ec.OnlineOfTotal = ec.OnlineOfTotal+v_TempOnline,ec.OfflineOfTotal = ec.OfflineOfTotal+v_TempOffline,
         ec.ErrorOfTotal = ec.ErrorOfTotal+v_TempError
         WHERE ec.EquipmentCategory = v_TempEquipCategory;
         SET v_CMinIndex = v_CMinIndex+1;
      END WHILE;	

-- 更新结果
      UPDATE tt_TempStructure
      SET OnlineOfflineEquip = v_TmpOnlineOfflineEquip
      WHERE StructureId = v_TempStructureId;
      SET v_TmpOnlineOfflineEquip = '';
      SET v_MinIndex = v_MinIndex+1;
   END WHILE;

-- 计数设备统计值
   select   Min(Idx), Max(Idx) INTO v_CMinIndex,v_CMaxIndex FROM tt_TempEquipmentCategory;
   select   COUNT(*) INTO v_Total FROM tt_TempEquipmentCategory;
   SET v_TmpOnlineOfflineEquip = '';

-- 统计设备分类中断总数
   WHILE(v_CMinIndex <= v_CMaxIndex AND v_Total > 0) DO
-- 获取设备分类 
      select   EquipmentCategory INTO v_TempEquipCategory FROM tt_TempEquipmentCategory WHERE Idx = v_CMinIndex;
      select   SUM(OnlineOfTotal), SUM(OfflineOfTotal), SUM(ErrorOfTotal) INTO v_TempOnline,v_TempOffline,v_TempError FROM tt_TempEquipmentCategory WHERE EquipmentCategory = v_TempEquipCategory;
      SET v_TmpOnlineOfflineEquip = CONCAT(v_TmpOnlineOfflineEquip,CAST(v_TempEquipCategory AS CHAR(30)),':');
      SET v_TmpOnlineOfflineEquip = CONCAT(v_TmpOnlineOfflineEquip,CAST(v_TempOnline AS CHAR(30)),':');
      SET v_TmpOnlineOfflineEquip = CONCAT(v_TmpOnlineOfflineEquip,CAST(v_TempOffline AS CHAR(30)),':');
      SET v_TmpOnlineOfflineEquip = CONCAT(v_TmpOnlineOfflineEquip,CAST(v_TempError AS CHAR(30)),',');
      SET v_CMinIndex = v_CMinIndex+1;
   END WHILE;	

-- 插入统计值
   INSERT INTO tt_TempStructure(StructureId,
StructureGroupId,
ParentStructureId,
StructureName,
IsUngroup,
StructureType,
MapZoom,
Longitude,
Latitude,
Description,
LevelPath,
Enable,
OnlineStation,
OfflineStation,
OnlineOfflineEquip)
VALUES(-999999999,
1,
v_TempParentId,
'总计',
0,
1,
1,
0,
0,
'总计',
CONCAT(CAST(v_TempParentId AS CHAR(30)), '.-999999999'),
1,
v_TotalOfOnline,
v_TotalOfOffline,
v_TmpOnlineOfflineEquip);

-- 返回结果

   SELECT Idx, StructureId, StructureGroupId, ParentStructureId, StructureName, IsUngroup, StructureType,
MapZoom, Longitude, Latitude, Description, LevelPath, Enable, OnlineStation, OfflineStation, OnlineOfflineEquip
   FROM tt_TempStructure; 

   DROP TEMPORARY TABLE IF EXISTS tt_TempStructure;
   DROP TEMPORARY TABLE IF EXISTS tt_TempEquipmentCategory;

   SET SWP_Ret_Value = 0;
END;




-- SELECT N'SQLWAYS_EVAL# M_OnWatchEquipmentEvent]...';





DROP PROCEDURE IF EXISTS PAM_OnWatchEquipmentEvent;

CREATE PROCEDURE PAM_OnWatchEquipmentEvent(v_QueryUserId        NATIONAL VARCHAR(20)   ,INOUT SWP_Ret_Value INT)
BEGIN
-- 	监控值班
-- 	返回设备分类告警信息
-- 0  成功

   DECLARE v_Return INT;
   DECLARE v_CenterId INT;
   DECLARE v_CurrentTime DATETIME;

-- 当前时间
   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   SET v_CurrentTime = CURRENT_TIMESTAMP;

-- 处理权限后的局站
   CREATE TEMPORARY TABLE tt_TempStation
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      StationId INT,
      StationName VARCHAR(128),
      StationState INT,
      StationCategory INT,
      StationGrade INT
   );
   CALL PAM_FilterStation('-1','-1','-1','-1','-1','-1','-1',v_QueryUserId,'#TempStation');

-- 处理权限后的设备
   CREATE TEMPORARY TABLE tt_TempEquipment
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      StationId INT,
      StationName VARCHAR(128),
      StationState INT,
      StationCategory INT,
      EquipmentId INT,
      EquipmentName VARCHAR(128),
      EquipmentTemplateId INT,
      EquipmentCategory INT
   );
   CALL PAM_FilterEquipmentCategory('-1','-1','-1','-1',v_QueryUserId,'#TempStation','#TempEquipment');

-- 设备分类
   CREATE TEMPORARY TABLE tt_EquipmentCategory
   (
      StationId INT,
      EquipmentId INT,
      EquipmentCategoryId INT,
      ConnectState INT,
      EquipmentCategoryName NATIONAL VARCHAR(128)
   );

-- SQLWAYS_EVAL# 外4
   INSERT INTO tt_EquipmentCategory(StationId,EquipmentId,ConnectState,EquipmentCategoryId,EquipmentCategoryName)
   SELECT et.StationId,et.EquipmentId,tt.ConnectState,
(CASE WHEN sl.SignalName LIKE '%温度%' THEN 1
   WHEN sl.SignalName LIKE '%湿度%' THEN 2
   WHEN sl.SignalName LIKE '%烟感%' THEN 3
   ELSE 4 END) AS EquipmentCategoryId,
(CASE WHEN sl.SignalName LIKE '%温度%' THEN '温度'
   WHEN sl.SignalName LIKE '%湿度%' THEN '湿度'
   WHEN sl.SignalName LIKE '%烟感%' THEN '烟感'
   ELSE '红外' END) AS EquipmentCategoryName
   FROM TBL_Signal sl
   INNER JOIN tt_TempEquipment et ON sl.EquipmentTemplateId = et.EquipmentTemplateId
   INNER JOIN TBL_Equipment tt ON et.StationId = tt.StationId AND et.EquipmentId = tt.EquipmentId
   WHERE sl.Enable = 1
   AND sl.Visible = 1
   AND (sl.SignalName LIKE '%温度%'
   OR sl.SignalName LIKE '%湿度%'
   OR sl.SignalName LIKE '%烟感%'
   OR sl.SignalName LIKE '%红外%')
   AND et.EquipmentCategory BETWEEN 51 AND 53;

-- SQLWAYS_EVAL# ,45,电源22，电表85，UPS31,门禁82,电池24
   INSERT INTO tt_EquipmentCategory(StationId,EquipmentId,ConnectState,EquipmentCategoryId,EquipmentCategoryName)
   SELECT et.StationId,et.EquipmentId,tt.ConnectState,et.EquipmentCategory AS EquipmentCategoryId,
(CASE WHEN et.EquipmentCategory = 22 THEN '电源'
   WHEN et.EquipmentCategory = 24 THEN '电池'
   WHEN et.EquipmentCategory = 85 THEN '电表'
   WHEN et.EquipmentCategory = 31 THEN 'UPS'
   WHEN et.EquipmentCategory = 82 THEN '门禁'
   ELSE '空调' END) AS EquipmentCategoryName
   FROM tt_TempEquipment et
   INNER JOIN TBL_Equipment tt ON et.StationId = tt.StationId AND et.EquipmentId = tt.EquipmentId
   WHERE et.EquipmentCategory IN(41,42,43,44,45,22,85,31,82)
   AND et.EquipmentName NOT LIKE '%交流屏%'
   AND et.EquipmentName NOT LIKE '%直流屏%';

-- 统计告警数据临时表
   CREATE TEMPORARY TABLE tt_EventStatistics
   (
      StationId INT,
      EquipmentId INT,
      EquipmentCategoryId INT,
      EquipmentCategoryName NATIONAL VARCHAR(128)
   );

-- SQLWAYS_EVAL# 调41,42,43,44,45,电源22，电表85，UPS31,门禁82,,电池24)
   INSERT	tt_EventStatistics(StationId, EquipmentId, EquipmentCategoryId, EquipmentCategoryName)
   SELECT DISTINCT ae.StationId,ae.EquipmentId,ae.EquipmentCategory AS EquipmentCategoryId,
(CASE WHEN ae.EquipmentCategory = 22 THEN '电源'
   WHEN ae.EquipmentCategory = 24 THEN '电池'
   WHEN ae.EquipmentCategory = 85 THEN '电表'
   WHEN ae.EquipmentCategory = 31 THEN 'UPS'
   WHEN ae.EquipmentCategory = 82 THEN '门禁'
   ELSE '空调' END) AS EquipmentCategoryName
   FROM TBL_ActiveEvent ae
   WHERE ae.EquipmentCategory IN(41,42,43,44,45,22,85,31,82,24) AND ae.EndTime IS NULL
   GROUP BY ae.StationId,ae.EquipmentId,ae.EquipmentCategory; 

-- SQLWAYS_EVAL# 度34,湿度44,烟感5,红外36)
   INSERT	tt_EventStatistics(StationId, EquipmentId, EquipmentCategoryId, EquipmentCategoryName)
   SELECT DISTINCT ae.StationId,ae.EquipmentId,
(CASE WHEN ae.EventCategoryId = 5 THEN 3
   WHEN ae.EventCategoryId = 34 THEN 1
   WHEN ae.EventCategoryId = 36 THEN 4
   ELSE 2 END) AS EquipmentCategoryId,
(CASE WHEN ae.EventCategoryId = 5 THEN '烟感'
   WHEN ae.EventCategoryId = 34 THEN '温度'
   WHEN ae.EventCategoryId = 36 THEN '红外'
   ELSE '湿度' END) AS EquipmentCategoryName
   FROM TBL_ActiveEvent ae
   WHERE ae.EquipmentCategory IN(51,52,53) AND ae.EndTime IS NULL AND ae.EventCategoryId IN(5,34,36,44)
   GROUP BY ae.StationId,ae.EquipmentId,ae.EventCategoryId; 

   SELECT DISTINCT ec.EquipmentCategoryId AS ObjectId,
ec.EquipmentCategoryId AS UniqueId,
ec.EquipmentCategoryName AS SWI,
COUNT(ec.EquipmentId)  AS SWI2,
IFNULL((SELECT COUNT(ss.ConnectState) FROM tt_EquipmentCategory ss WHERE ss.EquipmentCategoryName = ec.EquipmentCategoryName AND ss.ConnectState = 0),0) AS SWI3,
IFNULL((SELECT COUNT(es.EquipmentId) FROM tt_EventStatistics es WHERE es.EquipmentCategoryName = ec.EquipmentCategoryName),0) AS SWI4
   FROM tt_EquipmentCategory ec
   GROUP BY ec.EquipmentCategoryName
   ORDER BY ec.EquipmentCategoryName; 

   DROP TEMPORARY TABLE IF EXISTS tt_TempEquipment;
   DROP TEMPORARY TABLE IF EXISTS tt_TempStation;
   DROP TEMPORARY TABLE IF EXISTS tt_EquipmentCategory;
   DROP TEMPORARY TABLE IF EXISTS tt_EventStatistics;

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# M_OnWatchWSStatus]...';





DROP PROCEDURE IF EXISTS PAM_OnWatchWSStatus;

CREATE PROCEDURE PAM_OnWatchWSStatus(v_QueryUserId        NATIONAL VARCHAR(20)   ,INOUT SWP_Ret_Value INT)
BEGIN
-- 	监控值班
-- 	返回使用的工作站状态信息
-- 0  成功

   DECLARE v_Return INT;
   DECLARE v_CenterId INT;
   DECLARE v_CurrentTime DATETIME;

-- 当前时间
   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   SET v_CurrentTime = CURRENT_TIMESTAMP;

-- 处理权限后的局站
   CREATE TEMPORARY TABLE tt_TempStation
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      StationId INT,
      StationName VARCHAR(128),
      StationState INT,
      StationCategory INT,
      StationGrade INT
   );
   CALL PAM_FilterStation('-1','-1','-1','-1','-1','-1','-1',v_QueryUserId,'#TempStation');

-- 有权限的MU
   CREATE TEMPORARY TABLE tt_TempMonitorUnit
   (
      MonitorUnitId INT,
      WorkStationId INT
   );
   INSERT INTO tt_TempMonitorUnit(MonitorUnitId, WorkStationId)
   SELECT mu.MonitorUnitId, mu.WorkStationId
   FROM TSL_MonitorUnit mu
   INNER JOIN tt_TempStation ss ON mu.StationId = ss.StationId;

-- 有权限WorkStation
   CREATE TEMPORARY TABLE tt_TempWorkStation
   (
      WorkStationId INT,
      Total INT
   );
   INSERT INTO tt_TempWorkStation(WorkStationId, Total)
   SELECT ws.WorkStationId,COUNT(mu.MonitorUnitId) AS Total
   FROM TBL_WorkStation ws
   INNER JOIN tt_TempMonitorUnit mu ON ws.WorkStationId = mu.WorkStationId
   WHERE ws.IsUsed = 1 AND ws.WorkStationType = 8
   GROUP BY ws.WorkStationId
   HAVING COUNT(mu.MonitorUnitId) > 0
   ORDER BY ws.WorkStationId;

   INSERT INTO tt_TempWorkStation(WorkStationId, Total)
   SELECT ws.WorkStationId AS WorkStationId, 0 AS Total
   FROM TBL_WorkStation ws
   WHERE ws.IsUsed = 1 AND ws.WorkStationType <> 8;

-- 返回结果
   SELECT	ws.WorkStationId	AS ObjectId,
ws.WorkStationName,
ws.WorkStationType,
ws.IPAddress,
ws.ParentId,
ws.ConnectState,
ws.UpdateTime,
ws.IsUsed
   FROM TBL_WorkStation ws
   INNER JOIN tt_TempWorkStation ts ON ws.WorkStationId = ts.WorkStationId;

   DROP TEMPORARY TABLE IF EXISTS tt_TempStation;
   DROP TEMPORARY TABLE IF EXISTS tt_TempMonitorUnit;
   DROP TEMPORARY TABLE IF EXISTS tt_TempWorkStation;

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# M_ReadConfigChange]...';






DROP PROCEDURE IF EXISTS PAM_ReadConfigChange;

CREATE PROCEDURE PAM_ReadConfigChange(v_LastUpdateTime		   DATETIME)
BEGIN
   DECLARE v_limitTime DATETIME; 
   DECLARE v_updateTime DATETIME;
   SET v_updateTime = TIMESTAMPADD(minute,-5,v_LastUpdateTime);
   SET v_limitTime = TIMESTAMPADD(minute,60,v_LastUpdateTime);

   SELECT * FROM TBL_ConfigChangeMacroLog WHERE ConfigId IN(0,1,3) AND UpdateTime >  v_updateTime
   AND UpdateTime < v_limitTime;
END;


-- SELECT N'SQLWAYS_EVAL# M_RoleStationPrivilege]...';


DROP PROCEDURE IF EXISTS PAM_RoleStationPrivilege;

CREATE PROCEDURE PAM_RoleStationPrivilege(v_RoleId		       NATIONAL VARCHAR(4000)    ,
v_ReturnCount        NATIONAL VARCHAR(20) ,INOUT SWP_Ret_Value INT)
BEGIN
-- SQLWAYS_EVAL# 、专业(设备类）4、界面权限5.控制命令权限级
   DECLARE v_Index INT;            
   DECLARE v_RowCount INT;            
   DECLARE v_Admin INT;            
   DECLARE v_SAdmin NATIONAL VARCHAR(20);   
   DECLARE v_PrivilegeId INT;			 
   DECLARE v_Total INT;			 
   DECLARE v_WhereStrRoleId NATIONAL VARCHAR(4000);
   DECLARE v_SQL NATIONAL VARCHAR(4000);
		DECLARE SWV_ExecDyn VARCHAR(5000);
-- 查询结果条数
   IF v_RoleId is null then
      set v_RoleId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SET v_RowCount = cast(v_ReturnCount as SIGNED INTEGER);

-- 系统管理员
   SET v_Admin = -1;    

-- 用户角色
   SET v_WhereStrRoleId = ' AND  1 = 1 ';
   IF  IFNULL(v_RoleId,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_RoleId);
      IF v_Index = 0 then
         SET v_WhereStrRoleId = CONCAT('SQLWAYS_EVAL# =  ',v_RoleId);
      ELSE
         SET v_WhereStrRoleId = CONCAT('SQLWAYS_EVAL# IN (',v_RoleId,')');
      end if;
   end if;

-- 是否管理员
   SET v_SAdmin = CAST(v_Admin AS CHAR(30)); 
   SET v_Index = LOCATE(v_SAdmin,v_RoleId);

-- 是否包含所有权限
   DROP TEMPORARY TABLE IF EXISTS tt_OperationId;
   CREATE TEMPORARY TABLE tt_OperationId
   (
      OperationId INT
   );
   SET SWV_ExecDyn = CONCAT('INSERT INTO tt_OperationId(OperationId)
   SELECT DISTINCT OperationId
   FROM TBL_UserRoleRight ur
   INNER JOIN TBL_Area a ON a.AreaId = ur.OperationId
   WHERE ur.OperationType = 2 AND ur.OperationId = ',v_SAdmin,'  ',v_WhereStrRoleId);
   SET @SWV_Stmt = SWV_ExecDyn;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;
   select   COUNT(*) INTO v_Total FROM tt_OperationId;

-- 执行
   SET SQL_SELECT_LIMIT = v_RowCount;

   IF  v_Index = 0 AND v_Total = 0 then

-- 非系统管理员返回结果
      SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL# 
su.StationId,
su.StationName
FROM   TBL_Account            ul
INNER JOIN  TBL_UserRoleMap        mp   ON ul.UserId       =   mp.UserId
INNER JOIN  TBL_UserRole           ur   ON mp.RoleId       =   ur.RoleId
INNER JOIN  TBL_UserRoleRight      urr  ON ur.RoleId       =   urr.RoleId        AND urr.OperationType = 2
INNER JOIN  TBL_Area               a    ON a.AreaId        =   urr.OperationId
INNER JOIN  TBL_AreaMap            am   ON a.AreaId        =   am.AreaId
INNER JOIN  TBL_Station         su    ON am.StationId    =   su.StationId
INNER JOIN  TBL_StationStructureMap sp ON su.StationId =  sp.StationId
WHERE 1 = 1 ',v_WhereStrRoleId,'SQLWAYS_EVAL# su.StationName ORDER BY StationName ');
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
   ELSE
-- 系统管理员返回结果
      SELECT DISTINCT
      su.StationId,
su.StationName
      FROM  TBL_Station su
      INNER JOIN TBL_StationStructureMap sp ON su.StationId =  sp.StationId
      GROUP BY su.StationId,su.StationName
      ORDER BY StationName;
   end if;

   SET SQL_SELECT_LIMIT = DEFAULT;

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# M_SaveCustomInfo]...';





DROP PROCEDURE IF EXISTS PAM_SaveCustomInfo;

CREATE PROCEDURE PAM_SaveCustomInfo(v_UserId        INT,
v_CustomType    NATIONAL VARCHAR(128),
v_CustomContent NATIONAL VARCHAR(4000),
v_CreateTime    DATETIME,
v_Description   NATIONAL VARCHAR(255))
BEGIN
   DECLARE v_CustomInfoId INT;
   DECLARE v_PostalCode INT;

   SET v_CustomInfoId = -1;

   select   CustomInfoId INTO v_CustomInfoId FROM TBL_CustomInfo WHERE UserId = v_UserId AND CustomType = v_CustomType;

   IF v_CustomInfoId <> -1 then

      UPDATE TBL_CustomInfo SET CustomContent = v_CustomContent,CreateTime = v_CreateTime,Description = v_Description
      WHERE CustomInfoId = v_CustomInfoId;
   ELSE
      select   max(CustomInfoId) INTO v_CustomInfoId FROM TBL_CustomInfo;
      IF v_CustomInfoId IS NULL then

         select   StructureId INTO v_PostalCode FROM TBL_StationStructure WHERE StructureGroupId = 0 AND ParentStructureId = 0;
         SET v_CustomInfoId = v_PostalCode*1000000+1;
      ELSE
         SET v_CustomInfoId = v_CustomInfoId+1;
      end if;
      INSERT INTO TBL_CustomInfo(CustomInfoId,
UserId,
CustomType,
CustomContent,
CreateTime,
Description)
VALUES(v_CustomInfoId,
v_UserId,
v_CustomType,
v_CustomContent,
v_CreateTime,
v_Description);
   end if;
END;


 
-- SELECT N'SQLWAYS_EVAL# M_SaveExperience]...';





DROP PROCEDURE IF EXISTS PAM_SaveExperience;

CREATE PROCEDURE PAM_SaveExperience(v_ExperienceId      INT,
v_Title             NATIONAL VARCHAR(4000),
v_Measure           NATIONAL VARCHAR(4000),
v_Description       NATIONAL VARCHAR(4000),
v_ExtendCondition   NATIONAL VARCHAR(4000),INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   IF v_ExperienceId > 0 then

      UPDATE TBL_Experience  SET ExperienceCaption = v_Title,Measure = v_Measure,Description = v_Description, 
      `Condition` = v_ExtendCondition
      WHERE  ExperienceId = v_ExperienceId;
      SET SWP_Ret_Value = v_ExperienceId;
      LEAVE SWL_return;
   ELSE
 INSERT INTO TBL_Experience(ExperienceCaption,Measure,Description,LastUpdateDate,`Condition`)
VALUES(v_Title,v_Measure,v_Description, CURRENT_TIMESTAMP,v_ExtendCondition);

      SELECT max(ExperienceId) FROM TBL_Experience;
   end if;
END;

-- SELECT N'SQLWAYS_EVAL# M_SaveHistorySelection]...';






DROP PROCEDURE IF EXISTS PAM_SaveHistorySelection;

CREATE PROCEDURE PAM_SaveHistorySelection(v_UserId                    INT ,
v_SelectionName             NATIONAL VARCHAR(4000),
v_SelectionType             NATIONAL VARCHAR(256),
v_SelectionContent          NATIONAL VARCHAR(4000),
v_Description               NATIONAL VARCHAR(4000),
v_CreateTime                DATETIME)
BEGIN
   DECLARE v_SequenceId VARCHAR(256);
   DECLARE v_i INT; 
   DECLARE v_RecordCount INT;
   select   Count(*) INTO v_RecordCount FROM TBL_HistorySelection WHERE SelectionName = v_SelectionName AND SelectionType = v_SelectionType;

   IF  v_RecordCount > 0 then

      UPDATE TBL_HistorySelection
      SET UserId = v_UserId,SelectionContent = v_SelectionContent,Description = v_Description,
      CreateTime = v_CreateTime
      WHERE SelectionName = v_SelectionName AND SelectionType = v_SelectionType;
   ELSE
 INSERT INTO TBL_HistorySelection(UserId,SelectionType,SelectionName ,SelectionContent ,Description ,CreateTime)
VALUES(v_UserId, v_SelectionType, v_SelectionName, v_SelectionContent, v_Description, v_CreateTime);
   end if;
END;


-- SELECT N'SQLWAYS_EVAL# M_SaveOperationRecord]...';





DROP PROCEDURE IF EXISTS PAM_SaveOperationRecord;

CREATE PROCEDURE PAM_SaveOperationRecord(v_UserId            INT          ,
v_Operation         INT          ,
v_StationId         INT		    ,
v_OperationType     INT          ,
v_OperationContent  VARCHAR(255),INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
-- 参数检验
   DECLARE v_Current DATETIME;
   DECLARE v_StationName NATIONAL VARCHAR(255);
   IF  v_UserId IS NULL OR v_Operation IS NULL
   OR v_OperationType IS NULL OR v_OperationContent IS NULL then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

-- 当前时间
   SET v_Current = CURRENT_TIMESTAMP;

-- 局站名称
   select   StationName INTO v_StationName FROM TBL_Station WHERE StationId = v_StationId;

-- 保存操作记录
   INSERT INTO TBL_OperationRecord(UserId            ,
StationId         ,
StationName       ,
Operation         ,
OperationTime     ,
OperationType     ,
OperationContent)
VALUES(v_UserId           ,
v_StationId        ,
v_StationName	  ,
v_Operation        ,
v_Current		  ,
v_OperationType    ,
v_OperationContent);


   SET SWP_Ret_Value = 0;
END;



-- SELECT N'SQLWAYS_EVAL# M_SelectCenter]...';





DROP PROCEDURE IF EXISTS PAM_SelectCenter;

CREATE PROCEDURE PAM_SelectCenter()
BEGIN
   SELECT
   StructureId,
StructureGroupId,
ParentStructureId,
StructureName,
IsUngroup,
StructureType,
MapZoom,
Longitude,
Latitude,
Description,
Enable
   FROM TBL_StationStructure
   WHERE StructureGroupId = 0 AND ParentStructureId = 0 AND Enable = 1;
END;

-- SELECT N'SQLWAYS_EVAL# M_SelectChildStructure]...';





DROP PROCEDURE IF EXISTS PAM_SelectChildStructure;

CREATE PROCEDURE PAM_SelectChildStructure(v_StructureId				INT ,	-- 分组编号，预设为中心
v_StructureGroupId			INT ,	-- 分组类型，预设为区域分组
v_IncludeChild				INT	,	-- 是否包含子分组，预设为1级
v_IncludeUngrpup				INT	,	-- SQLWAYS_EVAL# 	
v_TempTableName				NATIONAL VARCHAR(30)   ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
-- 	返回子分组
-- SQLWAYS_EVAL# = 0 返回所有子分组 > 0 返回N级 
-- SQLWAYS_EVAL# = 0 不包含未分组局站
-- 0  成功

   DECLARE v_Return INT;
   DECLARE v_Total INT;
   DECLARE v_CenterId INT;
   DECLARE v_CurrentTime DATETIME;
   DECLARE v_LevelPath NATIONAL VARCHAR(200);
   DECLARE v_WhereIncludeUngrpup NATIONAL VARCHAR(4000);
   DECLARE v_WhereIncludeChild NATIONAL VARCHAR(4000);
   DECLARE v_WhereStructureGroupId NATIONAL VARCHAR(4000);
   DECLARE v_SQL NATIONAL VARCHAR(4000);

-- 当前时间
   DECLARE SWV_ExecDyn VARCHAR(5000);
   IF v_StructureId is null then
      set v_StructureId = 0;
   END IF;
   IF v_StructureGroupId is null then
      set v_StructureGroupId = 1;
   END IF;
   IF v_IncludeChild is null then
      set v_IncludeChild = 1;
   END IF;
   IF v_IncludeUngrpup is null then
      set v_IncludeUngrpup = 0;
   END IF;
   IF v_TempTableName is null then
      set v_TempTableName = '#TempStructure';
   END IF;
   SET v_CurrentTime = CURRENT_TIMESTAMP;

-- 预设为中心ID
   IF v_StructureId = 0 then

      select   LevelPath INTO v_LevelPath FROM TBL_StationStructure WHERE StructureGroupId = 0 AND ParentStructureId = 0 AND Enable = 1;
   ELSE
      select   LevelPath INTO v_LevelPath FROM TBL_StationStructure WHERE StructureId = v_StructureId AND Enable = 1;
   end if;

-- 分组是否存在
   IF v_LevelPath IS NULL then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

-- 是否包含未分组局站
   SET v_WhereIncludeUngrpup = 'SQLWAYS_EVAL# <> 1  ';
   IF IFNULL(v_IncludeUngrpup,0) <> 0 then

      SET v_WhereIncludeUngrpup = '  ';
   end if;

-- 分组类型
   SET v_WhereStructureGroupId = CONCAT('SQLWAYS_EVAL# = ',CAST(v_StructureGroupId AS CHAR(30)));

-- 包含子分组
   SET v_WhereIncludeChild = '';
   IF v_IncludeChild = 1 then

      SET v_WhereIncludeChild = CONCAT('SQLWAYS_EVAL# LIKE ''',v_LevelPath,'._________''');
   ELSE
      SET v_WhereIncludeChild = CONCAT('SQLWAYS_EVAL# LIKE ''',v_LevelPath,'.%''');
   end if;

-- 执行
   SET SWV_ExecDyn = CONCAT('INSERT INTO ',v_TempTableName,' (StructureId,
StructureGroupId,
ParentStructureId,
StructureName,
IsUngroup,
StructureType,
MapZoom,
Longitude,
Latitude,
Description,
LevelPath,
Enable)
   SELECT 	StructureId,
StructureGroupId,
ParentStructureId,
StructureName,
IsUngroup,

   StructureType,
MapZoom,
Longitude,
Latitude,
Description,
LevelPath,
Enable
   FROM TBL_StationStructure ss
   WHERE 1 = 1');
   SET @SWV_Stmt = SWV_ExecDyn;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# M_SelectControlByDoorId]...';





DROP PROCEDURE IF EXISTS PAM_SelectControlByDoorId;

CREATE PROCEDURE PAM_SelectControlByDoorId(v_DoorId		INT)
BEGIN
-- 根据门号找的开门控制命令配置

   DECLARE v_StationId INT;
   DECLARE v_EquipmentId INT;
   DECLARE v_SStationId VARCHAR(128);
   DECLARE v_SEquipmentId VARCHAR(128);


-- 获取局站和设备		
   select   StationId, EquipmentId INTO v_StationId,v_EquipmentId FROM TBL_Door WHERE DoorId = v_DoorId;

   SET v_SStationId = CAST(v_StationId AS CHAR(30));
   SET v_SEquipmentId = CAST(v_EquipmentId AS CHAR(30));

-- 获取局站
   CREATE TEMPORARY TABLE tt_TempStation
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      StationId INT,
      StationName VARCHAR(128),
      StationState INT,
      StationCategory INT,
      StationGrade INT
   );
   CALL PAM_FilterStation('-1','-1','-1','-1',v_SStationId,'-1','-1','-1','#TempStation');

-- 获取设备
   CREATE TEMPORARY TABLE tt_TempEquipment
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      StationId INT,
      StationName VARCHAR(128),
      StationState INT,
      StationCategory INT,
      EquipmentId INT,
      EquipmentName VARCHAR(128),
      EquipmentTemplateId INT,
      EquipmentCategory INT
   );
   CALL PAM_FilterEquipmentCategory('-1',v_SEquipmentId,'-1','-1','-1','#TempStation','#TempEquipment');

-- 获取命令
   SELECT
   su.CenterId,
su.CenterName,
su.GroupId,
su.GroupName,
es.EquipmentTemplateId,
su.StationId,
su.StationName,
e.EquipmentId,
e.EquipmentName,
e.EquipmentCategory AS EquipmentCategoryId,
es.ControlId,
es.ControlName,
es.BaseTypeId,
sb.BaseTypeName,
es.ControlCategory,
es.ControlType,
es.CommandType,
es.MaxValue,
es.MinValue,
es.DefaultValue,
es.DisplayIndex,
es.SignalId,
es.CmdToken,
es.ControlSeverity
   FROM tt_TempEquipment e
   INNER JOIN tt_TempStation su ON e.StationId = su.StationId
   INNER JOIN TBL_Control es ON e.EquipmentTemplateId = es.EquipmentTemplateId AND es.Enable = 1  AND es.Visible = 1 AND es.ControlCategory = 2
   LEFT JOIN TBL_CommandBaseDic sb ON sb.BaseTypeId = es.BaseTypeId; 

   DROP TEMPORARY TABLE IF EXISTS tt_TempEquipment;
   DROP TEMPORARY TABLE IF EXISTS tt_TempStation;
END;

-- SELECT N'SQLWAYS_EVAL# M_SelectDepartment]...';





DROP PROCEDURE IF EXISTS PAM_SelectDepartment;

CREATE PROCEDURE PAM_SelectDepartment()
BEGIN
   SELECT * FROM TBL_Department;
END;

-- SELECT N'SQLWAYS_EVAL# M_SelectEmployee]...';





DROP PROCEDURE IF EXISTS PAM_SelectEmployee;

CREATE PROCEDURE PAM_SelectEmployee(v_EmployeeId			INT)
BEGIN
   SELECT * FROM TBL_Employee
   WHERE EmployeeId = v_EmployeeId;
END;

-- SELECT N'SQLWAYS_EVAL# M_SelectMonitorUnit]...';





DROP PROCEDURE IF EXISTS PAM_SelectMonitorUnit;

CREATE PROCEDURE PAM_SelectMonitorUnit(v_UserId				INT,
v_StationId			INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
-- 处理：
-- 1 获取局站维护信息

-- 返回结果
-- -1 不可知错误
--  0 成功
--  1 参数为0或空
--  2 配置不存在或超过一个
--  3 没有权限

   DECLARE v_Return INT;
   DECLARE v_GetDate DATETIME;
   DECLARE v_PrivilegeId INT;
   DECLARE v_Total INT;
   DECLARE v_SStation NATIONAL VARCHAR(20);
   DECLARE v_SUserId NATIONAL VARCHAR(20);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 参数检查
   SET @SWV_Error = 0;
   IF v_StationId IS NULL OR v_StationId = 0 then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

-- 处理权限后的局站
   SET v_SStation = CAST(v_StationId AS CHAR(30));
   SET v_SUserId = CAST(v_UserId AS CHAR(30));
   CREATE TEMPORARY TABLE tt_TempStation
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      StationId INT,
      StationName VARCHAR(128),
      StationState INT,
      StationCategory INT,
      StationGrade INT
   );
   CALL PAM_FilterStation('-1','-1','-1','-1',v_SStation,'-1','-1',v_SUserId,'#TempStation');

-- 是否有权限查看该局站
   select   COUNT(StationId) INTO v_Total FROM tt_TempStation WHERE StationId = v_StationId;
   IF (v_Total <> 1) then

      SET SWP_Ret_Value = 3;
      LEAVE SWL_return;
   end if;

-- 局站配置是否存在
   select   COUNT(StationId) INTO v_Total FROM tt_TempStation WHERE StationId = v_StationId;
   IF (v_Total <> 1) then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;

-- 主机临时表
   CREATE TEMPORARY TABLE tt_TempHost
   (
      HostId INT,
      HostType INT,
      HostName NATIONAL VARCHAR(255),
      MonitorUnitCode NATIONAL VARCHAR(128),
      ConfigFileCode NATIONAL VARCHAR(128),
      SampleConfigCode NATIONAL VARCHAR(128),
      StartupTime DATETIME,
      State INT,
      WorkStationId INT,
      StationId INT,
      IpAddress NATIONAL VARCHAR(128),
      Description NATIONAL VARCHAR(255),
      MonitorUnitCategory INT
   );

-- MU
   INSERT INTO tt_TempHost(HostId,HostType,HostName,MonitorUnitCode,ConfigFileCode,SampleConfigCode,StartupTime,State,WorkStationId,StationId,IpAddress,Description,MonitorUnitCategory)
   SELECT mu.MonitorUnitId AS HostId, 0 AS HostType,mu.MonitorUnitName AS HostName,mu.MonitorUnitCode,
mu.ConfigFileCode AS ConfigFileCode, mu.SampleConfigCode AS SampleConfigCode,
mu.StartTime AS StartupTime,mu.ConnectState AS State, 0 AS WorkStationId, mu.StationId,
mu.IpAddress,
(CASE WHEN mu.Description IS NULL THEN mc.ItemValue
   WHEN mu.Description = '' THEN mc.ItemValue
   ELSE mu.Description END) AS Description,
mu.MonitorUnitCategory
   FROM TSL_MonitorUnit mu
   INNER JOIN tt_TempStation su ON mu.StationId = su.StationId
   INNER JOIN TBL_DataItem mc ON mu.MonitorUnitCategory = mc.ItemId AND mc.EntryId = 34
   WHERE su.StationId = v_StationId;


-- WorkStation
   INSERT INTO tt_TempHost(HostId,HostType,HostName,MonitorUnitCode,ConfigFileCode,SampleConfigCode,StartupTime,State,WorkStationId,StationId,IpAddress,Description,MonitorUnitCategory)
   SELECT ws.WorkStationId AS HostId, 10 AS HostType,ws.WorkStationName AS HostName, '' AS MonitorUnitCode,
'' AS  ConfigFileCode, '' AS SampleConfigCode,
CURRENT_TIMESTAMP AS StartupTime, ws.ConnectState AS State, ws.WorkStationId AS WorkStationId, mu.StationId,
'' AS IpAddress, 'RMU' AS Description, -1 AS MonitorUnitCategory
   FROM TBL_WorkStation ws
   INNER JOIN TSL_MonitorUnit mu ON ws.WorkStationId = mu.WorkStationId
   INNER JOIN tt_TempStation su ON mu.StationId = su.StationId
   WHERE su.StationId = v_StationId;

-- 返回结果
   SELECT * FROM tt_TempHost;

   DROP TEMPORARY TABLE IF EXISTS tt_TempHost;
   SET @SWV_Error = 0;
   DROP TEMPORARY TABLE IF EXISTS tt_TempStation;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;                                                                       

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# M_SelectRole]...';





DROP PROCEDURE IF EXISTS PAM_SelectRole;

CREATE PROCEDURE PAM_SelectRole(v_UserId			INT)
BEGIN
   SELECT um.RoleId,ur.RoleName, ur.Description
   FROM TBL_UserRole ur
   INNER JOIN TBL_UserRoleMap um ON ur.RoleId = um.RoleId
   WHERE um.UserId = v_UserId;
END;

-- SELECT N'SQLWAYS_EVAL# M_SelectStation]...';





DROP PROCEDURE IF EXISTS PAM_SelectStation;

CREATE PROCEDURE PAM_SelectStation(v_CenterId           NATIONAL VARCHAR(4000)    ,
v_GroupId            NATIONAL VARCHAR(4000)    ,
v_StationState       NATIONAL VARCHAR(4000)    ,
v_StationCategory    NATIONAL VARCHAR(4000)    ,
v_StationId          NATIONAL VARCHAR(4000)    ,
v_StationId2         NATIONAL VARCHAR(4000)    ,
v_StationId3         NATIONAL VARCHAR(4000)    ,
v_QueryUserId        NATIONAL VARCHAR(20))
BEGIN
-- 处理权限后的局站
   IF v_CenterId is null then
      set v_CenterId = '-1';
   END IF;
   IF v_GroupId is null then
      set v_GroupId = '-1';
   END IF;
   IF v_StationState is null then
      set v_StationState = '-1';
   END IF;
   IF v_StationCategory is null then
      set v_StationCategory = '-1';
   END IF;
   IF v_StationId is null then
      set v_StationId = '-1';
   END IF;
   IF v_StationId2 is null then
      set v_StationId2 = '-1';
   END IF;
   IF v_StationId3 is null then
      set v_StationId3 = '-1';
   END IF;
   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   CREATE TEMPORARY TABLE tt_TempStation
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      StationId INT,
      StationName VARCHAR(128),
      StationState INT,
      StationCategory INT,
      StationGrade INT
   );
   CALL PAM_FilterStation(v_CenterId,v_GroupId,v_StationState,v_StationCategory,v_StationId,v_StationId2,
   v_StationId3,v_QueryUserId,'#TempStation');


   SELECT
   ts.CenterId,
ts.CenterName,
ts.GroupId,
ts.GroupName,
su.StationId,
su.StationName,
su.Latitude,
su.Longitude,
su.SetupTime,
su.CompanyId,
su.ConnectState,
su.UpdateTime,
su.StationCategory,
su.StationGrade,
su.StationState,
su.ContactId,
su.SupportTime,
su.OnWayTime,
su.SurplusTime,
su.FloorNo,
su.PropList,
su.Acreage,
su.BuildingType,
su.ContainNode,
su.Description,
su.BordNumber,
su.CenterId,
su.Enable,
su.StartTime,
su.EndTime,
di.ItemValue AS StationGradeName,
di.ItemAlias AS StationGradeAlias,
di.ExtendField1 AS StationGradeImage,
dc.ItemValue AS StationCategoryName,
dc.ItemAlias AS StationCategoryAlias,
dc.ExtendField1 AS StationCategoryImage,
ds.ItemValue AS StationStateName,
ds.ItemAlias AS StationStateAlias,
ds.ExtendField1 AS StationStateImage,
db.ItemValue AS BuildingTypeName,
db.ItemAlias AS BuildingTypeAlias,
db.ExtendField1 AS BuildingTypeImage
   FROM tt_TempStation ts
   INNER JOIN TBL_Station su ON ts.StationId = su.StationId
   INNER JOIN TBL_DataItem di ON su.StationGrade = di.ItemId AND di.EntryId = 2
   INNER JOIN TBL_DataItem dc ON su.StationCategory = dc.ItemId AND dc.EntryId = 71
   INNER JOIN TBL_DataItem ds ON su.StationState = ds.ItemId AND ds.EntryId = 5
   LEFT JOIN TBL_DataItem db ON su.BuildingType = db.ItemId AND db.EntryId = 1001;

   DROP TEMPORARY TABLE IF EXISTS tt_TempStation;
END;

-- SELECT N'SQLWAYS_EVAL# M_SelectStationMaintain]...';





DROP PROCEDURE IF EXISTS PAM_SelectStationMaintain;

CREATE PROCEDURE PAM_SelectStationMaintain(v_UserId				INT,
v_StationId			INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN

-- 处理：
-- 1 获取局站维护信息

-- 返回结果
-- -1 不可知错误
--  0 成功
--  1 参数为0或空
--  2 配置不存在或超过一个
--  3 没有权限

   DECLARE v_Return INT;
   DECLARE v_GetDate DATETIME;
   DECLARE v_PrivilegeId INT;
   DECLARE v_Total INT;
   DECLARE v_SStation NATIONAL VARCHAR(20);
   DECLARE v_SUserId NATIONAL VARCHAR(20);
   DECLARE v_Maintain NATIONAL VARCHAR(250);
   DECLARE v_Employee NATIONAL VARCHAR(250);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 参数检查
   SET @SWV_Error = 0;
   IF v_StationId IS NULL OR v_StationId = 0 then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

-- 处理权限后的局站
   SET v_SStation = CAST(v_StationId AS CHAR(30));
   SET v_SUserId = CAST(v_UserId AS CHAR(30));
   CREATE TEMPORARY TABLE tt_TempStation
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      StationId INT,
      StationName VARCHAR(128),
      StationState INT,
      StationCategory INT,
      StationGrade INT
   );
   CALL PAM_FilterStation('-1','-1','-1','-1',v_SStation,'-1','-1',v_SUserId,'#TempStation');

-- 是否有权限查看该局站
   select   COUNT(StationId) INTO v_Total FROM tt_TempStation WHERE StationId = v_StationId;
   IF (v_Total <> 1) then

      SET SWP_Ret_Value = 3;
      LEAVE SWL_return;
   end if;

-- 局站配置是否存在
   select   COUNT(StationId) INTO v_Total FROM tt_TempStation WHERE StationId = v_StationId;
   IF (v_Total <> 1) then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;

-- 当前时间
   SET v_GetDate = CURRENT_TIMESTAMP;

-- 获取局站维护公司
   select   de.DepartmentName INTO v_Maintain FROM TBL_Station su
   INNER JOIN TBL_Department de ON su.CompanyId = de.DepartmentId WHERE su.StationId = v_StationId;

-- 获取局站维护人
   select   ee.EmployeeName INTO v_Employee FROM TBL_Station su
   INNER JOIN TBL_Employee ee ON su.ContactId = ee.EmployeeId WHERE su.StationId = v_StationId;

-- 返回
   SELECT CONCAT(v_Maintain,',',v_Employee);

   SET @SWV_Error = 0;
   DROP TEMPORARY TABLE IF EXISTS tt_TempStation;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;                                                                       

   SET SWP_Ret_Value = v_Return;
END;

-- SELECT N'SQLWAYS_EVAL# M_SelectStructure]...';





DROP PROCEDURE IF EXISTS PAM_SelectStructure;

CREATE PROCEDURE PAM_SelectStructure(
		-- SQLWAYS_EVAL# 	
v_StructureId				INT ,	-- 分组编号，预设为中心
v_StructureGroupId			INT ,	-- 分组类型，预设为区域分组
v_IncludeChild				INT	,	-- 是否包含子分组，预设为1级
v_IncludeUngrpup				INT	,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
-- 	返回子分组
-- SQLWAYS_EVAL# = 0 返回所有子分组 > 0 返回N级 
-- SQLWAYS_EVAL# = 0 不包含未分组局站
-- 0  成功

   DECLARE v_Return INT;
   DECLARE v_Total INT;
   DECLARE v_CenterId INT;
   DECLARE v_CurrentTime DATETIME;
   DECLARE v_LevelPath NATIONAL VARCHAR(200);
   DECLARE v_WhereIncludeUngrpup NATIONAL VARCHAR(4000);
   DECLARE v_WhereIncludeChild NATIONAL VARCHAR(4000);
   DECLARE v_WhereStructureGroupId NATIONAL VARCHAR(4000);
   DECLARE v_SQL NATIONAL VARCHAR(4000);
	DECLARE SWV_ExecDyn VARCHAR(5000);
-- 当前时间
   IF v_StructureId is null then
      set v_StructureId = 0;
   END IF;
   IF v_StructureGroupId is null then
      set v_StructureGroupId = 1;
   END IF;
   IF v_IncludeChild is null then
      set v_IncludeChild = 1;
   END IF;
   IF v_IncludeUngrpup is null then
      set v_IncludeUngrpup = 0;
   END IF;
   SET v_CurrentTime = CURRENT_TIMESTAMP;

-- 预设为中心ID
   IF v_StructureId = 0 then

      select   LevelPath INTO v_LevelPath FROM TBL_StationStructure WHERE StructureGroupId = 0 AND ParentStructureId = 0 AND Enable = 1;
   ELSE
      select   LevelPath INTO v_LevelPath FROM TBL_StationStructure WHERE StructureId = v_StructureId AND Enable = 1;
   end if;

-- 分组是否存在
   IF v_LevelPath IS NULL then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

-- 是否包含未分组局站
   SET v_WhereIncludeUngrpup = 'SQLWAYS_EVAL# <> 1  ';
   IF IFNULL(v_IncludeUngrpup,0) <> 0 then

      SET v_WhereIncludeUngrpup = '  ';
   end if;

-- 分组类型
   SET v_WhereStructureGroupId = CONCAT('SQLWAYS_EVAL# = ',CAST(v_StructureGroupId AS CHAR(30)));

-- 包含子分组
   SET v_WhereIncludeChild = '';
   IF v_IncludeChild = 1 then

      SET v_WhereIncludeChild = CONCAT('SQLWAYS_EVAL# LIKE ''',v_LevelPath,'._________''');
   ELSE
      SET v_WhereIncludeChild = CONCAT('SQLWAYS_EVAL# LIKE ''',v_LevelPath,'.%''');
   end if;

-- 获取分组
   CREATE TEMPORARY TABLE tt_TempStructure
   (
      StructureId INT,
      StructureGroupId INT,
      ParentStructureId INT,
      StructureName VARCHAR(128),
      IsUngroup BOOLEAN NOT NULL,
      StructureType INT,
      MapZoom FLOAT,
      Longitude NUMERIC(20,17),
      Latitude NUMERIC(20,17),
      Description NATIONAL VARCHAR(255),
      LevelPath NATIONAL VARCHAR(200),
      Enable BOOLEAN NOT NULL
   );

-- 执行
   SET SWV_ExecDyn = 'INSERT INTO tt_TempStructure(StructureId,
StructureGroupId,
ParentStructureId,
StructureName,
IsUngroup,
StructureType,
MapZoom,
Longitude,
Latitude,
Description,
LevelPath,
Enable)
   SELECT 	StructureId,
StructureGroupId,
ParentStructureId,
StructureName,
IsUngroup,

   StructureType,
MapZoom,
Longitude,
Latitude,
Description,
LevelPath,
Enable
   FROM TBL_StationStructure ss
   WHERE 1 = 1';
   SET @SWV_Stmt = SWV_ExecDyn;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;

   SELECT * FROM tt_TempStructure;

   DROP TEMPORARY TABLE IF EXISTS tt_TempStructure;

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# M_SelectUser]...';





DROP PROCEDURE IF EXISTS PAM_SelectUser;

CREATE PROCEDURE PAM_SelectUser(v_LoginId			NATIONAL VARCHAR(20))
BEGIN
   SELECT * FROM TBL_Account
   WHERE LogonId = v_LoginId;

   SELECT RoleId FROM TBL_UserRoleMap um
   INNER JOIN TBL_Account ac ON um.UserId = ac.UserId AND ac.LogonId = v_LoginId;

   SELECT hp.FileName FROM TBL_Account ac
   LEFT JOIN TBL_UserHomePageMap um ON ac.UserId = um.UserId
   INNER JOIN TBL_HomePage hp ON um.PageId = hp.PageId
   WHERE ac.LogonId = v_LoginId;
END;


-- SELECT N'SQLWAYS_EVAL# L_GetActiveControl]...';





DROP PROCEDURE IF EXISTS PBL_GetActiveControl;

CREATE PROCEDURE PBL_GetActiveControl()
BEGIN
-- 返回结果
-- 活动控制

-- 处理权限后的局站
   CREATE TEMPORARY TABLE tt_TempStation
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      StationId INT,
      StationName VARCHAR(128),
      StationState INT,
      StationCategory INT,
      StationGrade INT
   );
   CALL PAM_FilterStation('-1','-1','-1','-1','-1','-1','-1','-1','#TempStation');

-- 活动控制
   SELECT
   su.CenterId,
su.CenterName,
su.GroupId,
su.GroupName,
hs.HouseId,
hs.HouseName,
et.EquipmentCategory AS EquipmentCategoryId,
ete.EquipmentBaseType AS EquipmentBaseTypeId,
ete.Vendor AS EquipmentVendor,
ac.*,
ac.ControlExecuterIdName AS ControlExecuterName,
ac.ConfirmerName AS ConfirmName,
ct.BaseTypeId,
ct.CommandType,
ct.ControlCategory,
ct.DataType,
ct.EquipmentTemplateId,
ct.SignalId,
1 AS Enable,
1 AS Visible
   FROM TBL_ActiveControl ac
   INNER JOIN tt_TempStation su ON ac.StationId = su.StationId
   INNER JOIN TBL_Equipment et ON ac.StationId = et.StationId AND ac.EquipmentId = et.EquipmentId
   INNER JOIN TBL_EquipmentTemplate ete ON et.EquipmentTemplateId = ete.EquipmentTemplateId
   INNER JOIN TBL_House hs ON et.StationId = hs.StationId AND et.HouseId = hs.HouseId
   INNER JOIN TBL_Control ct ON et.EquipmentTemplateId = ct.EquipmentTemplateId AND ac.ControlId = ct.ControlId  AND ct.Enable = 1  AND ct.Visible = 1
   ORDER BY ac.StartTime DESC;

-- 控制含义
   SELECT DISTINCT cm.* FROM TBL_ActiveControl ac
   INNER JOIN TBL_Equipment et ON ac.EquipmentId = et.EquipmentId
   INNER JOIN TBL_ControlMeanings cm ON et.EquipmentTemplateId = cm.EquipmentTemplateId AND cm.ControlId = ac.ControlId;

-- 数据库时间
   SELECT CURRENT_TIMESTAMP;

-- 清除临时表
   DROP TEMPORARY TABLE IF EXISTS tt_TempStation;
END;

-- SELECT N'SQLWAYS_EVAL# L_GetActiveSignal]...';





DROP PROCEDURE IF EXISTS PBL_GetActiveSignal;

CREATE PROCEDURE PBL_GetActiveSignal(v_StartDateTime		DATETIME,
v_ReturnCount        NATIONAL VARCHAR(20))
BEGIN
   DECLARE v_RowCount INT;				

-- 查询结果条数
   IF v_ReturnCount is null then
      set v_ReturnCount = '10000';
   END IF;
   SET v_RowCount = cast(v_ReturnCount as SIGNED INTEGER);
   SET SQL_SELECT_LIMIT = v_RowCount; 

-- SQLWAYS_EVAL# *
   IF v_StartDateTime IS NULL then

      SELECT 	ac.StationId          ,
ac.EquipmentId        ,
ac.SignalId           ,
ac.DataType           ,
ac.FloatValue         ,
ac.StringValue		  ,
ac.DateTimeValue      ,
ac.SampleTime         ,
ac.BaseTypeId         ,
ac.EventSeverity      ,
ac.Flag 			  ,
sl.SignalCategory	  ,
sl.DataType			  ,
(CASE WHEN ac.EventSeverity = 0 THEN 'SQLWAYS_EVAL# .png'
      WHEN ac.EventSeverity = 1 THEN 'SQLWAYS_EVAL# .png'
      WHEN ac.EventSeverity = 2 THEN 'SQLWAYS_EVAL# .png'
      WHEN ac.EventSeverity = 3 THEN 'SQLWAYS_EVAL# .png'
      ELSE 'SQLWAYS_EVAL# K.png' END) AS EventSeverityImage
      FROM TBL_ActiveSignal ac
      INNER JOIN TBL_Equipment et ON ac.StationId = et.StationId AND ac.EquipmentId = et.EquipmentId
      INNER JOIN TBL_Signal sl ON et.EquipmentTemplateId = sl.EquipmentTemplateId AND ac.SignalId = sl.SignalId
      LEFT JOIN TBL_SignalMeanings sm ON et.EquipmentTemplateId = sm.EquipmentTemplateId AND ac.SignalId = sm.SignalId
      ORDER BY LastUpdate DESC;
   ELSE
      SELECT 	ac.StationId          ,
ac.EquipmentId        ,
ac.SignalId           ,
ac.DataType           ,
ac.FloatValue         ,
ac.StringValue		  ,
ac.DateTimeValue      ,
ac.SampleTime         ,
ac.BaseTypeId         ,
ac.EventSeverity      ,
ac.Flag 			  ,
sl.SignalCategory	  ,
sl.DataType			  ,
(CASE WHEN ac.EventSeverity = 0 THEN 'SQLWAYS_EVAL# .png'
      WHEN ac.EventSeverity = 1 THEN 'SQLWAYS_EVAL# .png'
      WHEN ac.EventSeverity = 2 THEN 'SQLWAYS_EVAL# .png'
      WHEN ac.EventSeverity = 3 THEN 'SQLWAYS_EVAL# .png'
      ELSE 'SQLWAYS_EVAL# K.png' END) AS EventSeverityImage
      FROM TBL_ActiveSignal ac
      INNER JOIN TBL_Equipment et ON ac.StationId = et.StationId AND ac.EquipmentId = et.EquipmentId
      INNER JOIN TBL_Signal sl ON et.EquipmentTemplateId = sl.EquipmentTemplateId AND ac.SignalId = sl.SignalId
      LEFT JOIN TBL_SignalMeanings sm ON et.EquipmentTemplateId = sm.EquipmentTemplateId AND ac.SignalId = sm.SignalId
      WHERE LastUpdate > v_StartDateTime ORDER BY LastUpdate DESC;
   end if;

   SET SQL_SELECT_LIMIT = DEFAULT;

   SELECT CURRENT_TIMESTAMP;
END;


DROP PROCEDURE IF EXISTS PBL_GetAlarmChange;

CREATE PROCEDURE `PBL_GetAlarmChange`(v_SerialNo  INT)
BEGIN

	DECLARE	v_StructureId		int;
	DECLARE v_StructureName	VARCHAR (255);

	SELECT StructureId, StructureName INTO v_StructureId, v_StructureName
	FROM tbl_stationstructure
	WHERE StructureGroupId = 1 AND IsUngroup = 1 LIMIT 0,1;

	SELECT 
		IFNULL(ac.StructureId, v_StructureId) AS GroupId,
		IFNULL(ac.StructureName, v_StructureName) AS GroupName,
		ac.SequenceId, 
		ac.SerialNo, 
		ac.OperationType, 
		ac.StationId, 
		ac.StationName, 
		ac.EquipmentId, 
		ac.EquipmentName, 
		ac.EventId, 
		ac.EventName, 
		ac.EventConditionId, 
		ac.EventSeverityId, 
		ac.EventSeverity, 
		ac.StartTime, 
		ac.EndTime, 
		ac.CancelTime, 
		ac.CancelUserId, 
		ac.CancelUserName, 
		ac.ConfirmTime, 
		ac.ConfirmerId, 
		ac.ConfirmerName, 
		ac.EventValue, 
		ac.ReversalNum, 
		ac.Meanings, 
		ac.EventFilePath, 
		ac.Description, 
		ac.SourceHostId, 
		ac.InstructionId, 
		ac.InstructionStatus, 
		ac.StandardAlarmNameId, 
		ac.StandardAlarmName, 
		ac.BaseTypeId, 
		ac.BaseTypeName, 
		ac.EquipmentCategory AS EquipmentCategoryId, 
		ac.EquipmentCategoryName, 
		ac.MaintainState, 
		ac.SignalId, 
		ac.RelateSequenceId, 
		ac.EventCategoryId, 
		ac.EventStateId,
		ac.EquipmentVendor,
		et.HouseId,
		et.EquipmentTemplateId
	FROM TBL_AlarmChange ac
	LEFT JOIN TBL_Equipment et ON ac.StationId = et.StationId AND ac.EquipmentId = et.EquipmentId
	WHERE ac.SerialNo > v_SerialNo AND ac.SerialNo <= v_SerialNo + 200
	ORDER BY ac.StartTime ASC;

END;


DROP PROCEDURE IF EXISTS PBL_GetEquipmentInformations;

CREATE PROCEDURE PBL_GetEquipmentInformations(v_StationId   INT)
BEGIN
   DECLARE v_CenterName NATIONAL VARCHAR(256);
   select   StructureName INTO v_CenterName FROM TBL_StationStructure WHERE StructureGroupId = 0;


   SELECT v_CenterName AS CenterName,  v_StationId AS StationId, equipment.EquipmentId,  equipment.Vendor, equipment.EquipmentName, equipment.EquipmentStyle, station.StationName, dataItem.ItemValue AS StationCategory, item.ItemValue AS StationGrade
   FROM TBL_Equipment equipment left JOIN TBL_Station station
   on station.StationId = equipment.StationId
   left JOIN TBL_DataItem dataItem ON station.StationCategory = dataItem.ItemId
   left JOIN TBL_DataItem item ON station.StationGrade = item.ItemId
   where equipment.StationId = v_StationId
   and dataItem.EntryId = 71
   and item.EntryId = 2;
END;




-- SELECT N'SQLWAYS_EVAL# L_GetMUToCheckSync]...';





DROP PROCEDURE IF EXISTS PBL_GetMUToCheckSync;
CREATE PROCEDURE PBL_GetMUToCheckSync()
BEGIN

   CREATE TEMPORARY TABLE tt_MonitorUnit
   (
      id INT NOT NULL  AUTO_INCREMENT PRIMARY KEY,
      MonitorUnitId INT NOT NULL,
      MonitorUnitName NATIONAL VARCHAR(128) NOT NULL,
      MonitorUnitCategory INT NOT NULL,
      MonitorUnitCode NATIONAL VARCHAR(128) NOT NULL,
      WorkStationId INT,
      StationId INT,
      IpAddress NATIONAL VARCHAR(128),
      RunMode INT,
      ConfigFileCode CHAR(32),
      ConfigUpdateTime DATETIME,
      SampleConfigCode CHAR(32),
      SoftwareVersion NATIONAL VARCHAR(64),
      Description NATIONAL VARCHAR(255),
      StartTime DATETIME,
      ConnectState INT  NOT NULL  DEFAULT 2,
      UpdateTime DATETIME NOT NULL,
      IsSync BOOLEAN  NOT NULL  DEFAULT 1,
      AppCongfigId INT,
      Enable BOOLEAN NOT NULL,
      SyncTime DATETIME,
      IsConfigOk BOOLEAN  NOT NULL  DEFAULT 1
   );

   INSERT INTO tt_MonitorUnit(MonitorUnitId, MonitorUnitName, MonitorUnitCategory, MonitorUnitCode,
WorkStationId, StationId, IpAddress, RunMode, ConfigFileCode, ConfigUpdateTime,
SampleConfigCode, SoftwareVersion, Description, StartTime, ConnectState, UpdateTime,
IsSync, AppCongfigId, Enable, SyncTime)
   SELECT MonitorUnitId, MonitorUnitName, MonitorUnitCategory, MonitorUnitCode,
WorkStationId, StationId, IpAddress, RunMode, ConfigFileCode, ConfigUpdateTime,
SampleConfigCode, SoftwareVersion, Description, StartTime, ConnectState, UpdateTime,
IsSync, AppCongfigId, Enable, SyncTime
   FROM TSL_MonitorUnit WHERE MonitorUnitId NOT IN(SELECT MonitorUnitId FROM TBL_MUFullCfgState)
   ORDER BY SyncTime;

   INSERT INTO tt_MonitorUnit(MonitorUnitId, MonitorUnitName, MonitorUnitCategory, MonitorUnitCode,
WorkStationId, StationId, IpAddress, RunMode, ConfigFileCode, ConfigUpdateTime,
SampleConfigCode, SoftwareVersion, Description, StartTime, ConnectState, UpdateTime,
IsSync, AppCongfigId, Enable, SyncTime)
   SELECT MonitorUnitId, MonitorUnitName, MonitorUnitCategory, MonitorUnitCode,
WorkStationId, StationId, IpAddress, RunMode, ConfigFileCode, ConfigUpdateTime,
SampleConfigCode, SoftwareVersion, Description, StartTime, ConnectState, UpdateTime,
IsSync, AppCongfigId, Enable, SyncTime
   FROM TSL_MonitorUnit WHERE MonitorUnitId IN(SELECT MonitorUnitId FROM TBL_MUFullCfgState)
   ORDER BY SyncTime;

   SELECT  MonitorUnitId, MonitorUnitName, MonitorUnitCategory, MonitorUnitCode,
WorkStationId, StationId, IpAddress, RunMode, ConfigFileCode, ConfigUpdateTime,
SampleConfigCode, SoftwareVersion, Description, StartTime, ConnectState, UpdateTime,
IsSync, AppCongfigId, Enable, SyncTime
   FROM tt_MonitorUnit ORDER BY id LIMIT 100;

   DROP TEMPORARY TABLE IF EXISTS tt_MonitorUnit;

END;
-- SELECT N'SQLWAYS_EVAL# L_GetSpecialtyOperation]...';






DROP PROCEDURE IF EXISTS PBL_GetSpecialtyOperation;

CREATE PROCEDURE PBL_GetSpecialtyOperation(v_UserId		   INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_OperationId INT;
   select   roleRight.OperationId INTO v_OperationId FROM TBL_UserRoleMap roleMap,  TBL_UserRoleRight roleRight WHERE roleMap.UserId = v_UserId
   AND  roleRight.OperationType = 3
   AND roleMap.RoleId = roleRight.RoleId;

   IF(v_OperationId = -1) then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   ELSE
      SELECT EntryItemId FROM TBL_SpecialtyGroupMap WHERE SpecialtyGroupId = v_OperationId;
   end if;
END;




-- SELECT N'SQLWAYS_EVAL# .[PBL_QueryActiveControl]...';


DROP PROCEDURE IF EXISTS PBL_QueryActiveControl;
CREATE PROCEDURE PBL_QueryActiveControl(v_CenterId           NATIONAL VARCHAR(4000)    ,
v_GroupId            NATIONAL VARCHAR(4000)    ,
v_StationState       NATIONAL VARCHAR(4000)    ,
v_StationCategory    NATIONAL VARCHAR(4000)    ,
v_StationId			NATIONAL VARCHAR(4000)    ,
v_StationId2         NATIONAL VARCHAR(4000)    ,
v_StationId3         NATIONAL VARCHAR(4000)    ,
v_EquipmentCategory  NATIONAL VARCHAR(4000)    ,
v_EquipmentId        NATIONAL VARCHAR(4000)    ,
v_EquipmentId2       NATIONAL VARCHAR(4000)    ,
v_EquipmentId3       NATIONAL VARCHAR(4000)    ,
v_ControlProperty	NATIONAL VARCHAR(4000)    ,
v_ControlCategory    NATIONAL VARCHAR(4000)    ,
v_ControlId	        NATIONAL VARCHAR(4000)    ,
v_ControlId2	        NATIONAL VARCHAR(4000)    ,
v_ControlId3	        NATIONAL VARCHAR(4000)    ,
v_ControlName        NATIONAL VARCHAR(4000)    ,
v_BaseTypeId         NATIONAL VARCHAR(4000)    ,
v_BaseTypeId2	    NATIONAL VARCHAR(4000)    ,
v_BaseTypeId3	    NATIONAL VARCHAR(4000)    ,
v_BaseTypeName       NATIONAL VARCHAR(4000)    ,
v_BaseTypeEntryId		NATIONAL VARCHAR(4000)    , -- SQLWAYS_EVAL# Id不包含后面3位顺序号
v_StandardTypeEntryId		NATIONAL VARCHAR(4000)    , -- SQLWAYS_EVAL# ，StandardDicId不包含前面局站类型和后面3位顺序号
v_QueryUserId        NATIONAL VARCHAR(20)      ,
v_ReturnCount        NATIONAL VARCHAR(20)   ,INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN
-- 返回结果
-- -1 不可知错误
--  0 成功
--  1 参数为0或空
--  2 没有查看控制权限

   DECLARE v_RowCount INT; 
   DECLARE v_Index INT;
   DECLARE v_TotalRowCount INT;
   DECLARE v_ViewControl INT;
   DECLARE v_UserId INT;
   DECLARE v_Return INT;
   DECLARE v_WhereControlId1 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereControlId2 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereControlId3 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereControlProperty NATIONAL VARCHAR(4000);  
   DECLARE v_WhereControlCategory NATIONAL VARCHAR(4000);  
   DECLARE v_WhereControlName NATIONAL VARCHAR(4000);  
   DECLARE v_WhereBaseTypeId1 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereBaseTypeId2 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereBaseTypeId3 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereBaseTypeName NATIONAL VARCHAR(4000);  
   DECLARE v_WhereBaseTypeEntryId NATIONAL VARCHAR(4000);  
   DECLARE v_WhereStandardTypeEntryId NATIONAL VARCHAR(4000);  						
   DECLARE v_BaseTypeJoinString NATIONAL VARCHAR(4000);  
   DECLARE v_StandardTypeEntryJoinString NATIONAL VARCHAR(4000);  
   DECLARE v_JoinString NATIONAL VARCHAR(4000);  
   DECLARE v_JoinStringTemplate NATIONAL VARCHAR(4000);  
   DECLARE v_SQL NATIONAL VARCHAR(4000);  
   DECLARE v_StandardVer INT; 
	DECLARE SWV_ExecDyn VARCHAR(5000);
-- 是否有浏览控制权限
   IF v_CenterId is null then
      set v_CenterId = '-1';
   END IF;
   IF v_GroupId is null then
      set v_GroupId = '-1';
   END IF;
   IF v_StationState is null then
      set v_StationState = '-1';
   END IF;
   IF v_StationCategory is null then
      set v_StationCategory = '-1';
   END IF;
   IF v_StationId is null then
      set v_StationId = '-1';
   END IF;
   IF v_StationId2 is null then
      set v_StationId2 = '-1';
   END IF;
   IF v_StationId3 is null then
      set v_StationId3 = '-1';
   END IF;
   IF v_EquipmentCategory is null then
      set v_EquipmentCategory = '-1';
   END IF;
   IF v_EquipmentId is null then
      set v_EquipmentId = '-1';
   END IF;
   IF v_EquipmentId2 is null then
      set v_EquipmentId2 = '-1';
   END IF;
   IF v_EquipmentId3 is null then
      set v_EquipmentId3 = '-1';
   END IF;
   IF v_ControlProperty is null then
      set v_ControlProperty = '-1';
   END IF;
   IF v_ControlCategory is null then
      set v_ControlCategory = '-1';
   END IF;
   IF v_ControlId is null then
      set v_ControlId = '-1';
   END IF;
   IF v_ControlId2 is null then
      set v_ControlId2 = '-1';
   END IF;
   IF v_ControlId3 is null then
      set v_ControlId3 = '-1';
   END IF;
   IF v_ControlName is null then
      set v_ControlName = '-1';
   END IF;
   IF v_BaseTypeId is null then
      set v_BaseTypeId = '-1';
   END IF;
   IF v_BaseTypeId2 is null then
      set v_BaseTypeId2 = '-1';
   END IF;
   IF v_BaseTypeId3 is null then
      set v_BaseTypeId3 = '-1';
   END IF;
   IF v_BaseTypeName is null then
      set v_BaseTypeName = '-1';
   END IF;
   IF v_BaseTypeEntryId is null then
      set v_BaseTypeEntryId = '-1';
   END IF;
   IF v_StandardTypeEntryId is null then
      set v_StandardTypeEntryId = '-1';
   END IF;
   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SET v_UserId = cast(v_QueryUserId as SIGNED INTEGER);
   SET v_ViewControl = 8;
   SET v_Return = PAM_OperationPrivilege(v_ViewControl,v_UserId);
   IF v_Return <> 1 then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;

-- 处理权限后的局站
   CREATE TEMPORARY TABLE tt_TempStation
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      StationId INT,
      StationName VARCHAR(128),
      StationState INT,
      StationCategory INT,
      StationGrade INT,
      StationBaseType INT
   );
   CALL PAM_FilterStation(v_CenterId,v_GroupId,v_StationState,v_StationCategory,v_StationId,v_StationId2,
   v_StationId3,v_QueryUserId,'#TempStation');

   SET v_StandardVer = PAM_GetStandardVer();

   UPDATE tt_TempStation A
   INNER JOIN TBL_StationBaseMap B ON A.StationCategory = B.StationCategory AND B.StandardType = v_StandardVer SET A.StationBaseType = B.StationBaseType;

-- 处理权限后的设备
   CREATE TEMPORARY TABLE tt_TempEquipment
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      StationId INT,
      StationName VARCHAR(128),
      StationState INT,
      StationCategory INT,
      EquipmentId INT,
      EquipmentName VARCHAR(128),
      EquipmentTemplateId INT,
      EquipmentCategory INT
   );
   CALL PAM_FilterEquipmentCategory(v_EquipmentCategory,v_EquipmentId,v_EquipmentId2,v_EquipmentId3,v_QueryUserId,
   '#TempStation','#TempEquipment');

-- 控制ID
   SET v_WhereControlId1 = '  ';
   IF IFNULL(v_ControlId,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_ControlId);
      IF v_Index = 0 then
         SET v_WhereControlId1 = CONCAT('SQLWAYS_EVAL# = ',v_ControlId);
      ELSE
         SET v_WhereControlId1 = CONCAT('SQLWAYS_EVAL# IN (',v_ControlId,')');
      end if;
   end if;
-- 控制ID2
   SET v_WhereControlId2 = '  ';
   IF IFNULL(v_ControlId2,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_ControlId2);
      IF v_Index = 0 then
         SET v_WhereControlId2 = CONCAT('SQLWAYS_EVAL# = ',v_ControlId2);
      ELSE
         SET v_WhereControlId2 = CONCAT('SQLWAYS_EVAL# IN (',v_ControlId2,')');
      end if;
   end if;

-- 控制ID3
   SET v_WhereControlId3 = '  ';
   IF IFNULL(v_ControlId3,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_ControlId3);
      IF v_Index = 0 then
         SET v_WhereControlId3 = CONCAT('SQLWAYS_EVAL# = ',v_ControlId3);
      ELSE
         SET v_WhereControlId3 = CONCAT('SQLWAYS_EVAL# IN (',v_ControlId3,')');
      end if;
   end if;

-- 控制种类ID
   SET v_WhereControlCategory = '  ';
   IF IFNULL(v_ControlCategory,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_ControlCategory);
      IF v_Index = 0 then
         SET v_WhereControlCategory = CONCAT('SQLWAYS_EVAL# = ',v_ControlCategory);
      ELSE
         SET v_WhereControlCategory = CONCAT('SQLWAYS_EVAL# IN (',v_ControlCategory,')');
      end if;
   end if;

-- 控制名称
   SET v_WhereControlName = '  ';
   IF IFNULL(v_ControlName,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_ControlName);
      IF v_Index = 0 then

         SET v_WhereControlName = CONCAT('SQLWAYS_EVAL# LIKE ''%',v_ControlName,'%''');
      ELSE
         SET v_WhereControlName = ' AND (( ';
         WHILE(v_Index != 0) DO
            SET v_WhereControlName = CONCAT(v_WhereControlName,'SQLWAYS_EVAL# like ''%',SUBSTRING(v_ControlName,1,v_Index -1),
            '%'' ');
            SET v_ControlName = rtrim(ltrim(INSERT(v_ControlName,1,v_Index,' ')));
            SET v_Index = LOCATE(',',v_ControlName);
            IF(v_Index != 0) then

               SET v_WhereControlName = CONCAT(v_WhereControlName,' ) OR ( ');
            ELSE
               SET v_WhereControlName = CONCAT(v_WhereControlName,' )) ');
            end if;
         END WHILE;
      end if;
   end if;		

   IF v_StandardVer <> 2 then
-- SQLWAYS_EVAL# 使用艾默生基类标准化

      IF v_BaseTypeEntryId = '-1' AND v_StandardTypeEntryId <> '-1' then
         SET v_BaseTypeEntryId = v_StandardTypeEntryId;
      end if;
   end if;		

-- 基类连接
   SET v_BaseTypeJoinString = 'SQLWAYS_EVAL# sb ON sb.BaseTypeId = es.BaseTypeId  ';

-- 标准化连接
   IF v_StandardVer = 2 then 
-- SQLWAYS_EVAL# 信不同局站类型的标准化Id不同，不使用StandardDicControl.StationCategory进行过滤
      SET v_StandardTypeEntryJoinString = CONCAT('SQLWAYS_EVAL# cbm ON cbm.StationBaseType = su.StationBaseType AND cbm.BaseTypeId = floor(es.BaseTypeId / 1000) * 1000 + 1
LEFT JOIN TBL_StandardDicControl sdc ON sdc.StandardDicId = cbm.StandardDicId AND sdc.StandardType = ',CAST(v_StandardVer AS CHAR(10)));
   ELSE
-- 艾默生和移动使用基类标准化
      SET v_StandardTypeEntryJoinString = CONCAT('SQLWAYS_EVAL# cbm ON cbm.StationBaseType = su.StationBaseType AND cbm.BaseTypeId = floor(es.BaseTypeId / 1000) * 1000 + 1
LEFT JOIN TBL_StandardDicControl sdc ON sdc.StandardDicId = cbm.StandardDicId AND sdc.StandardType = ',CAST(v_StandardVer AS CHAR(10)));
   end if;	

-- 基类ID
   SET v_WhereBaseTypeId1 = ' ';
   IF IFNULL(v_BaseTypeId,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_BaseTypeId);
      IF v_Index = 0 then
         SET v_WhereBaseTypeId1 = CONCAT('SQLWAYS_EVAL# = ',v_BaseTypeId);
      ELSE
         SET v_WhereBaseTypeId1 = CONCAT('SQLWAYS_EVAL# IN (',v_BaseTypeId,')');
      end if;
      SET v_BaseTypeJoinString = 'SQLWAYS_EVAL# sb ON sb.BaseTypeId = es.BaseTypeId  ';
   end if;

-- 基类ID2

   SET v_WhereBaseTypeId2 = ' ';
   IF IFNULL(v_BaseTypeId2,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_BaseTypeId2);
      IF v_Index = 0 then
         SET v_WhereBaseTypeId2 = CONCAT('SQLWAYS_EVAL# = ',v_BaseTypeId2);
      ELSE
         SET v_WhereBaseTypeId2 = CONCAT('SQLWAYS_EVAL# IN (',v_BaseTypeId2,')');
      end if;
   end if;

-- 基类ID3
   SET v_WhereBaseTypeId3 = '';
   IF IFNULL(v_BaseTypeId3,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_BaseTypeId3);
      IF v_Index = 0 then
         SET v_WhereBaseTypeId3 = CONCAT('SQLWAYS_EVAL# = ',v_BaseTypeId3);
      ELSE
         SET v_WhereBaseTypeId3 = CONCAT('SQLWAYS_EVAL# IN (',v_BaseTypeId3,')');
      end if;
   end if;
   IF v_WhereBaseTypeId1 <> ' ' then
      SET v_WhereBaseTypeId3 = CONCAT(v_WhereBaseTypeId3,')');
   end if;


-- 基类名称	
   SET v_WhereBaseTypeName = '  ';
   IF IFNULL(v_BaseTypeName,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_BaseTypeName);
      IF v_Index = 0 then

         SET v_WhereBaseTypeName = CONCAT('SQLWAYS_EVAL# LIKE ''%',v_BaseTypeName,'%''');
      ELSE
         SET v_WhereBaseTypeName = ' AND (( ';
         WHILE(v_Index != 0) DO
            SET v_WhereBaseTypeName = CONCAT(v_WhereBaseTypeName,'SQLWAYS_EVAL# like ''','%',SUBSTRING(v_BaseTypeName,1,v_Index -1),
            '%''');
            SET v_BaseTypeName = rtrim(ltrim(INSERT(v_BaseTypeName,1,v_Index,' ')));
            SET v_Index = LOCATE(',',v_BaseTypeName);
            IF(v_Index != 0) then

               SET v_WhereBaseTypeName = CONCAT(v_WhereBaseTypeName,' ) OR ( ');
            ELSE
               SET v_WhereBaseTypeName = CONCAT(v_WhereBaseTypeName,' )) ');
            end if;
         END WHILE;
      end if;
      SET v_BaseTypeJoinString = 'SQLWAYS_EVAL# sb ON sb.BaseTypeId = es.BaseTypeId  ';
   end if;	

-- 基类业务
   SET v_WhereBaseTypeEntryId = ' ';
   IF IFNULL(v_BaseTypeEntryId,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_BaseTypeEntryId);
      IF v_Index = 0 then

         SET v_WhereBaseTypeEntryId = CONCAT('SQLWAYS_EVAL#  > ',CAST(cast(v_BaseTypeEntryId as SIGNED INTEGER)*1000 AS CHAR(10)),
         'SQLWAYS_EVAL# < ',CAST(cast(v_BaseTypeEntryId as SIGNED INTEGER)*1000+1000 AS CHAR(10)));
      ELSE
         SET v_WhereBaseTypeEntryId = CONCAT('SQLWAYS_EVAL# / 1000) IN (',v_BaseTypeEntryId,')');
      end if;
      SET v_BaseTypeJoinString = 'SQLWAYS_EVAL# sb ON sb.BaseTypeId = es.BaseTypeId  ';
   end if;

-- 标准化ID
   IF v_StandardVer = 2 then
-- 电信使用电信集团标准化

      SET v_WhereStandardTypeEntryId = ' ';
      IF IFNULL(v_StandardTypeEntryId,'-1') <> '-1' then

         SET v_Index = LOCATE(',',v_StandardTypeEntryId);
         IF v_Index = 0 then
            SET v_WhereStandardTypeEntryId = CONCAT('SQLWAYS_EVAL# %100000000)/1000) = ',v_StandardTypeEntryId);
         ELSE
            SET v_WhereStandardTypeEntryId = CONCAT('SQLWAYS_EVAL# %100000000)/1000) IN (',v_StandardTypeEntryId,')');
         end if;
         SET v_StandardTypeEntryJoinString = CONCAT('SQLWAYS_EVAL# cbm ON cbm.StationBaseType = su.StationBaseType AND cbm.BaseTypeId = floor(es.BaseTypeId / 1000) * 1000 + 1
INNER JOIN TBL_StandardDicControl sdc ON sdc.StandardDicId = cbm.StandardDicId AND sdc.StandardType = ',CAST(v_StandardVer AS CHAR(10)));
      end if;
   end if;

-- 满足条件控制
   CREATE TEMPORARY TABLE tt_ControlTotal
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      EquipmentTemplateId INT,
      StationId INT,
      StationName VARCHAR(128),
      HouseId INT,
      HouseName VARCHAR(128),
      EquipmentId INT,
      EquipmentName VARCHAR(128),
      EquipmentCategoryId INT,
      EquipmentBaseTypeId INT,
      EquipmentVendor VARCHAR(255),
      ControlId INT,
      ControlName VARCHAR(128),
      ControlCategory INT,
      ControlType INT,
      CommandType INT,
      MaxValue FLOAT,
      MinValue FLOAT,
      DefaultValue FLOAT,
      DisplayIndex INT,
      SignalId INT,
      CmdToken VARCHAR(500),
      ControlSeverity INT,
      BaseTypeId NUMERIC(10,0),
      BaseTypeName NATIONAL VARCHAR(128),
      StandardTypeId NUMERIC(10,0),
      StandardTypeName NATIONAL VARCHAR(128),
      DataType SMALLINT,
      Description NATIONAL VARCHAR(255),
      ModuleNo INT,
      TimeOut FLOAT,
      Retry INT
   );

-- 查询结果条数
   SET v_RowCount = cast(v_ReturnCount as SIGNED INTEGER);
   SET SQL_SELECT_LIMIT = v_RowCount;  

-- 满足条件控制			

-- SQLWAYS_EVAL#  

-- SQLWAYS_EVAL# olProperty
   SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL# 					,
HouseId							,
HouseName						,
EquipmentId						,
EquipmentName					,
EquipmentCategoryId				,
EquipmentBaseTypeId				,
EquipmentVendor					,
ControlId           			,
ControlName						,
ControlCategory					,
ControlType						,
CommandType						,
MaxValue      					,
MinValue   						,
DefaultValue					,
DisplayIndex					,
SignalId						,
CmdToken						,
ControlSeverity					,
BaseTypeId						,
BaseTypeName					,
StandardTypeId					,
StandardTypeName				,				
DataType						,
Description						,
ModuleNo						,
TimeOut							,
Retry		)
SELECT 
su.CenterId,
su.CenterName,
su.GroupId,
su.GroupName,
es.EquipmentTemplateId, 
su.StationId,
su.StationName,
hs.HouseId,
hs.HouseName,
e.EquipmentId,
e.EquipmentName,
e.EquipmentCategory AS EquipmentCategoryId, 
ete.EquipmentBaseType AS EquipmentBaseTypeId,
ete.Vendor AS EquipmentVendor,
es.ControlId,
es.ControlName, 
es.ControlCategory,
es.ControlType, 
es.CommandType, 
es.MaxValue, 
es.MinValue,
es.DefaultValue, 
es.DisplayIndex, 
es.SignalId, 
es.CmdToken, 
es.ControlSeverity, 
es.BaseTypeId, 
sb.BaseTypeName,
floor(sdc.StandardDicId / 1000) * 1000 + (es.BaseTypeId - floor(es.BaseTypeId / 1000)*1000),
replace(sdc.ControlStandardName,''XX'',convert(NVARCHAR(10), es.BaseTypeId - floor(es.BaseTypeId / 1000)*1000)),							
es.DataType,
es.Description,
es.ModuleNo,
es.TimeOut,
es.Retry	
FROM #TempEquipment e
INNER JOIN #TempStation su ON e.StationId = su.StationId
INNER JOIN TBL_Equipment ett ON e.StationId = ett.StationId AND e.EquipmentId = ett.EquipmentId
INNER JOIN TBL_EquipmentTemplate ete ON ett.EquipmentTemplateId = ete.EquipmentTemplateId
INNER JOIN TBL_House hs ON e.StationId = hs.StationId AND ett.HouseId = hs.HouseId
INNER JOIN TBL_Control es ON e.EquipmentTemplateId = es.EquipmentTemplateId AND es.Enable = 1  AND es.Visible=1  ','SQLWAYS_EVAL# ac ON e.StationId = ac.StationId AND e.EquipmentId = ac.EquipmentId AND es.ControlId = ac.ControlId ',v_BaseTypeJoinString,
   v_StandardTypeEntryJoinString,' WHERE 1=1 ',v_WhereControlId1,
   v_WhereControlId2,v_WhereControlId3,v_WhereControlCategory,v_WhereControlName,
   v_WhereBaseTypeId1,v_WhereBaseTypeId2,v_WhereBaseTypeId3,
   v_WhereBaseTypeName,v_WhereBaseTypeEntryId,v_WhereStandardTypeEntryId);
   SET @SWV_Stmt = SWV_ExecDyn;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;
   SELECT
   st.CenterId,
st.CenterName,
st.GroupId,
st.GroupName,
st.EquipmentTemplateId,
st.StationId,
st.StationName,
st.HouseId,
st.HouseName,
st.EquipmentId,
st.EquipmentName,
st.EquipmentCategoryId,
st.EquipmentBaseTypeId,
st.EquipmentVendor,
st.ControlId,
st.ControlName,
st.ControlCategory,
st.ControlType,
st.CommandType,
st.MaxValue,
st.MinValue,
st.DefaultValue,
st.DisplayIndex,
st.SignalId,
st.CmdToken,
st.ControlSeverity,
st.BaseTypeId,
st.BaseTypeName,
CASE
   WHEN v_StandardVer = 2 THEN st.StandardTypeId
   ELSE BaseTypeId
   END AS StandardTypeId,
CASE
   WHEN v_StandardVer = 2 THEN  floor((st.StandardTypeId -floor(st.StandardTypeId/100000000)*100000000)/1000)
   ELSE floor(BaseTypeId/1000)
   END AS StandardTypeEntryId,
CASE
   WHEN v_StandardVer = 2 THEN st.StandardTypeName
   ELSE BaseTypeName
   END AS StandardTypeName,
st.DataType,
st.Description,
st.ModuleNo,
st.TimeOut,
st.Retry,
di.ItemValue AS EquipmentCategoryName,
1 AS Enable,
1 AS Visible
   FROM tt_ControlTotal st
   INNER JOIN TBL_DataItem di ON di.EntryId = 7 AND st.EquipmentCategoryId = di.ItemId
   ORDER BY StationId,EquipmentId,ControlId;

   SELECT DISTINCT cm.* FROM TBL_ControlMeanings cm
   INNER JOIN tt_ControlTotal ct ON cm.ControlId = ct.ControlId AND cm.EquipmentTemplateId = ct.EquipmentTemplateId AND cm.ControlId = ct.ControlId;

   SET SQL_SELECT_LIMIT = DEFAULT;

   DROP TEMPORARY TABLE IF EXISTS tt_ControlTotal;
   DROP TEMPORARY TABLE IF EXISTS tt_TempEquipment;
   DROP TEMPORARY TABLE IF EXISTS tt_TempStation;

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# .[PBL_QueryConfigControl]...';


DROP PROCEDURE IF EXISTS PBL_QueryConfigControl;

CREATE PROCEDURE PBL_QueryConfigControl(v_CenterId           NATIONAL VARCHAR(4000)    ,
v_GroupId            NATIONAL VARCHAR(4000)    ,
v_StationState       NATIONAL VARCHAR(4000)    ,
v_StationCategory    NATIONAL VARCHAR(4000)    ,
v_StationId			NATIONAL VARCHAR(4000)    ,
v_StationId2         NATIONAL VARCHAR(4000)    ,
v_StationId3         NATIONAL VARCHAR(4000)    ,
v_EquipmentCategory  NATIONAL VARCHAR(4000)    ,
v_EquipmentId        NATIONAL VARCHAR(4000)    ,
v_EquipmentId2       NATIONAL VARCHAR(4000)    ,
v_EquipmentId3       NATIONAL VARCHAR(4000)    ,
v_ControlProperty	NATIONAL VARCHAR(4000)    ,
v_ControlCategory    NATIONAL VARCHAR(4000)    ,
v_ControlId	        NATIONAL VARCHAR(4000)    ,
v_ControlId2	        NATIONAL VARCHAR(4000)    ,
v_ControlId3	        NATIONAL VARCHAR(4000)    ,
v_ControlName        NATIONAL VARCHAR(4000)    ,
v_BaseTypeId         NATIONAL VARCHAR(4000)    ,
v_BaseTypeId2	    NATIONAL VARCHAR(4000)    ,
v_BaseTypeId3	    NATIONAL VARCHAR(4000)    ,
v_BaseTypeName       NATIONAL VARCHAR(4000)    ,
v_BaseTypeEntryId		NATIONAL VARCHAR(4000)    , -- SQLWAYS_EVAL# Id不包含后面3位顺序号
v_StandardTypeEntryId		NATIONAL VARCHAR(4000)    , -- SQLWAYS_EVAL# ，StandardDicId不包含前面局站类型和后面3位顺序号
v_QueryUserId        NATIONAL VARCHAR(20)      ,
v_ReturnCount        NATIONAL VARCHAR(20)   ,INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN
-- 返回结果
-- -1 不可知错误
--  0 成功
--  1 参数为0或空
--  2 没有查看控制权限

   DECLARE v_RowCount INT; 
   DECLARE v_Index INT;
   DECLARE v_TotalRowCount INT;
   DECLARE v_ViewControl INT;
   DECLARE v_UserId INT;
   DECLARE v_Return INT;
   DECLARE v_WhereControlId1 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereControlId2 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereControlId3 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereControlProperty NATIONAL VARCHAR(4000);  
   DECLARE v_WhereControlCategory NATIONAL VARCHAR(4000);  
   DECLARE v_WhereControlName NATIONAL VARCHAR(4000);  
   DECLARE v_WhereBaseTypeId1 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereBaseTypeId2 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereBaseTypeId3 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereBaseTypeName NATIONAL VARCHAR(4000);  
   DECLARE v_WhereBaseTypeEntryId NATIONAL VARCHAR(4000);  
   DECLARE v_WhereStandardTypeEntryId NATIONAL VARCHAR(4000);  				
   DECLARE v_WhereModule NATIONAL VARCHAR(4000);  
   DECLARE v_BaseTypeJoinString NATIONAL VARCHAR(4000);  
   DECLARE v_StandardTypeEntryJoinString NATIONAL VARCHAR(4000);  
   DECLARE v_JoinString NATIONAL VARCHAR(4000);  
   DECLARE v_JoinStringTemplate NATIONAL VARCHAR(4000);  
   DECLARE v_SQL NATIONAL VARCHAR(4000);  
   DECLARE v_StandardVer INT;
   DECLARE v_TempBaseTypeId NUMERIC(10,0);
	DECLARE SWV_ExecDyn VARCHAR(5000);
-- 是否有浏览控制权限
   IF v_CenterId is null then
      set v_CenterId = '-1';
   END IF;
   IF v_GroupId is null then
      set v_GroupId = '-1';
   END IF;
   IF v_StationState is null then
      set v_StationState = '-1';
   END IF;
   IF v_StationCategory is null then
      set v_StationCategory = '-1';
   END IF;
   IF v_StationId is null then
      set v_StationId = '-1';
   END IF;
   IF v_StationId2 is null then
      set v_StationId2 = '-1';
   END IF;
   IF v_StationId3 is null then
      set v_StationId3 = '-1';
   END IF;
   IF v_EquipmentCategory is null then
      set v_EquipmentCategory = '-1';
   END IF;
   IF v_EquipmentId is null then
      set v_EquipmentId = '-1';
   END IF;
   IF v_EquipmentId2 is null then
      set v_EquipmentId2 = '-1';
   END IF;
   IF v_EquipmentId3 is null then
      set v_EquipmentId3 = '-1';
   END IF;
   IF v_ControlProperty is null then
      set v_ControlProperty = '-1';
   END IF;
   IF v_ControlCategory is null then
      set v_ControlCategory = '-1';
   END IF;
   IF v_ControlId is null then
      set v_ControlId = '-1';
   END IF;
   IF v_ControlId2 is null then
      set v_ControlId2 = '-1';
   END IF;
   IF v_ControlId3 is null then
      set v_ControlId3 = '-1';
   END IF;
   IF v_ControlName is null then
      set v_ControlName = '-1';
   END IF;
   IF v_BaseTypeId is null then
      set v_BaseTypeId = '-1';
   END IF;
   IF v_BaseTypeId2 is null then
      set v_BaseTypeId2 = '-1';
   END IF;
   IF v_BaseTypeId3 is null then
      set v_BaseTypeId3 = '-1';
   END IF;
   IF v_BaseTypeName is null then
      set v_BaseTypeName = '-1';
   END IF;
   IF v_BaseTypeEntryId is null then
      set v_BaseTypeEntryId = '-1';
   END IF;
   IF v_StandardTypeEntryId is null then
      set v_StandardTypeEntryId = '-1';
   END IF;
   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SET v_UserId = cast(v_QueryUserId as SIGNED INTEGER);
   SET v_ViewControl = 8;
   SET v_Return = PAM_OperationPrivilege(v_ViewControl,v_UserId);
   IF v_Return <> 1 then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;

-- 处理权限后的局站
   CREATE TEMPORARY TABLE tt_TempStation
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      StationId INT,
      StationName VARCHAR(128),
      StationState INT,
      StationCategory INT,
      StationGrade INT,
      StationBaseType INT
   );
   CALL PAM_FilterStation(v_CenterId,v_GroupId,v_StationState,v_StationCategory,v_StationId,v_StationId2,
   v_StationId3,v_QueryUserId,'#TempStation');

   SET v_StandardVer = PAM_GetStandardVer();

   UPDATE tt_TempStation A
   INNER JOIN TBL_StationBaseMap B ON A.StationCategory = B.StationCategory AND B.StandardType = v_StandardVer SET A.StationBaseType = B.StationBaseType;

-- 处理权限后的设备
   CREATE TEMPORARY TABLE tt_TempEquipment
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      StationId INT,
      StationName VARCHAR(128),
      StationState INT,
      StationCategory INT,
      EquipmentId INT,
      EquipmentName VARCHAR(128),
      EquipmentTemplateId INT,
      EquipmentCategory INT
   );
   CALL PAM_FilterEquipmentCategory(v_EquipmentCategory,v_EquipmentId,v_EquipmentId2,v_EquipmentId3,v_QueryUserId,
   '#TempStation','#TempEquipment');        

-- 控制ID
   SET v_WhereControlId1 = '  ';
   IF IFNULL(v_ControlId,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_ControlId);
      IF v_Index = 0 then
         SET v_WhereControlId1 = CONCAT('SQLWAYS_EVAL# = ',v_ControlId);
      ELSE
         SET v_WhereControlId1 = CONCAT('SQLWAYS_EVAL# IN (',v_ControlId,')');
      end if;
   end if;
-- 控制ID2
   SET v_WhereControlId2 = '  ';
   IF IFNULL(v_ControlId2,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_ControlId2);
      IF v_Index = 0 then
         SET v_WhereControlId2 = CONCAT('SQLWAYS_EVAL# = ',v_ControlId2);
      ELSE
         SET v_WhereControlId2 = CONCAT('SQLWAYS_EVAL# IN (',v_ControlId2,')');
      end if;
   end if;

-- 控制ID3
   SET v_WhereControlId3 = '  ';
   IF IFNULL(v_ControlId3,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_ControlId3);
      IF v_Index = 0 then
         SET v_WhereControlId3 = CONCAT('SQLWAYS_EVAL# = ',v_ControlId3);
      ELSE
         SET v_WhereControlId3 = CONCAT('SQLWAYS_EVAL# IN (',v_ControlId3,')');
      end if;
   end if;

-- 控制种类ID
   SET v_WhereControlCategory = '  ';
   IF IFNULL(v_ControlCategory,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_ControlCategory);
      IF v_Index = 0 then
         SET v_WhereControlCategory = CONCAT('SQLWAYS_EVAL# = ',v_ControlCategory);
      ELSE
         SET v_WhereControlCategory = CONCAT('SQLWAYS_EVAL# IN (',v_ControlCategory,')');
      end if;
   end if;

-- 控制名称
   SET v_WhereControlName = '  ';
   IF IFNULL(v_ControlName,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_ControlName);
      IF v_Index = 0 then

         SET v_WhereControlName = CONCAT('SQLWAYS_EVAL# LIKE ''%',v_ControlName,'%''');
      ELSE
         SET v_WhereControlName = ' AND (( ';
         WHILE(v_Index != 0) DO
            SET v_WhereControlName = CONCAT(v_WhereControlName,'SQLWAYS_EVAL# like ''%',SUBSTRING(v_ControlName,1,v_Index -1),
            '%'' ');
            SET v_ControlName = rtrim(ltrim(INSERT(v_ControlName,1,v_Index,' ')));
            SET v_Index = LOCATE(',',v_ControlName);
            IF(v_Index != 0) then

               SET v_WhereControlName = CONCAT(v_WhereControlName,' ) OR ( ');
            ELSE
               SET v_WhereControlName = CONCAT(v_WhereControlName,' )) ');
            end if;
         END WHILE;
      end if;
   end if;	

   IF v_StandardVer <> 2 then
-- SQLWAYS_EVAL# 使用艾默生基类标准化

      IF v_BaseTypeEntryId = '-1' AND v_StandardTypeEntryId <> '-1' then
         SET v_BaseTypeEntryId = v_StandardTypeEntryId;
      end if;
   end if;		

-- 基类连接
   SET v_BaseTypeJoinString = 'SQLWAYS_EVAL# sb ON sb.BaseTypeId = es.BaseTypeId  ';

-- 标准化连接
   IF v_StandardVer = 2 then 
-- 电信使用电信集团标准化
      SET v_StandardTypeEntryJoinString = CONCAT('SQLWAYS_EVAL# cbm ON cbm.StationBaseType = su.StationBaseType AND cbm.BaseTypeId = floor(es.BaseTypeId / 1000) * 1000 + 1
LEFT JOIN TBL_StandardDicControl sdc ON sdc.StandardDicId = cbm.StandardDicId AND sdc.StandardType = ',CAST(v_StandardVer AS CHAR(10)));
   ELSE
-- 艾默生和移动使用基类标准化
      SET v_StandardTypeEntryJoinString = CONCAT('SQLWAYS_EVAL# cbm ON cbm.StationBaseType = su.StationBaseType AND cbm.BaseTypeId = floor(es.BaseTypeId / 1000) * 1000 + 1
LEFT JOIN TBL_StandardDicControl sdc ON sdc.StandardDicId = cbm.StandardDicId AND sdc.StandardType = ',CAST(v_StandardVer AS CHAR(10)));
   end if;				

-- 基类ID
   SET v_WhereBaseTypeId1 = ' ';
   IF IFNULL(v_BaseTypeId,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_BaseTypeId);
      IF v_Index = 0 then
         SET v_WhereBaseTypeId1 = CONCAT('SQLWAYS_EVAL# = ',v_BaseTypeId);
      ELSE
         SET v_WhereBaseTypeId1 = CONCAT('SQLWAYS_EVAL# IN (',v_BaseTypeId,')');
      end if;
      SET v_BaseTypeJoinString = 'SQLWAYS_EVAL# sb ON sb.BaseTypeId = es.BaseTypeId  ';
   end if;

-- 基类ID2

   SET v_WhereBaseTypeId2 = ' ';
   IF IFNULL(v_BaseTypeId2,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_BaseTypeId2);
      IF v_Index = 0 then
         SET v_WhereBaseTypeId2 = CONCAT('SQLWAYS_EVAL# = ',v_BaseTypeId2);
      ELSE
         SET v_WhereBaseTypeId2 = CONCAT('SQLWAYS_EVAL# IN (',v_BaseTypeId2,')');
      end if;
   end if;

-- 基类ID3
   SET v_WhereBaseTypeId3 = '';
   IF IFNULL(v_BaseTypeId3,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_BaseTypeId3);
      IF v_Index = 0 then
         SET v_WhereBaseTypeId3 = CONCAT('SQLWAYS_EVAL# = ',v_BaseTypeId3);
      ELSE
         SET v_WhereBaseTypeId3 = CONCAT('SQLWAYS_EVAL# IN (',v_BaseTypeId3,')');
      end if;
   end if;
   IF v_WhereBaseTypeId1 <> ' ' then
      SET v_WhereBaseTypeId3 = CONCAT(v_WhereBaseTypeId3,')');
   end if;


-- 基类名称	
   SET v_WhereBaseTypeName = '  ';
   IF IFNULL(v_BaseTypeName,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_BaseTypeName);
      IF v_Index = 0 then

         SET v_WhereBaseTypeName = CONCAT('SQLWAYS_EVAL# LIKE ''%',v_BaseTypeName,'%''');
      ELSE
         SET v_WhereBaseTypeName = ' AND (( ';
         WHILE(v_Index != 0) DO
            SET v_WhereBaseTypeName = CONCAT(v_WhereBaseTypeName,'SQLWAYS_EVAL# like ''','%',SUBSTRING(v_BaseTypeName,1,v_Index -1),
            '%''');
            SET v_BaseTypeName = rtrim(ltrim(INSERT(v_BaseTypeName,1,v_Index,' ')));
            SET v_Index = LOCATE(',',v_BaseTypeName);
            IF(v_Index != 0) then

               SET v_WhereBaseTypeName = CONCAT(v_WhereBaseTypeName,' ) OR ( ');
            ELSE
               SET v_WhereBaseTypeName = CONCAT(v_WhereBaseTypeName,' )) ');
            end if;
         END WHILE;
      end if;
      SET v_BaseTypeJoinString = 'SQLWAYS_EVAL# sb ON sb.BaseTypeId = es.BaseTypeId  ';
   end if;	

-- 基类业务
   SET v_WhereBaseTypeEntryId = ' ';
   IF IFNULL(v_BaseTypeEntryId,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_BaseTypeEntryId);
      IF v_Index = 0 then

         SET v_WhereBaseTypeEntryId = CONCAT('SQLWAYS_EVAL#  > ',CAST(cast(v_BaseTypeEntryId as SIGNED INTEGER)*1000 AS CHAR(10)),
         'SQLWAYS_EVAL# < ',CAST(cast(v_BaseTypeEntryId as SIGNED INTEGER)*1000+1000 AS CHAR(10)));
      ELSE
         SET v_WhereBaseTypeEntryId = CONCAT('SQLWAYS_EVAL# / 1000) IN (',v_BaseTypeEntryId,')');
      end if;
      SET v_BaseTypeJoinString = 'SQLWAYS_EVAL# sb ON sb.BaseTypeId = es.BaseTypeId  ';
   end if;

-- 标准化ID
   IF v_StandardVer = 2 then
-- 电信使用电信集团标准化

      SET v_WhereStandardTypeEntryId = ' ';
      IF IFNULL(v_StandardTypeEntryId,'-1') <> '-1' then

         SET v_Index = LOCATE(',',v_StandardTypeEntryId);
         IF v_Index = 0 then
            SET v_WhereStandardTypeEntryId = CONCAT('SQLWAYS_EVAL# %100000000)/1000) = ',v_StandardTypeEntryId);
         ELSE
            SET v_WhereStandardTypeEntryId = CONCAT('SQLWAYS_EVAL# %100000000)/1000) IN (',v_StandardTypeEntryId,')');
         end if;
         SET v_StandardTypeEntryJoinString = CONCAT('SQLWAYS_EVAL# cbm ON cbm.StationBaseType = su.StationBaseType AND cbm.BaseTypeId = floor(es.BaseTypeId / 1000) * 1000 + 1
INNER JOIN TBL_StandardDicControl sdc ON sdc.StandardDicId = cbm.StandardDicId AND sdc.StandardType = ',CAST(v_StandardVer AS CHAR(10)));
      end if;
   end if;

-- 模块条件
   SET v_WhereModule = 'SQLWAYS_EVAL# = 0
OR ett.InstalledModule = ''0'' 
OR ett.InstalledModule = ''''  
OR CHARINDEX('','' + rtrim(ltrim(CONVERT(NVARCHAR, es.ModuleNo))) + '','', '','' + rtrim(ltrim(ett.InstalledModule)) + '','') > 0 
)  ';

-- 满足条件控制
   CREATE TEMPORARY TABLE tt_ControlTotal
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      EquipmentTemplateId INT,
      StationId INT,
      StationName VARCHAR(128),
      HouseId INT,
      HouseName VARCHAR(128),
      EquipmentId INT,
      EquipmentName VARCHAR(128),
      EquipmentCategoryId INT,
      EquipmentBaseTypeId INT,
      EquipmentVendor VARCHAR(255),
      ControlId INT,
      ControlName VARCHAR(128),
      ControlCategory INT,
      ControlType INT,
      CommandType INT,
      MaxValue FLOAT,
      MinValue FLOAT,
      DefaultValue FLOAT,
      DisplayIndex INT,
      SignalId INT,
      CmdToken VARCHAR(500),
      ControlSeverity INT,
      BaseTypeId NUMERIC(10,0),
      BaseTypeName NATIONAL VARCHAR(128),
      StandardTypeId NUMERIC(10,0),
      StandardTypeName NATIONAL VARCHAR(128),
      DataType SMALLINT,
      Description NATIONAL VARCHAR(255),
      ModuleNo INT,
      TimeOut FLOAT,
      Retry INT
   );

-- 查询结果条数
   SET v_RowCount = cast(v_ReturnCount as SIGNED INTEGER);
   SET SQL_SELECT_LIMIT = v_RowCount;  

-- 满足条件控制
   SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL# 					,
HouseId							,
HouseName						,
EquipmentId						,
EquipmentName					,
EquipmentCategoryId				,
EquipmentBaseTypeId				,
EquipmentVendor					,
ControlId           			,
ControlName						,
ControlCategory					,
ControlType						,
CommandType						,
MaxValue      					,
MinValue   						,
DefaultValue					,
DisplayIndex					,
SignalId						,
CmdToken						,
ControlSeverity					,
BaseTypeId						,
BaseTypeName					,
StandardTypeId						,
StandardTypeName					,				
DataType						,
Description						,
ModuleNo						,
TimeOut							,
Retry		
)
SELECT 
su.CenterId,
su.CenterName,
su.GroupId,
su.GroupName,
es.EquipmentTemplateId, 
su.StationId,
su.StationName,
hs.HouseId,
hs.HouseName,
e.EquipmentId,
e.EquipmentName,
e.EquipmentCategory AS EquipmentCategoryId, 
ete.EquipmentBaseType AS EquipmentBaseTypeId,
ete.Vendor AS EquipmentVendor,
es.ControlId,
es.ControlName, 
es.ControlCategory,
es.ControlType, 
es.CommandType, 
es.MaxValue, 
es.MinValue,
es.DefaultValue, 
es.DisplayIndex, 
es.SignalId, 
es.CmdToken, 
es.ControlSeverity, 
es.BaseTypeId, 
sb.BaseTypeName,
floor(sdc.StandardDicId / 1000) * 1000 + (es.BaseTypeId - floor(es.BaseTypeId / 1000)*1000),
replace(sdc.ControlStandardName,''XX'',convert(NVARCHAR(10), es.BaseTypeId - floor(es.BaseTypeId / 1000)*1000)),				
es.DataType,
es.Description,
es.ModuleNo,
es.TimeOut,
es.Retry		
FROM #TempEquipment e
INNER JOIN #TempStation su ON e.StationId = su.StationId
INNER JOIN TBL_Equipment ett ON e.StationId = ett.StationId AND e.EquipmentId = ett.EquipmentId
INNER JOIN TBL_EquipmentTemplate ete ON ett.EquipmentTemplateId = ete.EquipmentTemplateId
INNER JOIN TBL_House hs ON e.StationId = hs.StationId AND ett.HouseId = hs.HouseId
INNER JOIN TBL_Control es ON e.EquipmentTemplateId = es.EquipmentTemplateId AND es.Enable = 1  AND es.Visible=1 ',v_BaseTypeJoinString,v_StandardTypeEntryJoinString,' WHERE 1=1 ',
   v_WhereModule,v_WhereControlId1,v_WhereControlId2,v_WhereControlId3,
   v_WhereControlCategory,v_WhereControlName,v_WhereBaseTypeId1,
   v_WhereBaseTypeId2,v_WhereBaseTypeId3,v_WhereBaseTypeName,v_WhereBaseTypeEntryId,
   v_WhereStandardTypeEntryId);
   SET @SWV_Stmt = SWV_ExecDyn;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;

   SELECT
   st.CenterId,
st.CenterName,
st.GroupId,
st.GroupName,
st.EquipmentTemplateId,
st.StationId,
st.StationName,
st.HouseId,
st.HouseName,
st.EquipmentId,
st.EquipmentName,
st.EquipmentCategoryId,
st.EquipmentBaseTypeId,
st.EquipmentVendor,
st.ControlId,
st.ControlName,
st.ControlCategory,
st.ControlType,
st.CommandType,
st.MaxValue,
st.MinValue,
st.DefaultValue,
st.DisplayIndex,
st.SignalId,
st.CmdToken,
st.ControlSeverity,
st.BaseTypeId,
st.BaseTypeName,
CASE
   WHEN v_StandardVer = 2 THEN st.StandardTypeId
   ELSE BaseTypeId
   END AS StandardTypeId,
CASE
   WHEN v_StandardVer = 2 THEN  floor((st.StandardTypeId -floor(st.StandardTypeId/100000000)*100000000)/1000)
   ELSE floor(BaseTypeId/1000)
   END AS StandardTypeEntryId,
CASE
   WHEN v_StandardVer = 2 THEN st.StandardTypeName
   ELSE BaseTypeName
   END AS StandardTypeName,
st.DataType,
st.Description,
st.ModuleNo,
st.TimeOut,
st.Retry,
di.ItemValue AS EquipmentCategoryName,
1 AS Enable,
1 AS Visible
   FROM tt_ControlTotal st
   INNER JOIN TBL_DataItem di ON di.EntryId = 7 AND st.EquipmentCategoryId = di.ItemId
   ORDER BY StationId,EquipmentId,ControlId;

   SELECT DISTINCT
   cm.EquipmentTemplateId,
cm.ControlId,
cm.ParameterValue,
cm.Meanings,
cm.BaseCondId
   FROM TBL_ControlMeanings cm
   INNER JOIN tt_ControlTotal ct ON cm.ControlId = ct.ControlId AND cm.EquipmentTemplateId = ct.EquipmentTemplateId AND cm.ControlId = ct.ControlId;

   SET SQL_SELECT_LIMIT = DEFAULT;

   DROP TEMPORARY TABLE IF EXISTS tt_ControlTotal;
   DROP TEMPORARY TABLE IF EXISTS tt_TempEquipment;
   DROP TEMPORARY TABLE IF EXISTS tt_TempStation;

   SET SWP_Ret_Value = 0;
END;

--
-- Alter procedure "PBL_SaveEquipmentMaitain"
--
DROP PROCEDURE IF EXISTS PBL_SaveEquipmentMaitain;
CREATE PROCEDURE PBL_SaveEquipmentMaitain(v_StationId INT ,
v_EquipmentId INT ,
v_EquipmentState INT,
v_StartTime	DATETIME ,
v_EndTime	DATETIME ,
v_UserId INT ,
v_Description NATIONAL VARCHAR(255) ,
v_ExtendFiled1 NATIONAL VARCHAR(255) ,INOUT SWP_Ret_Value INT)
BEGIN

   IF NOT EXISTS(SELECT * FROM TBL_EquipmentMaintain WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId) then

  INSERT INTO TBL_EquipmentMaintain(StationId,
EquipmentId,
EquipmentState,
StartTime,
EndTime,
UserId,
Description,
ExtendFiled1)
VALUES(v_StationId,
v_EquipmentId,
v_EquipmentState,
v_StartTime,
v_EndTime,
v_UserId,
v_Description,
v_ExtendFiled1);
   ELSE
      UPDATE TBL_EquipmentMaintain2
      SET EquipmentState = v_EquipmentState,StartTime = v_StartTime,EndTime = v_EndTime,
      UserId = v_UserId,Description = v_Description,ExtendFiled1 = v_ExtendFiled1
      WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId;
   end if;

   SET SWP_Ret_Value = 0;

END;

--
-- Alter procedure "PDL_ReplicateConfig"
--
DROP PROCEDURE IF EXISTS PDL_ReplicateConfig;
CREATE PROCEDURE PDL_ReplicateConfig(INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_CenterId INT;
   DECLARE v_CenterIdStr NATIONAL VARCHAR(10);
   select   StructureId INTO v_CenterId FROM TBL_StationStructure WHERE StructureGroupId = 0 AND ParentStructureId = 0;
   SET v_CenterIdStr = CAST(v_CenterId%1000 AS CHAR(10));

-- SQLWAYS_EVAL# ion--
   INSERT TBL_ReplicateLogs(LogStr)
VALUES(CONCAT('SQLWAYS_EVAL# 1 FROM sysobjects WHERE id = object_id(''TBL_TempStation',v_CenterIdStr,'SQLWAYS_EVAL# TBL_TempStation', v_CenterIdStr));


   INSERT TBL_ReplicateLogs(LogStr)
VALUES(CONCAT('SQLWAYS_EVAL# TBL_TempStation',v_CenterIdStr, 'SQLWAYS_EVAL# WHERE 1 = 2'));


   INSERT TBL_ReplicateLogs(LogStr)
VALUES(CONCAT('SQLWAYS_EVAL# INDEX TBL_TempStation_Idx ON TBL_TempStation',v_CenterIdStr, 'SQLWAYS_EVAL# ignore_dup_key'));


   INSERT TBL_ReplicateLogs(LogStr)
   SELECT CONCAT('SQLWAYS_EVAL# L_TempStation',v_CenterIdStr,'(','StationId',',StationName',
   ',Latitude',',Longitude',',SetupTime',',CompanyId',',ConnectState',
   ',UpdateTime','SQLWAYS_EVAL# ry',',StationGrade',',StationState',
   ',ContactId',',SupportTime',',OnWayTime',',SurplusTime',',FloorNo',
   ',PropList',',Acreage',',BuildingType',',ContainNode',',Description',
   ',BordNumber',',CenterId',',Enable',',StartTime',',EndTime',',ProjectName',
   ',ContractNo',',InstallTime',') VALUES ( ',CASE WHEN StationId IS NULL THEN 'NULL' ELSE CAST(StationId AS CHAR(255)) END,',',CASE WHEN StationName IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(StationName AS CHAR(255)),'''') END,
   ',',CASE WHEN Latitude IS NULL THEN 'NULL' ELSE CAST(Latitude AS CHAR(255)) END,',',CASE WHEN Longitude IS NULL THEN 'NULL' ELSE CAST(Longitude AS CHAR(255)) END,',',CASE WHEN SetupTime IS NULL THEN 'NULL' ELSE CONCAT('''',DATE_FORMAT(SetupTime,'%Y-%m-%d %T'),'''') END,
   ',',CASE WHEN CompanyId IS NULL THEN 'NULL' ELSE CAST(CompanyId AS CHAR(255)) END,',',CASE WHEN ConnectState IS NULL THEN 'NULL' ELSE CAST(ConnectState AS CHAR(255)) END,',',CASE WHEN UpdateTime IS NULL THEN 'NULL' ELSE CONCAT('''',DATE_FORMAT(UpdateTime,'%Y-%m-%d %T'),'''') END,
   ',',CASE WHEN StationCategory IS NULL THEN 'NULL' ELSE CAST(StationCategory AS CHAR(255)) END,',',CASE WHEN StationGrade IS NULL THEN 'NULL' ELSE CAST(StationGrade AS CHAR(255)) END,',',CASE WHEN StationState IS NULL THEN 'NULL' ELSE CAST(StationState AS CHAR(255)) END,',',CASE WHEN ContactId IS NULL THEN 'NULL' ELSE CAST(ContactId AS CHAR(255)) END,',',
   CASE WHEN SupportTime IS NULL THEN 'NULL' ELSE CAST(SupportTime AS CHAR(255)) END,',',CASE WHEN OnWayTime IS NULL THEN 'NULL' ELSE CAST(OnWayTime AS CHAR(255)) END,',',CASE WHEN SurplusTime IS NULL THEN 'NULL' ELSE CAST(SurplusTime AS CHAR(255)) END,',',CASE WHEN FloorNo IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(FloorNo AS CHAR(255)),'''') END,',',CASE WHEN PropList IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(PropList AS CHAR(255)),'''') END,
   ',',CASE WHEN Acreage IS NULL THEN 'NULL' ELSE CAST(Acreage AS CHAR(255)) END,',',CASE WHEN BuildingType IS NULL THEN 'NULL' ELSE CAST(BuildingType AS CHAR(255)) END,',',CASE WHEN ContainNode IS NULL THEN 'NULL' ELSE CAST(ContainNode AS CHAR(255)) END,',',CASE WHEN Description IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(Description AS CHAR(255)),'''') END,
   ',',CASE WHEN BordNumber IS NULL THEN 'NULL' ELSE CAST(BordNumber AS CHAR(255)) END,',',CASE WHEN CenterId IS NULL THEN 'NULL' ELSE CAST(CenterId AS CHAR(255)) END,',',CASE WHEN Enable IS NULL THEN 'NULL' ELSE CAST(Enable AS CHAR(255)) END,',',CASE WHEN StartTime IS NULL THEN 'NULL' ELSE CONCAT('''',DATE_FORMAT(StartTime,'%Y-%m-%d %T'),'''') END,
   ',',CASE WHEN EndTime IS NULL THEN 'NULL' ELSE CONCAT('''',DATE_FORMAT(EndTime,'%Y-%m-%d %T'),'''') END,',',CASE WHEN ProjectName IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(ProjectName AS CHAR(255)),'''') END,
   ',',CASE WHEN ContractNo IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(ContractNo AS CHAR(255)),'''') END,',',CASE WHEN InstallTime IS NULL THEN 'NULL' ELSE CONCAT('''',DATE_FORMAT(InstallTime,'%Y-%m-%d %T'),'''') END,
   ')')
   FROM TBL_Station2; 

   INSERT TBL_ReplicateLogs(LogStr)
VALUES(CONCAT('SQLWAYS_EVAL# 1,', CAST(v_CenterId AS CHAR(20))));

-- SQLWAYS_EVAL# pment--

   INSERT TBL_ReplicateLogs(LogStr)
VALUES(CONCAT('SQLWAYS_EVAL# 1 FROM sysobjects WHERE id = object_id(''TBL_TempEquipment',v_CenterIdStr,'SQLWAYS_EVAL# TBL_TempEquipment', v_CenterIdStr));


   INSERT TBL_ReplicateLogs(LogStr)
VALUES(CONCAT('SQLWAYS_EVAL# TBL_TempEquipment',v_CenterIdStr, 'SQLWAYS_EVAL# WHERE 1 = 2'));


   INSERT TBL_ReplicateLogs(LogStr)
VALUES(CONCAT('SQLWAYS_EVAL# INDEX TBL_TempEquipment_Idx ON TBL_TempEquipment',v_CenterIdStr, 'SQLWAYS_EVAL# WITH ignore_dup_key'));


   INSERT TBL_ReplicateLogs(LogStr)
   SELECT CONCAT('SQLWAYS_EVAL# L_TempEquipment',v_CenterIdStr,'(','StationId',',EquipmentId',
   ',EquipmentName',',EquipmentNo','SQLWAYS_EVAL# le',',EquipmentStyle',
   ',AssetState',',Price',',UsedLimit',',UsedDate',',BuyDate',
   ',Vendor',',Unit','SQLWAYS_EVAL# gory',',EquipmentType',',EquipmentClass',
   ',EquipmentState','SQLWAYS_EVAL# on',',StartDelay',',EndDelay',',Property',
   ',Description','SQLWAYS_EVAL# lateId',',HouseId',',MonitorUnitId',
   ',WorkStationId',',SamplerUnitId',',DisplayIndex',',ConnectState',
   ',UpdateTime','SQLWAYS_EVAL# ntId',',RatedCapacity','SQLWAYS_EVAL# le',
   ',ProjectName',',ContractNo',',InstallTime',',EquipmentSN',',SO',') VALUES ( ',
   CASE WHEN StationId IS NULL THEN 'NULL' ELSE CAST(StationId AS CHAR(255)) END,',',CASE WHEN EquipmentId IS NULL THEN 'NULL' ELSE CAST(EquipmentId AS CHAR(255)) END,',',CASE WHEN EquipmentName IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(EquipmentName AS CHAR(255)),'''') END,
   ',',CASE WHEN EquipmentNo IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(EquipmentNo AS CHAR(255)),'''') END,',',CASE WHEN EquipmentModule IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(EquipmentModule AS CHAR(255)),'''') END,
   ',',CASE WHEN EquipmentStyle IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(EquipmentStyle AS CHAR(255)),'''') END,',',CASE WHEN AssetState IS NULL THEN 'NULL' ELSE CAST(AssetState AS CHAR(255)) END,',',CASE WHEN Price IS NULL THEN 'NULL' ELSE CAST(Price AS CHAR(255)) END,
   ',',CASE WHEN UsedLimit IS NULL THEN 'NULL' ELSE CAST(UsedLimit AS CHAR(255)) END,',',
   CASE WHEN UsedDate IS NULL THEN 'NULL' ELSE CONCAT('''',DATE_FORMAT(UsedDate,'%Y-%m-%d %T'),'''') END,',',CASE WHEN BuyDate IS NULL THEN 'NULL' ELSE CONCAT('''',DATE_FORMAT(BuyDate,'%Y-%m-%d %T'),'''') END,
   ',',CASE WHEN Vendor IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(Vendor AS CHAR(255)),'''') END,',',CASE WHEN Unit IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(Unit AS CHAR(255)),'''') END,',',CASE WHEN EquipmentCategory IS NULL THEN 'NULL' ELSE CAST(EquipmentCategory AS CHAR(255)) END,',',
   CASE WHEN EquipmentType IS NULL THEN 'NULL' ELSE CAST(EquipmentType AS CHAR(255)) END,',',CASE WHEN EquipmentClass IS NULL THEN 'NULL' ELSE CAST(EquipmentClass AS CHAR(255)) END,',',CASE WHEN EquipmentState IS NULL THEN 'NULL' ELSE CAST(EquipmentState AS CHAR(255)) END,',',CASE WHEN EventExpression IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(EventExpression AS CHAR(255)),'''') END,
   ',',CASE WHEN StartDelay IS NULL THEN 'NULL' ELSE CAST(StartDelay AS CHAR(255)) END,',',CASE WHEN EndDelay IS NULL THEN 'NULL' ELSE CAST(EndDelay AS CHAR(255)) END,',',CASE WHEN Property IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(Property AS CHAR(255)),'''') END,
   ',',CASE WHEN Description IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(Description AS CHAR(255)),'''') END,',',CASE WHEN EquipmentTemplateId IS NULL THEN 'NULL' ELSE CAST(EquipmentTemplateId AS CHAR(255)) END,',',
   CASE WHEN HouseId IS NULL THEN 'NULL' ELSE CAST(HouseId AS CHAR(255)) END,',',CASE WHEN MonitorUnitId IS NULL THEN 'NULL' ELSE CAST(MonitorUnitId AS CHAR(255)) END,',',CASE WHEN WorkStationId IS NULL THEN 'NULL' ELSE CAST(WorkStationId AS CHAR(255)) END,',',CASE WHEN SamplerUnitId IS NULL THEN 'NULL' ELSE CAST(SamplerUnitId AS CHAR(255)) END,',',CASE WHEN DisplayIndex IS NULL THEN 'NULL' ELSE CAST(DisplayIndex AS CHAR(255)) END,
   ',',CASE WHEN ConnectState IS NULL THEN 'NULL' ELSE CAST(ConnectState AS CHAR(255)) END,',',CASE WHEN UpdateTime IS NULL THEN 'NULL' ELSE CONCAT('''',DATE_FORMAT(UpdateTime,'%Y-%m-%d %T'),'''') END,',',CASE WHEN ParentEquipmentId IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(ParentEquipmentId AS CHAR(255)),'''') END,
   ',',CASE WHEN RatedCapacity IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(RatedCapacity AS CHAR(255)),'''') END,
   ',',CASE WHEN InstalledModule IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(InstalledModule AS CHAR(1024)),'''') END,',',CASE WHEN ProjectName IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(ProjectName AS CHAR(255)),'''') END,
   ',',CASE WHEN ContractNo IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(ContractNo AS CHAR(255)),'''') END,',',CASE WHEN InstallTime IS NULL THEN 'NULL' ELSE CONCAT('''',DATE_FORMAT(InstallTime,'%Y-%m-%d %T'),'''') END,
   ',',CASE WHEN EquipmentSN IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(EquipmentSN AS CHAR(255)),'''') END,',',CASE WHEN SO IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(SO AS CHAR(255)),'''') END,')')
   FROM TBL_Equipment; 

   INSERT TBL_ReplicateLogs(LogStr)
VALUES(CONCAT('SQLWAYS_EVAL# 2,', CAST(v_CenterId AS CHAR(20))));

/*SQLWAYS_EVAL# TBL_EquipmentTemplate--
INSERT TBL_ReplicateLogs(LogStr)
VALUES(	'IF EXISTS(SELECT 1 FROM sysobjects WHERE id = object_id(''TBL_TempEquipmentTemplate'')) DROP TABLE TBL_TempEquipmentTemplate')

INSERT TBL_ReplicateLogs(LogStr)
VALUES('SELECT * INTO TBL_TempEquipmentTemplate FROM TBL_EquipmentTemplate WHERE 1 = 2')

INSERT TBL_ReplicateLogs(LogStr) 
SELECT 'INSERT INTO TBL_TempEquipmentTemplate('
+'EquipmentTemplateId'
+',EquipmentTemplateName'
+',ParentTemplateId'
+',Memo'
+',ProtocolCode'
+',EquipmentCategory'
+',EquipmentType'
+',Property'
+',Description'
+',EquipmentStyle'
+',Unit'
+',Vendor'
+ ') VALUES ( '
+ CASE WHEN EquipmentTemplateId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), EquipmentTemplateId) END + ','
+ CASE WHEN EquipmentTemplateName IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), EquipmentTemplateName) + '''' END +','
+ CASE WHEN ParentTemplateId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ParentTemplateId) END + ','
+ CASE WHEN Memo IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), Memo) + '''' END +','
+ CASE WHEN ProtocolCode IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), ProtocolCode) + '''' END +','
+ CASE WHEN EquipmentCategory IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), EquipmentCategory) END + ','
+ CASE WHEN EquipmentType IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), EquipmentType) END + ','
+ CASE WHEN Property IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), Property) + '''' END +','
+ CASE WHEN Description IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), Description) + '''' END +','
+ CASE WHEN EquipmentStyle IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), EquipmentStyle) + '''' END +','
+ CASE WHEN Unit IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), Unit) + '''' END +','
+ CASE WHEN Vendor IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), Vendor) + '''' END +')'
FROM TBL_EquipmentTemplate

INSERT TBL_ReplicateLogs(LogStr)
VALUES(	'IF EXISTS(SELECT 1 FROM sysobjects WHERE id = object_id(''TBL_TempSignal'')) DROP TABLE TBL_TempSignal')

INSERT TBL_ReplicateLogs(LogStr)
VALUES('SELECT * INTO TBL_TempSignal FROM TBL_Signal WHERE 1 = 2')

INSERT TBL_ReplicateLogs(LogStr) 
SELECT 'INSERT INTO TBL_TempSignal('
+'EquipmentTemplateId'
+',SignalId'
+',Enable'
+',Visible'
+',Description'
+',SignalName'
+',SignalCategory'
+',SignalType'
+',ChannelNo'
+',ChannelType'
+',Expression'
+',DataType'
+',ShowPrecision'
+',Unit'
+',StoreInterval'
+',AbsValueThreshold'
+',PercentThreshold'
+',StaticsPeriod'
+',BaseTypeId'
+',ChargeStoreInterVal'
+',ChargeAbsValue'
+',DisplayIndex'
+',MDBSignalId'
+',ModuleNo'
+ ') VALUES ( '
+ CASE WHEN EquipmentTemplateId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), EquipmentTemplateId) END + ','
+ CASE WHEN SignalId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), SignalId) END + ','
+ CASE WHEN Enable IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), Enable) END + ','
+ CASE WHEN Visible IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), Visible) END + ','
+ CASE WHEN Description IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), Description) + '''' END +','
+ CASE WHEN SignalName IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), SignalName) + '''' END +','
+ CASE WHEN SignalCategory IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), SignalCategory) END + ','
+ CASE WHEN SignalType IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), SignalType) END + ','
+ CASE WHEN ChannelNo IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ChannelNo) END + ','
+ CASE WHEN ChannelType IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ChannelType) END + ','
+ CASE WHEN Expression IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), Expression) + '''' END +','
+ CASE WHEN DataType IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), DataType) END + ','
+ CASE WHEN ShowPrecision IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), ShowPrecision) + '''' END +','
+ CASE WHEN Unit IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), Unit) + '''' END +','
+ CASE WHEN StoreInterval IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), StoreInterval) END + ','
+ CASE WHEN AbsValueThreshold IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), AbsValueThreshold) END + ','
+ CASE WHEN PercentThreshold IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), PercentThreshold) END + ','
+ CASE WHEN StaticsPeriod IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), StaticsPeriod) END + ','
+ CASE WHEN BaseTypeId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), BaseTypeId) END + ','
+ CASE WHEN ChargeStoreInterVal IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ChargeStoreInterVal) END + ','
+ CASE WHEN ChargeAbsValue IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ChargeAbsValue) END + ','
+ CASE WHEN DisplayIndex IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), DisplayIndex) END + ','
+ CASE WHEN MDBSignalId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), MDBSignalId) END + ','
+ CASE WHEN ModuleNo IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ModuleNo) END + ')'
FROM TBL_Signal 

INSERT TBL_ReplicateLogs(LogStr)
VALUES(	'IF EXISTS(SELECT 1 FROM sysobjects WHERE id = object_id(''TBL_TempEvent'')) DROP TABLE TBL_TempEvent')

INSERT TBL_ReplicateLogs(LogStr)
VALUES('SELECT * INTO TBL_TempEvent FROM TBL_Event WHERE 1 = 2')								 

INSERT TBL_ReplicateLogs(LogStr) 
SELECT 'INSERT INTO TBL_TempEvent('
+'EquipmentTemplateId'
+',EventId'
+',EventName'
+',StartType'
+',EndType'
+',StartExpression'
+',SuppressExpression'
+',EventCategory'
+',SignalId'
+',Enable'
+',Visible'
+',Description'
+',DisplayIndex'
+',ModuleNo'
+ ') VALUES ( '
+ CASE WHEN EquipmentTemplateId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), EquipmentTemplateId) END + ','
+ CASE WHEN EventId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), EventId) END + ','
+ CASE WHEN EventName IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), EventName) + '''' END +','
+ CASE WHEN StartType IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), StartType) END + ','
+ CASE WHEN EndType IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), EndType) END + ','
+ CASE WHEN StartExpression IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), StartExpression) + '''' END +','
+ CASE WHEN SuppressExpression IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), SuppressExpression) + '''' END +','
+ CASE WHEN EventCategory IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), EventCategory) END + ','
+ CASE WHEN SignalId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), SignalId) END + ','
+ CASE WHEN Enable IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), Enable) END + ','
+ CASE WHEN Visible IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), Visible) END + ','
+ CASE WHEN Description IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), Description) + '''' END +','
+ CASE WHEN DisplayIndex IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), DisplayIndex) END +','
+ CASE WHEN ModuleNo IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ModuleNo) END + ')'
FROM TBL_Event 

INSERT TBL_ReplicateLogs(LogStr)
VALUES(	'IF EXISTS(SELECT 1 FROM sysobjects WHERE id = object_id(''TBL_TempControl'')) DROP TABLE TBL_TempControl')

INSERT TBL_ReplicateLogs(LogStr)
VALUES('SELECT * INTO TBL_TempControl FROM TBL_Control WHERE 1 = 2')										 

INSERT TBL_ReplicateLogs(LogStr) 
SELECT 'INSERT INTO TBL_TempControl('
+'EquipmentTemplateId'
+',ControlId'
+',ControlName'
+',ControlCategory'
+',CmdToken'
+',BaseTypeId'
+',ControlSeverity'
+',SignalId'
+',TimeOut'
+',Retry'
+',Description'
+',Enable'
+',Visible'
+',DisplayIndex'
+',CommandType'
+',ControlType'
+',DataType'
+',MaxValue'
+',MinValue'
+',DefaultValue'
+',ModuleNo'
+ ') VALUES ( '
+ CASE WHEN EquipmentTemplateId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), EquipmentTemplateId) END + ','
+ CASE WHEN ControlId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ControlId) END + ','
+ CASE WHEN ControlName IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), ControlName) + '''' END +','
+ CASE WHEN ControlCategory IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ControlCategory) END + ','
+ CASE WHEN CmdToken IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), CmdToken) + '''' END +','
+ CASE WHEN BaseTypeId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), BaseTypeId) END + ','
+ CASE WHEN ControlSeverity IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ControlSeverity) END + ','
+ CASE WHEN SignalId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), SignalId) END + ','
+ CASE WHEN TimeOut IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), TimeOut) END + ','
+ CASE WHEN Retry IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), Retry) END + ','
+ CASE WHEN Description IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), Description) + '''' END +','
+ CASE WHEN Enable IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), Enable) END + ','
+ CASE WHEN Visible IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), Visible) END + ','
+ CASE WHEN DisplayIndex IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), DisplayIndex) END + ','
+ CASE WHEN CommandType IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), CommandType) END + ','
+ CASE WHEN ControlType IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ControlType) END + ','
+ CASE WHEN DataType IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), DataType) END + ','
+ CASE WHEN MaxValue IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), MaxValue) END + ','
+ CASE WHEN MinValue IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), MinValue) END + ','
+ CASE WHEN DefaultValue IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), DefaultValue) END + ','
+ CASE WHEN ModuleNo IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ModuleNo) END + ')'
FROM TBL_Control 

INSERT TBL_ReplicateLogs(LogStr)
VALUES('EXEC PDL_CopySSConfig 3,' + Convert(nvarchar(20), @CenterId))						 		
********************************************不同步模版信息，先注释***********************************************/		

   SET SWP_Ret_Value = 0;
END;

DROP PROCEDURE IF EXISTS PBL_QueryConfigSignal;


CREATE PROCEDURE PBL_QueryConfigSignal(v_CenterId           NATIONAL VARCHAR(4000)    ,
v_GroupId            NATIONAL VARCHAR(4000)    ,
v_StationState       NATIONAL VARCHAR(4000)    ,
v_StationCategory    NATIONAL VARCHAR(4000)    ,
v_StationId          NATIONAL VARCHAR(4000)    ,
v_StationId2         NATIONAL VARCHAR(4000)    ,
v_StationId3         NATIONAL VARCHAR(4000)    ,
v_EquipmentCategory  NATIONAL VARCHAR(4000)    ,
v_EquipmentId        NATIONAL VARCHAR(4000)    ,
v_EquipmentId2       NATIONAL VARCHAR(4000)    ,
v_EquipmentId3       NATIONAL VARCHAR(4000)    ,
v_SignalProperty		NATIONAL VARCHAR(4000)    ,
v_SignalCategory     NATIONAL VARCHAR(4000)    ,
v_SignalId	        NATIONAL VARCHAR(4000)    ,
v_SignalId2	        NATIONAL VARCHAR(4000)    ,
v_SignalId3	        NATIONAL VARCHAR(4000)    ,
v_SignalName         NATIONAL VARCHAR(4000)    ,
v_BaseTypeId         NATIONAL VARCHAR(4000)    ,
v_BaseTypeId2	    NATIONAL VARCHAR(4000)    ,
v_BaseTypeId3	    NATIONAL VARCHAR(4000)    ,
v_BaseTypeName       NATIONAL VARCHAR(4000)    ,
v_BaseTypeEntryId		NATIONAL VARCHAR(4000)    , -- SQLWAYS_EVAL# Id不包含后面3位顺序号
v_StandardTypeEntryId		NATIONAL VARCHAR(4000)    , -- SQLWAYS_EVAL# ，StandardDicId不包含前面局站类型和后面3位顺序号
v_OnlyBaseType       NATIONAL VARCHAR(20)      , -- 非-1代表只包含基类
v_OnlyStandardType	NATIONAL VARCHAR(20)   	,
v_QueryUserId        NATIONAL VARCHAR(20)      ,
v_ReturnCount        NATIONAL VARCHAR(20)   ,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_RowCount INT;				
   DECLARE v_Index INT;             
   DECLARE v_TotalRowCount INT;				
   DECLARE v_WhereSignalId1 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereSignalId2 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereSignalId3 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereBaseTypeId1 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereBaseTypeId2 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereBaseTypeId3 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereStandardTypeId1 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereStandardTypeId2 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereStandardTypeId3 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereSignalProperty NATIONAL VARCHAR(4000);  
   DECLARE v_WhereSignalCategory NATIONAL VARCHAR(4000);  
   DECLARE v_WhereSignalName NATIONAL VARCHAR(4000);  
   DECLARE v_WhereBaseTypeName NATIONAL VARCHAR(4000);  
   DECLARE v_WhereBaseTypeEntryId NATIONAL VARCHAR(4000);  
   DECLARE v_WhereStandardTypeEntryId NATIONAL VARCHAR(4000);  
   DECLARE v_WhereModule NATIONAL VARCHAR(4000);  
   DECLARE v_BaseTypeJoinString NATIONAL VARCHAR(4000);  
   DECLARE v_StandardTypeEntryJoinString NATIONAL VARCHAR(4000);  
   DECLARE v_PropertyJoinString NATIONAL VARCHAR(4000);  
   DECLARE v_StandardVer INT;
	DECLARE SWV_ExecDyn VARCHAR(5000);
-- 处理权限后的局站
/* liangyj
   IF v_CenterId is null then
      set v_CenterId = '-1';
   END IF;
   IF v_GroupId is null then
      set v_GroupId = '-1';
   END IF;
   IF v_StationState is null then
      set v_StationState = '-1';
   END IF;
   IF v_StationCategory is null then
      set v_StationCategory = '-1';
   END IF;
   IF v_StationId is null then
      set v_StationId = '-1';
   END IF;
   IF v_StationId2 is null then
      set v_StationId2 = '-1';
   END IF;
   IF v_StationId3 is null then
      set v_StationId3 = '-1';
   END IF;
   IF v_EquipmentCategory is null then
      set v_EquipmentCategory = '-1';
   END IF;
   IF v_EquipmentId is null then
      set v_EquipmentId = '-1';
   END IF;
   IF v_EquipmentId2 is null then
      set v_EquipmentId2 = '-1';
   END IF;
   IF v_EquipmentId3 is null then
      set v_EquipmentId3 = '-1';
   END IF;
   IF v_SignalProperty is null then
      set v_SignalProperty = '-1';
   END IF;
   IF v_SignalCategory is null then
      set v_SignalCategory = '-1';
   END IF;
   IF v_SignalId is null then
      set v_SignalId = '-1';
   END IF;
   IF v_SignalId2 is null then
      set v_SignalId2 = '-1';
   END IF;
   IF v_SignalId3 is null then
      set v_SignalId3 = '-1';
   END IF;
   IF v_SignalName is null then
      set v_SignalName = '-1';
   END IF;
   IF v_BaseTypeId is null then
      set v_BaseTypeId = '-1';
   END IF;
   IF v_BaseTypeId2 is null then
      set v_BaseTypeId2 = '-1';
   END IF;
   IF v_BaseTypeId3 is null then
      set v_BaseTypeId3 = '-1';
   END IF;
   IF v_BaseTypeName is null then
      set v_BaseTypeName = '-1';
   END IF;
   IF v_BaseTypeEntryId is null then
      set v_BaseTypeEntryId = '-1';
   END IF;
   IF v_StandardTypeEntryId is null then
      set v_StandardTypeEntryId = '-1';
   END IF;
   IF v_OnlyBaseType is null then
      set v_OnlyBaseType = '-1';
   END IF;
   IF v_OnlyStandardType is null then
      set v_OnlyStandardType = '-1';
   END IF;
   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   CREATE TEMPORARY TABLE tt_TempStation
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      StationId INT,
      StationName VARCHAR(128),
      StationState INT,
      StationCategory INT,
      StationGrade INT,
      StationBaseType INT
   );
   CALL PAM_FilterStation(v_CenterId,v_GroupId,v_StationState,v_StationCategory,v_StationId,v_StationId2,
   v_StationId3,v_QueryUserId,'#TempStation');


   SET v_StandardVer = PAM_GetStandardVer();


   UPDATE tt_TempStation A
   INNER JOIN TBL_StationBaseMap B ON A.StationCategory = B.StationCategory AND B.StandardType = v_StandardVer SET A.StationBaseType = B.StationBaseType;


   CREATE TEMPORARY TABLE tt_TempEquipment
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      StationId INT,
      StationName VARCHAR(128),
      StationState INT,
      StationCategory INT,
      EquipmentId INT,
      EquipmentName VARCHAR(128),
      EquipmentTemplateId INT,
      EquipmentCategory INT
   );
   CALL PAM_FilterEquipmentCategory(v_EquipmentCategory,v_EquipmentId,v_EquipmentId2,v_EquipmentId3,v_QueryUserId,
   '#TempStation','#TempEquipment');



   SET v_WhereSignalId1 = '    ';
   IF IFNULL(v_SignalId,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_SignalId);
      IF v_Index = 0 then
         SET v_WhereSignalId1 = CONCAT('SQLWAYS_EVAL# = ',v_SignalId);
      ELSE
         SET v_WhereSignalId1 = CONCAT('SQLWAYS_EVAL# IN (',v_SignalId,')');
      end if;
   end if;


   SET v_WhereSignalId2 = '   ';
   IF IFNULL(v_SignalId2,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_SignalId2);
      IF v_Index = 0 then
         SET v_WhereSignalId2 = CONCAT('SQLWAYS_EVAL# = ',v_SignalId2);
      ELSE
         SET v_WhereSignalId2 = CONCAT('SQLWAYS_EVAL# IN (',v_SignalId2,')');
      end if;
   end if;


   SET v_WhereSignalId3 = '   ';
   IF IFNULL(v_SignalId3,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_SignalId3);
      IF v_Index = 0 then
         SET v_WhereSignalId3 = CONCAT('SQLWAYS_EVAL# = ',v_SignalId3);
      ELSE
         SET v_WhereSignalId3 = CONCAT('SQLWAYS_EVAL# IN (',v_SignalId3,')');
      end if;
   end if;


   SET v_WhereSignalProperty = '  ';
   IF IFNULL(v_SignalProperty,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_SignalProperty);
      IF v_Index = 0 then
         SET v_WhereSignalProperty = CONCAT('SQLWAYS_EVAL# = ',v_SignalProperty);
      ELSE
         SET v_WhereSignalProperty = CONCAT('SQLWAYS_EVAL# IN (',v_SignalProperty,')');
      end if;
      SET v_PropertyJoinString = 'SQLWAYS_EVAL# sp ON es.EquipmentTemplateId = sp.EquipmentTemplateId AND es.SignalId = sp.SignalId ';
   end if;


   SET v_WhereSignalCategory = '  ';
   IF IFNULL(v_SignalCategory,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_SignalCategory);
      IF v_Index = 0 then
         SET v_WhereSignalCategory = CONCAT('SQLWAYS_EVAL# = ',v_SignalCategory);
      ELSE
         SET v_WhereSignalCategory = CONCAT('SQLWAYS_EVAL# IN (',v_SignalCategory,')');
      end if;
   end if;


   SET v_WhereSignalName = '  ';
   IF IFNULL(v_SignalName,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_SignalName);
      IF v_Index = 0 then

         SET v_WhereSignalName = CONCAT('SQLWAYS_EVAL# LIKE ''%',v_SignalName,'%''');
      ELSE
         SET v_WhereSignalName = ' AND (( ';
         WHILE(v_Index != 0) DO
            SET v_WhereSignalName = CONCAT(v_WhereSignalName,'SQLWAYS_EVAL# like ''','%',SUBSTRING(v_SignalName,1,v_Index -1),
            '%''');
            SET v_SignalName = rtrim(ltrim(INSERT(v_SignalName,1,v_Index,' ')));
            SET v_Index = LOCATE(',',v_SignalName);
            IF(v_Index != 0) then

               SET v_WhereSignalName = CONCAT(v_WhereSignalName,' ) OR ( ');
            ELSE
               SET v_WhereSignalName = CONCAT(v_WhereSignalName,' )) ');
            end if;
         END WHILE;
      end if;
   end if;	

   IF v_StandardVer <> 2 then


      IF v_OnlyBaseType = '-1' AND v_OnlyStandardType <> '-1' then
         SET v_OnlyBaseType = v_OnlyStandardType;
      end if;
      IF v_BaseTypeEntryId = '-1' AND v_StandardTypeEntryId <> '-1' then
         SET v_BaseTypeEntryId = v_StandardTypeEntryId;
      end if;
   end if;



   IF v_OnlyBaseType = '-1' then

      SET v_BaseTypeJoinString = 'SQLWAYS_EVAL# sb ON sb.BaseTypeId = es.BaseTypeId  ';
      SET v_StandardTypeEntryJoinString = CONCAT('SQLWAYS_EVAL# sbm ON sbm.StationBaseType = su.StationBaseType AND sbm.BaseTypeId = floor(es.BaseTypeId / 1000) * 1000 + 1
LEFT JOIN TBL_StandardDicSig sds ON sds.StandardDicId = sbm.StandardDicId AND sds.StandardType = ',CAST(v_StandardVer AS CHAR(10)));
   ELSE
      IF v_StandardVer = 2 then 


         SET v_BaseTypeJoinString = 'SQLWAYS_EVAL# sb ON sb.BaseTypeId = es.BaseTypeId  ';
         SET v_StandardTypeEntryJoinString = CONCAT('SQLWAYS_EVAL# sbm ON sbm.StationBaseType = su.StationBaseType AND sbm.BaseTypeId = floor(es.BaseTypeId / 1000) * 1000 + 1
INNER JOIN TBL_StandardDicSig sds ON sds.StandardDicId = sbm.StandardDicId AND sds.StandardType = ',CAST(v_StandardVer AS CHAR(10)));
      ELSE
         SET v_BaseTypeJoinString = 'SQLWAYS_EVAL# sb ON sb.BaseTypeId = es.BaseTypeId  ';
         SET v_StandardTypeEntryJoinString = CONCAT('SQLWAYS_EVAL# sbm ON sbm.StationBaseType = su.StationBaseType AND sbm.BaseTypeId = floor(es.BaseTypeId / 1000) * 1000 + 1
LEFT JOIN TBL_StandardDicSig sds ON sds.StandardDicId = sbm.StandardDicId AND sds.StandardType = ',CAST(v_StandardVer AS CHAR(10)));
      end if;
   end if;



   SET v_WhereBaseTypeId1 = ' ';
   IF IFNULL(v_BaseTypeId,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_BaseTypeId);
      IF v_Index = 0 then
         SET v_WhereBaseTypeId1 = CONCAT('SQLWAYS_EVAL# = ',v_BaseTypeId);
      ELSE
         SET v_WhereBaseTypeId1 = CONCAT('SQLWAYS_EVAL# IN (',v_BaseTypeId,')');
      end if;
      SET v_BaseTypeJoinString = 'SQLWAYS_EVAL# sb ON sb.BaseTypeId = es.BaseTypeId  ';
   end if;


   SET v_WhereBaseTypeId2 = ' ';
   IF IFNULL(v_BaseTypeId2,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_BaseTypeId2);
      IF v_Index = 0 then
         SET v_WhereBaseTypeId2 = CONCAT('SQLWAYS_EVAL# = ',v_BaseTypeId2);
      ELSE
         SET v_WhereBaseTypeId2 = CONCAT('SQLWAYS_EVAL# IN (',v_BaseTypeId2,')');
      end if;
   end if;


   SET v_WhereBaseTypeId3 = ' ';
   IF IFNULL(v_BaseTypeId3,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_BaseTypeId3);
      IF v_Index = 0 then
         SET v_WhereBaseTypeId3 = CONCAT('SQLWAYS_EVAL# = ',v_BaseTypeId3);
      ELSE
         SET v_WhereBaseTypeId3 = CONCAT('SQLWAYS_EVAL# IN (',v_BaseTypeId3,')');
      end if;
   end if;
   IF v_WhereBaseTypeId1 <> ' ' then
      SET v_WhereBaseTypeId3 = CONCAT(v_WhereBaseTypeId3,')');
   end if;
	
   SET v_WhereBaseTypeName = '  ';
   IF IFNULL(v_BaseTypeName,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_BaseTypeName);
      IF v_Index = 0 then

         SET v_WhereBaseTypeName = CONCAT('SQLWAYS_EVAL# LIKE ''%',v_BaseTypeName,'%''');
      ELSE
         SET v_WhereBaseTypeName = ' AND (( ';
         WHILE(v_Index != 0) DO
            SET v_WhereBaseTypeName = CONCAT(v_WhereBaseTypeName,'SQLWAYS_EVAL# like ','%',SUBSTRING(v_BaseTypeName,1,v_Index -1),
            '%');
            SET v_BaseTypeName = rtrim(ltrim(INSERT(v_BaseTypeName,1,v_Index,' ')));
            SET v_Index = LOCATE(',',v_BaseTypeName);
            IF(v_Index != 0) then

               SET v_WhereBaseTypeName = CONCAT(v_WhereBaseTypeName,' ) OR ( ');
            ELSE
               SET v_WhereBaseTypeName = CONCAT(v_WhereBaseTypeName,' )) ');
            end if;
         END WHILE;
      end if;
      SET v_BaseTypeJoinString = 'SQLWAYS_EVAL# sb ON sb.BaseTypeId = es.BaseTypeId  ';
   end if;		

   SET v_WhereBaseTypeEntryId = ' ';
   IF IFNULL(v_BaseTypeEntryId,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_BaseTypeEntryId);
      IF v_Index = 0 then

         SET v_WhereBaseTypeEntryId = CONCAT('SQLWAYS_EVAL#  > ',CAST(cast(v_BaseTypeEntryId as SIGNED INTEGER)*1000 AS CHAR(10)),
         'SQLWAYS_EVAL# < ',CAST(cast(v_BaseTypeEntryId as SIGNED INTEGER)*1000+1000 AS CHAR(10)));
      ELSE
         SET v_WhereBaseTypeEntryId = CONCAT('SQLWAYS_EVAL# / 1000) IN (',v_BaseTypeEntryId,')');
      end if;
      SET v_BaseTypeJoinString = 'SQLWAYS_EVAL# sb ON sb.BaseTypeId = es.BaseTypeId  ';
   end if;


   IF v_StandardVer = 2 then

      SET v_WhereStandardTypeEntryId = ' ';
      IF IFNULL(v_StandardTypeEntryId,'-1') <> '-1' then

         SET v_Index = LOCATE(',',v_StandardTypeEntryId);
         IF v_Index = 0 then
            SET v_WhereStandardTypeEntryId = CONCAT('SQLWAYS_EVAL# %100000000)/1000) = ',v_StandardTypeEntryId);
         ELSE
            SET v_WhereStandardTypeEntryId = CONCAT('SQLWAYS_EVAL# %100000000)/1000) IN (',v_StandardTypeEntryId,')');
         end if;
         SET v_StandardTypeEntryJoinString = CONCAT('SQLWAYS_EVAL# sbm ON sbm.StationBaseType = su.StationBaseType AND sbm.BaseTypeId = floor(es.BaseTypeId / 1000) * 1000 + 1
INNER JOIN TBL_StandardDicSig sds ON sds.StandardDicId = sbm.StandardDicId AND sds.StandardType = ',CAST(v_StandardVer AS CHAR(10)));
      end if;
   end if;

   SET v_WhereModule = 'SQLWAYS_EVAL# = 0
OR ett.InstalledModule = ''0'' 
OR ett.InstalledModule = ''''  
OR CHARINDEX('','' + rtrim(ltrim(CONVERT(NVARCHAR, es.ModuleNo))) + '','', '','' + rtrim(ltrim(ett.InstalledModule)) + '','') > 0 
)  ';				

   CREATE TEMPORARY TABLE tt_SignalTotal
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      EquipmentTemplateId INT,
      StationId INT,
      StationName VARCHAR(128),
      HouseId INT,
      HouseName VARCHAR(128),
      EquipmentId INT,
      EquipmentName VARCHAR(128),
      EquipmentCategory INT,
      EquipmentBaseTypeId INT,
      EquipmentVendor VARCHAR(255),
      SignalId INT,
      SignalName VARCHAR(128),
      Unit VARCHAR(128),
      ShowPrecision VARCHAR(128),
      SignalCategory INT,
      SignalType INT,
      StoreInterval FLOAT,
      AbsValueThreshold FLOAT,
      PercentThreshold FLOAT,
      StaticsPeriod INT,
      ChargeStoreInterVal FLOAT,
      ChargeAbsValue FLOAT,
      ChannelNo INT,
      ChannelType INT,
      Expression NATIONAL VARCHAR(1024),
      DataType INT,
      FloatValue FLOAT,
      StringValue NATIONAL VARCHAR(128),
      DateTimeValue DATETIME,
      SampleTime DATETIME,
      Meanings NATIONAL VARCHAR(255),
      BaseTypeId NUMERIC(10,0),
      BaseTypeName NATIONAL VARCHAR(128),
      StandardTypeId NUMERIC(10,0),
      StandardTypeName NATIONAL VARCHAR(128),
      EventSeverityId INT,
      EventSeverity NATIONAL VARCHAR(128),
      EventSeverityImage NATIONAL VARCHAR(128),
      SignalImage NATIONAL VARCHAR(128),
      Flag INT,
      EquipmentFlag INT,
      DisplayIndex INT,
      MDBSignalId INT,
      ModuleNo INT,
      Description NATIONAL VARCHAR(255)
   );


   SET v_RowCount = cast(v_ReturnCount as SIGNED INTEGER);
   SET SQL_SELECT_LIMIT = v_RowCount;  

   SET SWV_ExecDyn = 'INSERT INTO tt_SignalTotal(CenterId					,
CenterName					,
GroupId						,
GroupName					,
EquipmentTemplateId			,
StationId					,
StationName 				,
HouseId						,
HouseName					,
EquipmentId					,
EquipmentName				,
EquipmentCategory			,
EquipmentBaseTypeId			,
EquipmentVendor				,
SignalId					,
SignalName					,
Unit						,
ShowPrecision				,
SignalCategory				,
SignalType					,
StoreInterval				,
AbsValueThreshold			,
PercentThreshold			,
StaticsPeriod				,
ChargeStoreInterVal			,
ChargeAbsValue				,
ChannelNo					,
ChannelType					,
Expression					,
DataType					,
FloatValue					,
StringValue					,
DateTimeValue				,
SampleTime					,
Meanings					,
BaseTypeId					,
BaseTypeName				,
StandardTypeId,
StandardTypeName,
EventSeverityId				,
EventSeverity				,
EventSeverityImage			,
SignalImage					,
Flag						,
EquipmentFlag				,
DisplayIndex				,
MDBSignalId					,
ModuleNo					,
Description)
   SELECT
   su.CenterId,
su.CenterName,
su.GroupId,
su.GroupName,
es.EquipmentTemplateId,

   su.StationId,
su.StationName,
hs.HouseId,
hs.HouseName,
e.EquipmentId,
e.EquipmentName,

   ett.EquipmentCategory,
ete.EquipmentBaseType AS EquipmentBaseTypeId,

   ete.Vendor AS EquipmentVendor,
es.SignalId,
es.SignalName,
es.Unit,

   es.ShowPrecision,
es.SignalCategory,
es.SignalType,
es.StoreInterval,

   es.AbsValueThreshold,
es.PercentThreshold,
es.StaticsPeriod,
es.ChargeStoreInterVal,

   es.ChargeAbsValue,
es.ChannelNo,
es.ChannelType,
es.Expression,

   es.DataType,
ac.FloatValue,
ac.StringValue,
ac.DateTimeValue,
ac.SampleTime,

   ac.Meanings,
es.BaseTypeId,
sb.BaseTypeName,
floor(sds.StandardDicId/1000)*1000+(es.BaseTypeId -floor(es.BaseTypeId/1000)*1000),
replace(sds.SignalStandardName,''XX'',CAST(es.BaseTypeId -floor(es.BaseTypeId/1000)*1000 AS CHAR(10))),

   ac.EventSeverity AS EventSeverityId,
ac.EventSeverityName AS EventSeverity,

   (CASE WHEN ac.EventSeverity = 0 THEN 'SQLWAYS_EVAL# 0.png''
   WHEN ac.EventSeverity = 1 THEN 'SQLWAYS_EVAL# 1.png''
   WHEN ac.EventSeverity = 2 THEN 'SQLWAYS_EVAL# 2.png''
   WHEN ac.EventSeverity = 3 THEN 'SQLWAYS_EVAL# 3.png''
   ELSE 'SQLWAYS_EVAL# OK.png'' END) AS EventSeverityImage,

   (CASE WHEN es.SignalCategory = 2 THEN ''onoff.png''
   WHEN es.SignalCategory = 3 THEN 'SQLWAYS_EVAL# g''
   ELSE 'SQLWAYS_EVAL# .png'' END) AS SignalImage,
ac.Flag,
ett.ConnectState AS EquipmentFlag,

   es.DisplayIndex,
es.MDBSignalId,
es.ModuleNo,
es.Description
   FROM tt_TempEquipment e
   INNER JOIN tt_TempStation su ON e.StationId = su.StationId
   INNER JOIN TBL_Equipment ett ON e.StationId = ett.StationId AND e.EquipmentId = ett.EquipmentId
   INNER JOIN TBL_EquipmentTemplate ete ON ett.EquipmentTemplateId = ete.EquipmentTemplateId
   INNER JOIN TBL_House hs ON e.StationId = hs.StationId AND ett.HouseId = hs.HouseId
   INNER JOIN TBL_Signal es ON e.EquipmentTemplateId = es.EquipmentTemplateId AND es.Enable = 1  AND es.Visible = 1';
   SET @SWV_Stmt = SWV_ExecDyn;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;


   UPDATE tt_SignalTotal, TSL_MonitorUnitSignal b SET tt_SignalTotal.Expression = b.Expression
   WHERE tt_SignalTotal.StationId = b.StationId
   AND tt_SignalTotal.EquipmentId = b.EquipmentId
   AND tt_SignalTotal.SignalId = b.SignalId
   AND b.InstanceType IN(2,3);

   IF EXISTS(SELECT 'X'  FROM TSL_MonitorUnitSignal b, tt_SignalTotal WHERE  tt_SignalTotal.StationId = b.StationId
   AND tt_SignalTotal.EquipmentId = b.EquipmentId
   AND tt_SignalTotal.SignalId = b.SignalId
   AND b.InstanceType = 1
   AND b.Expression IS NOT NULL) then

      UPDATE tt_SignalTotal, TSL_MonitorUnitSignal b SET tt_SignalTotal.Expression = b.Expression
      WHERE tt_SignalTotal.StationId = b.StationId
      AND tt_SignalTotal.EquipmentId = b.EquipmentId
      AND tt_SignalTotal.SignalId = b.SignalId
      AND b.InstanceType = 1;
   end if; 




   SELECT
   st.CenterId,
st.CenterName,
st.GroupId,
st.GroupName,
st.EquipmentTemplateId,
st.StationId,
st.StationName,
st.HouseId,
st.HouseName,
st.EquipmentId,
st.EquipmentName,
st.EquipmentCategory,
st.EquipmentBaseTypeId,
st.EquipmentVendor,
st.SignalId,
st.SignalName,
st.Unit,
st.ShowPrecision,
st.SignalCategory,
st.SignalType,
st.StoreInterval,
st.AbsValueThreshold,
st.PercentThreshold,
st.StaticsPeriod,
st.ChargeStoreInterVal,
st.ChargeAbsValue,
st.ChannelNo,
st.ChannelType,
st.Expression,
st.DataType,
st.FloatValue,
st.StringValue,
st.DateTimeValue,
st.SampleTime,
st.Meanings,
st.BaseTypeId,
st.BaseTypeName,
CASE
   WHEN v_StandardVer = 2 THEN st.StandardTypeId
   ELSE BaseTypeId
   END AS StandardTypeId,
CASE
   WHEN v_StandardVer = 2 THEN  floor((st.StandardTypeId -floor(st.StandardTypeId/100000000)*100000000)/1000)
   ELSE floor(BaseTypeId/1000)
   END AS StandardTypeEntryId,
CASE
   WHEN v_StandardVer = 2 THEN st.StandardTypeName
   ELSE BaseTypeName
   END AS StandardTypeName,
st.EventSeverityId,
st.EventSeverity,
st.EventSeverityImage,
st.SignalImage,
st.Flag,
st.EquipmentFlag,
st.DisplayIndex,
st.MDBSignalId,
st.ModuleNo,
st.Description,
di.ItemValue AS EquipmentCategoryName,
1 AS Enable,
1 AS Visible
   FROM tt_SignalTotal st
   INNER JOIN TBL_DataItem di ON di.EntryId = 7 AND st.EquipmentCategory = di.ItemId
   ORDER BY st.StationId,st.EquipmentId,st.SignalId;

   SELECT DISTINCT st.EquipmentTemplateId,sp.SignalId,sp.SignalPropertyId
   FROM TBL_SignalProperty sp
   INNER JOIN tt_SignalTotal st ON sp.EquipmentTemplateId = st.EquipmentTemplateId AND sp.SignalId = st.SignalId;

   SELECT DISTINCT
   sm.EquipmentTemplateId,
sm.SignalId, sm.StateValue,
sm.Meanings,
sm.BaseCondId
   FROM TBL_SignalMeanings sm
   INNER JOIN tt_SignalTotal st ON sm.EquipmentTemplateId = st.EquipmentTemplateId AND sm.SignalId = st.SignalId;

   SET SQL_SELECT_LIMIT = DEFAULT;

   DROP TEMPORARY TABLE IF EXISTS tt_SignalTotal;
   DROP TEMPORARY TABLE IF EXISTS tt_TempEquipment;
   DROP TEMPORARY TABLE IF EXISTS tt_TempStation;
*/
   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_QuerySwapCardDoor]...';


DROP PROCEDURE IF EXISTS PBL_QuerySwapCardDoor;

CREATE PROCEDURE PBL_QuerySwapCardDoor(v_CenterId           NATIONAL VARCHAR(4000)    ,
v_GroupId            NATIONAL VARCHAR(4000)    ,
v_StationState       NATIONAL VARCHAR(4000)    ,
v_StationCategory    NATIONAL VARCHAR(4000)    ,
v_StationId          NATIONAL VARCHAR(4000)    ,
v_StationId2         NATIONAL VARCHAR(4000)    ,
v_StationId3         NATIONAL VARCHAR(4000)    ,
v_EquipmentId        NATIONAL VARCHAR(4000)    ,
v_EquipmentId2       NATIONAL VARCHAR(4000)    ,
v_EquipmentId3       NATIONAL VARCHAR(4000)    ,
v_DoorCategory		NATIONAL VARCHAR(4000)    ,
v_DoorId				NATIONAL VARCHAR(4000)    ,
v_RecordTimeUp		NATIONAL VARCHAR(4000)    ,
v_RecordTimeDown		NATIONAL VARCHAR(4000)    ,
v_QueryUserId        NATIONAL VARCHAR(20)      ,
v_ReturnCount        NATIONAL VARCHAR(20)   ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_RowCount INT;				
   DECLARE v_Index INT;             
   DECLARE v_TotalRowCount INT;				
   DECLARE v_UserId INT;				
   DECLARE v_ViewDoor INT;				
   DECLARE v_Return INT;				
   DECLARE v_WhereDoorCategory NATIONAL VARCHAR(4000);  
   DECLARE v_WhereDoorId NATIONAL VARCHAR(4000);  
   DECLARE v_WhereRecordTimeUp NATIONAL VARCHAR(4000);  
   DECLARE v_WhereRecordTimeDown NATIONAL VARCHAR(4000);  
   DECLARE v_SQL NATIONAL VARCHAR(4000);   
	DECLARE SWV_ExecDyn VARCHAR(5000);
-- 是否有浏览门禁管理
   IF v_CenterId is null then
      set v_CenterId = '-1';
   END IF;
   IF v_GroupId is null then
      set v_GroupId = '-1';
   END IF;
   IF v_StationState is null then
      set v_StationState = '-1';
   END IF;
   IF v_StationCategory is null then
      set v_StationCategory = '-1';
   END IF;
   IF v_StationId is null then
      set v_StationId = '-1';
   END IF;
   IF v_StationId2 is null then
      set v_StationId2 = '-1';
   END IF;
   IF v_StationId3 is null then
      set v_StationId3 = '-1';
   END IF;
   IF v_EquipmentId is null then
      set v_EquipmentId = '-1';
   END IF;
   IF v_EquipmentId2 is null then
      set v_EquipmentId2 = '-1';
   END IF;
   IF v_EquipmentId3 is null then
      set v_EquipmentId3 = '-1';
   END IF;
   IF v_DoorCategory is null then
      set v_DoorCategory = '-1';
   END IF;
   IF v_DoorId is null then
      set v_DoorId = '-1';
   END IF;
   IF v_RecordTimeUp is null then
      set v_RecordTimeUp = '-1';
   END IF;
   IF v_RecordTimeDown is null then
      set v_RecordTimeDown = '-1';
   END IF;
   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SET v_UserId = cast(v_QueryUserId as SIGNED INTEGER);
   SET v_ViewDoor = 27;
   SET v_Return = PAM_OperationPrivilege(v_ViewDoor,v_UserId);
   IF v_Return <> 1 then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;


-- 处理权限后的局站
   CREATE TEMPORARY TABLE tt_TempStation
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      StationId INT,
      StationName VARCHAR(128),
      StationState INT,
      StationCategory INT,
      StationGrade INT
   );
   CALL PAM_FilterStation(v_CenterId,v_GroupId,'-1','-1',v_StationId,v_StationId2,v_StationId3,v_QueryUserId,
   '#TempStation');

-- 处理权限后的门禁设备(82)
   CREATE TEMPORARY TABLE tt_TempEquipment
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      StationId INT,
      StationName VARCHAR(128),
      StationState INT,
      StationCategory INT,
      EquipmentId INT,
      EquipmentName VARCHAR(128),
      EquipmentTemplateId INT,
      EquipmentCategory INT
   );
   CALL PAM_FilterEquipmentCategory('82',v_EquipmentId,v_EquipmentId2,v_EquipmentId3,v_QueryUserId,'#TempStation',
   '#TempEquipment');

-- 门类型
   SET v_WhereDoorCategory = '  ';
   IF IFNULL(v_DoorCategory,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_DoorCategory);
      IF v_Index = 0 then
         SET v_WhereDoorCategory = CONCAT('SQLWAYS_EVAL# = ',v_DoorCategory);
      ELSE
         SET v_WhereDoorCategory = CONCAT('SQLWAYS_EVAL# IN (',v_DoorCategory,')');
      end if;
   end if;

-- 门编号
   SET v_WhereDoorId = '  ';
   IF IFNULL(v_DoorId,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_DoorId);
      IF v_Index = 0 then
         SET v_WhereDoorId = CONCAT('SQLWAYS_EVAL# = ',v_DoorId);
      ELSE
         SET v_WhereDoorId = CONCAT('SQLWAYS_EVAL# IN (',v_DoorId,')');
      end if;
   end if;

-- 刷卡上限
   SET v_WhereRecordTimeUp = '  ';
   IF IFNULL(v_RecordTimeUp,'-1') <> '-1' then

      SET v_WhereRecordTimeUp = CONCAT('SQLWAYS_EVAL# >= ''',v_RecordTimeUp,'''');
   end if;

-- 刷卡下限
   SET v_WhereRecordTimeDown = '  ';
   IF IFNULL(v_RecordTimeDown,'-1') <> '-1' then

      SET v_WhereRecordTimeDown = CONCAT('SQLWAYS_EVAL# <= ''',v_RecordTimeDown,'''');
   end if;

-- 满足条件刷卡记录
   CREATE TEMPORARY TABLE tt_SwapEvent
   (
      Valid INT,
      ValidName NATIONAL VARCHAR(255),
      Enter INT,
      RecordTime DATETIME,
      CardStationId INT,
      CardStationName NATIONAL VARCHAR(255),
      CardId INT,
      CardCode NATIONAL VARCHAR(255),
      CardName NATIONAL VARCHAR(255),
      CardCategory INT,
      CardCategoryName NATIONAL VARCHAR(255),
      CardGroup INT,
      CardGroupName NATIONAL VARCHAR(255),
      CardStatus INT,
      CardStatusName NATIONAL VARCHAR(255),
      CardUserId INT,
      CardUserName NATIONAL VARCHAR(255),
      DeptmentId INT,
      DeptmentName NATIONAL VARCHAR(255),
      EmployeeName NATIONAL VARCHAR(255),
      EmployeePhone NATIONAL VARCHAR(255),
      EmployeeMobile NATIONAL VARCHAR(255),
      EmployeeEmail NATIONAL VARCHAR(255),
      EmployeeJobNumber NATIONAL VARCHAR(255),
      StartTime DATETIME,
      EndTime DATETIME,
      RegisterTime DATETIME,
      UnRegisterTime DATETIME,
      LostTime DATETIME,
      Description NATIONAL VARCHAR(255),
      DoorId INT,
      DoorNo INT,
      DoorName NATIONAL VARCHAR(255),
      DoorCategory INT,
      DoorCategoryName NATIONAL VARCHAR(255),
      DoorPassword NATIONAL VARCHAR(255),
      DoorCenterId INT,
      DoorCenterName NATIONAL VARCHAR(255),
      DoorGroupId INT,
      DoorGroupName NATIONAL VARCHAR(255),
      DoorStationId INT,
      DoorStationName NATIONAL VARCHAR(255),
      DoorStationStateId INT,
      DoorStationCategoryId INT,
      DoorStationGradeId INT,
      DoorEquipmentId INT,
      DoorEquipmentName NATIONAL VARCHAR(255)
   );


-- 查询结果条数
   SET v_RowCount = cast(v_ReturnCount as SIGNED INTEGER);
   SET SQL_SELECT_LIMIT = v_RowCount;  

-- 满足条件信号
   SET SWV_ExecDyn = 'INSERT INTO tt_SwapEvent(Valid					,
ValidName				,
Enter					,
RecordTime				,
CardStationId			,
CardStationName			,
CardId					,
CardCode				,
CardName				,
CardCategory			,
CardCategoryName		,
CardGroup				,
CardGroupName			,
CardStatus				,
CardStatusName			,
CardUserId				,
CardUserName			,
DeptmentId				,
DeptmentName			,
EmployeeName			,
EmployeePhone			,
EmployeeMobile			,
EmployeeEmail			,
EmployeeJobNumber		,
StartTime				,
EndTime					,
RegisterTime			,
UnRegisterTime			,
LostTime				,
Description				,
DoorId					,
DoorNo					,
DoorName				,
DoorCategory			,
DoorCategoryName		,
DoorPassword			,
DoorCenterId			,
DoorCenterName			,
DoorGroupId				,
DoorGroupName			,
DoorStationId			,
DoorStationName			,
DoorStationStateId		,
DoorStationCategoryId	,
DoorStationGradeId		,
DoorEquipmentId			,
DoorEquipmentName)
   SELECT
   sr.Valid					,
sr.ValidName				,
sr.Enter					,
sr.RecordTime				,
sr.CardStationId			,
sr.CardStationName			,

   sr.CardId					,
sr.CardCode					,
sr.CardName					,
sr.CardCategory				,
sr.CardCategoryName			,

   sr.CardGroup				,
sr.CardGroupName			,
sr.CardStatus				,
sr.CardStatusName			,

   sr.CardUserId				,
sr.CardUserName				,
dt.DepartmentId				,
dt.DepartmentName			,
ee.EmployeeName				,

   ee.Phone AS EmployeePhone	,
ee.Mobile AS EmployeeMobile ,
ee.Email AS EmployeeEmail	,

   ee.JobNumber AS EmployeeJobNumber,
cd.StartTime				,

   cd.EndTime					,
cd.RegisterTime				,
cd.UnRegisterTime			,
cd.LostTime					,
cd.Description				,

   sr.DoorId					,
sr.DoorNo					,
sr.DoorName					,
sr.DoorCategory				,
sr.DoorCategoryName			,

   dr.Password AS DoorPassword	,
st.CenterId AS DoorCenterId	,
st.CenterName AS DoorCenterName,

   st.GroupId AS DoorGroupId,
st.GroupName AS DoorGroupName,

   st.StationId AS DoorStationId,
st.StationName AS DoorStationName,
st.StationState AS DoorStationStateId,

   st.StationCategory AS DoorStationCategoryId,

   st.StationGrade AS DoorStationGradeId,
et.EquipmentId AS DoorEquipmentId,

   et.EquipmentName AS DoorEquipmentName
   FROM TBL_SwapCardRecord sr
   INNER JOIN TBL_Card cd ON sr.CardId = cd.CardId
   INNER JOIN TBL_Door dr ON sr.DoorNo = dr.DoorNo AND dr.StationId = sr.StationId AND dr.EquipmentId = sr.EquipmentId
   INNER JOIN tt_TempStation st ON sr.StationId = st.StationId
   INNER JOIN tt_TempEquipment et ON sr.EquipmentId = et.EquipmentId AND sr.StationId = et.StationId
   LEFT JOIN TBL_Employee ee ON cd.UserId = ee.EmployeeId
   LEFT JOIN TBL_Department dt ON ee.DepartmentId = dt.DepartmentId   WHERE 1 = 1';
   SET @SWV_Stmt = SWV_ExecDyn;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;

   SELECT  sr.* FROM tt_SwapEvent sr
   INNER JOIN TBL_Door dr ON sr.DoorNo = dr.DoorNo AND dr.StationId = sr.DoorStationId AND dr.EquipmentId = sr.DoorEquipmentId
   GROUP BY dr.DoorId
   HAVING sr.RecordTime = MAX(sr.RecordTime);

   SET SQL_SELECT_LIMIT = DEFAULT;

   DROP TEMPORARY TABLE IF EXISTS tt_SwapEvent;
   DROP TEMPORARY TABLE IF EXISTS tt_TempEquipment;
   DROP TEMPORARY TABLE IF EXISTS tt_TempStation;
END;

-- SELECT N'SQLWAYS_EVAL# L_QuerySwapCardEvent]...';





DROP PROCEDURE IF EXISTS PBL_QuerySwapCardEvent;

CREATE PROCEDURE PBL_QuerySwapCardEvent(v_CenterId           NATIONAL VARCHAR(4000)    ,
v_GroupId            NATIONAL VARCHAR(4000)    ,
v_StationState       NATIONAL VARCHAR(4000)    ,
v_StationCategory    NATIONAL VARCHAR(4000)    ,
v_StationId          NATIONAL VARCHAR(4000)    ,
v_StationId2         NATIONAL VARCHAR(4000)    ,
v_StationId3         NATIONAL VARCHAR(4000)    ,
v_EquipmentId        NATIONAL VARCHAR(4000)    ,
v_EquipmentId2       NATIONAL VARCHAR(4000)    ,
v_EquipmentId3       NATIONAL VARCHAR(4000)    ,
v_DoorCategory		NATIONAL VARCHAR(4000)    ,
v_CardCategory		NATIONAL VARCHAR(4000)    ,
v_CardFlag			NATIONAL VARCHAR(4000)    ,
v_RecordTimeUp		NATIONAL VARCHAR(4000)    ,
v_RecordTimeDown		NATIONAL VARCHAR(4000)    ,
v_QueryUserId        NATIONAL VARCHAR(20)      ,
v_ReturnCount        NATIONAL VARCHAR(20)   ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_RowCount INT;				
   DECLARE v_Index INT;             
   DECLARE v_TotalRowCount INT;				
   DECLARE v_UserId INT;				
   DECLARE v_ViewDoor INT;				
   DECLARE v_Return INT;				
   DECLARE v_WhereDoorCategory NATIONAL VARCHAR(4000);  
   DECLARE v_WhereCardCategory NATIONAL VARCHAR(4000);  
   DECLARE v_WhereCardFlag NATIONAL VARCHAR(4000);  
   DECLARE v_WhereRecordTimeUp NATIONAL VARCHAR(4000);  
   DECLARE v_WhereRecordTimeDown NATIONAL VARCHAR(4000);  
   DECLARE v_SQL NATIONAL VARCHAR(4000);   
	DECLARE SWV_ExecDyn VARCHAR(5000);
-- 是否有浏览门禁管理
   IF v_CenterId is null then
      set v_CenterId = '-1';
   END IF;
   IF v_GroupId is null then
      set v_GroupId = '-1';
   END IF;
   IF v_StationState is null then
      set v_StationState = '-1';
   END IF;
   IF v_StationCategory is null then
      set v_StationCategory = '-1';
   END IF;
   IF v_StationId is null then
      set v_StationId = '-1';
   END IF;
   IF v_StationId2 is null then
      set v_StationId2 = '-1';
   END IF;
   IF v_StationId3 is null then
      set v_StationId3 = '-1';
   END IF;
   IF v_EquipmentId is null then
      set v_EquipmentId = '-1';
   END IF;
   IF v_EquipmentId2 is null then
      set v_EquipmentId2 = '-1';
   END IF;
   IF v_EquipmentId3 is null then
      set v_EquipmentId3 = '-1';
   END IF;
   IF v_DoorCategory is null then
      set v_DoorCategory = '-1';
   END IF;
   IF v_CardCategory is null then
      set v_CardCategory = '-1';
   END IF;
   IF v_CardFlag is null then
      set v_CardFlag = '-1';
   END IF;
   IF v_RecordTimeUp is null then
      set v_RecordTimeUp = '-1';
   END IF;
   IF v_RecordTimeDown is null then
      set v_RecordTimeDown = '-1';
   END IF;
   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SET v_UserId = cast(v_QueryUserId as SIGNED INTEGER);
   SET v_ViewDoor = 27;
   SET v_Return = PAM_OperationPrivilege(v_ViewDoor,v_UserId);
   IF v_Return <> 1 then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;

-- 处理权限后的局站
   CREATE TEMPORARY TABLE tt_TempStation
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      StationId INT,
      StationName VARCHAR(128),
      StationState INT,
      StationCategory INT,
      StationGrade INT
   );
   CALL PAM_FilterStation(v_CenterId,v_GroupId,'-1','-1',v_StationId,v_StationId2,v_StationId3,v_QueryUserId,
   '#TempStation');

-- 处理权限后的门禁设备(82)
   CREATE TEMPORARY TABLE tt_TempEquipment
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      StationId INT,
      StationName VARCHAR(128),
      StationState INT,
      StationCategory INT,
      EquipmentId INT,
      EquipmentName VARCHAR(128),
      EquipmentTemplateId INT,
      EquipmentCategory INT
   );
   CALL PAM_FilterEquipmentCategory('82',v_EquipmentId,v_EquipmentId2,v_EquipmentId3,v_QueryUserId,'#TempStation',
   '#TempEquipment');

-- 门类型
   SET v_WhereDoorCategory = '  ';
   IF IFNULL(v_DoorCategory,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_DoorCategory);
      IF v_Index = 0 then
         SET v_WhereDoorCategory = CONCAT('SQLWAYS_EVAL# = ',v_DoorCategory);
      ELSE
         SET v_WhereDoorCategory = CONCAT('SQLWAYS_EVAL# IN (',v_DoorCategory,')');
      end if;
   end if;

-- 卡类型
   SET v_WhereCardCategory = '  ';
   IF IFNULL(v_CardCategory,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_CardCategory);
      IF v_Index = 0 then
         SET v_WhereCardCategory = CONCAT('SQLWAYS_EVAL# = ',v_CardCategory);
      ELSE
         SET v_WhereCardCategory = CONCAT('SQLWAYS_EVAL# IN (',v_CardCategory,')');
      end if;
   end if;

-- 刷卡标志
   SET v_WhereCardFlag = '  ';
   IF IFNULL(v_CardFlag,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_CardFlag);
      IF v_Index = 0 then
         SET v_WhereCardFlag = CONCAT('SQLWAYS_EVAL# ',v_CardFlag);
      ELSE
         SET v_WhereCardFlag = CONCAT('SQLWAYS_EVAL# (',v_CardFlag,')');
      end if;
   end if;

-- 刷卡上限
   SET v_WhereRecordTimeUp = '  ';
   IF IFNULL(v_RecordTimeUp,'-1') <> '-1' then

      SET v_WhereRecordTimeUp = CONCAT('SQLWAYS_EVAL# >= ''',v_RecordTimeUp,'''');
   end if;

-- 刷卡下限
   SET v_WhereRecordTimeDown = '  ';
   IF IFNULL(v_RecordTimeDown,'-1') <> '-1' then

      SET v_WhereRecordTimeDown = CONCAT('SQLWAYS_EVAL# <= ''',v_RecordTimeDown,'''');
   end if;

-- 满足条件刷卡记录
   CREATE TEMPORARY TABLE tt_SwapEvent
   (
      Valid INT,
      ValidName NATIONAL VARCHAR(255),
      Enter INT,
      RecordTime DATETIME,
      CardStationId INT,
      CardStationName NATIONAL VARCHAR(255),
      CardId INT,
      CardCode NATIONAL VARCHAR(255),
      CardName NATIONAL VARCHAR(255),
      CardCategory INT,
      CardCategoryName NATIONAL VARCHAR(255),
      CardGroup INT,
      CardGroupName NATIONAL VARCHAR(255),
      CardStatus INT,
      CardStatusName NATIONAL VARCHAR(255),
      CardUserId INT,
      CardUserName NATIONAL VARCHAR(255),
      DeptmentId INT,
      DeptmentName NATIONAL VARCHAR(255),
      EmployeeName NATIONAL VARCHAR(255),
      EmployeePhone NATIONAL VARCHAR(255),
      EmployeeMobile NATIONAL VARCHAR(255),
      EmployeeEmail NATIONAL VARCHAR(255),
      EmployeeJobNumber NATIONAL VARCHAR(255),
      StartTime DATETIME,
      EndTime DATETIME,
      RegisterTime DATETIME,
      UnRegisterTime DATETIME,
      LostTime DATETIME,
      Description NATIONAL VARCHAR(255),
      DoorId INT,
      DoorNo INT,
      DoorName NATIONAL VARCHAR(255),
      DoorCategory INT,
      DoorCategoryName NATIONAL VARCHAR(255),
      DoorPassword NATIONAL VARCHAR(255),
      DoorCenterId INT,
      DoorCenterName NATIONAL VARCHAR(255),
      DoorGroupId INT,
      DoorGroupName NATIONAL VARCHAR(255),
      DoorStationId INT,
      DoorStationName NATIONAL VARCHAR(255),
      DoorStationStateId INT,
      DoorStationCategoryId INT,
      DoorStationGradeId INT,
      DoorEquipmentId INT,
      DoorEquipmentName NATIONAL VARCHAR(255)
   );

-- 查询结果条数
   SET v_RowCount = cast(v_ReturnCount as SIGNED INTEGER);
   SET SQL_SELECT_LIMIT = v_RowCount;  

-- 满足条件信号
   SET SWV_ExecDyn = 'INSERT INTO tt_SwapEvent(Valid					,
ValidName				,
Enter					,
RecordTime				,
CardStationId			,
CardStationName			,
CardId					,
CardCode				,
CardName				,
CardCategory			,
CardCategoryName		,
CardGroup				,
CardGroupName			,
CardStatus				,
CardStatusName			,
CardUserId				,
CardUserName			,
DeptmentId				,
DeptmentName			,
EmployeeName			,
EmployeePhone			,
EmployeeMobile			,
EmployeeEmail			,
EmployeeJobNumber		,
StartTime				,
EndTime					,
RegisterTime			,
UnRegisterTime			,
LostTime				,
Description				,
DoorId					,
DoorNo					,
DoorName				,
DoorCategory			,
DoorCategoryName		,
DoorPassword			,
DoorCenterId			,
DoorCenterName			,
DoorGroupId				,
DoorGroupName			,
DoorStationId			,
DoorStationName			,
DoorStationStateId		,
DoorStationCategoryId	,
DoorStationGradeId		,
DoorEquipmentId			,
DoorEquipmentName)
   SELECT
   sr.Valid					,
sr.ValidName				,
sr.Enter					,
sr.RecordTime				,
sr.CardStationId			,
sr.CardStationName			,

   sr.CardId					,
sr.CardCode					,
sr.CardName					,
sr.CardCategory				,
sr.CardCategoryName			,

   sr.CardGroup				,
sr.CardGroupName			,
sr.CardStatus				,
sr.CardStatusName			,

   sr.CardUserId				,
sr.CardUserName				,
dt.DepartmentId				,
dt.DepartmentName			,
ee.EmployeeName				,

   ee.Phone AS EmployeePhone	,
ee.Mobile AS EmployeeMobile ,
ee.Email AS EmployeeEmail	,

   ee.JobNumber AS EmployeeJobNumber,
cd.StartTime				,

   cd.EndTime					,
cd.RegisterTime				,
cd.UnRegisterTime			,
cd.LostTime					,
cd.Description				,

   sr.DoorId					,
sr.DoorNo					,
sr.DoorName					,
sr.DoorCategory				,
sr.DoorCategoryName			,

   dr.Password AS DoorPassword	,
st.CenterId AS DoorCenterId	,
st.CenterName AS DoorCenterName,

   st.GroupId AS DoorGroupId,
st.GroupName AS DoorGroupName,

   st.StationId AS DoorStationId,
st.StationName AS DoorStationName,
st.StationState AS DoorStationStateId,

   st.StationCategory AS DoorStationCategoryId,

   st.StationGrade AS DoorStationGradeId,
et.EquipmentId AS DoorEquipmentId,

   et.EquipmentName AS DoorEquipmentName
   FROM TBL_SwapCardRecord sr
   INNER JOIN TBL_Card cd ON sr.CardId = cd.CardId
   INNER JOIN TBL_Door dr ON sr.DoorNo = dr.DoorNo AND dr.StationId = sr.StationId AND dr.EquipmentId = sr.EquipmentId
   INNER JOIN tt_TempStation st ON sr.StationId = st.StationId
   INNER JOIN tt_TempEquipment et ON sr.EquipmentId = et.EquipmentId AND sr.StationId = et.StationId
   LEFT JOIN TBL_Employee ee ON cd.UserId = ee.EmployeeId
   LEFT JOIN TBL_Department dt ON ee.DepartmentId = dt.DepartmentId   WHERE 1 = 1';
   SET @SWV_Stmt = SWV_ExecDyn;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;

   SELECT DISTINCT * FROM tt_SwapEvent ORDER BY RecordTime DESC;

   SET SQL_SELECT_LIMIT = DEFAULT;

   DROP TEMPORARY TABLE IF EXISTS tt_SwapEvent;
   DROP TEMPORARY TABLE IF EXISTS tt_TempEquipment;
   DROP TEMPORARY TABLE IF EXISTS tt_TempStation;
END;

-- SELECT N'SQLWAYS_EVAL# L_RecordReplicateLog]...';





DROP PROCEDURE IF EXISTS PBL_RecordReplicateLog;

CREATE PROCEDURE PBL_RecordReplicateLog(v_SQL		 NATIONAL VARCHAR(4000))
BEGIN
   DECLARE v_enable NATIONAL VARCHAR(255);
   select   ConfigValue INTO v_enable FROM TBL_SysConfig WHERE ConfigKey = 'EnableConfigSyn';
   if v_enable = 'true' then

  INSERT INTO TBL_ReplicateLogs VALUES(v_SQL,CURRENT_TIMESTAMP);
   end if;
END;


-- SELECT N'SQLWAYS_EVAL# L_SARDerivateRecord]...';





DROP PROCEDURE IF EXISTS PBL_SARDerivateRecord;

CREATE PROCEDURE PBL_SARDerivateRecord(v_DevStationId          	INT    ,
v_DevEquipmentId        	INT    ,
v_DevEventId            	INT    ,
v_DevConditionId			INT    ,
v_DevStartTime		  	DATETIME,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_StationId INT;			
   DECLARE v_EquipmentId INT;			
   DECLARE v_EventId INT;			
   DECLARE v_EventConditionId INT;			
   DECLARE v_SequenceId NATIONAL VARCHAR(128);	
   DECLARE v_StartTime DATETIME;		
   DECLARE v_MinIndex INT;
   DECLARE v_MaxIndex INT;

   SELECT
   sr.CauseStationId			,
sr.CauseEquipmentId			,
sr.CauseEventId				,
sr.CauseEventConditionId	,
sr.CauseStartTime
   FROM TBL_SARAlarmRelation sr
   WHERE sr.RelationType IN(2,3) AND sr.StationId = v_DevStationId AND sr.EquipmentId = v_DevEquipmentId
   AND sr.EventId = v_DevEventId AND sr.EventConditionId = v_DevConditionId
   AND sr.StartTime = v_DevStartTime;

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# T_AddArea]...';



-- 添加片区权限



DROP PROCEDURE IF EXISTS PCT_AddArea;

CREATE PROCEDURE PCT_AddArea(v_ItemId    INT,
v_ItemName  NATIONAL VARCHAR(128),
v_Description  NATIONAL VARCHAR(255))

BEGIN 
INSERT INTO TBL_Area(AreaId,AreaName,Description) VALUES(v_ItemId,v_ItemName,v_Description);
END;

-- SELECT N'SQLWAYS_EVAL# T_AddMenus]...';



-- 添加模块权限



DROP PROCEDURE IF EXISTS PCT_AddMenus;

CREATE PROCEDURE PCT_AddMenus(v_ItemId    INT,
v_ItemName  NATIONAL VARCHAR(128),
v_Description  NATIONAL VARCHAR(255))

BEGIN 
INSERT INTO TBL_Menus(MenusId,MenusName,Description) VALUES(v_ItemId,v_ItemName,v_Description);
END;

-- SELECT N'SQLWAYS_EVAL# T_AddOperationGroup]...';



-- 添加操作权限



DROP PROCEDURE IF EXISTS PCT_AddOperationGroup;

CREATE PROCEDURE PCT_AddOperationGroup(v_ItemId    INT,
v_ItemName  NATIONAL VARCHAR(128),
v_Description  NATIONAL VARCHAR(255))

BEGIN 
INSERT INTO TBL_OperationGroup(GroupId,GroupName,Description) VALUES(v_ItemId,v_ItemName,v_Description);
END;

-- SELECT N'SQLWAYS_EVAL# T_AddRole]...';



-- 添加角色



DROP PROCEDURE IF EXISTS PCT_AddRole;

CREATE PROCEDURE PCT_AddRole(v_RoleId    INT,
v_RoleName  NATIONAL VARCHAR(128),
v_Description  NATIONAL VARCHAR(255))

BEGIN 
INSERT INTO TBL_UserRole(RoleId,RoleName,Description) VALUES(v_RoleId,v_RoleName,v_Description);
END;

-- SELECT N'SQLWAYS_EVAL# T_AddSpecialtyGroup]...';



-- 添加专业权限



DROP PROCEDURE IF EXISTS PCT_AddSpecialtyGroup;

CREATE PROCEDURE PCT_AddSpecialtyGroup(v_ItemId    INT,
v_ItemName  NATIONAL VARCHAR(128),
v_Description  NATIONAL VARCHAR(255))

BEGIN 
INSERT INTO TBL_SpecialtyGroup(SpecialtyGroupId,SpecialtyGroupName,Description) VALUES(v_ItemId,v_ItemName,v_Description);
END;

-- SELECT N'SQLWAYS_EVAL# T_AddTimeGroup]...';







DROP PROCEDURE IF EXISTS PCT_AddTimeGroup;

CREATE PROCEDURE PCT_AddTimeGroup(v_TimeGroupId    INT,
v_TimeGroupName  NATIONAL VARCHAR(128))

BEGIN 
INSERT INTO TBL_TimeGroup
VALUES(v_TimeGroupId,1,v_TimeGroupName,10,0,'2000-1-1 0:00:00','9999-1-1 0:00:00',CURRENT_TIMESTAMP);
END;



DROP PROCEDURE IF EXISTS PCT_CopyStdTemplate;


CREATE PROCEDURE PCT_CopyStdTemplate(v_OldStdTemplateId INT,
v_StandardTemplateId INT,
v_StandardTemplateName NATIONAL VARCHAR(255),
v_StationCategory INT,
v_EquipmentCategory INT,
v_Vendor NATIONAL VARCHAR(255),
v_EquipmentModel NATIONAL VARCHAR(255),
v_MonitorModule NATIONAL VARCHAR(255))
BEGIN
 INSERT INTO TBL_StandardTemplate(StandardTemplateId,
StandardTemplateName,
StationCategory,
EquipmentCategory,
Vendor,
EquipmentModel,
MonitorModule)
VALUES(v_StandardTemplateId,
v_StandardTemplateName,
v_StationCategory,
v_EquipmentCategory,
v_Vendor,
v_EquipmentModel,
v_MonitorModule);


   INSERT INTO TBL_StandardRule(StandardTemplateId,
SignalName,
EventName,
Expression,
Meanings,
ControlName,
StandardDicId)
   SELECT
   v_StandardTemplateId,
SignalName,
EventName,
Expression,
Meanings,
ControlName,
StandardDicId
   FROM TBL_StandardRule
   WHERE StandardTemplateId = v_OldStdTemplateId;	
END;


DROP PROCEDURE IF EXISTS PCT_GetStandardRuleByETYL;


CREATE PROCEDURE  PCT_GetStandardRuleByETYL(v_EquipmentTemplateId            INT  ,        
v_StationCategory            INT)
BEGIN
   SELECT  DISTINCT C.EventName SignalName, 0 SignalId ,C.EventName ,
(CASE
   WHEN F.StartOperation IS NULL THEN NULL
   WHEN F.StartOperation = '' THEN NULL
   else(CONCAT(F.StartOperation,CAST(cast(F.StartCompareValue as SIGNED INTEGER) AS CHAR(10)),
      ':',CAST(F.StartDelay AS CHAR(10))))
   end) AS Expression,
F.Meanings, '' ControlName,
E.StandardDicId,
G.EquipmentLogicClass,
G.EventLogicClass,
G.StandardName,
(CONCAT(H.ItemValue,'|',G.EquipmentLogicClass,' | ',G.StandardName,'|',
   G.NetManageId)) AS StandardInfo
   FROM TBL_EquipmentTemplate A
   INNER JOIN TBL_Event C ON A.EquipmentTemplateId = C.EquipmentTemplateId
   LEFT JOIN TBL_StandardTemplateMap N ON A.EquipmentTemplateId = N.EquipmentTemplateId AND N.StationCategory = v_StationCategory
   LEFT JOIN TBL_StandardTemplate  I ON N.StandardTemplateId = I.StandardTemplateId AND N.StationCategory = I.StationCategory
   INNER JOIN TBL_EventCondition F ON A.EquipmentTemplateId = F.EquipmentTemplateId AND C.EventId = F.EventId
   LEFT JOIN TBL_StandardRule E ON E.StandardTemplateId = I.StandardTemplateId  AND E.EventName = C.EventName AND E.Meanings = F.Meanings
   LEFT JOIN TBL_StandardDic G ON E.StandardDicId = G.StandardDicId
   LEFT JOIN TBL_DataItem H ON G.EventSeverity = H.ItemId AND H.EntryId = 23
   WHERE A.EquipmentTemplateId = v_EquipmentTemplateId
   OR A.EquipmentTemplateId IN(SELECT EquipmentTemplateId FROM TBL_EquipmentTemplate WHERE ParentTemplateId = v_EquipmentTemplateId);
END;



-- SELECT N'SQLWAYS_EVAL# T_DeleteArea]...';



-- 删除片区权限



DROP PROCEDURE IF EXISTS PCT_DeleteArea;

CREATE PROCEDURE PCT_DeleteArea(v_AreaId    INT,INOUT SWP_Ret_Value INT)

   SWL_return:
BEGIN
-- SQLWAYS_EVAL# (设备类）、界面权限.控制命令权限级
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   START TRANSACTION;
   SET @SWV_Error = 0;
   DELETE FROM TBL_AreaMap WHERE AreaId = v_AreaId;  
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if;
   SET @SWV_Error = 0;
   DELETE FROM TBL_UserRoleRight WHERE OperationId = v_AreaId AND OperationType = 2;  
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if;
   SET @SWV_Error = 0;
   DELETE FROM TBL_Area    WHERE AreaId = v_AreaId;  
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if;
   COMMIT;
   SET SWP_Ret_Value = 0;
   LEAVE SWL_return;

   ROLLBACK;
   SET SWP_Ret_Value = -1;
END;


-- SELECT N'SQLWAYS_EVAL# T_DeleteDepartment]...';





DROP PROCEDURE IF EXISTS PCT_DeleteDepartment;

CREATE PROCEDURE PCT_DeleteDepartment(v_deptId    INT,INOUT SWP_Ret_Value INT)

   SWL_return:
BEGIN
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   START TRANSACTION;

   SET @SWV_Error = 0;
   UPDATE TBL_Employee SET DepartmentId = 0 WHERE DepartmentId = v_deptId; 
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if;
   SET @SWV_Error = 0;
   DELETE FROM TBL_Department WHERE DepartmentId = v_deptId;  
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if;

   COMMIT;
   SET SWP_Ret_Value = 0;
   LEAVE SWL_return;

   ROLLBACK;
   SET SWP_Ret_Value = -1;
END;

-- SELECT N'SQLWAYS_EVAL# T_DeleteEmployee]...';



-- 删除人员



DROP PROCEDURE IF EXISTS PCT_DeleteEmployee;

CREATE PROCEDURE PCT_DeleteEmployee(v_EmoloyeeId   INT,INOUT SWP_Ret_Value INT)

   SWL_return:
BEGIN
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   START TRANSACTION;
   SET @SWV_Error = 0;
   DELETE FROM TBL_UserRoleMap WHERE UserId = v_EmoloyeeId;  
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if;
   SET @SWV_Error = 0;
   DELETE FROM TBL_Account WHERE UserId = v_EmoloyeeId;   
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if;
   SET @SWV_Error = 0;
   DELETE FROM TBL_Employee    WHERE EmployeeId = v_EmoloyeeId;  
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if;
   COMMIT;
   SET SWP_Ret_Value = 0;
   LEAVE SWL_return;

   ROLLBACK;
   SET SWP_Ret_Value = -1;
END;

-- SELECT N'SQLWAYS_EVAL# T_DeleteEmployeeByLogonId]...';





DROP PROCEDURE IF EXISTS PCT_DeleteEmployeeByLogonId;

CREATE PROCEDURE PCT_DeleteEmployeeByLogonId(v_LogonId   NATIONAL VARCHAR(20))

BEGIN
   DECLARE v_UserId INT;
   select   UserId INTO v_UserId FROM TBL_Account WHERE LogonId = v_LogonId;

   IF(v_UserId IS NOT NULL) then

      DELETE FROM TBL_UserRoleMap WHERE UserId = v_UserId;
      DELETE FROM TBL_Account WHERE UserId = v_UserId;
      DELETE FROM TBL_Employee    WHERE EmployeeId = v_UserId;
   end if;
END;



-- SELECT N'SQLWAYS_EVAL# T_DeleteMenus]...';



-- 删除模块权限



DROP PROCEDURE IF EXISTS PCT_DeleteMenus;

CREATE PROCEDURE PCT_DeleteMenus(v_GroupId   INT,INOUT SWP_Ret_Value INT)

   SWL_return:
BEGIN
-- SQLWAYS_EVAL# (设备类）、界面权限.控制命令权限级
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   START TRANSACTION;
   SET @SWV_Error = 0;
   DELETE FROM TBL_MenusMap WHERE MenusId = v_GroupId;  
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if;
   SET @SWV_Error = 0;
   DELETE FROM TBL_UserRoleRight WHERE OperationId = v_GroupId AND OperationType = 4;  
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if;
   SET @SWV_Error = 0;
   DELETE FROM TBL_Menus    WHERE MenusId = v_GroupId;  
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if;
   COMMIT;
   SET SWP_Ret_Value = 0;
   LEAVE SWL_return;

   ROLLBACK;
   SET SWP_Ret_Value = -1;
END;


-- SELECT N'SQLWAYS_EVAL# T_DeleteOperationGroup]...';




-- 删除操作权限



DROP PROCEDURE IF EXISTS PCT_DeleteOperationGroup;

CREATE PROCEDURE PCT_DeleteOperationGroup(v_GroupId   INT,INOUT SWP_Ret_Value INT)

   SWL_return:
BEGIN
-- SQLWAYS_EVAL# (设备类）、界面权限.控制命令权限级
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   START TRANSACTION;
   SET @SWV_Error = 0;
   DELETE FROM TBL_OperationGroupMap WHERE GroupId = v_GroupId;  
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if;
   SET @SWV_Error = 0;
   DELETE FROM TBL_UserRoleRight WHERE OperationId = v_GroupId AND OperationType = 1;  
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if;
   SET @SWV_Error = 0;
   DELETE FROM TBL_OperationGroup    WHERE GroupId = v_GroupId;  
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if;
   COMMIT;
   SET SWP_Ret_Value = 0;
   LEAVE SWL_return;

   ROLLBACK;
   SET SWP_Ret_Value = -1;
END;



-- SELECT N'SQLWAYS_EVAL# T_DeleteSpecialtyGroup]...';



-- 删除专业权限



DROP PROCEDURE IF EXISTS PCT_DeleteSpecialtyGroup;

CREATE PROCEDURE PCT_DeleteSpecialtyGroup(v_GroupId   INT,INOUT SWP_Ret_Value INT)

   SWL_return:
BEGIN
-- SQLWAYS_EVAL# (设备类）、界面权限.控制命令权限级
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   START TRANSACTION;
   SET @SWV_Error = 0;
   DELETE FROM TBL_SpecialtyGroupMap WHERE SpecialtyGroupId = v_GroupId;  
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if;
   SET @SWV_Error = 0;
   DELETE FROM TBL_UserRoleRight WHERE OperationId = v_GroupId AND OperationType = 3;  
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if;
   SET @SWV_Error = 0;
   DELETE FROM TBL_SpecialtyGroup    WHERE SpecialtyGroupId = v_GroupId;  
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if;
   COMMIT;
   SET SWP_Ret_Value = 0;
   LEAVE SWL_return;

   ROLLBACK;
   SET SWP_Ret_Value = -1;
END;


-- SELECT N'SQLWAYS_EVAL# T_DeleteSwationStation]...';





DROP PROCEDURE IF EXISTS PCT_DeleteSwationStation;

CREATE PROCEDURE PCT_DeleteSwationStation(v_SwatchStationId 		 INT)
   SWL_return:
BEGIN
   DELETE FROM TBL_StationSwatchMap WHERE SwatchStationId = v_SwatchStationId;
   DELETE FROM TBL_SwatchStation WHERE SwatchStationId = v_SwatchStationId;
   LEAVE SWL_return;
END;

-- SELECT N'SQLWAYS_EVAL# T_DeleteTimeGroupTemplate]...';







DROP PROCEDURE IF EXISTS PCT_DeleteTimeGroupTemplate;

CREATE PROCEDURE PCT_DeleteTimeGroupTemplate(v_TimeGroupId    INT,INOUT SWP_Ret_Value INT)

   SWL_return:
BEGIN
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   START TRANSACTION;

   SET @SWV_Error = 0;
   DELETE FROM TBL_TimeGroupSpan WHERE TimeGroupId = v_TimeGroupId;
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if; 

   SET @SWV_Error = 0;
   DELETE FROM TBL_TimeGroup WHERE TimeGroupId = v_TimeGroupId;
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if; 


   COMMIT;

   SET SWP_Ret_Value = 0;
   LEAVE SWL_return;

   ROLLBACK;
   SET SWP_Ret_Value = -1;
END;

-- SELECT N'SQLWAYS_EVAL# T_DeleteUserRole]...';







DROP PROCEDURE IF EXISTS PCT_DeleteUserRole;

CREATE PROCEDURE PCT_DeleteUserRole(v_RoleId    INT,INOUT SWP_Ret_Value INT)

   SWL_return:
BEGIN
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   START TRANSACTION;
   SET @SWV_Error = 0;
   DELETE FROM TBL_UserRoleMap WHERE RoleId = v_RoleId;  
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if;
   SET @SWV_Error = 0;
   DELETE FROM TBL_UserRoleRight WHERE RoleId = v_RoleId;   
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if;
   SET @SWV_Error = 0;
   DELETE FROM TBL_UserRole    WHERE RoleId = v_RoleId;  
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if;
   COMMIT;
   SET SWP_Ret_Value = 0;
   LEAVE SWL_return;

   ROLLBACK;
   SET SWP_Ret_Value = -1;
END;


-- SELECT N'SQLWAYS_EVAL# T_GenerateId]...';







DROP PROCEDURE IF EXISTS PCT_GenerateId;

CREATE PROCEDURE PCT_GenerateId(v_TableName       VARCHAR(30)        ,
v_PostalCode      INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_IdentityValue INT;     
   DECLARE v_TableId INT;
   DECLARE v_result INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
/* liangyj
   IF v_PostalCode is null then
      set v_PostalCode = 0;
   END IF;*/
   SET @SWV_Error = 0;
   IF v_TableName    IS NULL then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;


   IF (v_PostalCode  = 0) AND EXISTS(SELECT 'X' FROM TBL_StationStructure WHERE StructureType = 2) then
      select   StructureId INTO v_PostalCode FROM TBL_StationStructure WHERE StructureType = 2;
   end if;

   SET v_PostalCode = IFNULL(v_PostalCode,0);




   IF NOT EXISTS(SELECT 'X' FROM TBL_PrimaryKeyIdentity WHERE TableName = v_TableName) then

      SET SWP_Ret_Value = -2;
      LEAVE SWL_return;
   end if;

   select   TableId INTO v_TableId FROM  TBL_PrimaryKeyIdentity m WHERE  m.TableName  = v_TableName;


   IF v_TableName = 'TBL_DataItem' then
      SET v_PostalCode = 0;
   end if;

   START TRANSACTION;
   SET @SWV_Error = 0;
   IF NOT EXISTS(SELECT   'X'
   FROM     TBL_PrimaryKeyValue
   WHERE    TableId     =  v_TableId
   AND      PostalCode  =  v_PostalCode) then

  INSERT INTO TBL_PrimaryKeyValue(TableId        ,
PostalCode     ,
MinValue       ,
CurrentValue)
VALUES(v_TableId       ,
v_PostalCode    ,
1              ,
1);
   ELSE
      UPDATE  TBL_PrimaryKeyValue
      SET     CurrentValue    = IFNULL(CurrentValue,0)+1
      WHERE   TableId         = v_TableId
      AND     PostalCode      = v_PostalCode;
   end if;
   IF @SWV_Error <> 0 then

      ROLLBACK;
      SET SWP_Ret_Value = -3;
      LEAVE SWL_return;
   end if;

   select   CurrentValue INTO v_result FROM    TBL_PrimaryKeyValue WHERE   TableId         = v_TableId
   AND     PostalCode      = v_PostalCode;


   COMMIT;

   SET SWP_Ret_Value = v_PostalCode*1000000+v_result;
   LEAVE SWL_return;


   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# T_GetAccount]...';



-- 查询帐号



DROP PROCEDURE IF EXISTS PCT_GetAccount;

CREATE PROCEDURE PCT_GetAccount(v_UserId       INT,INOUT SWP_Ret_Value INT)
BEGIN
   SELECT * FROM TBL_Account WHERE UserId = v_UserId;

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# T_GetAccountRole]...';



-- SQLWAYS_EVAL# =0表示所有角色，同时返回所有角色集合，tag=1表示帐号已经分配的角色



DROP PROCEDURE IF EXISTS PCT_GetAccountRole;

CREATE PROCEDURE PCT_GetAccountRole(v_UserId       INT,INOUT SWP_Ret_Value INT)
BEGIN
   SELECT a.RoleId,a.RoleName,1 AS tag FROM TBL_UserRole a INNER JOIN TBL_UserRoleMap b ON a.RoleId = b.RoleId
   WHERE b.UserId = v_UserId
   UNION
   SELECT RoleId,RoleName,0  AS tag  FROM TBL_UserRole;

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# T_GetAllPermissionGroup]...';







DROP PROCEDURE IF EXISTS PCT_GetAllPermissionGroup;

CREATE PROCEDURE PCT_GetAllPermissionGroup

-- SQLWAYS_EVAL# 业(设备类）、界面权限

(INOUT SWP_Ret_Value INT)
BEGIN
   SELECT AreaId AS GroupId,AreaName AS GroupName,Description,2 AS tag FROM TBL_Area
   UNION all
   SELECT MenusId AS GroupId,MenusName AS GroupName,Description,4 AS tag  FROM TBL_Menus
   UNION all
   SELECT GroupId AS GroupId,GroupName AS GroupName,Description,1 AS tag  FROM TBL_OperationGroup
   UNION all
   SELECT SpecialtyGroupId AS GroupId,SpecialtyGroupName AS GroupName,Description,3 AS tag  FROM TBL_SpecialtyGroup;

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# T_GetCardAuthInfo]...';







DROP PROCEDURE IF EXISTS PCT_GetCardAuthInfo;

CREATE PROCEDURE PCT_GetCardAuthInfo(v_CardCode        NATIONAL VARCHAR(20) ,
v_CardName         NATIONAL VARCHAR(128)  ,
v_UserName	  NATIONAL VARCHAR(128) ,
v_CardGroup	INT,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_Index INT;
   DECLARE v_ExecStr NATIONAL VARCHAR(1000);
   IF v_CardCode is null then
      set v_CardCode = '';
   END IF;
   IF v_CardName is null then
      set v_CardName = '';
   END IF;
   IF v_UserName is null then
      set v_UserName = '';
   END IF;
   IF v_CardGroup is null then
      set v_CardGroup = -1;
   END IF;
   SET v_Index = 0;			 
   SET v_ExecStr = 'SELECT c.CardId,c.CardCode,c.CardName,e.EmployeeId,e.EmployeeName,s.StationId,
   s.StationName,d1.ItemId AS CardCategory,d1.ItemValue AS CardCategoryName,

   d2.ItemId AS CardStatus,c.StartTime,d2.ItemValue as CardStatusName,

   d3.ItemId AS CardGroup,d3.ItemValue AS CardGroupName,c.EndTime FROM TBL_Card c
   LEFT JOIN TBL_DataItem d1 ON c.CardCategory = d1.ItemId and d1.EntryId = 47
   LEFT JOIN TBL_DataItem d2 ON c.CardStatus = d2.ItemId and d2.EntryId = 46
   LEFT JOIN TBL_DataItem d3 ON c.CardGroup = d3.ItemId and d3.EntryId = 75
   LEFT JOIN TBL_Employee e ON c.UserId = e.EmployeeId
   LEFT JOIN TBL_Station s ON c.StationId = s.StationId';

   IF IFNULL(v_CardCode,'') <> '' then

      SET v_Index = 1;
      SET v_ExecStr = CONCAT(replace(v_ExecStr,';',' '),'SQLWAYS_EVAL# LIKE ''%',v_CardCode,
      '%'' ');
   end if;

   IF IFNULL(v_CardName,'') <> '' then

      IF v_Index = 0 then
         SET v_ExecStr = CONCAT(replace(v_ExecStr,';',' '),'SQLWAYS_EVAL# LIKE ''%',v_CardName,
         '%''');
      ELSE
         SET v_ExecStr = CONCAT(replace(v_ExecStr,';',' '),'SQLWAYS_EVAL# LIKE ''%',v_CardName,
         '%'' ');
      end if;
      SET v_Index = v_Index+1;
   end if;

   IF IFNULL(v_UserName,'') <> '' then

      IF v_Index = 0 then
         SET v_ExecStr = CONCAT(replace(v_ExecStr,';',' '),'SQLWAYS_EVAL# LIKE ''%',v_UserName,
         '%'' ');
      ELSE
         SET v_ExecStr = CONCAT(replace(v_ExecStr,';',' '),'SQLWAYS_EVAL# LIKE ''%',v_UserName,
         '%'' ');
      end if;
      SET v_Index = v_Index+1;
   end if;

   IF IFNULL(v_CardGroup,-1) <> -1 then

      IF v_Index = 0 then
         SET v_ExecStr = CONCAT(replace(v_ExecStr,';',' '),'SQLWAYS_EVAL# =',CAST(v_CardGroup AS CHAR(30)),
         ' ');
      ELSE
         SET v_ExecStr = CONCAT(replace(v_ExecStr,';',' '),'SQLWAYS_EVAL# =',CAST(v_CardGroup AS CHAR(30)),
         ' ');
      end if;
      SET v_Index = v_Index+1;
   end if;

   SET v_ExecStr = CONCAT(replace(v_ExecStr,';',' '),'SQLWAYS_EVAL# ');

-- SQLWAYS_EVAL# tr
   SET @SWV_Stmt = v_ExecStr;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;


   SET SWP_Ret_Value = 0;
END;




-- SELECT N'SQLWAYS_EVAL# T_GetCardAuthorization]...';





DROP PROCEDURE IF EXISTS PCT_GetCardAuthorization;


CREATE PROCEDURE PCT_GetCardAuthorization(v_UserId              INT,
v_StructureGroupId    INT,
v_StationName         VARCHAR(128),
v_DoorName            VARCHAR(128),
v_TimeGroupType       INT,
v_CardCode      VARCHAR(20),
v_CardName      VARCHAR(128),
v_CardGroup     INT,
v_EmployeeName        VARCHAR(30),
v_EndTime             DATETIME)
BEGIN
   DECLARE v_whereStationName VARCHAR(256);
   DECLARE v_whereDoorName VARCHAR(256);
   DECLARE v_whereCardCode VARCHAR(256);
   DECLARE v_whereCardName VARCHAR(256);
   DECLARE v_whereEmployeeName VARCHAR(256);

   DECLARE v_SQLstring VARCHAR(4000);
   DECLARE v_SysCount INT DEFAULT -1;

   IF v_StationName IS NULL then

      SET v_whereStationName = '';
   ELSE
      SET v_whereStationName = CONCAT('SQLWAYS_EVAL# LIKE ''%',v_StationName,'%'' ');
   end if;
   IF v_DoorName IS NULL then

      SET v_whereDoorName = '';
   ELSE
      SET v_whereDoorName = CONCAT('SQLWAYS_EVAL# LIKE ''%',v_DoorName,'%'' ');
   end if;
   IF v_CardCode IS NULL then

      SET v_whereCardCode = '';
   ELSE
      SET v_whereCardCode = CONCAT('SQLWAYS_EVAL# LIKE ''%',v_CardCode,'%'' ');
   end if;
   IF v_CardName IS NULL then

      SET v_whereCardName = '';
   ELSE
      SET v_whereCardName = CONCAT('SQLWAYS_EVAL# LIKE ''%',v_CardName,'%'' ');
   end if;
   IF v_EmployeeName IS NULL then

      SET v_whereEmployeeName = '';
   ELSE
      SET v_whereEmployeeName = CONCAT('SQLWAYS_EVAL# LIKE ''%',v_EmployeeName,'%'' ');
   end if;

   set v_SysCount =(SELECT count(*) FROM TBL_UserRoleMap WHERE UserId = v_UserId AND RoleId = -1);
   DROP TEMPORARY TABLE IF EXISTS tt_EquipmentDoor;
   create TEMPORARY table tt_EquipmentDoor 
   (
      StationId INT 
   );
   IF 	v_UserId = -1 or v_SysCount > 0 then

  INSERT INTO tt_EquipmentDoor
      SELECT StationId FROM TBL_Station station;
   ELSE
 INSERT INTO tt_EquipmentDoor
      SELECT areaMap.StationId FROM TBL_Account account, TBL_UserRoleMap map, TBL_UserRoleRight roleRight, TBL_AreaMap areaMap
      WHERE account.UserId = map.UserId
      AND map.RoleId = roleRight.RoleId
      AND roleRight.OperationType = 2
      AND roleRight.OperationId = areaMap.AreaId
      AND account.UserId = v_UserId;
   end if; 



-- SQLWAYS_EVAL# LIKE '%'+@EmployeeName+'%'
   SET v_SQLstring = CONCAT('SQLWAYS_EVAL#          StationId,
st.StationName        StationName,
md.DoorId       DoorId,
md.DoorNo       DoorNo,
md.DoorName     DoorName,
md.Password,
md.EquipmentId,
tg.TimeGroupId        TimeGroupId,
mg.TimeGroupType - 10 TimeGroupNo,
tg.TimeGroupName      TimeGroupName,
mc.CardId       CardId,
mc.CardCode     CardCode,
mc.CardName     CardName,
em.EmployeeName       CardClerk,
mdc.StartTime         StartTime,
dateadd(second, -1,dateadd(day, 1,mdc.EndTime))           EndTime
FROM   TBL_Station st
INNER  JOIN TBL_StationStructureMap   mp   ON st.StationId           = mp.StationId
INNER  JOIN TBL_StationStructure      sg   ON sg.StructureId         = mp.StructureId  AND sg.StructureGroupId in (0,1)
INNER  JOIN TBL_Door md                 ON md.StationId = st.StationId
INNER  JOIN TBL_DoorTimeGroup mg        ON mg.DoorId        = md.DoorId
INNER  JOIN TBL_TimeGroup tg                  ON mg.TimeGroupId         = tg.TimeGroupId
INNER  JOIN TBL_DoorCard mdc            ON mg.DoorId        = mdc.DoorId AND mg.TimeGroupId = mdc.TimeGroupId
INNER  JOIN TBL_Card mc                 ON mc.CardId        = mdc.CardId
INNER  JOIN TBL_Employee em                   ON em.EmployeeId          = mc.UserId
INNER  JOIN #EquipmentDoor  eDoor on eDoor.StationId = md.StationId
WHERE sg.StructureId =  CASE WHEN ',CAST(v_StructureGroupId AS CHAR(30)),
   'SQLWAYS_EVAL# ELSE ',CAST(v_StructureGroupId AS CHAR(30)),
   'SQLWAYS_EVAL# =  CASE WHEN ',CAST(v_TimeGroupType AS CHAR(30)),
   'SQLWAYS_EVAL# ELSE ',CAST(v_TimeGroupType AS CHAR(30)),'SQLWAYS_EVAL# =  CASE WHEN ',
   CAST(v_CardGroup AS CHAR(30)),'SQLWAYS_EVAL# ELSE ',
   CAST(v_CardGroup AS CHAR(30)),' END ',v_whereStationName,v_whereDoorName,
   v_whereCardCode,v_whereCardName,v_whereEmployeeName,'SQLWAYS_EVAL# <= ''',
   DATE_FORMAT(v_EndTime,'SQLWAYS_EVAL# :%s:%f%p'),''' ');
-- SQLWAYS_EVAL# ring
   SET @SWV_Stmt = v_SQLstring;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;
   SET SQL_SELECT_LIMIT = DEFAULT; 
END;




-- SELECT N'SQLWAYS_EVAL# T_GetDatabaseConfig]...';





DROP PROCEDURE IF EXISTS PCT_GetDatabaseConfig;

CREATE PROCEDURE PCT_GetDatabaseConfig()
begin
   create TEMPORARY table tt_DatabaseConfig 
   (
      Name CHAR(40), 
      ConfigValue CHAR(11),
      demandValue CHAR(11)
   );

   CREATE TEMPORARY TABLE tt_DataDemand
   (
      Name CHAR(40),
      demandValue CHAR(11)
   );
   INSERT INTO tt_DataDemand VALUES('number of locks','30000'); 

   INSERT INTO tt_DataDemand VALUES('SQLWAYS_EVAL# set conversions','1'); 

   INSERT INTO tt_DataDemand VALUES('max memory','160000'); 

   INSERT INTO tt_DataDemand VALUES('SQLWAYS_EVAL# connections','200'); 

   INSERT INTO tt_DataDemand VALUES('SQLWAYS_EVAL# ces','200'); 

   INSERT INTO tt_DataDemand VALUES('SQLWAYS_EVAL# size','25000'); 

   INSERT INTO tt_DataDemand VALUES('SQLWAYS_EVAL# ation','0');

   INSERT INTO tt_DataDemand VALUES('SQLWAYS_EVAL# ache','200M'); 


   INSERT INTO  tt_DatabaseConfig
   select CAST(name AS char(40)) 'Name',
CAST(CONCAT(space(11 -LENGTH(IFNULL(a.value2,CAST(a.`value` AS char(32))))),
   IFNULL(a.value2,CAST(a.`value` AS char(32)))) AS char(11)) 'ConfigValue',
c.demandValue 'demandValue'
   from sysconfigures a,
tt_DataDemand c
   where
   a.name IN('number of locks','SQLWAYS_EVAL# set conversions','max memory','SQLWAYS_EVAL# connections',
   'SQLWAYS_EVAL# ces','SQLWAYS_EVAL# size','SQLWAYS_EVAL# ation',
   'SQLWAYS_EVAL# ache')
   AND a.config <> 22 and  a.name = c.Name
   order by name;


-- SQLWAYS_EVAL# has expanded all '*' elements in the following statement
   SELECT tt_DatabaseConfig.Name, tt_DatabaseConfig.ConfigValue, tt_DatabaseConfig.demandValue FROM tt_DatabaseConfig;
   DROP TEMPORARY TABLE IF EXISTS tt_DatabaseConfig;
   DROP TEMPORARY TABLE IF EXISTS tt_DataDemand;
end;

-- SELECT N'SQLWAYS_EVAL# T_GetDatabaseDatarow]...';


DROP PROCEDURE IF EXISTS PCT_GetDatabaseDatarow;

CREATE PROCEDURE PCT_GetDatabaseDatarow()
BEGIN 

   SELECT name SWI, 'Datarows' SWI2 FROM sysobjects WHERE type = 'U';
END;

-- SELECT N'SQLWAYS_EVAL# T_GetDatabaseSize]...';





DROP PROCEDURE IF EXISTS PCT_GetDatabaseSize;

Create PROCEDURE PCT_GetDatabaseSize(v_DatabaseName NATIONAL VARCHAR(776) ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_id INT;			-- SQLWAYS_EVAL# that takes up space
   DECLARE v_type VARCHAR(255); -- SQLWAYS_EVAL# pe.
   DECLARE v_pages BIGINT;			-- SQLWAYS_EVAL# for size calc.
   DECLARE v_dbname NATIONAL VARCHAR(128);
   DECLARE v_dbsize BIGINT;
   DECLARE v_logsize BIGINT;
   DECLARE v_reservedpages BIGINT;
   DECLARE v_usedpages BIGINT;
   DECLARE v_RowCount BIGINT;

/*SQLWAYS_EVAL# if user wants usages updated.
*/

/*SQLWAYS_EVAL# that the objname is local.
*/


/*SQLWAYS_EVAL# if user specified to do so.
*/

   if v_DatabaseName IS NOT NULL then

      SET v_dbname = parsename(v_DatabaseName,3);
      if v_dbname is not null and v_dbname <> DATABASE() then

         CALL SWP_RaiseError(15250,'');
         SET SWP_Ret_Value =(1);
         LEAVE SWL_return;
      end if;
      if v_dbname is null then
         SET v_dbname = DATABASE();
      end if;

/*SQLWAYS_EVAL# the object.
*/
      select   object_id, type INTO v_id,v_type FROM objects WHERE object_id = object_id(v_DatabaseName);

-- SQLWAYS_EVAL# to internal-table for queue
      IF v_type = 'SQ' then
         select   object_id INTO v_id FROM internal_tables WHERE parent_id = v_id and internal_type = 201;
      end if; -- SQLWAYS_EVAL# eue

/*SQLWAYS_EVAL# exist\?
*/
      if v_id is null then

         CALL SWP_RaiseError(15009,'');
         SET SWP_Ret_Value =(1);
         LEAVE SWL_return;
      end if;

-- SQLWAYS_EVAL# view or queue\?
      IF v_type NOT IN('U ','S ','V ','SQ','IT') then

         CALL SWP_RaiseError(15234,'');
         SET SWP_Ret_Value =(1);
         LEAVE SWL_return;
      end if;
   end if;



/*SQLWAYS_EVAL# null, then we want summary data.
*/
   if v_id is null then

      select   sum(cast(case when status & 64 = 0 then `size` else 0 end as SIGNED INTEGER)), sum(cast(case when status & 64 <> 0 then `size` else 0 end as SIGNED INTEGER)) INTO v_dbsize,v_logsize from sysfiles;
      select   sum(a.total_pages), sum(a.used_pages), sum(CASE
-- SQLWAYS_EVAL# FT-Index internal tables are not considered "data", but is part of "index_size"
      When it.internal_type IN(202,204,211,212,213,214,215,216) Then 0
      When a.type <> 1 Then a.used_pages
      When p.index_id < 2 Then a.data_pages
      Else 0
      END) INTO v_reservedpages,v_usedpages,v_pages from partitions p join allocation_units a on p.partition_id = a.container_id
      left join internal_tables it on p.object_id = it.object_id;

/*SQLWAYS_EVAL# could not be negative */
      select
      DATABASE() DatabaseName,
ltrim(FORMAT((CAST(v_dbsize AS DECIMAL(15,2))+CAST(v_logsize AS DECIMAL(15,2)))*8192/1048576,2)) DatabaseSize,
ltrim(FORMAT(v_reservedpages*8192/1048576.,2)) DatabaseFreeSize;
   end if;
END;



-- SELECT N'SQLWAYS_EVAL# T_GetDatabaseDatarow]...';

DROP PROCEDURE IF EXISTS PCT_GetDatabaseDatarow;

CREATE PROCEDURE PCT_GetDatabaseDatarow()
BEGIN 

   SELECT name SWI, 'Datarows' SWI2 FROM sysobjects WHERE type = 'U';
END;


-- SELECT N'SQLWAYS_EVAL# T_GetDatabaseSize]...';




DROP PROCEDURE IF EXISTS PCT_GetDatabaseSize;

Create PROCEDURE PCT_GetDatabaseSize(v_DatabaseName NATIONAL VARCHAR(776) ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_id INT;			-- SQLWAYS_EVAL# that takes up space
   DECLARE v_type VARCHAR(255); -- SQLWAYS_EVAL# pe.
   DECLARE v_pages BIGINT;			-- SQLWAYS_EVAL# for size calc.
   DECLARE v_dbname NATIONAL VARCHAR(128);
   DECLARE v_dbsize BIGINT;
   DECLARE v_logsize BIGINT;
   DECLARE v_reservedpages BIGINT;
   DECLARE v_usedpages BIGINT;
   DECLARE v_RowCount BIGINT;

/*SQLWAYS_EVAL# if user wants usages updated.
*/

/*SQLWAYS_EVAL# that the objname is local.
*/


/*SQLWAYS_EVAL# if user specified to do so.
*/

   if v_DatabaseName IS NOT NULL then

      SET v_dbname = parsename(v_DatabaseName,3);
      if v_dbname is not null and v_dbname <> DATABASE() then

         CALL SWP_RaiseError(15250,'');
         SET SWP_Ret_Value =(1);
         LEAVE SWL_return;
      end if;
      if v_dbname is null then
         SET v_dbname = DATABASE();
      end if;

/*SQLWAYS_EVAL# the object.
*/
      select   object_id, type INTO v_id,v_type FROM objects WHERE object_id = object_id(v_DatabaseName);

-- SQLWAYS_EVAL# to internal-table for queue
      IF v_type = 'SQ' then
         select   object_id INTO v_id FROM internal_tables WHERE parent_id = v_id and internal_type = 201;
      end if; -- SQLWAYS_EVAL# eue

/*SQLWAYS_EVAL# exist\?
*/
      if v_id is null then

         CALL SWP_RaiseError(15009,'');
         SET SWP_Ret_Value =(1);
         LEAVE SWL_return;
      end if;

-- SQLWAYS_EVAL# view or queue\?
      IF v_type NOT IN('U ','S ','V ','SQ','IT') then

         CALL SWP_RaiseError(15234,'');
         SET SWP_Ret_Value =(1);
         LEAVE SWL_return;
      end if;
   end if;



/*SQLWAYS_EVAL# null, then we want summary data.
*/
   if v_id is null then

      select   sum(cast(case when status & 64 = 0 then `size` else 0 end as SIGNED INTEGER)), sum(cast(case when status & 64 <> 0 then `size` else 0 end as SIGNED INTEGER)) INTO v_dbsize,v_logsize from sysfiles;
      select   sum(a.total_pages), sum(a.used_pages), sum(CASE
-- SQLWAYS_EVAL# FT-Index internal tables are not considered "data", but is part of "index_size"
      When it.internal_type IN(202,204,211,212,213,214,215,216) Then 0
      When a.type <> 1 Then a.used_pages
      When p.index_id < 2 Then a.data_pages
      Else 0
      END) INTO v_reservedpages,v_usedpages,v_pages from partitions p join allocation_units a on p.partition_id = a.container_id
      left join internal_tables it on p.object_id = it.object_id;

/*SQLWAYS_EVAL# could not be negative */
      select
      DATABASE() DatabaseName,
ltrim(FORMAT((CAST(v_dbsize AS DECIMAL(15,2))+CAST(v_logsize AS DECIMAL(15,2)))*8192/1048576,2)) DatabaseSize,
ltrim(FORMAT(v_reservedpages*8192/1048576.,2)) DatabaseFreeSize;
   end if;
END;




-- SELECT N'SQLWAYS_EVAL# T_GetDoorAuthInfo]...';




DROP PROCEDURE IF EXISTS PCT_GetDoorAuthInfo;


CREATE PROCEDURE PCT_GetDoorAuthInfo(v_UserId              INT,
v_StructureGroupId    INT,
v_StationName         VARCHAR(128),
v_DoorId           INT)
BEGIN
   DECLARE v_whereStationName VARCHAR(256);
   DECLARE v_SQLstring VARCHAR(4000);
   DECLARE v_SysCount INT DEFAULT -1;

   IF v_StationName IS NULL then

      SET v_whereStationName = ' ';
   ELSE
      SET v_whereStationName = CONCAT('SQLWAYS_EVAL# LIKE ''%',v_StationName,'%'' ');
   end if;

   set v_SysCount =(SELECT count(*) FROM TBL_UserRoleMap WHERE UserId = v_UserId AND RoleId = -1);
   DROP TEMPORARY TABLE IF EXISTS tt_EquipmentDoor;
   create TEMPORARY table tt_EquipmentDoor 
   (
      StationId INT 
   );
   IF 	v_UserId = -1 or v_SysCount > 0 then

  INSERT INTO tt_EquipmentDoor
      SELECT StationId FROM TBL_Station station;
   ELSE
 INSERT INTO tt_EquipmentDoor
      SELECT areaMap.StationId FROM TBL_Account account, TBL_UserRoleMap map, TBL_UserRoleRight roleRight, TBL_AreaMap areaMap
      WHERE account.UserId = map.UserId
      AND map.RoleId = roleRight.RoleId
      AND roleRight.OperationType = 2
      AND roleRight.OperationId = areaMap.AreaId
      AND account.UserId = v_UserId;
   end if; 

   SET v_SQLstring = CONCAT('SQLWAYS_EVAL# 
FROM TBL_Station st 
INNER  JOIN TBL_StationStructureMap   mp   ON st.StationId           = mp.StationId
INNER  JOIN TBL_StationStructure      sg   ON sg.StructureId         = mp.StructureId  AND 
sg.StructureGroupId in (0,1)
INNER JOIN TBL_Door d ON d.StationId = st.StationId
INNER JOIN #EquipmentDoor eDoor ON d.StationId = eDoor.StationId
WHERE sg.StructureId =  CASE WHEN ',CAST(v_StructureGroupId AS CHAR(30)),
   'SQLWAYS_EVAL# ELSE  ',CAST(v_StructureGroupId AS CHAR(30)),
   '  END ',v_whereStationName,'SQLWAYS_EVAL# CASE WHEN  ',CAST(v_DoorId AS CHAR(30)),
   'SQLWAYS_EVAL# ELSE  ',CAST(v_DoorId AS CHAR(30)),'SQLWAYS_EVAL# st.StationName ');
   SET @SWV_Stmt = v_SQLstring;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;
END;






-- SELECT N'SQLWAYS_EVAL# T_GetDoorAuthInfoConTGType]...';


DROP PROCEDURE IF EXISTS PCT_GetDoorAuthInfoConTGType;

CREATE PROCEDURE PCT_GetDoorAuthInfoConTGType(v_UserId     INT,
v_StructureGroupId    INT,
v_StationName         VARCHAR(128),
v_DoorId           INT,
v_TimeGroupId		INT)


-- SQLWAYS_EVAL# 果集门数据会重复，只是在加卡操作时候根据准进时段组筛选用
-- SQLWAYS_EVAL# 须输入
BEGIN

   DECLARE v_SysCount INT;

   set v_SysCount =(SELECT count(*) FROM TBL_UserRoleMap WHERE UserId = v_UserId AND RoleId = -1);
   DROP TEMPORARY TABLE IF EXISTS tt_EquipmentDoor;
   create TEMPORARY table tt_EquipmentDoor 
   (
      StationId INT 
   );
   IF 	v_UserId = -1 or v_SysCount > 0 then

  INSERT INTO tt_EquipmentDoor
      SELECT StationId FROM TBL_Station station;
   ELSE
 INSERT INTO tt_EquipmentDoor
      SELECT areaMap.StationId FROM TBL_Account account, TBL_UserRoleMap map, TBL_UserRoleRight roleRight, TBL_AreaMap areaMap
      WHERE account.UserId = map.UserId
      AND map.RoleId = roleRight.RoleId
      AND roleRight.OperationType = 2
      AND roleRight.OperationId = areaMap.AreaId
      AND account.UserId = v_UserId;
   end if; 

   SELECT
   d.DoorId,d.DoorNo,d.DoorName,d.StationId,d.EquipmentId,d.SamplerUnitId,d.Password,
d.Address,st.StationName ,dt.TimeGroupId,dt.TimeGroupType
   FROM TBL_Station st
   INNER  JOIN TBL_StationStructureMap   mp   ON st.StationId           = mp.StationId
   INNER  JOIN TBL_StationStructure      sg   ON sg.StructureId         = mp.StructureId  AND  sg.StructureGroupId in(0,1)
   INNER JOIN TBL_Door d ON d.StationId = st.StationId
   INNER JOIN TBL_DoorTimeGroup dt ON d.DoorId = dt.DoorId
   INNER JOIN tt_EquipmentDoor eDoor ON eDoor.StationId = d.StationId
   WHERE sg.StructureId =  CASE WHEN v_StructureGroupId = -1 THEN sg.StructureId ELSE v_StructureGroupId END
   AND st.StationName LIKE CASE WHEN v_StationName IS NULL THEN st.StationName ELSE CONCAT('%',v_StationName,'%') END
   AND d.DoorId = CASE WHEN v_DoorId = -1 THEN d.DoorId ELSE v_DoorId END
   AND dt.TimeGroupId = v_TimeGroupId
   ORDER BY st.StationName;
END;




-- SELECT N'SQLWAYS_EVAL# T_GetDoorBasicInfo]...';


DROP PROCEDURE IF EXISTS PCT_GetDoorBasicInfo;


CREATE PROCEDURE PCT_GetDoorBasicInfo(v_UserId    INT,
v_StructureGroupId    INT,
v_StationName         VARCHAR(128),
v_DoorName            VARCHAR(128),
v_DoorAdress          VARCHAR(128))
BEGIN
   DECLARE v_whereStationName VARCHAR(256);
   DECLARE v_whereDoorName VARCHAR(256);
   DECLARE v_whereDoorAdress VARCHAR(256);
   DECLARE v_SQLstring VARCHAR(4000);
   DECLARE v_SysCount INT DEFAULT -1;


   IF v_StationName IS NULL then

      SET v_whereStationName = '';
   ELSE
      SET v_whereStationName = CONCAT('SQLWAYS_EVAL# LIKE ''%',v_StationName,'%''');
   end if;

   IF v_DoorName IS NULL then

      SET v_whereDoorName = '';
   ELSE
      SET v_whereDoorName = CONCAT('SQLWAYS_EVAL# LIKE ''%',v_DoorName,'%''');
   end if;
   IF v_DoorAdress IS NULL then

      SET v_whereDoorAdress = '';
   ELSE
      SET v_whereDoorAdress = CONCAT('SQLWAYS_EVAL# LIKE ''%',v_DoorAdress,'%''');
   end if;
   set v_SysCount =(SELECT count(*) FROM TBL_UserRoleMap WHERE UserId = v_UserId AND RoleId = -1);
   DROP TEMPORARY TABLE IF EXISTS tt_EquipmentDoor;
   create TEMPORARY table tt_EquipmentDoor 
   (
      StationId INT 
   );
   IF 	v_UserId = -1 or v_SysCount > 0 then

  INSERT INTO tt_EquipmentDoor
      SELECT StationId FROM TBL_Station station;
   ELSE
 INSERT INTO tt_EquipmentDoor
      SELECT areaMap.StationId FROM TBL_Account account, TBL_UserRoleMap map, TBL_UserRoleRight roleRight, TBL_AreaMap areaMap
      WHERE account.UserId = map.UserId
      AND map.RoleId = roleRight.RoleId
      AND roleRight.OperationType = 2
      AND roleRight.OperationId = areaMap.AreaId
      AND account.UserId = v_UserId;
   end if; 


   SET v_SQLstring = CONCAT('SELECT st.StationId    StationId,
st.StationName  StationName,
md.DoorId DoorId,

   md.DoorName DoorName,
md.WorkMode DoorWorkMode,
md.OpenDelay OpenDelay,

   md.Address  DoorAddress
   FROM   TBL_Station st
   INNER  JOIN TBL_StationStructureMap   mp   ON st.StationId           = mp.StationId
   INNER  JOIN TBL_StationStructure      sg   ON sg.StructureId         = mp.StructureId  AND sg.StructureGroupId in(0,1)
   INNER JOIN TBL_Door md ON md.StationId = st.StationId
   INNER JOIN tt_EquipmentDoor eDoor on eDoor.StationId = md.StationId
   WHERE sg.StructureId =  CASE WHEN ',CAST(v_StructureGroupId AS CHAR(30)),' = -1 THEN sg.StructureId ELSE ',CAST(v_StructureGroupId AS CHAR(30)),' END');
-- SQLWAYS_EVAL# ring
   SET @SWV_Stmt = v_SQLstring;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;

END;




-- SELECT N'SQLWAYS_EVAL# T_GetDoorTimeGroup]...';





DROP PROCEDURE IF EXISTS PCT_GetDoorTimeGroup;


CREATE PROCEDURE PCT_GetDoorTimeGroup(v_UserId              INT,
v_StructureGroupId    INT,
v_StationName         VARCHAR(128),
v_DoorName            VARCHAR(128),
v_DoorAdress          VARCHAR(128),
v_TimeGroupId       INT)
BEGIN
   DECLARE v_whereStationName VARCHAR(256);
   DECLARE v_whereDoorName VARCHAR(256);
   DECLARE v_whereDoorAdress VARCHAR(256);
   DECLARE v_SQLstring VARCHAR(4000);
   DECLARE v_SysCount INT DEFAULT -1;

   IF v_StationName IS NULL then

      SET v_whereStationName = '';
   ELSE
      SET v_whereStationName = CONCAT('SQLWAYS_EVAL# LIKE ''%',v_StationName,'%'' ');
   end if;

   IF v_DoorName IS NULL then

      SET v_whereDoorName = '';
   ELSE
      SET v_whereDoorName = CONCAT('SQLWAYS_EVAL# LIKE ''%',v_DoorName,'%'' ');
   end if;
   IF v_DoorAdress IS NULL then

      SET v_whereDoorAdress = '';
   ELSE
      SET v_whereDoorAdress = CONCAT('SQLWAYS_EVAL# LIKE ''%',v_DoorAdress,'%'' ');
   end if;


   set v_SysCount =(SELECT count(*) FROM TBL_UserRoleMap WHERE UserId = v_UserId AND RoleId = -1);
   DROP TEMPORARY TABLE IF EXISTS tt_EquipmentDoor;
   create TEMPORARY table tt_EquipmentDoor 
   (
      StationId INT 
   );
   IF 	v_UserId = -1 or v_SysCount > 0 then

  INSERT INTO tt_EquipmentDoor
      SELECT StationId FROM TBL_Station station;
   ELSE
 INSERT INTO tt_EquipmentDoor
      SELECT areaMap.StationId FROM TBL_Account account, TBL_UserRoleMap map, TBL_UserRoleRight roleRight, TBL_AreaMap areaMap
      WHERE account.UserId = map.UserId
      AND map.RoleId = roleRight.RoleId
      AND roleRight.OperationType = 2
      AND roleRight.OperationId = areaMap.AreaId
      AND account.UserId = v_UserId;
   end if; 

   IF(v_TimeGroupId = -1) then

-- SQLWAYS_EVAL# 2000
      SET v_SQLstring = CONCAT('SQLWAYS_EVAL#    StationId   ,
st.StationName  StationName ,
md.DoorId DoorId,
md.DoorName DoorName,
mg.TimeGroupType - 10 TimeGroupNo,
tg.TimeGroupName TimeGroupName,
sp.Week Week,
substring(sp.TimeSpanChar,1,11)  TimeSpanChar1,
substring(sp.TimeSpanChar,12,11) TimeSpanChar2,
substring(sp.TimeSpanChar,23,11) TimeSpanChar3
FROM   TBL_Station st
INNER  JOIN TBL_StationStructureMap   mp   ON st.StationId           = mp.StationId
INNER  JOIN TBL_StationStructure      sg   ON sg.StructureId         = mp.StructureId  AND sg.StructureGroupId in (0,1)
INNER JOIN TBL_Door md ON md.StationId = st.StationId
LEFT JOIN TBL_DoorTimeGroup  mg ON mg.DoorId = md.DoorId
LEFT JOIN TBL_TimeGroup tg ON mg.TimeGroupId = tg.TimeGroupId
LEFT JOIN TBL_TimeGroupSpan sp ON tg.TimeGroupId = sp.TimeGroupId
INNER JOIN #EquipmentDoor eDoor ON st.StationId = eDoor.StationId
WHERE
sg.StructureId =  CASE WHEN ',CAST(v_StructureGroupId AS CHAR(30)),
      'SQLWAYS_EVAL# ELSE ',CAST(v_StructureGroupId AS CHAR(30)),
      ' END ',v_whereStationName,v_whereDoorName,v_whereDoorAdress,
      'SQLWAYS_EVAL# is NULL ');
   ELSE
-- SQLWAYS_EVAL# 2000
      SET v_SQLstring = CONCAT('SQLWAYS_EVAL#    StationId   ,
st.StationName  StationName ,
md.DoorId DoorId,
md.DoorName DoorName,
mg.TimeGroupType - 10 TimeGroupNo,
tg.TimeGroupName TimeGroupName,
sp.Week Week,
substring(sp.TimeSpanChar,1,11)  TimeSpanChar1,
substring(sp.TimeSpanChar,12,11) TimeSpanChar2,
substring(sp.TimeSpanChar,23,11) TimeSpanChar3
FROM   TBL_Station st
INNER  JOIN TBL_StationStructureMap   mp   ON st.StationId           = mp.StationId
INNER  JOIN TBL_StationStructure      sg   ON sg.StructureId         = mp.StructureId  AND sg.StructureGroupId in (0,1)
INNER JOIN TBL_Door md ON md.StationId = st.StationId
LEFT JOIN TBL_DoorTimeGroup  mg ON mg.DoorId = md.DoorId
LEFT JOIN TBL_TimeGroup tg ON mg.TimeGroupId = tg.TimeGroupId
LEFT JOIN TBL_TimeGroupSpan sp ON tg.TimeGroupId = sp.TimeGroupId
INNER JOIN #EquipmentDoor eDoor ON st.StationId = eDoor.StationId

WHERE
sg.StructureId =  CASE WHEN ',CAST(v_StructureGroupId AS CHAR(30)),
      'SQLWAYS_EVAL# ELSE ',CAST(v_StructureGroupId AS CHAR(30)),
      ' END ',v_whereStationName,v_whereDoorName,v_whereDoorAdress,
      'SQLWAYS_EVAL# = ',CAST(v_TimeGroupId AS CHAR(30)));
   end if;
   SET @SWV_Stmt = v_SQLstring;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;

END;
 
-- SELECT N'SQLWAYS_EVAL# T_GetPostCode]...';


DROP PROCEDURE IF EXISTS PCT_GetPostCode;

CREATE PROCEDURE PCT_GetPostCode()
BEGIN
   SELECT
   StructureId
   FROM TBL_StationStructure
   WHERE StructureGroupId = 0 AND ParentStructureId = 0 AND Enable = 1;
END;

-- SELECT N'SQLWAYS_EVAL# T_GetRoleAccount]...';



-- SQLWAYS_EVAL# 配的帐号列表




DROP PROCEDURE IF EXISTS PCT_GetRoleAccount;

CREATE PROCEDURE PCT_GetRoleAccount(v_RoleId       INT,INOUT SWP_Ret_Value INT)
BEGIN
   SELECT a.UserId,a.UserName,1 AS tag FROM TBL_Account a INNER JOIN TBL_UserRoleMap b ON a.UserId = b.UserId
   WHERE b.RoleId = v_RoleId AND a.UserId > -1
   UNION
   SELECT UserId,UserName,0 AS tag  FROM TBL_Account WHERE UserId > -1;

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# T_GetStandardRuleByET]...';



-- SQLWAYS_EVAL# ================================
-- SQLWAYS_EVAL# te
-- SQLWAYS_EVAL# ================================



DROP PROCEDURE IF EXISTS PCT_GetStandardRuleByET;

CREATE PROCEDURE  PCT_GetStandardRuleByET(v_EquipmentTemplateId            INT  ,        
v_StationCategory            INT)
BEGIN
   SELECT  B.SignalName,B.SignalId ,C.EventName ,
(CASE
   WHEN F.StartOperation IS NULL THEN NULL
   WHEN F.StartOperation = '' THEN NULL
   else(CONCAT(F.StartOperation,CAST(F.StartCompareValue AS CHAR(10)),':',CAST(F.StartDelay AS CHAR(10))))
   end) AS Expression,
F.Meanings,D.ControlName,
E.StandardDicId,G.EquipmentLogicClass,G.EventLogicClass,G.StandardName,
(CONCAT(H.ItemValue,'|',G.EquipmentLogicClass,' | ',G.StandardName,'|',
   G.NetManageId)) AS StandardInfo
   FROM TBL_EquipmentTemplate A
   INNER JOIN TBL_Signal B ON A.EquipmentTemplateId = B.EquipmentTemplateId AND A.EquipmentTemplateId = v_EquipmentTemplateId
   LEFT  JOIN TBL_Event C ON A.EquipmentTemplateId = C.EquipmentTemplateId AND B.SignalId = C.SignalId
   LEFT  JOIN TBL_Control D ON A.EquipmentTemplateId = D.EquipmentTemplateId AND B.SignalId = D.SignalId
   LEFT JOIN TBL_StandardTemplateMap N ON A.EquipmentTemplateId = N.EquipmentTemplateId AND N.StationCategory = v_StationCategory
   LEFT JOIN TBL_StandardTemplate  I ON N.StandardTemplateId = I.StandardTemplateId AND N.StationCategory = I.StationCategory
   LEFT JOIN TBL_EventCondition F ON A.EquipmentTemplateId = F.EquipmentTemplateId AND C.EventId = F.EventId
   LEFT JOIN TBL_StandardRule E ON E.StandardTemplateId = I.StandardTemplateId  AND E.SignalName = B.SignalName AND E.Meanings = F.Meanings
   LEFT JOIN TBL_StandardDic G ON E.StandardDicId = G.StandardDicId
   LEFT JOIN TBL_DataItem H ON G.EventSeverity = H.ItemId AND H.EntryId = 23;
END;

-- SELECT N'SQLWAYS_EVAL# T_GetUserRoleRight]...';



-- 根据角色ID获取角色授权数据




DROP PROCEDURE IF EXISTS PCT_GetUserRoleRight;

CREATE PROCEDURE PCT_GetUserRoleRight(v_RoleId       INT,INOUT SWP_Ret_Value INT)
BEGIN
   SELECT * FROM TBL_UserRoleRight WHERE RoleId = v_RoleId;

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# T_InitPrimaryKeyValue]...';





DROP PROCEDURE IF EXISTS PCT_InitPrimaryKeyValue;

CREATE PROCEDURE PCT_InitPrimaryKeyValue(v_CenterId  INT ,
v_DefaultVlaue  INT)
BEGIN

   DECLARE v_TableId_signal INT;
   DECLARE v_TableId_event INT; 
   DECLARE v_TableId_monitorUnit INT;

   select   TableId INTO v_TableId_signal FROM TBL_PrimaryKeyIdentity WHERE TableName = 'TBL_Signal';
   select   TableId INTO v_TableId_event FROM TBL_PrimaryKeyIdentity WHERE TableName = 'TBL_Event';
   select   TableId INTO v_TableId_monitorUnit FROM TBL_PrimaryKeyIdentity WHERE TableName = 'TSL_MonitorUnit';

   IF EXISTS(SELECT 'x' FROM TBL_PrimaryKeyValue WHERE TableId = v_TableId_signal) then

      UPDATE TBL_PrimaryKeyValue SET CurrentValue = v_DefaultVlaue WHERE TableId = v_TableId_signal;
   ELSE
 INSERT INTO TBL_PrimaryKeyValue(TableId,PostalCode,MinValue,CurrentValue)
VALUES(v_TableId_signal,v_CenterId,1,v_DefaultVlaue);
   end if; 

   IF EXISTS(SELECT 'x' FROM TBL_PrimaryKeyValue WHERE TableId = v_TableId_event) then

      UPDATE TBL_PrimaryKeyValue SET CurrentValue = v_DefaultVlaue WHERE TableId = v_TableId_event;
   ELSE
 INSERT INTO TBL_PrimaryKeyValue(TableId,PostalCode,MinValue,CurrentValue)
VALUES(v_TableId_event,v_CenterId,1,v_DefaultVlaue);
   end if; 

   IF EXISTS(SELECT 'x' FROM TBL_PrimaryKeyValue WHERE TableId = v_TableId_monitorUnit) then

      UPDATE TBL_PrimaryKeyValue SET CurrentValue = v_DefaultVlaue WHERE TableId = v_TableId_monitorUnit;
   ELSE
 INSERT INTO TBL_PrimaryKeyValue(TableId,PostalCode,MinValue,CurrentValue)
VALUES(v_TableId_monitorUnit,v_CenterId,1,v_DefaultVlaue);
   end if;  


END;


-- SELECT N'SQLWAYS_EVAL# T_InsertDataItem]...';





DROP PROCEDURE IF EXISTS PCT_InsertDataItem;

CREATE PROCEDURE PCT_InsertDataItem(v_EntryId	INT,
v_ItemValue	NATIONAL VARCHAR(128),INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_ItemId INT;
   DECLARE v_EntryItemId INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

   SET @SWV_Error = 0;
   START TRANSACTION;

   select   Max(ItemId) INTO v_ItemId FROM TBL_DataItem WHERE EntryId = v_EntryId;

   IF(v_ItemId IS NULL) then

      SET v_ItemId = 0;
   end if;

   SET v_ItemId = v_ItemId+1; 


   select   Max(EntryItemId) INTO v_EntryItemId FROM TBL_DataItem;

   IF(v_EntryItemId IS NULL) then

      SET v_EntryItemId = 0;
   end if;

   SET v_EntryItemId = v_EntryItemId+1; 


   SET @SWV_Error = 0;
   INSERT INTO TBL_DataItem(EntryItemId,ParentEntryId,ParentItemId,EntryId,ItemId,ItemValue,IsSystem,IsDefault,Enable)
VALUES(v_EntryItemId,0,0,v_EntryId,v_ItemId,v_ItemValue,0,0,1);

   IF @SWV_Error <> 0 then

      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if;  

   COMMIT;

   SET SWP_Ret_Value = 1;
   LEAVE SWL_return;


   ROLLBACK;
   SET SWP_Ret_Value = -1;
END;

-- SELECT N'SQLWAYS_EVAL# T_InsertDepartment]...';





DROP PROCEDURE IF EXISTS PCT_InsertDepartment;

CREATE PROCEDURE PCT_InsertDepartment(v_DepartmentId INT   ,
v_DepartmentName NATIONAL VARCHAR(128)  ,
v_DepartmentLevel NATIONAL VARCHAR(20)  , 
v_DepartmentFunction NATIONAL VARCHAR(40)  ,
v_Description NATIONAL VARCHAR(255))
BEGIN 
INSERT INTO TBL_Department(DepartmentId,
DepartmentName,
DepartmentLevel,
DepartmentFunction,
ParentDeprtId,
Description)
VALUES(v_DepartmentId,
v_DepartmentName,
v_DepartmentLevel,
v_DepartmentFunction,
-1,
v_Description);
END;



-- SELECT N'SQLWAYS_EVAL# T_InsertEmployee]...';







DROP PROCEDURE IF EXISTS PCT_InsertEmployee;

CREATE PROCEDURE PCT_InsertEmployee(v_EmployeeId INT   ,
v_DepartmentId INT   ,
v_EmployeeName NATIONAL VARCHAR(128)  ,
v_EmployeeType INT   ,
v_EmployeeTitle INT   ,
v_JobNumber NATIONAL VARCHAR(20)  ,
v_Gender INT   ,
v_Mobile NATIONAL VARCHAR(50)  ,
v_Phone NATIONAL VARCHAR(50)  ,
v_Email NATIONAL VARCHAR(128)  ,
v_Address NATIONAL VARCHAR(255)  ,
v_PostAddress NATIONAL VARCHAR(255)  ,
v_Enable BOOLEAN   ,
v_Description NATIONAL VARCHAR(255))
BEGIN 
INSERT INTO TBL_Employee(EmployeeId
,DepartmentId
,EmployeeName
,EmployeeType
,EmployeeTitle
,JobNumber
,Gender
,Mobile
,Phone
,Email
,Address
,PostAddress
,Enable
,Description
,IsAddTempUser)
VALUES(v_EmployeeId
,v_DepartmentId
,v_EmployeeName
,v_EmployeeType
,v_EmployeeTitle
,v_JobNumber
,v_Gender
,v_Mobile
,v_Phone
,v_Email
,v_Address
,v_PostAddress
,v_Enable
,v_Description
,1);
END;

-- SELECT N'SQLWAYS_EVAL# T_InsertTimeGroupTemplate]...';


DROP PROCEDURE IF EXISTS PCT_InsertTimeGroupTemplate;

CREATE PROCEDURE PCT_InsertTimeGroupTemplate(v_TimeGroupId    INT,
v_TimeGroupName	NATIONAL VARCHAR(128),
v_SpanStr1	NATIONAL VARCHAR(250),
v_SpanStr2	NATIONAL VARCHAR(250),
v_SpanStr3	NATIONAL VARCHAR(250),
v_SpanStr4	NATIONAL VARCHAR(250),
v_SpanStr5	NATIONAL VARCHAR(250),
v_SpanStr6	NATIONAL VARCHAR(250),
v_SpanStr7	NATIONAL VARCHAR(250),INOUT SWP_Ret_Value INT)

   SWL_return:
BEGIN
   DECLARE v_MaxSpanId INT;
   DECLARE v_PostCode INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   START TRANSACTION;

   SET v_PostCode = 0;
   select   StructureId INTO v_PostCode FROM TBL_StationStructure WHERE StructureType = 2 AND ParentStructureId = 0;
   IF(v_PostCode = 0) then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;


   SET @SWV_Error = 0;
   INSERT INTO TBL_TimeGroup
VALUES(v_TimeGroupId,1,v_TimeGroupName,10,0,'2000-1-1 0:00:00','9999-1-1 0:00:00',CURRENT_TIMESTAMP); 

   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if; 				

   SET v_MaxSpanId = PCT_GenerateId('SQLWAYS_EVAL# pan',v_PostCode);
   SET @SWV_Error = 0;
   INSERT INTO TBL_TimeGroupSpan VALUES(v_MaxSpanId,v_TimeGroupId,NULL,NULL,1,v_SpanStr1,CURRENT_TIMESTAMP);

   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if;  

   SET v_MaxSpanId = PCT_GenerateId('SQLWAYS_EVAL# pan',v_PostCode);
   SET @SWV_Error = 0;
   INSERT INTO TBL_TimeGroupSpan VALUES(v_MaxSpanId,v_TimeGroupId,NULL,NULL,2,v_SpanStr2,CURRENT_TIMESTAMP);

   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if; 

   SET v_MaxSpanId = PCT_GenerateId('SQLWAYS_EVAL# pan',v_PostCode);
   SET @SWV_Error = 0;
   INSERT INTO TBL_TimeGroupSpan VALUES(v_MaxSpanId,v_TimeGroupId,NULL,NULL,3,v_SpanStr3,CURRENT_TIMESTAMP);

   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if; 

   SET v_MaxSpanId = PCT_GenerateId('SQLWAYS_EVAL# pan',v_PostCode);
   SET @SWV_Error = 0;
   INSERT INTO TBL_TimeGroupSpan VALUES(v_MaxSpanId,v_TimeGroupId,NULL,NULL,4,v_SpanStr4,CURRENT_TIMESTAMP);

   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if; 

   SET v_MaxSpanId = PCT_GenerateId('SQLWAYS_EVAL# pan',v_PostCode);
   SET @SWV_Error = 0;
   INSERT INTO TBL_TimeGroupSpan VALUES(v_MaxSpanId,v_TimeGroupId,NULL,NULL,5,v_SpanStr5,CURRENT_TIMESTAMP);

   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if; 

   SET v_MaxSpanId = PCT_GenerateId('SQLWAYS_EVAL# pan',v_PostCode);
   SET @SWV_Error = 0;
   INSERT INTO TBL_TimeGroupSpan VALUES(v_MaxSpanId,v_TimeGroupId,NULL,NULL,6,v_SpanStr6,CURRENT_TIMESTAMP);

   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if; 

   SET v_MaxSpanId = PCT_GenerateId('SQLWAYS_EVAL# pan',v_PostCode);
   SET @SWV_Error = 0;
   INSERT INTO TBL_TimeGroupSpan VALUES(v_MaxSpanId,v_TimeGroupId,NULL,NULL,7,v_SpanStr7,CURRENT_TIMESTAMP);

   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if; 	

   COMMIT;

   SET SWP_Ret_Value = 0;
   LEAVE SWL_return;

   ROLLBACK;
   SET SWP_Ret_Value = -1;
END;

-- SELECT N'SQLWAYS_EVAL# T_ModifyCardCode]...';






DROP PROCEDURE IF EXISTS PCT_ModifyCardCode;

CREATE PROCEDURE PCT_ModifyCardCode(v_oldCardCode 	NATIONAL VARCHAR(20),
v_newCardCode	NATIONAL VARCHAR(20),INOUT SWP_Ret_Value INT)

   SWL_return:
BEGIN
   DECLARE v_MaxCardId INT;
   DECLARE v_PostCode INT;
   DECLARE v_InsertCardCount INT;
   DECLARE v_oldCardId INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   START TRANSACTION;

   SET v_PostCode = 0;
   select   StructureId INTO v_PostCode FROM TBL_StationStructure WHERE StructureType = 2 AND ParentStructureId = 0;
   IF(v_PostCode = 0) then


      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if;


   SET v_MaxCardId = PCT_GenerateId('TBL_Card',v_PostCode);

   SET @SWV_Error = 0;
   INSERT INTO TBL_Card SELECT v_MaxCardId,v_newCardCode,CONCAT('门禁卡',v_newCardCode),CardCategory,CardGroup,
UserId,StationId,CardStatus,StartTime,EndTime,CURRENT_TIMESTAMP,NULL,NULL,''
   FROM TBL_Card WHERE CardCode = v_oldCardCode;
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if; 

   select   Count(*) INTO v_InsertCardCount FROM TBL_Card WHERE CardId = v_MaxCardId;
   IF(v_InsertCardCount != 1) then


      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if;


   select   CardId INTO v_oldCardId FROM TBL_Card WHERE CardCode = v_oldCardCode;
   IF(v_oldCardId <= 0) then


      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if;


   SET @SWV_Error = 0;
   INSERT INTO TBL_DoorCard SELECT v_MaxCardId,TimeGroupId,DoorId,StartTime,EndTime,Password FROM
   TBL_DoorCard WHERE CardId = v_oldCardId;
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if; 

-- SQLWAYS_EVAL# 数据，必须等待删除oldCard的控制命令执行完毕后，由服务端删除卡逻辑来删除

   COMMIT;

   SELECT d.StationId,d.EquipmentId,d.Password,tc.CardId,tc.CardCode,
dt.TimeGroupType,dc.EndTime,dc.Password AS DoorCardPassword
   FROM TBL_DoorCard dc
   INNER JOIN TBL_Card tc ON dc.CardId = tc.CardId
   INNER JOIN TBL_DoorTimeGroup dt ON dt.DoorId = dc.DoorId AND dt.TimeGroupId = dc.TimeGroupId
   INNER JOIN TBL_Door d ON dt.DoorId = d.DoorId
   WHERE tc.CardCode = v_newCardCode;

   SELECT CardId FROM TBL_Card WHERE CardCode = v_oldCardCode;

   SET SWP_Ret_Value = 0;
   LEAVE SWL_return;

   ROLLBACK;
   SET SWP_Ret_Value = -1;
END;


-- SELECT N'SQLWAYS_EVAL# T_SaveDataItemByEntry]...';





DROP PROCEDURE IF EXISTS PCT_SaveDataItemByEntry;

CREATE PROCEDURE  PCT_SaveDataItemByEntry(v_EntryId            INT                ,
v_ItemValue          VARCHAR(255)  ,
v_ItemAlias          VARCHAR(255)  ,
v_Description        VARCHAR(255)  ,
v_ExtendField1       VARCHAR(255)  ,
v_ExtendField2       VARCHAR(255)  ,
v_ExtendField3       VARCHAR(255)  ,
v_ExtendField4       VARCHAR(255)  ,
v_ExtendField5       VARCHAR(255)  ,
v_ParentEntryId      INT              ,
v_ParentItemId       INT              ,
v_ItemId             INT             ,
v_IsSystem           INT ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/* liangyj
   DECLARE v_EntryItemId INT;           
   DECLARE v_Image VARCHAR(255);  
   DECLARE v_MaxEntryItemId INT;			  
   DECLARE v_TableId INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   IF v_ParentEntryId is null then
      set v_ParentEntryId = 0;
   END IF;
   IF v_ParentItemId is null then
      set v_ParentItemId = 0;
   END IF;
   IF v_ItemId is null then
      set v_ItemId = -1;
   END IF;
   IF v_IsSystem is null then
      set v_IsSystem = 0;
   END IF;
   SET @SWV_Error = 0;
   IF v_EntryId  IS NULL OR v_ItemValue IS NULL then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;


   IF NOT EXISTS(SELECT 'X' FROM TBL_DataEntry WHERE EntryId = v_EntryId) then

      SET SWP_Ret_Value = -2;
      LEAVE SWL_return;
   end if;

   SET v_ParentEntryId = IFNULL(v_ParentEntryId,0);
   SET v_ParentItemId = IFNULL(v_ParentItemId,0);
   select   TableId INTO v_TableId FROM TBL_PrimaryKeyIdentity WHERE TableName = 'TBL_DataItem';

   CALL PBL_GenerateId('TBL_DataItem',0);

   select   CurrentValue INTO v_EntryItemId FROM TBL_PrimaryKeyValue WHERE TableId = v_TableId;

   select   MAX(EntryItemId)+1 INTO v_MaxEntryItemId FROM TBL_DataItem;

   IF v_MaxEntryItemId > v_EntryItemId then

      SET v_EntryItemId = v_MaxEntryItemId+1;
      UPDATE TBL_PrimaryKeyValue SET CurrentValue = v_EntryItemId WHERE TableId = v_TableId;
   end if;

   IF v_ItemId = -1 then

      select   max(ItemId) INTO v_ItemId FROM    TBL_DataItem WHERE   EntryId = v_EntryId;
      SET v_ItemId = IFNULL(v_ItemId,0)+1;
   end if;

   SET @SWV_Error = 0;
   INSERT  INTO TBL_DataItem(EntryItemId          ,
ParentEntryId        ,
ParentItemId         ,
EntryId              ,
ItemId               ,
ItemValue            ,
ItemAlias            ,
IsSystem             ,
IsDefault			 ,
Enable				 ,
Description          ,
ExtendField1         ,
ExtendField2         ,
ExtendField3         ,
ExtendField4         ,
ExtendField5)
VALUES(v_EntryItemId         ,
v_ParentEntryId       ,
v_ParentItemId        ,
v_EntryId             ,
v_ItemId              ,
v_ItemValue           ,
v_ItemAlias           ,
v_IsSystem            ,
0					 ,-- IsDefault
1					 ,-- Enable
v_Description         ,
v_ExtendField1        ,
v_ExtendField2        ,
v_ExtendField3        ,
v_ExtendField4        ,
v_ExtendField5);

   IF @SWV_Error <> 0 then

      SET SWP_Ret_Value = -2;
      LEAVE SWL_return;
   end if;

*/
   SET SWP_Ret_Value = 0;
END;



-- SELECT N'SQLWAYS_EVAL# T_SaveDefaultWorkStation]...';


DROP PROCEDURE IF EXISTS PCT_SaveDefaultWorkStation;
CREATE PROCEDURE PCT_SaveDefaultWorkStation(v_CenterId INT ,
v_CenterName NATIONAL VARCHAR(255),
v_Ip NATIONAL VARCHAR(64),
v_WorkStationId INT,
v_WorkStationType INT,
v_ParentId INT)
BEGIN
   DECLARE v_WorkStationName NATIONAL VARCHAR(255);
   DECLARE v_ConnectState INT; 
   DECLARE v_UpdateTime DATETIME;

   SET v_ConnectState = 2;
   SET v_UpdateTime = CURRENT_TIMESTAMP;
   select   CONCAT(v_CenterName,CAST(v_CenterId AS CHAR(3)),ItemValue) INTO v_WorkStationName FROM TBL_DataItem WHERE EntryId = 58 AND ItemId = v_WorkStationType;
-- SQLWAYS_EVAL# 务器（WorkStationType=6）缺省不启动
-- SQLWAYS_EVAL# TBL_WorkStation(WorkStationId,WorkStationName,WorkStationType,IPAddress,ParentId,ConnectState,UpdateTime)
-- SQLWAYS_EVAL# kStationId,@WorkStationName,@WorkStationType,@Ip,@ParentId,@ConnectState,@UpdateTime)
   INSERT INTO TBL_WorkStation(WorkStationId,WorkStationName,WorkStationType,IPAddress,ParentId,ConnectState,UpdateTime,IsUsed)
VALUES(v_WorkStationId,v_WorkStationName,v_WorkStationType,v_Ip,v_ParentId,v_ConnectState,v_UpdateTime,CASE WHEN v_WorkStationType = 6 THEN 0 ELSE 1 END);	
END;

-- SELECT N'SQLWAYS_EVAL# T_SelectAreaGroup]...';

-- SQLWAYS_EVAL# 限名称

DROP PROCEDURE IF EXISTS PCT_SelectAreaGroup;

CREATE PROCEDURE PCT_SelectAreaGroup(v_AreaGroupName        NATIONAL VARCHAR(128) ,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_ExecStr NATIONAL VARCHAR(500);
   IF v_AreaGroupName is null then
      set v_AreaGroupName = '';
   END IF;
   IF IFNULL(v_AreaGroupName,'') <> '' then
		SET v_ExecStr= 'SELECT * FROM TBL_Area WHERE AreaName LIKE ''%'+v_AreaGroupName+'%''';
   ELSE
      SET v_ExecStr = 'SELECT * FROM TBL_Area';
   end if;


-- SQLWAYS_EVAL# tr
   SET @SWV_Stmt = v_ExecStr;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;


   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# T_SelectCardByCardCode]...';


DROP PROCEDURE IF EXISTS PCT_SelectCardByCardCode;

CREATE PROCEDURE  PCT_SelectCardByCardCode(v_CardCode		NATIONAL VARCHAR(20))
BEGIN
   SELECT * FROM TBL_Card WHERE CardCode = v_CardCode;
END;

-- SELECT N'SQLWAYS_EVAL# T_SelectCardInfo]...';


DROP PROCEDURE IF EXISTS PCT_SelectCardInfo;

CREATE PROCEDURE PCT_SelectCardInfo(v_CardCode        NATIONAL VARCHAR(20) ,
v_CardName         NATIONAL VARCHAR(128)  ,
v_UserId	  INT,
v_CardGroup	INT ,
v_CardCategory	INT,
v_CardStatus	INT,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_index INT;
   DECLARE v_ExecStr NATIONAL VARCHAR(1000);
   IF v_CardCode is null then
      set v_CardCode = '';
   END IF;
   IF v_CardName is null then
      set v_CardName = '';
   END IF;
   IF v_UserId is null then
      set v_UserId = -1;
   END IF;
   IF v_CardGroup is null then
      set v_CardGroup = -1;
   END IF;
   IF v_CardCategory is null then
      set v_CardCategory = -1;
   END IF;
   IF v_CardStatus is null then
      set v_CardStatus = -1;
   END IF;
   SET v_index = 0;			 
   SET v_ExecStr = 'SELECT c.CardId,c.CardCode,c.CardName,e.EmployeeId,e.EmployeeName,s.StationId,
   s.StationName,d1.ItemId AS CardCategory,d1.ItemValue AS CardCategoryName,

   d2.ItemId AS CardStatus,d2.ItemValue AS CardStatusName,c.StartTime,

   c.RegisterTime,c.UnRegisterTime,d3.ItemId AS CardGroup,d3.ItemValue AS CardGroupName,
   c.EndTime,c.Description FROM TBL_Card c
   LEFT JOIN TBL_DataItem d1 ON c.CardCategory = d1.ItemId and d1.EntryId = 47
   LEFT JOIN TBL_DataItem d2 ON c.CardStatus = d2.ItemId and d2.EntryId = 46
   LEFT JOIN TBL_DataItem d3 ON c.CardGroup = d3.ItemId and d3.EntryId = 75
   LEFT JOIN TBL_Employee e ON c.UserId = e.EmployeeId
   LEFT JOIN TBL_Station s ON c.StationId = s.StationId';

   IF IFNULL(v_CardCode,'') <> '' then

      SET v_index = 1;
      SET v_ExecStr = CONCAT(replace(v_ExecStr,';',' '),'SQLWAYS_EVAL# LIKE ''%',v_CardCode,
      '%'' ');
   end if;

   IF IFNULL(v_CardName,'') <> '' then

      IF v_index = 0 then
         SET v_ExecStr = CONCAT(replace(v_ExecStr,';',' '),'SQLWAYS_EVAL# LIKE ''%',v_CardName,
         '%'' ');
      ELSE
         SET v_ExecStr = CONCAT(replace(v_ExecStr,';',' '),'SQLWAYS_EVAL# LIKE ''%',v_CardName,
         '%'' ');
      end if;
      SET v_index = v_index+1;
   end if;

   IF IFNULL(v_UserId,-1) <> -1 then

      IF v_index = 0 then
         SET v_ExecStr = CONCAT(replace(v_ExecStr,';',' '),'SQLWAYS_EVAL# =',CAST(v_UserId AS CHAR(30)),
         ' ');
      ELSE
         SET v_ExecStr = CONCAT(replace(v_ExecStr,';',' '),'SQLWAYS_EVAL# =',CAST(v_UserId AS CHAR(30)),
         ' ');
      end if;
      SET v_index = v_index+1;
   end if;

   IF IFNULL(v_CardGroup,-1) <> -1 then

      IF v_index = 0 then
         SET v_ExecStr = CONCAT(replace(v_ExecStr,';',' '),'SQLWAYS_EVAL# =',CAST(v_CardGroup AS CHAR(30)),
         ' ');
      ELSE
         SET v_ExecStr = CONCAT(replace(v_ExecStr,';',' '),'SQLWAYS_EVAL# =',CAST(v_CardGroup AS CHAR(30)),
         ' ');
      end if;
      SET v_index = v_index+1;
   end if;

   IF IFNULL(v_CardCategory,-1) <> -1 then

      IF v_index = 0 then
         SET v_ExecStr = CONCAT(replace(v_ExecStr,';',' '),'SQLWAYS_EVAL# =',CAST(v_CardCategory AS CHAR(30)),
         ' ');
      ELSE
         SET v_ExecStr = CONCAT(replace(v_ExecStr,';',' '),'SQLWAYS_EVAL# =',CAST(v_CardCategory AS CHAR(30)),
         ' ');
      end if;
      SET v_index = v_index+1;
   end if;

   IF IFNULL(v_CardStatus,-1) <> -1 then

      IF v_index = 0 then
         SET v_ExecStr = CONCAT(replace(v_ExecStr,';',' '),'SQLWAYS_EVAL# =',CAST(v_CardStatus AS CHAR(30)),
         ' ');
      ELSE
         SET v_ExecStr = CONCAT(replace(v_ExecStr,';',' '),'SQLWAYS_EVAL# =',CAST(v_CardStatus AS CHAR(30)),
         ' ');
      end if;
      SET v_index = v_index+1;
   end if;



   SET v_ExecStr = CONCAT(replace(v_ExecStr,';',' '),'SQLWAYS_EVAL# ');

-- SQLWAYS_EVAL# tr
   SET @SWV_Stmt = v_ExecStr;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;


   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# T_SelectDoorAuthInfo]...';





DROP PROCEDURE IF EXISTS PCT_SelectDoorAuthInfo;

CREATE PROCEDURE PCT_SelectDoorAuthInfo(v_DoorId       INT,INOUT SWP_Ret_Value INT)
BEGIN
   SELECT d.DoorId,d.Password AS DoorPassword,dc.CardId,c.CardCode,dc.Password AS DCPassword,tg.TimeGroupType,c.EndTime
   FROM TBL_Door d
   INNER JOIN TBL_DoorCard dc ON d.DoorId = dc.DoorId
   INNER JOIN TBL_Card c ON dc.CardId = c.CardId
   INNER JOIN TBL_TimeGroup tg ON dc.TimeGroupId = tg.TimeGroupId
   WHERE d.DoorId = v_DoorId;

   SET SWP_Ret_Value = 0;
END;




-- SELECT N'SQLWAYS_EVAL# T_SelectDoorInfo]...';






DROP PROCEDURE IF EXISTS PCT_SelectDoorInfo;

CREATE PROCEDURE PCT_SelectDoorInfo(v_DoorId       INT,INOUT SWP_Ret_Value INT) 
BEGIN
   SELECT DoorId,DoorNo,DoorName,StationId,EquipmentId,SamplerUnitId,
Address,WorkMode,Infrared,Password,DoorControlId,OpenDelay
   FROM TBL_Door
   WHERE DoorId = v_DoorId; 

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# T_SelectEmployee]...';






DROP PROCEDURE IF EXISTS PCT_SelectEmployee;

CREATE PROCEDURE PCT_SelectEmployee(v_DepartmentId          INT    ,
v_EmployeeName          NATIONAL VARCHAR(128) ,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_index INT;
   DECLARE v_ExecStr NATIONAL VARCHAR(500);
   IF v_DepartmentId is null then
      set v_DepartmentId = '-1';
   END IF;
   IF v_EmployeeName is null then
      set v_EmployeeName = '';
   END IF;
   SET v_index = 0;        
   SET v_ExecStr = 'SELECT dep.DepartmentName ,e.* FROM TBL_Employee e INNER JOIN
   TBL_Department dep ON e.DepartmentId = dep.DepartmentId';
   IF IFNULL(v_DepartmentId,-1) <> -1 then

      SET v_index = 1;
      SET v_ExecStr = CONCAT(replace(v_ExecStr,';',' '),'SQLWAYS_EVAL# tmentId=',CAST(v_DepartmentId AS CHAR(30)),
      ' ');
   end if;



   IF IFNULL(v_EmployeeName,'') <> '' then

      IF v_index = 0 then
         SET v_ExecStr = CONCAT(replace(v_ExecStr,';',' '),'SQLWAYS_EVAL# LIKE ''%',v_EmployeeName,
         '%''');
      ELSE
         SET v_ExecStr = CONCAT(replace(v_ExecStr,';',' '),'SQLWAYS_EVAL# LIKE ''%',v_EmployeeName,
         '%''');
      end if;
   end if;


   SET v_ExecStr = CONCAT(replace(v_ExecStr,';',' '),'SQLWAYS_EVAL# ');

-- SQLWAYS_EVAL# tr
   SET @SWV_Stmt = v_ExecStr;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;


   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# T_SelectMenus]...';






DROP PROCEDURE IF EXISTS PCT_SelectMenus;

CREATE PROCEDURE PCT_SelectMenus(v_MenusName        NATIONAL VARCHAR(128) ,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_ExecStr NATIONAL VARCHAR(500);
   IF v_MenusName is null then
      set v_MenusName = '';
   END IF;
   IF IFNULL(v_MenusName,'') <> '' then

      SET v_ExecStr = 'SELECT * FROM TBL_Menus WHERE MenusName LIKE ''%'+v_MenusName+'%''';
   ELSE
      SET v_ExecStr = 'SELECT * FROM TBL_Menus';
   end if;


-- SQLWAYS_EVAL# tr
   SET @SWV_Stmt = v_ExecStr;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;


   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# T_SelectOperationGroup]...';



-- SQLWAYS_EVAL# 则获取所有


DROP PROCEDURE IF EXISTS PCT_SelectOperationGroup;

CREATE PROCEDURE PCT_SelectOperationGroup(v_GroupName        NATIONAL VARCHAR(128) ,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_ExecStr NATIONAL VARCHAR(500);
   IF v_GroupName is null then
      set v_GroupName = '';
   END IF;
   IF IFNULL(v_GroupName,'') <> '' then

      SET v_ExecStr = 'SELECT * FROM TBL_OperationGroup WHERE GroupName LIKE ''%'+v_GroupName+'%''';
   ELSE
      SET v_ExecStr = 'SELECT * FROM TBL_OperationGroup';
   end if;


-- SQLWAYS_EVAL# tr
   SET @SWV_Stmt = v_ExecStr;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;


   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# T_SelectRole]...';



-- SQLWAYS_EVAL# 限名称


DROP PROCEDURE IF EXISTS PCT_SelectRole;

CREATE PROCEDURE PCT_SelectRole(v_RoleName       NATIONAL VARCHAR(128) ,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_ExecStr NATIONAL VARCHAR(500);
   IF v_RoleName is null then
      set v_RoleName = '';
   END IF;
   IF IFNULL(v_RoleName,'') <> '' then

      SET v_ExecStr = 'SELECT * FROM TBL_UserRole WHERE RoleName LIKE ''%'+@v_RoleName+'%''';
   ELSE
      SET v_ExecStr = 'SELECT * FROM TBL_UserRole';
   end if;


-- SQLWAYS_EVAL# tr
   SET @SWV_Stmt = v_ExecStr;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;


   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# T_SelectSingleDoorTGInfo]...';






DROP PROCEDURE IF EXISTS PCT_SelectSingleDoorTGInfo;

CREATE PROCEDURE PCT_SelectSingleDoorTGInfo(v_DoorId       INT,INOUT SWP_Ret_Value INT)
BEGIN
   SELECT b.DoorId,b.TimeGroupId,b.TimeGroupType,c.ItemValue,d.Week,d.TimeSpanChar
   FROM TBL_DoorTimeGroup b
   INNER JOIN TBL_TimeGroup a ON b.TimeGroupId = a.TimeGroupId
   INNER JOIN TBL_TimeGroupSpan d ON b.TimeGroupId = d.TimeGroupId
   INNER JOIN TBL_DataItem c ON a.TimeGroupType = c.ItemId
   WHERE c.EntryId = 120
   AND b.DoorId = v_DoorId;

-- 25002231

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# T_SelectSpecialtyGroup]...';





DROP PROCEDURE IF EXISTS PCT_SelectSpecialtyGroup;


CREATE PROCEDURE PCT_SelectSpecialtyGroup(v_SpecialtyGroupName        NATIONAL VARCHAR(128) ,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_ExecStr NATIONAL VARCHAR(500);
   IF v_SpecialtyGroupName is null then
      set v_SpecialtyGroupName = '';
   END IF;
   IF IFNULL(v_SpecialtyGroupName,'') <> '' then

      SET v_ExecStr = 'SELECT * FROM TBL_SpecialtyGroup WHERE SpecialtyGroupName LIKE ''%'+@v_SpecialtyGroupName+'%''';
   ELSE
      SET v_ExecStr = 'SELECT * FROM TBL_SpecialtyGroup';
   end if;


-- SQLWAYS_EVAL# tr
   SET @SWV_Stmt = v_ExecStr;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;


   SET SWP_Ret_Value = 0;
END;



-- SELECT N'SQLWAYS_EVAL# T_SelectStationPermission]...';



-- SQLWAYS_EVAL# 列表）


DROP PROCEDURE IF EXISTS PCT_SelectStationPermission;

CREATE PROCEDURE PCT_SelectStationPermission(
-- SQLWAYS_EVAL# 必须输入
   
v_StructureGroupId          INT   ,
v_StructureId          INT  ,
v_StationName         NATIONAL VARCHAR(128) ,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_index INT;
   DECLARE v_ExecStr NATIONAL VARCHAR(500);
   IF v_StructureId is null then
      set v_StructureId = '-1';
   END IF;
   IF v_StationName is null then
      set v_StationName = '';
   END IF;
   SET v_index = 0;        
   SET v_ExecStr = CONCAT('SELECT  a.StationId, a.StationName ,c.StructureId, c.StructureName
   FROM TBL_Station a INNER JOIN TBL_StationStructureMap b ON
   a.StationId = b.StationId INNER JOIN TBL_StationStructure c ON
   b.StructureId = c.StructureId WHERE c.StructureGroupId = ',CAST(v_StructureGroupId AS CHAR(30)));
   IF IFNULL(v_StructureId,-1) <> -1 then
      SET v_ExecStr = v_ExecStr+' AND c.StructureId='+CAST(v_StructureGroupId AS CHAR(30))+' ';
   end if;



   IF IFNULL(v_StationName,'') <> '' then

      SET v_ExecStr = v_ExecStr + ' and a.StationName LIKE ''%'+v_StationName+'%''';
   end if;


   SET v_ExecStr = v_ExecStr+ ' ORDER BY c.StructureId ,a.StationName ';

-- SQLWAYS_EVAL# tr
   SET @SWV_Stmt = v_ExecStr;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;


   SET SWP_Ret_Value = 0;
END;
-- SELECT N'SQLWAYS_EVAL# T_SetBottomSyncTask]...';





DROP PROCEDURE IF EXISTS PCT_SetBottomSyncTask;

CREATE PROCEDURE PCT_SetBottomSyncTask(v_StationId INT ,
v_MonitorUnitId INT)
BEGIN

   DECLARE v_IpAddress NATIONAL VARCHAR(128);
   select   IpAddress INTO v_IpAddress FROM TSL_MonitorUnit WHERE MonitorUnitId = v_MonitorUnitId;
   INSERT INTO TBL_MUSyncTask(StationId,MonitorUnitId,SyncState,SyncRule,PlanTime,MaxRetryCount,RetryCount)
VALUES(v_StationId,v_MonitorUnitId,5,2,CURRENT_TIMESTAMP,3,0);


   DELETE FROM TBL_NewInStation WHERE IpAddress = v_IpAddress;
END;

-- SELECT N'SQLWAYS_EVAL# T_UpdateAccount]...';





DROP PROCEDURE IF EXISTS PCT_UpdateAccount;

CREATE PROCEDURE PCT_UpdateAccount(v_UserId INT   ,
v_RecordUserId	INT,
v_UserName NATIONAL VARCHAR(128)  ,
v_LogonId  NATIONAL VARCHAR(20)   ,
v_Password NATIONAL VARCHAR(128)  ,
v_Enable BOOLEAN   ,
v_MaxError INT  ,
v_Locked BOOLEAN  ,
v_ValidTime DATETIME,
v_Description NATIONAL VARCHAR(255)  ,
v_IsRemote BOOLEAN   ,
v_CenterId INT,
v_RoleIdStr	NATIONAL VARCHAR(4000),INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_SubIdStr NATIONAL VARCHAR(4000);
   DECLARE v_RoleId INT;
   DECLARE v_EndIndex INT;
   DECLARE SWV_SubIdStr_Str NATIONAL VARCHAR(4000);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;    

   SET @SWV_Error = 0;
   IF (v_RoleIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_RoleIdStr))) > 0) then

      CREATE TEMPORARY TABLE tt_UserRoleMap
      (
         UserId INT NOT NULL,
         RoleId INT NOT NULL
      );
      SET v_SubIdStr = v_RoleIdStr;
      SET v_EndIndex = LOCATE(',',v_SubIdStr);
      WHILE(v_EndIndex <> 0) DO
         SET v_RoleId = cast(SUBSTRING(v_SubIdStr,1,v_EndIndex -1) as SIGNED INTEGER);
         IF EXISTS(SELECT 1 FROM TBL_UserRole WHERE RoleId = v_RoleId) then

  INSERT tt_UserRoleMap(UserId, RoleId) VALUES(v_UserId, v_RoleId);
         end if;
         SET SWV_SubIdStr_Str = SUBSTRING(v_SubIdStr,v_EndIndex+1,LENGTH(v_SubIdStr) -v_EndIndex);
         SET v_SubIdStr = SWV_SubIdStr_Str;
         SET v_EndIndex = LOCATE(',',v_SubIdStr);
      END WHILE;
      SET v_RoleId = cast(SUBSTRING(v_SubIdStr,1,LENGTH(v_SubIdStr)) as SIGNED INTEGER);
      IF EXISTS(SELECT 1 FROM TBL_UserRole WHERE RoleId = v_RoleId) then

  INSERT tt_UserRoleMap(UserId, RoleId) VALUES(v_UserId, v_RoleId);
      end if;
   end if;


   START TRANSACTION;

-- SQLWAYS_EVAL# irst
   SET @SWV_Error = 0;
   UPDATE TBL_Account
   SET
   UserId = v_UserId,UserName = v_UserName,LogonId = v_LogonId,Password = v_Password,
   Enable = v_Enable,MaxError = v_MaxError,Locked = v_Locked,ValidTime = v_ValidTime,
   Description = v_Description,IsRemote = v_IsRemote,CenterId = v_CenterId
   WHERE UserId = v_UserId;

   IF @SWV_Error <> 0 then

      ROLLBACK;
      IF (v_RoleIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_RoleIdStr))) > 0) then
         DROP TEMPORARY TABLE IF EXISTS tt_MenusMap;
      end if;
      SET SWP_Ret_Value = -2;
   end if;


   SET @SWV_Error = 0;
   DELETE  FROM TBL_UserRoleMap WHERE UserId = v_UserId;
   IF @SWV_Error <> 0 then

      ROLLBACK;
      IF (v_RoleIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_RoleIdStr))) > 0) then
         DROP TEMPORARY TABLE IF EXISTS tt_MenusMap;
      end if;
      SET SWP_Ret_Value = -2;
   end if;


   IF (v_RoleIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_RoleIdStr))) > 0) then

      SET @SWV_Error = 0;
      INSERT TBL_UserRoleMap(UserId,    RoleId)
      SELECT UserId,   RoleId FROM tt_UserRoleMap;
      IF @SWV_Error <> 0 then

         ROLLBACK;
         IF (v_RoleIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_RoleIdStr))) > 0) then
            DROP TEMPORARY TABLE IF EXISTS tt_MenusMap;
         end if;
         SET SWP_Ret_Value = -2;
      end if;
   end if;

   COMMIT;

   IF (v_RoleIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_RoleIdStr))) > 0) then
      DROP TEMPORARY TABLE IF EXISTS tt_UserRoleMap;
   end if;

   SET SWP_Ret_Value = 1;
   LEAVE SWL_return;


   ROLLBACK;
   IF (v_RoleIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_RoleIdStr))) > 0) then
      DROP TEMPORARY TABLE IF EXISTS tt_MenusMap;
   end if;
   SET SWP_Ret_Value = -2;
END;

-- SELECT N'SQLWAYS_EVAL# T_UpdateAccountByLogonId]...';





DROP PROCEDURE IF EXISTS PCT_UpdateAccountByLogonId;

CREATE PROCEDURE PCT_UpdateAccountByLogonId(v_LogonId   	NATIONAL VARCHAR(20),
v_Password  	NATIONAL VARCHAR(128),
v_MaxError  	INT,
v_ValidTime 	DATETIME,
v_IsRemote  	BOOLEAN,
v_Locked    	BOOLEAN,
v_Enable    	BOOLEAN,
v_Description 	NATIONAL VARCHAR(255),
v_RoleId		INT)

BEGIN
   DECLARE v_UserId INT;
   select   UserId INTO v_UserId FROM TBL_Account WHERE LogonId = v_LogonId;

   IF(v_UserId IS NOT NULL) then

      IF(NOT EXISTS(SELECT 'x' FROM TBL_UserRoleMap WHERE UserId = v_UserId AND RoleId = v_RoleId)) then

         DELETE FROM TBL_UserRoleMap WHERE UserId = v_UserId;
         INSERT INTO TBL_UserRoleMap(UserId,RoleId) VALUES(v_UserId,v_RoleId);
      end if;
      UPDATE TBL_Account SET Password = v_Password,MaxError = v_MaxError,ValidTime = v_ValidTime,IsRemote = v_IsRemote,
      Locked = v_Locked,Enable = v_Enable,Description = v_Description
      WHERE UserId = v_UserId;
   end if;
END;

-- SELECT N'SQLWAYS_EVAL# T_UpdateAreaMap]...';



/*SQLWAYS_EVAL# 
PCT_UpdateAreaMap
Function: 
更改操作权限映射表PCT_UpdateAreaMap
说明：
如果GroupId不在PCT_UpdateAreaMap中不存在，则不添加映射
Parameter:
@AreaId INT,  --AreaId
@AddItemIdStr NVARCHAR(4000), --添加的操作Id，用','分隔
@DeleteItemIdStr NVARCHAR(4000)  --删除的操作Id，用','分隔

Return: INT
0:执行成功
-1：分组Id不存在
-2: 删除Id失败
-------------------------------------------------------------*/  



DROP PROCEDURE IF EXISTS PCT_UpdateAreaMap;

CREATE PROCEDURE PCT_UpdateAreaMap(v_AreaId INT,
v_AddItemIdStr NATIONAL VARCHAR(4000),
v_DeleteItemIdStr NATIONAL VARCHAR(4000),INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN

   DECLARE v_SQL NATIONAL VARCHAR(4000);
   DECLARE v_SubIdStr NATIONAL VARCHAR(4000);
   DECLARE v_StationId INT;
   DECLARE v_EndIndex INT;
   DECLARE SWV_SubIdStr_Str NATIONAL VARCHAR(4000);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;  

   SET @SWV_Error = 0;
   IF NOT EXISTS(SELECT 1 FROM TBL_Area WHERE AreaId = v_AreaId) then
-- AreaId不存在，直接返回
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;



   IF (v_AddItemIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddItemIdStr))) > 0) then


-- 使用临时表，减少事务执行时间
      CREATE TEMPORARY TABLE tt_AreaMap
      (
         AreaId INT NOT NULL,
         StationId INT NOT NULL
      );
      SET v_SubIdStr = v_AddItemIdStr;
      SET v_EndIndex = LOCATE(',',v_SubIdStr); -- 获取第一个','的位置

      WHILE(v_EndIndex <> 0) DO

-- 获取第一个Id
         SET v_StationId = cast(SUBSTRING(v_SubIdStr,1,v_EndIndex -1) as SIGNED INTEGER);
         IF EXISTS(SELECT 1 FROM TBL_Station WHERE StationId = v_StationId) then
-- SQLWAYS_EVAL# Id存在才添加映射记录

-- SQLWAYS_EVAL# 少后面事务执行的时间
  INSERT tt_AreaMap(AreaId, StationId) VALUES(v_AreaId, v_StationId);
         end if;

-- SQLWAYS_EVAL# 处理的Id串赋给@SubId
         SET SWV_SubIdStr_Str = SUBSTRING(v_SubIdStr,v_EndIndex+1,LENGTH(v_SubIdStr) -v_EndIndex);
         SET v_SubIdStr = SWV_SubIdStr_Str;
         SET v_EndIndex = LOCATE(',',v_SubIdStr);
      END WHILE;

-- 处理后一个Id
      SET v_StationId = cast(SUBSTRING(v_SubIdStr,1,LENGTH(v_SubIdStr)) as SIGNED INTEGER);
      IF EXISTS(SELECT 1 FROM TBL_Station WHERE StationId = v_StationId) then
-- SQLWAYS_EVAL# onId存在才添加映射记录

-- SQLWAYS_EVAL# 少后面事务执行的时间
  INSERT tt_AreaMap(AreaId, StationId) VALUES(v_AreaId, v_StationId);
      end if;
   end if;

   START TRANSACTION;

   IF (v_AddItemIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddItemIdStr))) > 0) then

      SET @SWV_Error = 0;
      INSERT TBL_AreaMap(AreaId,  StationId)
      SELECT AreaId,    StationId FROM tt_AreaMap;
      IF @SWV_Error <> 0 then

         ROLLBACK;
         IF (v_AddItemIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddItemIdStr))) > 0) then
            DROP TEMPORARY TABLE IF EXISTS tt_AreaMap;
         end if;
         SET SWP_Ret_Value = -2;
      end if;
   end if;

   IF (v_DeleteItemIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_DeleteItemIdStr))) > 0) then

      SET v_SQL = CONCAT('DELETE FROM TBL_AreaMap WHERE AreaId = ',CAST(v_AreaId AS CHAR(40)),' AND StationId IN( ',v_DeleteItemIdStr,' )');
      SET @SWV_Stmt = v_SQL;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
      IF @SWV_Error <> 0 then

         ROLLBACK;
         IF (v_AddItemIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddItemIdStr))) > 0) then
            DROP TEMPORARY TABLE IF EXISTS tt_AreaMap;
         end if;
         SET SWP_Ret_Value = -2;
      end if;
   end if;     

   COMMIT;

   IF (v_AddItemIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddItemIdStr))) > 0) then
      DROP TEMPORARY TABLE IF EXISTS tt_AreaMap;
   end if;

   SET SWP_Ret_Value = 1;
   LEAVE SWL_return;


   ROLLBACK;
   IF (v_AddItemIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddItemIdStr))) > 0) then
      DROP TEMPORARY TABLE IF EXISTS tt_AreaMap;
   end if;
   SET SWP_Ret_Value = -2;

END;


-- SELECT N'SQLWAYS_EVAL# T_UpdateEmployee]...';






DROP PROCEDURE IF EXISTS PCT_UpdateEmployee;

CREATE PROCEDURE PCT_UpdateEmployee(v_EmployeeId INT   ,
v_DepartmentId INT   ,
v_EmployeeName NATIONAL VARCHAR(128)  ,
v_EmployeeType INT   ,
v_EmployeeTitle INT   ,
v_JobNumber NATIONAL VARCHAR(20)  ,
v_Gender INT   ,
v_Mobile NATIONAL VARCHAR(50)  ,
v_Phone NATIONAL VARCHAR(50)  ,
v_Email NATIONAL VARCHAR(128)  ,
v_Address NATIONAL VARCHAR(255)  ,
v_PostAddress NATIONAL VARCHAR(255)  ,
v_Enable BOOLEAN   ,
v_Description NATIONAL VARCHAR(255)  ,
v_IsAddTempUser BOOLEAN,
v_UserValidTime INT)
BEGIN
   IF EXISTS(SELECT 'X' FROM TBL_Account WHERE UserId = v_EmployeeId AND UserName <> v_EmployeeName) then

      UPDATE TBL_Account
      SET
      UserName = v_EmployeeName
      WHERE UserId = v_EmployeeId;
   end if; 


   UPDATE
   TBL_Employee
   SET
   DepartmentId = v_DepartmentId,EmployeeName = v_EmployeeName,EmployeeType = v_EmployeeType,
   EmployeeTitle = v_EmployeeTitle,JobNumber = v_JobNumber,
   Gender = v_Gender,Mobile = v_Mobile,Phone = v_Phone,Email = v_Email,
   Address = v_Address,PostAddress = v_PostAddress,Enable = v_Enable,
   Description = v_Description,IsAddTempUser = v_IsAddTempUser,UserValidTime = v_UserValidTime
   WHERE EmployeeId = v_EmployeeId;
END;



-- SELECT N'SQLWAYS_EVAL# T_UpdatePermissionGroup]...';



-- SQLWAYS_EVAL# 组权限、片区、专业(设备类）、界面权限



DROP PROCEDURE IF EXISTS PCT_UpdatePermissionGroup;

CREATE PROCEDURE PCT_UpdatePermissionGroup(v_GroupId   INT,
v_Type      INT,
v_GroupName NATIONAL VARCHAR(128),
v_Description  NATIONAL VARCHAR(255))

BEGIN
-- SQLWAYS_EVAL# (设备类）、界面权限
   IF v_Type = 1 then

      UPDATE TBL_OperationGroup SET GroupName = v_GroupName,Description = v_Description
      WHERE GroupId = v_GroupId;
   end if;

   IF v_Type = 2 then

      UPDATE TBL_Area SET AreaName = v_GroupName,Description = v_Description
      WHERE AreaId = v_GroupId;
   end if;

   IF v_Type = 3 then

      UPDATE TBL_SpecialtyGroup SET SpecialtyGroupName = v_GroupName,Description = v_Description
      WHERE SpecialtyGroupId = v_GroupId;
   end if;

   IF v_Type = 4 then

      UPDATE TBL_Menus SET MenusName = v_GroupName,Description = v_Description
      WHERE MenusId = v_GroupId;
   end if;
END;

-- SELECT N'SQLWAYS_EVAL# T_UpdateSpecialtyGroup]...';



/*SQLWAYS_EVAL# 
PCT_UpdateSpecialtyGroup
Function: 
更改操作权限映射表TBL_SpecialtyGroupMap
说明：
如果SpecialtyGroupId不在TBL_SpecialtyGroup中不存在，则不添加映射
Parameter:
@SpecialtyGroupId INT,  --分组Id
@AddItemIdStr NVARCHAR(4000), --添加的操作Id，用','分隔
@DeleteItemIdStr NVARCHAR(4000)  --删除的操作Id，用','分隔

Return: INT
0:执行成功
-1：分组Id不存在
-2: 删除Id失败
-------------------------------------------------------------*/  



DROP PROCEDURE IF EXISTS PCT_UpdateSpecialtyGroup;

CREATE PROCEDURE PCT_UpdateSpecialtyGroup(v_SpecialtyGroupId INT,
v_AddItemIdStr NATIONAL VARCHAR(4000),
v_DeleteItemIdStr NATIONAL VARCHAR(4000),INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN

   DECLARE v_SQL NATIONAL VARCHAR(4000);
   DECLARE v_SubIdStr NATIONAL VARCHAR(4000);
   DECLARE v_EntryItemId INT;
   DECLARE v_EndIndex INT;
   DECLARE SWV_SubIdStr_Str NATIONAL VARCHAR(4000);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;  

   SET @SWV_Error = 0;
   IF NOT EXISTS(SELECT 1 FROM TBL_SpecialtyGroup WHERE SpecialtyGroupId = v_SpecialtyGroupId) then
-- SQLWAYS_EVAL# pId不存在，直接返回
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;



   IF (v_AddItemIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddItemIdStr))) > 0) then


-- 使用临时表，减少事务执行时间
      CREATE TEMPORARY TABLE tt_SpecialtyGroupMap
      (
         SpecialtyGroupId INT NOT NULL,
         EntryItemId INT NOT NULL
      );
      SET v_SubIdStr = v_AddItemIdStr;
      SET v_EndIndex = LOCATE(',',v_SubIdStr); -- 获取第一个','的位置

      WHILE(v_EndIndex <> 0) DO

-- 获取第一个Id
         SET v_EntryItemId = cast(SUBSTRING(v_SubIdStr,1,v_EndIndex -1) as SIGNED INTEGER);

-- SQLWAYS_EVAL# 少后面事务执行的时间
         INSERT tt_SpecialtyGroupMap(SpecialtyGroupId, EntryItemId) VALUES(v_SpecialtyGroupId, v_EntryItemId);

-- SQLWAYS_EVAL# 处理的Id串赋给@SubId

         SET SWV_SubIdStr_Str = SUBSTRING(v_SubIdStr,v_EndIndex+1,LENGTH(v_SubIdStr) -v_EndIndex);
         SET v_SubIdStr = SWV_SubIdStr_Str;
         SET v_EndIndex = LOCATE(',',v_SubIdStr);
      END WHILE;

-- 处理后一个Id
      SET v_EntryItemId = cast(SUBSTRING(v_SubIdStr,1,LENGTH(v_SubIdStr)) as SIGNED INTEGER);

-- SQLWAYS_EVAL# 少后面事务执行的时间
      INSERT tt_SpecialtyGroupMap(SpecialtyGroupId, EntryItemId) VALUES(v_SpecialtyGroupId, v_EntryItemId);
   end if;

   START TRANSACTION;

   IF (v_AddItemIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddItemIdStr))) > 0) then

      SET @SWV_Error = 0;
      INSERT TBL_SpecialtyGroupMap(SpecialtyGroupId,   EntryItemId, Operation)
      SELECT SpecialtyGroupId, EntryItemId, '8' Operation FROM tt_SpecialtyGroupMap;
      IF @SWV_Error <> 0 then

         ROLLBACK;
         IF (v_AddItemIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddItemIdStr))) > 0) then

            DROP TEMPORARY TABLE IF EXISTS tt_SpecialtyGroupMap;
         end if;
         SET SWP_Ret_Value = -2;
      end if;
   end if;

   SET @SWV_Error = 0;
   IF (v_DeleteItemIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_DeleteItemIdStr))) > 0) then

      SET v_SQL = CONCAT('DELETE FROM TBL_SpecialtyGroupMap WHERE SpecialtyGroupId = ',CAST(v_SpecialtyGroupId AS CHAR(40)),' AND EntryItemId IN( ',v_DeleteItemIdStr,' )');
      SET @SWV_Stmt = v_SQL;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
      IF @SWV_Error <> 0 then

         ROLLBACK;
         IF (v_AddItemIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddItemIdStr))) > 0) then

            DROP TEMPORARY TABLE IF EXISTS tt_SpecialtyGroupMap;
         end if;
         SET SWP_Ret_Value = -2;
      end if;
   end if;     

   IF @SWV_Error <> 0 then

      ROLLBACK;
      IF (v_AddItemIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddItemIdStr))) > 0) then

         DROP TEMPORARY TABLE IF EXISTS tt_SpecialtyGroupMap;
      end if;
      SET SWP_Ret_Value = -2;
   end if;

   COMMIT;

   IF (v_AddItemIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddItemIdStr))) > 0) then

      DROP TEMPORARY TABLE IF EXISTS tt_SpecialtyGroupMap;
   end if;

   SET SWP_Ret_Value = 1;
   LEAVE SWL_return;


   ROLLBACK;
   IF (v_AddItemIdStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddItemIdStr))) > 0) then

      DROP TEMPORARY TABLE IF EXISTS tt_SpecialtyGroupMap;
   end if;
   SET SWP_Ret_Value = -2;

END;

-- SELECT N'SQLWAYS_EVAL# T_UpdateTimeGroupTemplate]...';






DROP PROCEDURE IF EXISTS PCT_UpdateTimeGroupTemplate;

CREATE PROCEDURE PCT_UpdateTimeGroupTemplate(v_TimeGroupId    INT,
v_TimeGroupName	NATIONAL VARCHAR(128),
v_SpanStr1	NATIONAL VARCHAR(250),
v_SpanStr2	NATIONAL VARCHAR(250),
v_SpanStr3	NATIONAL VARCHAR(250),
v_SpanStr4	NATIONAL VARCHAR(250),
v_SpanStr5	NATIONAL VARCHAR(250),
v_SpanStr6	NATIONAL VARCHAR(250),
v_SpanStr7	NATIONAL VARCHAR(250),INOUT SWP_Ret_Value INT)

   SWL_return:
BEGIN
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   START TRANSACTION;

   SET @SWV_Error = 0;
   UPDATE TBL_TimeGroup SET TimeGroupName = v_TimeGroupName,LastUpdateDate = CURRENT_TIMESTAMP WHERE TimeGroupId = v_TimeGroupId;
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if; 				


   SET @SWV_Error = 0;
   UPDATE TBL_TimeGroupSpan SET TimeSpanChar = v_SpanStr1,LastUpdateDate = CURRENT_TIMESTAMP
   WHERE TimeGroupId = v_TimeGroupId AND Week = 1;
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if;  


   SET @SWV_Error = 0;
   UPDATE TBL_TimeGroupSpan SET TimeSpanChar = v_SpanStr2,LastUpdateDate = CURRENT_TIMESTAMP
   WHERE TimeGroupId = v_TimeGroupId AND Week = 2;
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if; 


   SET @SWV_Error = 0;
   UPDATE TBL_TimeGroupSpan SET TimeSpanChar = v_SpanStr3,LastUpdateDate = CURRENT_TIMESTAMP
   WHERE TimeGroupId = v_TimeGroupId AND Week = 3;
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if; 


   SET @SWV_Error = 0;
   UPDATE TBL_TimeGroupSpan SET TimeSpanChar = v_SpanStr4,LastUpdateDate = CURRENT_TIMESTAMP
   WHERE TimeGroupId = v_TimeGroupId AND Week = 4;
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if; 


   SET @SWV_Error = 0;
   UPDATE TBL_TimeGroupSpan SET TimeSpanChar = v_SpanStr5,LastUpdateDate = CURRENT_TIMESTAMP
   WHERE TimeGroupId = v_TimeGroupId AND Week = 5;
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if; 


   SET @SWV_Error = 0;
   UPDATE TBL_TimeGroupSpan SET TimeSpanChar = v_SpanStr6,LastUpdateDate = CURRENT_TIMESTAMP
   WHERE TimeGroupId = v_TimeGroupId AND Week = 6;
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if; 


   SET @SWV_Error = 0;
   UPDATE TBL_TimeGroupSpan SET TimeSpanChar = v_SpanStr7,LastUpdateDate = CURRENT_TIMESTAMP
   WHERE TimeGroupId = v_TimeGroupId AND Week = 7;
   IF @SWV_Error <> 0 then 
      ROLLBACK;
      SET SWP_Ret_Value = -1;
   end if; 	

   COMMIT;

   SET SWP_Ret_Value = 0;
   LEAVE SWL_return;

   ROLLBACK;
   SET SWP_Ret_Value = -1;
END;

-- SELECT N'SQLWAYS_EVAL# T_UpdateUserRole]...';






DROP PROCEDURE IF EXISTS PCT_UpdateUserRole;

CREATE PROCEDURE PCT_UpdateUserRole(v_RoleId    INT,
v_RoleName  NATIONAL VARCHAR(128),
v_Description  NATIONAL VARCHAR(255))

BEGIN
   UPDATE TBL_UserRole SET RoleName = v_RoleName,Description = v_Description
   WHERE RoleId = v_RoleId;
END;

-- SELECT N'SQLWAYS_EVAL# T_UpdateUserRoleRightMap]...';


DROP PROCEDURE IF EXISTS PCT_UpdateUserRoleRightMap;

CREATE PROCEDURE PCT_UpdateUserRoleRightMap(v_RoleId INT,
v_RecordUserId	INT,  -- 操作人员Id
v_AddAccountStr NATIONAL VARCHAR(4000) ,
v_DeleteAccountStr NATIONAL VARCHAR(4000) ,
v_AddPermissionGroupStr NATIONAL VARCHAR(4000) ,
v_DeletePermissionGroupStr NATIONAL VARCHAR(4000),INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/* liangyj
   DECLARE v_SQL NATIONAL VARCHAR(4000);
   DECLARE v_SubIdStr NATIONAL VARCHAR(4000);
   DECLARE v_UserId INT;
   DECLARE v_OperationId INT;
   DECLARE v_OperationType INT;
   DECLARE v_EndIndex INT;  
   DECLARE v_MapStr NATIONAL VARCHAR(255);
   DECLARE v_MidIndex INT;
   DECLARE v_CurrentTime DATETIME;

   DECLARE SWV_SubIdStr_Str NATIONAL VARCHAR(4000);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END; 

   SET @SWV_Error = 0;
   IF NOT EXISTS(SELECT 1 FROM TBL_UserRole WHERE RoleId = v_RoleId) then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

   SET v_CurrentTime = CURRENT_TIMESTAMP;


   IF (v_AddAccountStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddAccountStr))) > 0) then



      CREATE TEMPORARY TABLE tt_UserRoleMap
      (
         RoleId INT NOT NULL,
         UserId INT NOT NULL,
         UserName NATIONAL VARCHAR(255)
      );
      SET v_SubIdStr = v_AddAccountStr;
      SET v_EndIndex = LOCATE(',',v_SubIdStr); 

      WHILE(v_EndIndex <> 0) DO


         SET v_UserId = cast(SUBSTRING(v_SubIdStr,1,v_EndIndex -1) as SIGNED INTEGER);
         IF EXISTS(SELECT 1 FROM TBL_Account WHERE UserId = v_UserId) then



  INSERT tt_UserRoleMap(RoleId, UserId, UserName)
            SELECT v_RoleId, v_UserId, UserName
            FROM TBL_Account WHERE UserId = v_UserId;
         end if;


         SET SWV_SubIdStr_Str = SUBSTRING(v_SubIdStr,v_EndIndex+1,LENGTH(v_SubIdStr) -v_EndIndex);
         SET v_SubIdStr = SWV_SubIdStr_Str;
         SET v_EndIndex = LOCATE(',',v_SubIdStr);
      END WHILE;


      SET v_UserId = cast(v_SubIdStr as SIGNED INTEGER);
      IF EXISTS(SELECT 1 FROM TBL_Account WHERE UserId = v_UserId) then



  INSERT tt_UserRoleMap(RoleId, UserId, UserName)
         SELECT v_RoleId, v_UserId, UserName
         FROM TBL_Account WHERE UserId = v_UserId;
      end if;
   end if;       

   IF (v_AddPermissionGroupStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddPermissionGroupStr))) > 0) then
   

      CREATE TEMPORARY TABLE tt_AddUserRoleRight
      (
         RoleId INT NOT NULL,
         OperationId INT NOT NULL,
         OperationType INT NOT NULL,
         OperationName NATIONAL VARCHAR(255)
      );
      SET v_SubIdStr = v_AddPermissionGroupStr;
      SET v_EndIndex = LOCATE(',',v_SubIdStr); 

      WHILE(v_EndIndex <> 0) DO


         SET v_MapStr = SUBSTRING(v_SubIdStr,1,v_EndIndex -1);
         SET v_MidIndex = LOCATE(':',v_MapStr); 

         SET v_OperationId = cast(SUBSTRING(v_MapStr,1,v_MidIndex -1) as SIGNED INTEGER);  -- 123:567
         SET v_OperationType = cast(SUBSTRING(v_MapStr,v_MidIndex+1,LENGTH(v_MapStr) -v_MidIndex) as SIGNED INTEGER);


         IF v_OperationType = 1 then

            IF EXISTS(SELECT 1 FROM TBL_OperationGroup WHERE GroupId = v_OperationId) then
 INSERT tt_AddUserRoleRight(RoleId, OperationId, OperationType, OperationName)
               SELECT v_RoleId, v_OperationId, v_OperationType, CONCAT('操作权限:',GroupName)
               FROM TBL_OperationGroup WHERE GroupId = v_OperationId;
            end if;
        ELSE 
            IF v_OperationType = 2 then

               IF EXISTS(SELECT 1 FROM TBL_Area WHERE AreaId = v_OperationId) then
 INSERT tt_AddUserRoleRight(RoleId, OperationId, OperationType, OperationName)
                  SELECT v_RoleId, v_OperationId, v_OperationType,CONCAT('片区权限:',AreaName)
                  FROM TBL_Area WHERE AreaId = v_OperationId;
               end if;
            ELSE 
               IF v_OperationType = 3 then

                  IF EXISTS(SELECT 1 FROM TBL_SpecialtyGroup WHERE SpecialtyGroupId = v_OperationId) then
 INSERT tt_AddUserRoleRight(RoleId, OperationId, OperationType, OperationName)
                     SELECT v_RoleId, v_OperationId, v_OperationType, CONCAT('专业权限:',SpecialtyGroupName)
                     FROM TBL_SpecialtyGroup WHERE SpecialtyGroupId = v_OperationId;
                  end if;
               ELSE 
                  IF v_OperationType = 4 then

                     IF EXISTS(SELECT 1 FROM TBL_Menus WHERE MenusId = v_OperationId) then
 INSERT tt_AddUserRoleRight(RoleId, OperationId, OperationType, OperationName)
                        SELECT v_RoleId, v_OperationId, v_OperationType, CONCAT('菜单权限:',MenusName)
                        FROM TBL_Menus WHERE MenusId = v_OperationId;
                     end if;
                  end if;
               end if;
            end if;
         end if;

         SET SWV_SubIdStr_Str = SUBSTRING(v_SubIdStr,v_EndIndex+1,LENGTH(v_SubIdStr) -v_EndIndex);
         SET v_SubIdStr = SWV_SubIdStr_Str;
         SET v_EndIndex = LOCATE(',',v_SubIdStr);
      END WHILE;

      SET v_MapStr = v_SubIdStr;
      SET v_MidIndex = LOCATE(':',v_MapStr);

      SET v_OperationId = cast(SUBSTRING(v_MapStr,1,v_MidIndex -1) as SIGNED INTEGER);  -- 123:567
      SET v_OperationType = cast(SUBSTRING(v_MapStr,v_MidIndex+1,LENGTH(v_MapStr) -v_MidIndex) as SIGNED INTEGER);
      IF v_OperationType = 1 then

         IF EXISTS(SELECT 1 FROM TBL_OperationGroup WHERE GroupId = v_OperationId) then
 INSERT tt_AddUserRoleRight(RoleId, OperationId, OperationType, OperationName)
            SELECT v_RoleId, v_OperationId, v_OperationType, CONCAT('操作权限:',GroupName)
            FROM TBL_OperationGroup WHERE GroupId = v_OperationId;
         end if;
      ELSE 
         IF v_OperationType = 2 then

            IF EXISTS(SELECT 1 FROM TBL_Area WHERE AreaId = v_OperationId) then
 INSERT tt_AddUserRoleRight(RoleId, OperationId, OperationType, OperationName)
               SELECT v_RoleId, v_OperationId, v_OperationType,CONCAT('片区权限:',AreaName)
               FROM TBL_Area WHERE AreaId = v_OperationId;
            end if;
         ELSE 
            IF v_OperationType = 3 then

               IF EXISTS(SELECT 1 FROM TBL_SpecialtyGroup WHERE SpecialtyGroupId = v_OperationId) then
 INSERT tt_AddUserRoleRight(RoleId, OperationId, OperationType, OperationName)
                  SELECT v_RoleId, v_OperationId, v_OperationType, CONCAT('专业权限:',SpecialtyGroupName)
                  FROM TBL_SpecialtyGroup WHERE SpecialtyGroupId = v_OperationId;
               end if;
            ELSE 
               IF v_OperationType = 4 then

                  IF EXISTS(SELECT 1 FROM TBL_Menus WHERE MenusId = v_OperationId) then
 INSERT tt_AddUserRoleRight(RoleId, OperationId, OperationType, OperationName)
                     SELECT v_RoleId, v_OperationId, v_OperationType, CONCAT('菜单权限:',MenusName)
                     FROM TBL_Menus WHERE MenusId = v_OperationId;
                  end if;
               end if;
            end if;
         end if;
      end if;
   end if;

   IF (v_DeletePermissionGroupStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_DeletePermissionGroupStr))) > 0) then
         
      CREATE TEMPORARY TABLE tt_DelUserRoleRight
      (
         RoleId INT NOT NULL,
         OperationId INT NOT NULL,
         OperationType INT NOT NULL,
         OperationName NATIONAL VARCHAR(255)
      );
      SET v_SubIdStr = v_DeletePermissionGroupStr;
      SET v_EndIndex = LOCATE(',',v_SubIdStr); 

      WHILE(v_EndIndex <> 0) DO

         SET v_MapStr = SUBSTRING(v_SubIdStr,1,v_EndIndex -1);
         SET v_MidIndex = LOCATE(':',v_MapStr); 

         SET v_OperationId = cast(SUBSTRING(v_MapStr,1,v_MidIndex -1) as SIGNED INTEGER);  -- 123:567
         SET v_OperationType = cast(SUBSTRING(v_MapStr,v_MidIndex+1,LENGTH(v_MapStr) -v_MidIndex) as SIGNED INTEGER);
         INSERT tt_DelUserRoleRight(RoleId, OperationId, OperationType, OperationName)
VALUES(v_RoleId, v_OperationId, v_OperationType,
CASE
         WHEN v_OperationType = 1 THEN CONCAT('操作权限,ID=', CAST(v_OperationId AS CHAR(40)))
         WHEN v_OperationType = 2 THEN CONCAT('片区权限,ID=', CAST(v_OperationId AS CHAR(40)))
         WHEN v_OperationType = 3 THEN CONCAT('专业权限,ID=', CAST(v_OperationId AS CHAR(40)))
         WHEN v_OperationType = 3 THEN CONCAT('菜单权限,ID=', CAST(v_OperationId AS CHAR(40)))
         END);

         IF v_OperationType = 1 then

            UPDATE tt_DelUserRoleRight, TBL_OperationGroup A SET tt_DelUserRoleRight.OperationName = CONCAT('操作权限:',A.GroupName)
            WHERE  A.GroupId = v_OperationId;
         ELSE 
            IF v_OperationType = 2 then

               UPDATE tt_DelUserRoleRight, TBL_Area A SET tt_DelUserRoleRight.OperationName = CONCAT('片区权限:',A.AreaName)
               WHERE A.AreaId = v_OperationId;
            ELSE 
               IF v_OperationType = 3 then

                  UPDATE tt_DelUserRoleRight, TBL_SpecialtyGroup A SET tt_DelUserRoleRight.OperationName = CONCAT('专业权限:',A.SpecialtyGroupName)
                  WHERE A.SpecialtyGroupId = v_OperationId;
               ELSE 
                  IF v_OperationType = 4 then

                     UPDATE tt_DelUserRoleRight, TBL_Menus A SET tt_DelUserRoleRight.OperationName = CONCAT('菜单权限:',A.MenusName)
                     WHERE A.MenusId = v_OperationId;
                  end if;
               end if;
            end if;
         end if;

         SET SWV_SubIdStr_Str = SUBSTRING(v_SubIdStr,v_EndIndex+1,LENGTH(v_SubIdStr) -v_EndIndex);
         SET v_SubIdStr = SWV_SubIdStr_Str;
         SET v_EndIndex = LOCATE(',',v_SubIdStr);
      END WHILE;

      SET v_MapStr = v_SubIdStr;
      SET v_MidIndex = LOCATE(':',v_MapStr);

      SET v_OperationId = cast(SUBSTRING(v_MapStr,1,v_MidIndex -1) as SIGNED INTEGER);  -- 123:567
      SET v_OperationType = cast(SUBSTRING(v_MapStr,v_MidIndex+1,LENGTH(v_MapStr) -v_MidIndex) as SIGNED INTEGER);
      INSERT tt_DelUserRoleRight(RoleId, OperationId, OperationType, OperationName)
VALUES(v_RoleId, v_OperationId, v_OperationType,
CASE
      WHEN v_OperationType = 1 THEN CONCAT('操作权限,ID=', CAST(v_OperationId AS CHAR(40)))
      WHEN v_OperationType = 2 THEN CONCAT('片区权限,ID=', CAST(v_OperationId AS CHAR(40)))
      WHEN v_OperationType = 3 THEN CONCAT('专业权限,ID=', CAST(v_OperationId AS CHAR(40)))
      WHEN v_OperationType = 3 THEN CONCAT('菜单权限,ID=', CAST(v_OperationId AS CHAR(40)))
      END);

      IF v_OperationType = 1 then

         UPDATE tt_DelUserRoleRight, TBL_OperationGroup A SET tt_DelUserRoleRight.OperationName = CONCAT('操作权限:',A.GroupName)
         WHERE  A.GroupId = v_OperationId;
      ELSE 
         IF v_OperationType = 2 then

            UPDATE tt_DelUserRoleRight, TBL_Area A SET tt_DelUserRoleRight.OperationName = CONCAT('片区权限:',A.AreaName)
            WHERE A.AreaId = v_OperationId;
         ELSE 
            IF v_OperationType = 3 then

               UPDATE tt_DelUserRoleRight, TBL_SpecialtyGroup A SET tt_DelUserRoleRight.OperationName = CONCAT('专业权限:',A.SpecialtyGroupName)
               WHERE A.SpecialtyGroupId = v_OperationId;
            ELSE 
               IF v_OperationType = 4 then

                  UPDATE tt_DelUserRoleRight, TBL_Menus A SET tt_DelUserRoleRight.OperationName = CONCAT('菜单权限:',A.MenusName)
                  WHERE A.MenusId = v_OperationId;
               end if;
            end if;
         end if;
      end if;
   end if; 

   START TRANSACTION;

   IF (v_AddAccountStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddAccountStr))) > 0) then

      SET @SWV_Error = 0;
      INSERT TBL_UserRoleMap(RoleId, UserId)
      SELECT RoleId, UserId FROM tt_UserRoleMap;
      IF @SWV_Error <> 0 then

         ROLLBACK;
         IF (v_AddAccountStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddAccountStr))) > 0) then
            DROP TEMPORARY TABLE IF EXISTS tt_UserRoleMap;
         end if;
         IF (v_AddPermissionGroupStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddPermissionGroupStr))) > 0) then
            DROP TEMPORARY TABLE IF EXISTS tt_AddUserRoleRight;
         end if;
         IF (v_DeletePermissionGroupStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_DeletePermissionGroupStr))) > 0) then
            DROP TEMPORARY TABLE IF EXISTS tt_DelUserRoleRight;
         end if;
         SET SWP_Ret_Value = -2;
      end if;
   end if;

   IF (v_DeleteAccountStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_DeleteAccountStr))) > 0) then

      SET v_SQL = CONCAT('DELETE FROM TBL_UserRoleMap WHERE RoleId = ',CAST(v_RoleId AS CHAR(40)),' AND UserId IN( ',v_DeleteAccountStr,' )');
      SET @SWV_Stmt = v_SQL;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
      IF @SWV_Error <> 0 then

         ROLLBACK;
         IF (v_AddAccountStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddAccountStr))) > 0) then
            DROP TEMPORARY TABLE IF EXISTS tt_UserRoleMap;
         end if;
         IF (v_AddPermissionGroupStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddPermissionGroupStr))) > 0) then
            DROP TEMPORARY TABLE IF EXISTS tt_AddUserRoleRight;
         end if;
         IF (v_DeletePermissionGroupStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_DeletePermissionGroupStr))) > 0) then
            DROP TEMPORARY TABLE IF EXISTS tt_DelUserRoleRight;
         end if;
         SET SWP_Ret_Value = -2;
      end if;
   end if;     

   IF (v_AddPermissionGroupStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddPermissionGroupStr))) > 0) then

      SET @SWV_Error = 0;
      INSERT TBL_UserRoleRight(RoleId, OperationId, OperationType)
      SELECT RoleId, OperationId, OperationType FROM tt_AddUserRoleRight;
      IF @SWV_Error <> 0 then

         ROLLBACK;
         IF (v_AddAccountStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddAccountStr))) > 0) then
            DROP TEMPORARY TABLE IF EXISTS tt_UserRoleMap;
         end if;
         IF (v_AddPermissionGroupStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddPermissionGroupStr))) > 0) then
            DROP TEMPORARY TABLE IF EXISTS tt_AddUserRoleRight;
         end if;
         IF (v_DeletePermissionGroupStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_DeletePermissionGroupStr))) > 0) then
            DROP TEMPORARY TABLE IF EXISTS tt_DelUserRoleRight;
         end if;
         SET SWP_Ret_Value = -2;
      end if;
   end if;

   IF (v_DeletePermissionGroupStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_DeletePermissionGroupStr))) > 0) then


      SET @SWV_Error = 0;
      DELETE TBL_UserRoleRight A FROM TBL_UserRoleRight A
      WHERE EXISTS(SELECT 1 FROM tt_DelUserRoleRight B
      WHERE A.RoleId = B.RoleId AND A.OperationId = B.OperationId
      AND A.OperationType = B.OperationType);
      IF @SWV_Error <> 0 then

         ROLLBACK;
         IF (v_AddAccountStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddAccountStr))) > 0) then
            DROP TEMPORARY TABLE IF EXISTS tt_UserRoleMap;
         end if;
         IF (v_AddPermissionGroupStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddPermissionGroupStr))) > 0) then
            DROP TEMPORARY TABLE IF EXISTS tt_AddUserRoleRight;
         end if;
         IF (v_DeletePermissionGroupStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_DeletePermissionGroupStr))) > 0) then
            DROP TEMPORARY TABLE IF EXISTS tt_DelUserRoleRight;
         end if;
         SET SWP_Ret_Value = -2;
      end if;
   end if;  

   COMMIT;

   IF (v_AddAccountStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddAccountStr))) > 0) then

  INSERT TBL_OperationDetail(UserId, ObjectId,
ObjectType, PropertyName, OperationTime, OperationType, OldValue, NewValue)
      SELECT v_RecordUserId, CONCAT(CAST(RoleId AS CHAR(40)),'.',CAST(UserId AS CHAR(40))),
30, '角色分配人员', v_CurrentTime, '新增', '', UserName
      FROM tt_UserRoleMap;
   end if;


   IF (v_DeleteAccountStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_DeleteAccountStr))) > 0) then

      SET v_SQL = CONCAT('SQLWAYS_EVAL# ObjectId, ObjectType, PropertyName, OperationTime, OperationType, OldValue, NewValue)',' SELECT ',CAST(v_RecordUserId AS CHAR(40)),
      ', ','''',CAST(v_RoleId AS CHAR(40)),'SQLWAYS_EVAL# UserId) , ',
      'SQLWAYS_EVAL# ','''',DATE_FORMAT(v_CurrentTime,'%m/%d/%Y'),'SQLWAYS_EVAL# ',
      'SQLWAYS_EVAL# WHERE UserId IN (',v_DeleteAccountStr,')');
      SET @SWV_Stmt = v_SQL;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
   end if;     


   IF (v_AddPermissionGroupStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddPermissionGroupStr))) > 0) then

  INSERT TBL_OperationDetail(UserId, ObjectId,
ObjectType, PropertyName, OperationTime, OperationType, OldValue, NewValue)
      SELECT v_RecordUserId, CONCAT(CAST(v_RoleId AS CHAR(40)),'.',CAST(OperationId AS CHAR(40)),'.',CAST(OperationType AS CHAR(40))),
30, '角色分配的权限', v_CurrentTime, '新增', '', OperationName
      FROM tt_AddUserRoleRight;
   end if;

   IF (v_DeletePermissionGroupStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_DeletePermissionGroupStr))) > 0) then

  INSERT TBL_OperationDetail(UserId, ObjectId,
ObjectType, PropertyName, OperationTime, OperationType, OldValue, NewValue)
      SELECT v_RecordUserId, CONCAT(CAST(v_RoleId AS CHAR(40)),'.',CAST(OperationId AS CHAR(40)),'.',CAST(OperationType AS CHAR(40))),
30, '角色分配的权限', v_CurrentTime, '删除', OperationName, ''
      FROM tt_DelUserRoleRight;
   end if;  


   IF (v_AddAccountStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddAccountStr))) > 0) then
      DROP TEMPORARY TABLE IF EXISTS tt_UserRoleMap;
   end if;

   IF (v_AddPermissionGroupStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddPermissionGroupStr))) > 0) then
      DROP TEMPORARY TABLE IF EXISTS tt_AddUserRoleRight;
   end if;

   IF (v_DeletePermissionGroupStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_DeletePermissionGroupStr))) > 0) then
      DROP TEMPORARY TABLE IF EXISTS tt_DelUserRoleRight;
   end if;

   SET SWP_Ret_Value = 1;
   LEAVE SWL_return;


   ROLLBACK;

   IF (v_AddAccountStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddAccountStr))) > 0) then
      DROP TEMPORARY TABLE IF EXISTS tt_UserRoleMap;
   end if;

   IF (v_AddPermissionGroupStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_AddPermissionGroupStr))) > 0) then
      DROP TEMPORARY TABLE IF EXISTS tt_AddUserRoleRight;
   end if;

   IF (v_DeletePermissionGroupStr IS NOT NULL) AND (LENGTH(ltrim(rtrim(v_DeletePermissionGroupStr))) > 0) then
      DROP TEMPORARY TABLE IF EXISTS tt_DelUserRoleRight;
   end if;
*/
   SET SWP_Ret_Value = -2;

END;
-- SELECT N'SQLWAYS_EVAL# L_ReplicateConfig]...';




DROP PROCEDURE IF EXISTS PDL_ReplicateConfig;


CREATE PROCEDURE PDL_ReplicateConfig(INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_CenterId INT;
   DECLARE v_CenterIdStr NATIONAL VARCHAR(10);
   select   StructureId INTO v_CenterId FROM TBL_StationStructure WHERE StructureGroupId = 0 AND ParentStructureId = 0;
   SET v_CenterIdStr = CAST(v_CenterId%1000 AS CHAR(10));

-- SQLWAYS_EVAL# ion--
   INSERT TBL_ReplicateLogs(LogStr)
VALUES(CONCAT('SQLWAYS_EVAL# 1 FROM sysobjects WHERE id = object_id(''TBL_TempStation',v_CenterIdStr,'SQLWAYS_EVAL# TBL_TempStation', v_CenterIdStr));


   INSERT TBL_ReplicateLogs(LogStr)
VALUES(CONCAT('SQLWAYS_EVAL# TBL_TempStation',v_CenterIdStr, 'SQLWAYS_EVAL# WHERE 1 = 2'));


   INSERT TBL_ReplicateLogs(LogStr)
VALUES(CONCAT('SQLWAYS_EVAL# INDEX TBL_TempStation_Idx ON TBL_TempStation',v_CenterIdStr, 'SQLWAYS_EVAL# ignore_dup_key'));


   INSERT TBL_ReplicateLogs(LogStr)
   SELECT CONCAT('SQLWAYS_EVAL# L_TempStation',v_CenterIdStr,'(','StationId',',StationName',
   ',Latitude',',Longitude',',SetupTime',',CompanyId',',ConnectState',
   ',UpdateTime','SQLWAYS_EVAL# ry',',StationGrade',',StationState',
   ',ContactId',',SupportTime',',OnWayTime',',SurplusTime',',FloorNo',
   ',PropList',',Acreage',',BuildingType',',ContainNode',',Description',
   ',BordNumber',',CenterId',',Enable',',StartTime',',EndTime',',ProjectName',
   ',ContractNo',',InstallTime',') VALUES ( ',CASE WHEN StationId IS NULL THEN 'NULL' ELSE CAST(StationId AS CHAR(255)) END,',',CASE WHEN StationName IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(StationName AS CHAR(255)),'''') END,
   ',',CASE WHEN Latitude IS NULL THEN 'NULL' ELSE CAST(Latitude AS CHAR(255)) END,',',CASE WHEN Longitude IS NULL THEN 'NULL' ELSE CAST(Longitude AS CHAR(255)) END,',',CASE WHEN SetupTime IS NULL THEN 'NULL' ELSE CONCAT('''',DATE_FORMAT(SetupTime,'%Y-%m-%d %T'),'''') END,
   ',',CASE WHEN CompanyId IS NULL THEN 'NULL' ELSE CAST(CompanyId AS CHAR(255)) END,',',CASE WHEN ConnectState IS NULL THEN 'NULL' ELSE CAST(ConnectState AS CHAR(255)) END,',',CASE WHEN UpdateTime IS NULL THEN 'NULL' ELSE CONCAT('''',DATE_FORMAT(UpdateTime,'%Y-%m-%d %T'),'''') END,
   ',',CASE WHEN StationCategory IS NULL THEN 'NULL' ELSE CAST(StationCategory AS CHAR(255)) END,',',CASE WHEN StationGrade IS NULL THEN 'NULL' ELSE CAST(StationGrade AS CHAR(255)) END,',',CASE WHEN StationState IS NULL THEN 'NULL' ELSE CAST(StationState AS CHAR(255)) END,',',CASE WHEN ContactId IS NULL THEN 'NULL' ELSE CAST(ContactId AS CHAR(255)) END,',',
   CASE WHEN SupportTime IS NULL THEN 'NULL' ELSE CAST(SupportTime AS CHAR(255)) END,',',CASE WHEN OnWayTime IS NULL THEN 'NULL' ELSE CAST(OnWayTime AS CHAR(255)) END,',',CASE WHEN SurplusTime IS NULL THEN 'NULL' ELSE CAST(SurplusTime AS CHAR(255)) END,',',CASE WHEN FloorNo IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(FloorNo AS CHAR(255)),'''') END,',',CASE WHEN PropList IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(PropList AS CHAR(255)),'''') END,
   ',',CASE WHEN Acreage IS NULL THEN 'NULL' ELSE CAST(Acreage AS CHAR(255)) END,',',CASE WHEN BuildingType IS NULL THEN 'NULL' ELSE CAST(BuildingType AS CHAR(255)) END,',',CASE WHEN ContainNode IS NULL THEN 'NULL' ELSE CAST(ContainNode AS CHAR(255)) END,',',CASE WHEN Description IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(Description AS CHAR(255)),'''') END,
   ',',CASE WHEN BordNumber IS NULL THEN 'NULL' ELSE CAST(BordNumber AS CHAR(255)) END,',',CASE WHEN CenterId IS NULL THEN 'NULL' ELSE CAST(CenterId AS CHAR(255)) END,',',CASE WHEN Enable IS NULL THEN 'NULL' ELSE CAST(Enable AS CHAR(255)) END,',',CASE WHEN StartTime IS NULL THEN 'NULL' ELSE CONCAT('''',DATE_FORMAT(StartTime,'%Y-%m-%d %T'),'''') END,
   ',',CASE WHEN EndTime IS NULL THEN 'NULL' ELSE CONCAT('''',DATE_FORMAT(EndTime,'%Y-%m-%d %T'),'''') END,',',CASE WHEN ProjectName IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(ProjectName AS CHAR(255)),'''') END,
   ',',CASE WHEN ContractNo IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(ContractNo AS CHAR(255)),'''') END,',',CASE WHEN InstallTime IS NULL THEN 'NULL' ELSE CONCAT('''',DATE_FORMAT(InstallTime,'%Y-%m-%d %T'),'''') END,
   ')')
   FROM TBL_Station2; 

   INSERT TBL_ReplicateLogs(LogStr)
VALUES(CONCAT('SQLWAYS_EVAL# 1,', CAST(v_CenterId AS CHAR(20))));

-- SQLWAYS_EVAL# pment--

   INSERT TBL_ReplicateLogs(LogStr)
VALUES(CONCAT('SQLWAYS_EVAL# 1 FROM sysobjects WHERE id = object_id(''TBL_TempEquipment',v_CenterIdStr,'SQLWAYS_EVAL# TBL_TempEquipment', v_CenterIdStr));


   INSERT TBL_ReplicateLogs(LogStr)
VALUES(CONCAT('SQLWAYS_EVAL# TBL_TempEquipment',v_CenterIdStr, 'SQLWAYS_EVAL# WHERE 1 = 2'));


   INSERT TBL_ReplicateLogs(LogStr)
VALUES(CONCAT('SQLWAYS_EVAL# INDEX TBL_TempEquipment_Idx ON TBL_TempEquipment',v_CenterIdStr, 'SQLWAYS_EVAL# WITH ignore_dup_key'));


   INSERT TBL_ReplicateLogs(LogStr)
   SELECT CONCAT('SQLWAYS_EVAL# L_TempEquipment',v_CenterIdStr,'(','StationId',',EquipmentId',
   ',EquipmentName',',EquipmentNo','SQLWAYS_EVAL# le',',EquipmentStyle',
   ',AssetState',',Price',',UsedLimit',',UsedDate',',BuyDate',
   ',Vendor',',Unit','SQLWAYS_EVAL# gory',',EquipmentType',',EquipmentClass',
   ',EquipmentState','SQLWAYS_EVAL# on',',StartDelay',',EndDelay',',Property',
   ',Description','SQLWAYS_EVAL# lateId',',HouseId',',MonitorUnitId',
   ',WorkStationId',',SamplerUnitId',',DisplayIndex',',ConnectState',
   ',UpdateTime','SQLWAYS_EVAL# ntId',',RatedCapacity','SQLWAYS_EVAL# le',
   ',ProjectName',',ContractNo',',InstallTime',',EquipmentSN',',SO',') VALUES ( ',
   CASE WHEN StationId IS NULL THEN 'NULL' ELSE CAST(StationId AS CHAR(255)) END,',',CASE WHEN EquipmentId IS NULL THEN 'NULL' ELSE CAST(EquipmentId AS CHAR(255)) END,',',CASE WHEN EquipmentName IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(EquipmentName AS CHAR(255)),'''') END,
   ',',CASE WHEN EquipmentNo IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(EquipmentNo AS CHAR(255)),'''') END,',',CASE WHEN EquipmentModule IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(EquipmentModule AS CHAR(255)),'''') END,
   ',',CASE WHEN EquipmentStyle IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(EquipmentStyle AS CHAR(255)),'''') END,',',CASE WHEN AssetState IS NULL THEN 'NULL' ELSE CAST(AssetState AS CHAR(255)) END,',',CASE WHEN Price IS NULL THEN 'NULL' ELSE CAST(Price AS CHAR(255)) END,
   ',',CASE WHEN UsedLimit IS NULL THEN 'NULL' ELSE CAST(UsedLimit AS CHAR(255)) END,',',
   CASE WHEN UsedDate IS NULL THEN 'NULL' ELSE CONCAT('''',DATE_FORMAT(UsedDate,'%Y-%m-%d %T'),'''') END,',',CASE WHEN BuyDate IS NULL THEN 'NULL' ELSE CONCAT('''',DATE_FORMAT(BuyDate,'%Y-%m-%d %T'),'''') END,
   ',',CASE WHEN Vendor IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(Vendor AS CHAR(255)),'''') END,',',CASE WHEN Unit IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(Unit AS CHAR(255)),'''') END,',',CASE WHEN EquipmentCategory IS NULL THEN 'NULL' ELSE CAST(EquipmentCategory AS CHAR(255)) END,',',
   CASE WHEN EquipmentType IS NULL THEN 'NULL' ELSE CAST(EquipmentType AS CHAR(255)) END,',',CASE WHEN EquipmentClass IS NULL THEN 'NULL' ELSE CAST(EquipmentClass AS CHAR(255)) END,',',CASE WHEN EquipmentState IS NULL THEN 'NULL' ELSE CAST(EquipmentState AS CHAR(255)) END,',',CASE WHEN EventExpression IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(EventExpression AS CHAR(255)),'''') END,
   ',',CASE WHEN StartDelay IS NULL THEN 'NULL' ELSE CAST(StartDelay AS CHAR(255)) END,',',CASE WHEN EndDelay IS NULL THEN 'NULL' ELSE CAST(EndDelay AS CHAR(255)) END,',',CASE WHEN Property IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(Property AS CHAR(255)),'''') END,
   ',',CASE WHEN Description IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(Description AS CHAR(255)),'''') END,',',CASE WHEN EquipmentTemplateId IS NULL THEN 'NULL' ELSE CAST(EquipmentTemplateId AS CHAR(255)) END,',',
   CASE WHEN HouseId IS NULL THEN 'NULL' ELSE CAST(HouseId AS CHAR(255)) END,',',CASE WHEN MonitorUnitId IS NULL THEN 'NULL' ELSE CAST(MonitorUnitId AS CHAR(255)) END,',',CASE WHEN WorkStationId IS NULL THEN 'NULL' ELSE CAST(WorkStationId AS CHAR(255)) END,',',CASE WHEN SamplerUnitId IS NULL THEN 'NULL' ELSE CAST(SamplerUnitId AS CHAR(255)) END,',',CASE WHEN DisplayIndex IS NULL THEN 'NULL' ELSE CAST(DisplayIndex AS CHAR(255)) END,
   ',',CASE WHEN ConnectState IS NULL THEN 'NULL' ELSE CAST(ConnectState AS CHAR(255)) END,',',CASE WHEN UpdateTime IS NULL THEN 'NULL' ELSE CONCAT('''',DATE_FORMAT(UpdateTime,'%Y-%m-%d %T'),'''') END,',',CASE WHEN ParentEquipmentId IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(ParentEquipmentId AS CHAR(255)),'''') END,
   ',',CASE WHEN RatedCapacity IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(RatedCapacity AS CHAR(255)),'''') END,
   ',',CASE WHEN InstalledModule IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(InstalledModule AS CHAR(1024)),'''') END,',',CASE WHEN ProjectName IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(ProjectName AS CHAR(255)),'''') END,
   ',',CASE WHEN ContractNo IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(ContractNo AS CHAR(255)),'''') END,',',CASE WHEN InstallTime IS NULL THEN 'NULL' ELSE CONCAT('''',DATE_FORMAT(InstallTime,'%Y-%m-%d %T'),'''') END,
   ',',CASE WHEN EquipmentSN IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(EquipmentSN AS CHAR(255)),'''') END,',',CASE WHEN SO IS NULL THEN 'NULL' ELSE CONCAT('''',CAST(SO AS CHAR(255)),'''') END,')')
   FROM TBL_Equipment; 

   INSERT TBL_ReplicateLogs(LogStr)
VALUES(CONCAT('SQLWAYS_EVAL# 2,', CAST(v_CenterId AS CHAR(20))));

/*SQLWAYS_EVAL# TBL_EquipmentTemplate--
INSERT TBL_ReplicateLogs(LogStr)
VALUES(	'IF EXISTS(SELECT 1 FROM sysobjects WHERE id = object_id(''TBL_TempEquipmentTemplate'')) DROP TABLE TBL_TempEquipmentTemplate')

INSERT TBL_ReplicateLogs(LogStr)
VALUES('SELECT * INTO TBL_TempEquipmentTemplate FROM TBL_EquipmentTemplate WHERE 1 = 2')

INSERT TBL_ReplicateLogs(LogStr) 
SELECT 'INSERT INTO TBL_TempEquipmentTemplate('
+'EquipmentTemplateId'
+',EquipmentTemplateName'
+',ParentTemplateId'
+',Memo'
+',ProtocolCode'
+',EquipmentCategory'
+',EquipmentType'
+',Property'
+',Description'
+',EquipmentStyle'
+',Unit'
+',Vendor'
+ ') VALUES ( '
+ CASE WHEN EquipmentTemplateId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), EquipmentTemplateId) END + ','
+ CASE WHEN EquipmentTemplateName IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), EquipmentTemplateName) + '''' END +','
+ CASE WHEN ParentTemplateId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ParentTemplateId) END + ','
+ CASE WHEN Memo IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), Memo) + '''' END +','
+ CASE WHEN ProtocolCode IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), ProtocolCode) + '''' END +','
+ CASE WHEN EquipmentCategory IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), EquipmentCategory) END + ','
+ CASE WHEN EquipmentType IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), EquipmentType) END + ','
+ CASE WHEN Property IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), Property) + '''' END +','
+ CASE WHEN Description IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), Description) + '''' END +','
+ CASE WHEN EquipmentStyle IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), EquipmentStyle) + '''' END +','
+ CASE WHEN Unit IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), Unit) + '''' END +','
+ CASE WHEN Vendor IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), Vendor) + '''' END +')'
FROM TBL_EquipmentTemplate

INSERT TBL_ReplicateLogs(LogStr)
VALUES(	'IF EXISTS(SELECT 1 FROM sysobjects WHERE id = object_id(''TBL_TempSignal'')) DROP TABLE TBL_TempSignal')

INSERT TBL_ReplicateLogs(LogStr)
VALUES('SELECT * INTO TBL_TempSignal FROM TBL_Signal WHERE 1 = 2')

INSERT TBL_ReplicateLogs(LogStr) 
SELECT 'INSERT INTO TBL_TempSignal('
+'EquipmentTemplateId'
+',SignalId'
+',Enable'
+',Visible'
+',Description'
+',SignalName'
+',SignalCategory'
+',SignalType'
+',ChannelNo'
+',ChannelType'
+',Expression'
+',DataType'
+',ShowPrecision'
+',Unit'
+',StoreInterval'
+',AbsValueThreshold'
+',PercentThreshold'
+',StaticsPeriod'
+',BaseTypeId'
+',ChargeStoreInterVal'
+',ChargeAbsValue'
+',DisplayIndex'
+',MDBSignalId'
+',ModuleNo'
+ ') VALUES ( '
+ CASE WHEN EquipmentTemplateId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), EquipmentTemplateId) END + ','
+ CASE WHEN SignalId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), SignalId) END + ','
+ CASE WHEN Enable IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), Enable) END + ','
+ CASE WHEN Visible IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), Visible) END + ','
+ CASE WHEN Description IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), Description) + '''' END +','
+ CASE WHEN SignalName IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), SignalName) + '''' END +','
+ CASE WHEN SignalCategory IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), SignalCategory) END + ','
+ CASE WHEN SignalType IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), SignalType) END + ','
+ CASE WHEN ChannelNo IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ChannelNo) END + ','
+ CASE WHEN ChannelType IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ChannelType) END + ','
+ CASE WHEN Expression IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), Expression) + '''' END +','
+ CASE WHEN DataType IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), DataType) END + ','
+ CASE WHEN ShowPrecision IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), ShowPrecision) + '''' END +','
+ CASE WHEN Unit IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), Unit) + '''' END +','
+ CASE WHEN StoreInterval IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), StoreInterval) END + ','
+ CASE WHEN AbsValueThreshold IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), AbsValueThreshold) END + ','
+ CASE WHEN PercentThreshold IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), PercentThreshold) END + ','
+ CASE WHEN StaticsPeriod IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), StaticsPeriod) END + ','
+ CASE WHEN BaseTypeId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), BaseTypeId) END + ','
+ CASE WHEN ChargeStoreInterVal IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ChargeStoreInterVal) END + ','
+ CASE WHEN ChargeAbsValue IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ChargeAbsValue) END + ','
+ CASE WHEN DisplayIndex IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), DisplayIndex) END + ','
+ CASE WHEN MDBSignalId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), MDBSignalId) END + ','
+ CASE WHEN ModuleNo IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ModuleNo) END + ')'
FROM TBL_Signal 

INSERT TBL_ReplicateLogs(LogStr)
VALUES(	'IF EXISTS(SELECT 1 FROM sysobjects WHERE id = object_id(''TBL_TempEvent'')) DROP TABLE TBL_TempEvent')

INSERT TBL_ReplicateLogs(LogStr)
VALUES('SELECT * INTO TBL_TempEvent FROM TBL_Event WHERE 1 = 2')								 

INSERT TBL_ReplicateLogs(LogStr) 
SELECT 'INSERT INTO TBL_TempEvent('
+'EquipmentTemplateId'
+',EventId'
+',EventName'
+',StartType'
+',EndType'
+',StartExpression'
+',SuppressExpression'
+',EventCategory'
+',SignalId'
+',Enable'
+',Visible'
+',Description'
+',DisplayIndex'
+',ModuleNo'
+ ') VALUES ( '
+ CASE WHEN EquipmentTemplateId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), EquipmentTemplateId) END + ','
+ CASE WHEN EventId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), EventId) END + ','
+ CASE WHEN EventName IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), EventName) + '''' END +','
+ CASE WHEN StartType IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), StartType) END + ','
+ CASE WHEN EndType IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), EndType) END + ','
+ CASE WHEN StartExpression IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), StartExpression) + '''' END +','
+ CASE WHEN SuppressExpression IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), SuppressExpression) + '''' END +','
+ CASE WHEN EventCategory IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), EventCategory) END + ','
+ CASE WHEN SignalId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), SignalId) END + ','
+ CASE WHEN Enable IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), Enable) END + ','
+ CASE WHEN Visible IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), Visible) END + ','
+ CASE WHEN Description IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), Description) + '''' END +','
+ CASE WHEN DisplayIndex IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), DisplayIndex) END +','
+ CASE WHEN ModuleNo IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ModuleNo) END + ')'
FROM TBL_Event 

INSERT TBL_ReplicateLogs(LogStr)
VALUES(	'IF EXISTS(SELECT 1 FROM sysobjects WHERE id = object_id(''TBL_TempControl'')) DROP TABLE TBL_TempControl')

INSERT TBL_ReplicateLogs(LogStr)
VALUES('SELECT * INTO TBL_TempControl FROM TBL_Control WHERE 1 = 2')										 

INSERT TBL_ReplicateLogs(LogStr) 
SELECT 'INSERT INTO TBL_TempControl('
+'EquipmentTemplateId'
+',ControlId'
+',ControlName'
+',ControlCategory'
+',CmdToken'
+',BaseTypeId'
+',ControlSeverity'
+',SignalId'
+',TimeOut'
+',Retry'
+',Description'
+',Enable'
+',Visible'
+',DisplayIndex'
+',CommandType'
+',ControlType'
+',DataType'
+',MaxValue'
+',MinValue'
+',DefaultValue'
+',ModuleNo'
+ ') VALUES ( '
+ CASE WHEN EquipmentTemplateId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), EquipmentTemplateId) END + ','
+ CASE WHEN ControlId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ControlId) END + ','
+ CASE WHEN ControlName IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), ControlName) + '''' END +','
+ CASE WHEN ControlCategory IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ControlCategory) END + ','
+ CASE WHEN CmdToken IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), CmdToken) + '''' END +','
+ CASE WHEN BaseTypeId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), BaseTypeId) END + ','
+ CASE WHEN ControlSeverity IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ControlSeverity) END + ','
+ CASE WHEN SignalId IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), SignalId) END + ','
+ CASE WHEN TimeOut IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), TimeOut) END + ','
+ CASE WHEN Retry IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), Retry) END + ','
+ CASE WHEN Description IS NULL THEN 'NULL' ELSE '''' +  convert(NVARCHAR(255), Description) + '''' END +','
+ CASE WHEN Enable IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), Enable) END + ','
+ CASE WHEN Visible IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), Visible) END + ','
+ CASE WHEN DisplayIndex IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), DisplayIndex) END + ','
+ CASE WHEN CommandType IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), CommandType) END + ','
+ CASE WHEN ControlType IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ControlType) END + ','
+ CASE WHEN DataType IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), DataType) END + ','
+ CASE WHEN MaxValue IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), MaxValue) END + ','
+ CASE WHEN MinValue IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), MinValue) END + ','
+ CASE WHEN DefaultValue IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), DefaultValue) END + ','
+ CASE WHEN ModuleNo IS NULL THEN 'NULL' ELSE convert(NVARCHAR(255), ModuleNo) END + ')'
FROM TBL_Control 

INSERT TBL_ReplicateLogs(LogStr)
VALUES('EXEC PDL_CopySSConfig 3,' + Convert(nvarchar(20), @CenterId))						 		
********************************************不同步模版信息，先注释***********************************************/		

   SET SWP_Ret_Value = 0;
END;



-- SELECT N'SQLWAYS_EVAL# L_HistoryTableRange]...';





DROP PROCEDURE IF EXISTS PNL_HistoryTableRange;

CREATE PROCEDURE PNL_HistoryTableRange(v_StartTime  DATETIME,
v_EndTime    DATETIME,
INOUT v_StartIndex INT ,
INOUT v_EndIndex   INT ,INOUT SWP_Ret_Value INT)
BEGIN
   SET v_StartIndex = EXTRACT(month FROM v_StartTime);
   SET v_EndIndex = EXTRACT(month FROM v_EndTime);    
   IF EXTRACT(year FROM v_StartTime) < EXTRACT(year FROM v_EndTime) then

      SET v_EndIndex = v_StartIndex+TIMESTAMPDIFF(month,v_StartTime,v_EndTime);
      IF v_EndIndex -v_StartIndex > 11 then

         SET v_EndIndex = v_StartIndex+11;
      end if;
   end if;

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_SaveNotificationId]...';






DROP PROCEDURE IF EXISTS PNL_SaveNotificationId;

CREATE PROCEDURE PNL_SaveNotificationId(v_SequenceId NATIONAL VARCHAR(128), -- 事件流水号
v_InstructionId NATIONAL VARCHAR(128),
v_StartTime DATETIME)
BEGIN
   IF EXISTS(SELECT 'X' FROM TBL_ActiveEvent WHERE SequenceId = v_SequenceId) then

      UPDATE TBL_ActiveEvent SET InstructionId = v_InstructionId
      WHERE SequenceId = v_SequenceId;
      IF NOT EXISTS(SELECT 'X' FROM TBL_AlarmChange
      WHERE SequenceId = v_SequenceId AND OperationType = 7) then

  INSERT INTO TBL_AlarmChange(SequenceId ,
OperationType ,
StationId ,
StationName ,
EquipmentId ,
EquipmentName ,
EventId ,
EventName ,
EventConditionId ,
EventSeverityId ,
EventSeverity ,
StartTime ,
EndTime ,
CancelTime ,
CancelUserId ,
CancelUserName ,
ConfirmTime ,
ConfirmerId ,
ConfirmerName ,
EventValue ,
ReversalNum ,
Meanings ,
EventFilePath ,
Description ,
SourceHostId ,
InstructionId ,
InstructionStatus ,
StandardAlarmNameId ,
StandardAlarmName ,
BaseTypeId ,
BaseTypeName ,
EquipmentCategory ,
EquipmentCategoryName ,
MaintainState  ,
SignalId ,
RelateSequenceId ,
EventCategoryId ,
EventStateId ,
CenterId ,
CenterName ,
StructureName ,
MonitorUnitName,
StructureId,
StationCategoryId,
EquipmentVendor)
         SELECT
         v_SequenceId,
7,
StationId,
StationName,
EquipmentId,
EquipmentName,
EventId,
EventName,
EventConditionId,
EventSeverityId,
EventSeverity,
StartTime ,
EndTime ,
CancelTime,
CancelUserId,
CancelUserName,
ConfirmTime,
ConfirmerId,
ConfirmerName,
EventValue ,
ReversalNum,
Meanings ,
EventFilePath,
Description,
SourceHostId,
InstructionId,
InstructionStatus,
StandardAlarmNameId,
StandardAlarmName ,
BaseTypeId,
BaseTypeName,
EquipmentCategory ,
EquipmentCategoryName ,
MaintainState,
SignalId ,
RelateSequenceId ,
EventCategoryId,
EventStateId    ,
CenterId       ,
CenterName     ,
StructureName   ,
MonitorUnitName ,
StructureId,
StationCategoryId,
EquipmentVendor
         FROM TBL_ActiveEvent WHERE SequenceId = v_SequenceId;
      end if;
   ELSE
      UPDATE TBL_HistoryEvent SET InstructionId = v_InstructionId
      WHERE StartTime >  TIMESTAMPADD(hour,-1,v_StartTime) AND StartTime < TIMESTAMPADD(hour,1,v_StartTime) AND SequenceId = v_SequenceId;
   end if;
END;

-- SELECT N'SQLWAYS_EVAL# L_SaveNotificationStatus]...';





DROP PROCEDURE IF EXISTS PNL_SaveNotificationStatus;

CREATE PROCEDURE PNL_SaveNotificationStatus(v_SequenceId NATIONAL VARCHAR(128), -- 事件流水号
v_InstructionStatus INT ,
v_StartTime DATETIME)
BEGIN
   IF EXISTS(SELECT 'X' FROM TBL_ActiveEvent WHERE SequenceId = v_SequenceId) then

      UPDATE TBL_ActiveEvent SET InstructionStatus = v_InstructionStatus
      WHERE SequenceId = v_SequenceId;
      IF NOT EXISTS(SELECT 'X' FROM TBL_AlarmChange
      WHERE SequenceId = v_SequenceId AND OperationType = 6) then

  INSERT INTO TBL_AlarmChange(SequenceId ,
OperationType ,
StationId ,
StationName ,
EquipmentId ,
EquipmentName ,
EventId ,
EventName ,
EventConditionId ,
EventSeverityId ,
EventSeverity ,
StartTime ,
EndTime ,
CancelTime ,
CancelUserId ,
CancelUserName ,
ConfirmTime ,
ConfirmerId ,
ConfirmerName ,
EventValue ,
ReversalNum ,
Meanings ,
EventFilePath ,
Description ,
SourceHostId ,
InstructionId ,
InstructionStatus ,
StandardAlarmNameId ,
StandardAlarmName ,
BaseTypeId ,
BaseTypeName ,
EquipmentCategory ,
EquipmentCategoryName ,
MaintainState  ,
SignalId ,
RelateSequenceId ,
EventCategoryId ,
EventStateId ,
CenterId ,
CenterName ,
StructureName ,
MonitorUnitName,
StructureId,
StationCategoryId,
EquipmentVendor)
         SELECT
         v_SequenceId,
6,
StationId,
StationName,
EquipmentId,
EquipmentName,
EventId,
EventName,
EventConditionId,
EventSeverityId,
EventSeverity,
StartTime ,
EndTime ,
CancelTime,
CancelUserId,
CancelUserName,
ConfirmTime,
ConfirmerId,
ConfirmerName,
EventValue ,
ReversalNum,
Meanings ,
EventFilePath,
Description,
SourceHostId,
InstructionId,
InstructionStatus,
StandardAlarmNameId,
StandardAlarmName ,
BaseTypeId,
BaseTypeName,
EquipmentCategory ,
EquipmentCategoryName ,
MaintainState,
SignalId ,
RelateSequenceId ,
EventCategoryId,
EventStateId    ,
CenterId       ,
CenterName     ,
StructureName   ,
MonitorUnitName ,
StructureId,
StationCategoryId,
EquipmentVendor
         FROM TBL_ActiveEvent WHERE SequenceId = v_SequenceId;
      end if;
   ELSE
      UPDATE TBL_HistoryEvent SET InstructionStatus = v_InstructionStatus
      WHERE StartTime >  TIMESTAMPADD(hour,-1,v_StartTime) AND StartTime < TIMESTAMPADD(hour,1,v_StartTime) AND SequenceId = v_SequenceId;
   end if;
END;


-- SELECT N'SQLWAYS_EVAL# T_AttachQuotationMark]...';



/*SQLWAYS_EVAL#      PRT_AttachQuotationMark

Comments:           为以逗号分隔的字符串附加引号，由于报表参数选择页面的多选框不支持多选字符串值，用存储过程实现


Author              Date             Comment       CODE[YYYYMMDD]
-------------------------------------------------------------------------------------------------------------
2010-01-21       Created
*************************************************************************************************************/



DROP PROCEDURE IF EXISTS PRT_AttachQuotationMark;

CREATE PROCEDURE PRT_AttachQuotationMark(v_srcString NATIONAL VARCHAR(4000) ,
INOUT v_outString NATIONAL VARCHAR(4000) ,INOUT SWP_Ret_Value INT)
BEGIN
   IF LOCATE('''',v_srcString) = 0 then

      IF LOCATE(',',v_srcString) = 0 then

         SET v_outString = CONCAT('''',v_srcString,'''');
      ELSE
         SET v_outString = CONCAT('''',replace(v_srcString,',',''','''),'''');
      end if;
   ELSE
      SET v_outString = v_srcString;
   end if;
   SET SWP_Ret_Value = 0;
END;


DROP PROCEDURE IF EXISTS PRT_EquipmentEventStatistic;


CREATE PROCEDURE PRT_EquipmentEventStatistic(v_StartTime DATETIME,
v_EndTime DATETIME,
v_QueryUserId        VARCHAR(20) ,
v_ReturnCount        VARCHAR(20))
BEGIN


   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   CREATE TEMPORARY TABLE tt_HistoryData AS SELECT EquipmentCategoryName, count(*) Cnt
      FROM TBL_HistoryEvent
      WHERE StartTime > v_StartTime AND StartTime < v_EndTime
      GROUP BY EquipmentCategoryName;


   CREATE TEMPORARY TABLE tt_ActiveData AS SELECT EquipmentCategoryName, count(*) Cnt
      FROM TBL_ActiveEvent
      WHERE StartTime > v_StartTime AND StartTime < v_EndTime
      GROUP BY EquipmentCategoryName;

   UPDATE tt_HistoryData a, tt_ActiveData b SET a.Cnt = a.Cnt+b.Cnt
   WHERE a.EquipmentCategoryName = b.EquipmentCategoryName;


-- SQLWAYS_EVAL# has expanded all '*' elements in the following statement
   INSERT tt_HistoryData
   SELECT tt_ActiveData.EquipmentCategoryName, tt_ActiveData.Cnt FROM tt_ActiveData
   WHERE EquipmentCategoryName NOT IN(SELECT EquipmentCategoryName FROM tt_HistoryData);




   SELECT EquipmentCategoryName Name, Cnt
   FROM tt_HistoryData
   ORDER BY Name;

   DROP TEMPORARY TABLE IF EXISTS tt_HistoryData;
   DROP TEMPORARY TABLE IF EXISTS tt_ActiveData;

END;


DROP PROCEDURE IF EXISTS PRT_EventBillBoard;
CREATE PROCEDURE PRT_EventBillBoard(v_StartTime DATETIME,
v_EndTime DATETIME,
v_QueryUserId        VARCHAR(20) ,
v_ReturnCount        VARCHAR(20))
BEGIN
   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SELECT  G.WorkStationName, B.StationName, C.EquipmentName, E.EquipmentTemplateName, D.EventName, count(*) Cnt
   FROM TBL_HistoryEvent A
   INNER JOIN TBL_Station B ON A.StationId = B.StationId
   INNER JOIN TBL_Equipment C ON A.StationId = C.StationId AND A.EquipmentId = C.EquipmentId
   INNER JOIN TBL_Event D ON C.EquipmentTemplateId = D.EquipmentTemplateId AND A.EventId = D.EventId
   INNER JOIN TBL_EquipmentTemplate E ON C.EquipmentTemplateId = E.EquipmentTemplateId
   INNER JOIN TSL_MonitorUnit F ON F.StationId = A.StationId
   LEFT JOIN TBL_WorkStation G ON F.WorkStationId = G.WorkStationId
   WHERE A.StartTime > v_StartTime AND A.StartTime < v_EndTime
   GROUP BY G.WorkStationName,B.StationName,C.EquipmentName,E.EquipmentTemplateName,
   D.EventName
   ORDER BY Cnt DESC LIMIT 500;

   SELECT  G.WorkStationName, B.StationName, C.EquipmentName, E.EquipmentTemplateName, D.EventName, count(*) Cnt
   FROM TBL_ActiveEvent A
   INNER JOIN TBL_Station B ON A.StationId = B.StationId
   INNER JOIN TBL_Equipment C ON A.StationId = C.StationId AND A.EquipmentId = C.EquipmentId
   INNER JOIN TBL_Event D ON C.EquipmentTemplateId = D.EquipmentTemplateId AND A.EventId = D.EventId
   INNER JOIN TBL_EquipmentTemplate E ON C.EquipmentTemplateId = E.EquipmentTemplateId
   INNER JOIN TSL_MonitorUnit F ON F.StationId = A.StationId
   LEFT JOIN TBL_WorkStation G ON F.WorkStationId = G.WorkStationId
   WHERE A.StartTime > v_StartTime AND A.StartTime < v_EndTime
   GROUP BY G.WorkStationName,B.StationName,C.EquipmentName,E.EquipmentTemplateName,
   D.EventName
   ORDER BY Cnt DESC LIMIT 500;


END;





-- SELECT N'SQLWAYS_EVAL# T_FetchGroup]...';



/*SQLWAYS_EVAL#      PRT_FetchGroup

Comments:           查寻局站分组，包含权限过滤


Author              Date             Comment       CODE[YYYYMMDD]
-------------------------------------------------------------------------------------------------------------
2009-08-19       Created
*************************************************************************************************************/



DROP PROCEDURE IF EXISTS PRT_FetchGroup;


CREATE PROCEDURE PRT_FetchGroup(v_CenterId           NATIONAL VARCHAR(4000)  ,
v_StructureGroupId   NATIONAL VARCHAR(4000)  ,
v_QueryUserId        NATIONAL VARCHAR(20)   ,
v_ReturnCount        NATIONAL VARCHAR(20) ,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_index INT;
   DECLARE v_RowCount INT;
   DECLARE v_RoleId INT;
   DECLARE v_WhereStrCenterId NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrStructureGroupId NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrUserId NATIONAL VARCHAR(255);
   DECLARE SWV_ExecDyn VARCHAR(5000);

-- 查询结果条数
   IF v_CenterId is null then
      set v_CenterId = '-1';
   END IF;
   IF v_StructureGroupId is null then
      set v_StructureGroupId = '1';
   END IF;
   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SET v_RowCount = cast(v_ReturnCount as SIGNED INTEGER);

-- 中心
   SET v_WhereStrCenterId = '';
   IF IFNULL(v_CenterId,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_CenterId);
      IF v_index = 0 then
         SET v_WhereStrCenterId = CONCAT('SQLWAYS_EVAL# = ',v_CenterId);
      ELSE
         SET v_WhereStrCenterId = CONCAT('SQLWAYS_EVAL# IN (',v_CenterId,')');
      end if;
   end if;
   SET v_WhereStrStructureGroupId = '';
   IF LOCATE(',',v_StructureGroupId) = 0 then

      SET v_WhereStrStructureGroupId = CONCAT('SQLWAYS_EVAL# = ',v_StructureGroupId);
   ELSE
      SET v_WhereStrStructureGroupId = CONCAT('SQLWAYS_EVAL# IN (',v_StructureGroupId,')');
   end if;

-- 用户
   SET v_WhereStrUserId = '';
   IF  IFNULL(v_QueryUserId,'-1') <> '-1' then

      SET v_WhereStrUserId = CONCAT('SQLWAYS_EVAL# = ',v_QueryUserId);
   end if;


   select   b.RoleId INTO v_RoleId FROM TBL_UserRoleMap a
   INNER JOIN TBL_UserRoleRight b ON a.RoleId = b.RoleId WHERE a.UserId = cast(v_QueryUserId as SIGNED INTEGER) AND b.OperationType = 2 AND b.OperationId = -1;

-- 执行
   SET SQL_SELECT_LIMIT = v_RowCount;

   IF (v_RoleId IS NULL) then

-- 没有所有片区权限
      SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL# 
sc.StructureId,
CASE WHEN sc.ParentStructureId = 0 THEN sc.StructureName + ''-管理局站分组'' ELSE sc.StructureName END StructureName
FROM TBL_StationStructure sc
INNER JOIN TBL_StationStructureMap sp ON sc.StructureId =  sp.StructureId      
INNER JOIN TBL_AreaMap am ON sp.StationId = am.StationId
INNER JOIN TBL_Area a ON a.AreaId = am.AreaId
INNER JOIN TBL_UserRoleRight urr ON a.AreaId = urr.OperationId AND urr.OperationType = 2
INNER JOIN TBL_UserRoleMap mp ON mp.RoleId = urr.RoleId
INNER JOIN TBL_Station su ON su.StationId = am.StationId
WHERE 1 = 1 ',v_WhereStrCenterId,v_WhereStrStructureGroupId,v_WhereStrUserId,
      'SQLWAYS_EVAL# ');
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
   ELSE
      SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL# sc.StructureId,
CASE WHEN sc.ParentStructureId = 0 THEN sc.StructureName + ''-管理局站分组'' ELSE sc.StructureName END StructureName
FROM TBL_StationStructure sc
INNER JOIN TBL_StationStructureMap sp ON sp.StructureId = sc.StructureId
INNER JOIN TBL_Station su ON sp.StationId  = su.StationId
WHERE 1 = 1',v_WhereStrCenterId,v_WhereStrStructureGroupId,
      'SQLWAYS_EVAL# ctureId');
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
   end if;

   SET SQL_SELECT_LIMIT = DEFAULT;

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# T_FetchReportCommonFields]...';



/*SQLWAYS_EVAL#      PRT_FetchReportCommonFields
Parameters:         @QueryMethod        int,          --查寻方法
@UserId             nvarchar(20)  ,--执行查寻的用户
@CenterId           nvarchar(4000),--监控中心ID      默认-1，选择多个时用逗号','分隔
@GroupId            nvarchar(4000),--局站行政区分组ID 默认-1,  选择多个时用逗号','分隔
@StationCategory    nvarchar(4000),--局站分类        默认-1,  选择多个时用逗号','分隔
@StationId          nvarchar(4000),--局站ID          默认-1,  选择多个时用逗号','分隔
@EquipmentCategory  nvarchar(4000),--设备分类 默认-1,  选择多个时用逗号','分隔
@EquipmentId        nvarchar(4000),--设备ID          默认-1,  选择多个时用逗号','分隔
@EventId            nvarchar(4000),--事件ID          默认-1,  选择多个时用逗号','分隔
@DestTableName      nvarchar(20)  ,--输出的临时表表名,对应的表需要调用过程建立，用完后的要删除

Comments:           根据条件查询出经过权限筛选的报表经常会用到的公共字段
Return:             0           成功返回结果集（根据参数，结果集会有不同的字段输出）:
[
CenterId
CenterName          监控中心
GroupId
GroupName           行政区分组名
StationId
StationName         局站名
]
-------------------------------------------------------------------------------------------------------------
Create Date:    2009-07-27       Created
*************************************************************************************************************/



DROP PROCEDURE IF EXISTS PRT_FetchReportCommonFields;


CREATE PROCEDURE PRT_FetchReportCommonFields(v_QueryMethod        INT                 ,
v_UserId             NATIONAL VARCHAR(20)      ,
v_CenterId           NATIONAL VARCHAR(4000)    ,
v_GroupId            NATIONAL VARCHAR(4000)    ,
v_StationCategory    NATIONAL VARCHAR(4000)    ,
v_StationId          NATIONAL VARCHAR(4000)    ,
v_EquipmentCategory  NATIONAL VARCHAR(4000)    ,
v_EquipmentId        NATIONAL VARCHAR(4000)    ,
v_EventId            NATIONAL VARCHAR(4000)    ,
v_DestTableName      NATIONAL VARCHAR(40) ,
v_EventCategory      NATIONAL VARCHAR(4000)    ,
v_EventSeverity      NATIONAL VARCHAR(4000)    ,
v_StructureGroupId   NATIONAL VARCHAR(1000)  ,INOUT SWP_Ret_Value INT)
BEGIN
/* liangyj
*/
   SET SWP_Ret_Value = 0;
END;


DROP PROCEDURE IF EXISTS PRT_FetchSignal;


CREATE PROCEDURE PRT_FetchSignal(v_WhereStrSignalCategory NATIONAL VARCHAR(4000), 
v_WhereStrChannelType NATIONAL VARCHAR(4000),  
v_WhereStrSignalId NATIONAL VARCHAR(4000), 
v_WhereStrSignalProperty NATIONAL VARCHAR(4000))
BEGIN
DECLARE SWV_ExecDyn VARCHAR(5000);
   SET SWV_ExecDyn = 'INSERT INTO tt_TBL_Signal
   SELECT
   s.EquipmentTemplateId,
s.SignalId,
s.SignalName,
s.SignalCategory,
s.ChannelType
   FROM TBL_Signal s
   WHERE s.Enable = 1';
   SET @SWV_Stmt = SWV_ExecDyn;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;
END;


DROP PROCEDURE IF EXISTS PRT_FetchSSCenter;

CREATE PROCEDURE PRT_FetchSSCenter(v_CenterId           NATIONAL VARCHAR(4000)  ,
v_QueryUserId        NATIONAL VARCHAR(20)  ,
v_ReturnCount        NATIONAL VARCHAR(20)  ,
v_OutputColumnsType  NATIONAL VARCHAR(1) ,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_index INT;            
   DECLARE v_RowCount INT;            
   DECLARE v_WhereStrCenterId NATIONAL VARCHAR(4000);
   DECLARE v_OutputColumns NATIONAL VARCHAR(100);
   DECLARE SWV_ExecDyn VARCHAR(5000);

-- 查询结果条数
   IF v_CenterId is null then
      set v_CenterId = '-1';
   END IF;
   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   IF v_OutputColumnsType is null then
      set v_OutputColumnsType = '0';
   END IF;
   SET v_RowCount = cast(v_ReturnCount as SIGNED INTEGER);

   IF v_OutputColumnsType = '0' then

      SET v_OutputColumns = 'SQLWAYS_EVAL# StructureId';
   ELSE
      SET v_OutputColumns = 'SQLWAYS_EVAL# StructureId CenterId ';
   end if;

-- 中心
   SET v_WhereStrCenterId = '';
   IF IFNULL(v_CenterId,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_CenterId);
      IF v_index = 0 then
         SET v_WhereStrCenterId = CONCAT('SQLWAYS_EVAL# = ',v_CenterId);
      ELSE
         SET v_WhereStrCenterId = CONCAT('SQLWAYS_EVAL# IN (',v_CenterId,')');
      end if;
   end if;

-- 执行
   SET SQL_SELECT_LIMIT = v_RowCount;


-- 返回结果
   SET SWV_ExecDyn = CONCAT('SELECT ',v_OutputColumns,'SQLWAYS_EVAL# WHERE (StructureGroupId = 0 AND StructureType = 2) ',
   v_WhereStrCenterId,'SQLWAYS_EVAL# ');
   SET @SWV_Stmt = SWV_ExecDyn;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;

   SET SWP_Ret_Value = 0;
END;



DROP PROCEDURE IF EXISTS PRT_FetchStandardAlarmName;


CREATE PROCEDURE PRT_FetchStandardAlarmName(v_EquipmentLogicClass NATIONAL VARCHAR(4000)  ,
v_QueryUserId        NATIONAL VARCHAR(20)   ,
v_ReturnCount        NATIONAL VARCHAR(20))
BEGIN
   DECLARE v_WhereEquipmentLogicClass NATIONAL VARCHAR(4000);
   DECLARE v_index INT;
		DECLARE SWV_ExecDyn VARCHAR(5000);
   IF v_EquipmentLogicClass is null then
      set v_EquipmentLogicClass = '-1';
   END IF;
   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SET v_WhereEquipmentLogicClass = '';
   IF IFNULL(v_EquipmentLogicClass,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_EquipmentLogicClass);
      IF v_index = 0 then
         SET v_WhereEquipmentLogicClass = CONCAT('SQLWAYS_EVAL# / 1000 = ',v_EquipmentLogicClass);
      ELSE
         SET v_WhereEquipmentLogicClass = CONCAT('SQLWAYS_EVAL# / 1000 IN (',v_EquipmentLogicClass,')');
      end if;
   end if;

   SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL# AlarmId, StandardName + ''_'' + convert(NVARCHAR(20),StandardDicId) AlarmName 
FROM TBL_StandardDic 
WHERE 1 = 1 ',v_WhereEquipmentLogicClass,
   'SQLWAYS_EVAL# ');
   SET @SWV_Stmt = SWV_ExecDyn;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;
END;




/*      PRT_FetchStationCategory

Comments:           查寻局站种类


Author              Date             Comment       CODE[YYYYMMDD]
-------------------------------------------------------------------------------------------------------------
2009-08-19       Created
*************************************************************************************************************/



DROP PROCEDURE IF EXISTS PRT_FetchStationCategory;


CREATE PROCEDURE PRT_FetchStationCategory(v_QueryUserId        NATIONAL VARCHAR(20)   ,
v_ReturnCount        NATIONAL VARCHAR(20) ,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_RowCount INT;
-- 查询结果条数
   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SET v_RowCount = cast(v_ReturnCount as SIGNED INTEGER);
   SET SQL_SELECT_LIMIT = v_RowCount;
   Select ItemId ,ItemValue from TBL_DataItem where EntryId = 71 Order By  ItemId;
   SET SQL_SELECT_LIMIT = DEFAULT;

   SET SWP_Ret_Value = 0;
END;


DROP PROCEDURE IF EXISTS PRT_FetchUser;


CREATE PROCEDURE PRT_FetchUser(v_CenterId           NATIONAL VARCHAR(4000)  ,
v_QueryUserId        NATIONAL VARCHAR(20)   ,
v_ReturnCount        NATIONAL VARCHAR(20) ,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_index INT;
   DECLARE v_RowCount INT;
   DECLARE v_WhereStrCenterId NATIONAL VARCHAR(4000);
	DECLARE SWV_ExecDyn VARCHAR(5000);
-- 中心
   IF v_CenterId is null then
      set v_CenterId = '-1';
   END IF;
   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SET v_WhereStrCenterId = '';
   IF IFNULL(v_CenterId,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_CenterId);
      IF v_index = 0 then
         SET v_WhereStrCenterId = CONCAT('SQLWAYS_EVAL# ',v_CenterId);
      ELSE
         SET v_WhereStrCenterId = CONCAT('SQLWAYS_EVAL# (',v_CenterId,')');
      end if;
   end if;

   SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL# UserId=-1 THEN -9999 ELSE UserId END UserId,
UserName 
From TBL_Account
WHERE 1 = 1 ',v_WhereStrCenterId,'SQLWAYS_EVAL# ');
   SET @SWV_Stmt = SWV_ExecDyn;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;

   SET SWP_Ret_Value = 0;
END;



DROP PROCEDURE IF EXISTS PRT_GetDCUTransInfo;


CREATE  PROCEDURE PRT_GetDCUTransInfo(v_WorkStationId NATIONAL VARCHAR(4000) ,
v_QueryUserId        NATIONAL VARCHAR(20) ,
v_ReturnCount        NATIONAL VARCHAR(20))
BEGIN
   DECLARE v_WorkStationFilter NATIONAL VARCHAR(4000);
	DECLARE SWV_ExecDyn VARCHAR(5000);
   IF v_WorkStationId is null then
      set v_WorkStationId = '-1';
   END IF;
   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   IF v_WorkStationId = '-1' then

      SET v_WorkStationFilter = ' ';
   ELSE
      SET v_WorkStationFilter = CONCAT('SQLWAYS_EVAL# IN (',v_WorkStationId,')');
   end if;

   SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL# TSL_Port.Setting) -1) IPAddress,
substring(TSL_Port.Setting, charindex('':'', TSL_Port.Setting) + 1, len(TSL_Port.Setting) - charindex('':'', TSL_Port.Setting)) TimeNo,
TSL_Port.PortNo 
FROM TSL_MonitorUnit, TSL_Port,TBL_WorkStation
WHERE TSL_MonitorUnit.MonitorUnitId=TSL_Port.MonitorUnitId
AND TSL_Port.PortType=2
AND TBL_WorkStation.WorkStationId=TSL_MonitorUnit.WorkStationId
AND TBL_WorkStation.WorkStationType = 8
AND TBL_WorkStation.IsUsed = 1',v_WorkStationFilter,
   'SQLWAYS_EVAL# TSL_MonitorUnit.MonitorUnitName');
   SET @SWV_Stmt = SWV_ExecDyn;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;
END;


DROP PROCEDURE IF EXISTS PRT_GetIDUTransInfo;


CREATE  PROCEDURE PRT_GetIDUTransInfo(v_MonitorUnitId NATIONAL VARCHAR(4000) ,
v_QueryUserId        NATIONAL VARCHAR(20) ,
v_ReturnCount        NATIONAL VARCHAR(20))
BEGIN
   DECLARE v_MonitorUnitFilter NATIONAL VARCHAR(4000);
		DECLARE SWV_ExecDyn VARCHAR(5000);
   IF v_MonitorUnitId is null then
      set v_MonitorUnitId = '-1';
   END IF;
   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   IF v_MonitorUnitId = '-1' then

      SET v_MonitorUnitFilter = ' ';
   ELSE
      SET v_MonitorUnitFilter = CONCAT('SQLWAYS_EVAL# IN (',v_MonitorUnitId,')');
   end if;

   SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL# A.IpAddress, B.ItemValue MonitorUnitCategory
FROM TSL_MonitorUnit A
INNER JOIN TBL_DataItem B ON A.MonitorUnitCategory = B.ItemId
WHERE  A.MonitorUnitCategory IN (2,4) AND B.EntryId = 34
',
   v_MonitorUnitFilter,'SQLWAYS_EVAL# nitorUnitName');
   SET @SWV_Stmt = SWV_ExecDyn;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;	

END;




DROP PROCEDURE IF EXISTS PRT_OperationDetailRecord;

CREATE PROCEDURE PRT_OperationDetailRecord(v_StartTime          DATETIME    ,
v_EndTime            DATETIME    ,
v_UserIds            VARCHAR(8000) ,
v_ObjectName         VARCHAR(8000) ,
v_QueryUserId        VARCHAR(20) ,
v_ReturnCount        VARCHAR(20) ,INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN
   DECLARE v_index INT;
   DECLARE v_RowCount INT;
   DECLARE v_TotalCount INT;
   DECLARE v_SStarTime VARCHAR(255);
   DECLARE v_SEndTime VARCHAR(255);
   DECLARE v_WhereStrUserId VARCHAR(8000);
   DECLARE v_WhereStrObjectType VARCHAR(8000);
	DECLARE SWV_ExecDyn VARCHAR(5000);

-- 时间检查
   IF v_UserIds is null then
      set v_UserIds = '-1';
   END IF;
   IF v_ObjectName is null then
      set v_ObjectName = '-1';
   END IF;
   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SET v_StartTime = IFNULL(v_StartTime,CURRENT_TIMESTAMP);
   SET v_EndTime = IFNULL(v_EndTime,TIMESTAMPADD(hour,24,v_StartTime));
   IF v_StartTime > v_EndTime then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

-- 查询结果条数
   SET v_RowCount = cast(v_ReturnCount as SIGNED INTEGER);


-- 开始时间
   SET v_SStarTime = CONCAT('SQLWAYS_EVAL# >= ''',DATE_FORMAT(v_StartTime,'SQLWAYS_EVAL# :%s:%f%p'),
   '''');

-- 结束时间
   SET v_SEndTime = CONCAT('SQLWAYS_EVAL# <= ''',DATE_FORMAT(v_EndTime,'SQLWAYS_EVAL# :%s:%f%p'),
   '''');

-- 用户ID
   SET v_WhereStrUserId = ' ';
   IF  IFNULL(v_UserIds,'-1') <> '-1' then

-- SQLWAYS_EVAL# 并且-1又对应的管理员用户，故用另外一个数字代替
      SET v_UserIds = replace(v_UserIds,'-9999','-1');
      SET v_index = LOCATE(',',v_UserIds);
      IF v_index = 0 then

         SET v_WhereStrUserId = CONCAT('SQLWAYS_EVAL# = ',v_UserIds);
      ELSE
         SET v_WhereStrUserId = CONCAT('SQLWAYS_EVAL# IN (',v_UserIds,')');
      end if;
   end if;

-- 操作对象
   SET v_WhereStrObjectType = ' ';
   IF IFNULL(v_ObjectName,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_ObjectName);
      IF v_index = 0 then
         SET v_WhereStrObjectType = CONCAT('SQLWAYS_EVAL# = ',v_ObjectName);
      ELSE
         SET v_WhereStrObjectType = CONCAT('SQLWAYS_EVAL# IN (',v_ObjectName,')');
      end if;
   end if;

-- 执行
   SET SQL_SELECT_LIMIT = v_RowCount;

   SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL# ac.UserName IS NULL THEN convert(varchar, od.UserId) + ''(用户已经被删除)''
ELSE ac.UserName END UserName,
od.OperationTime,
od.OperationType,
di.ItemValue ObjectName,
od.ObjectId,
od.PropertyName,
od.OldValue,
od.NewValue
FROM TBL_OperationDetail od
LEFT JOIN TBL_Account ac ON od.UserId = ac.UserId
INNER JOIN TBL_DataItem di ON od.ObjectType = di.ItemId AND di.EntryId = 150 ',v_SStarTime,v_SEndTime,v_WhereStrUserId,
   v_WhereStrObjectType,'SQLWAYS_EVAL# DESC ');
   SET @SWV_Stmt = SWV_ExecDyn;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;
   SET SQL_SELECT_LIMIT = DEFAULT;

   SET SWP_Ret_Value = 0;
END;




DROP PROCEDURE IF EXISTS PRT_ParseQueryConditions;


CREATE PROCEDURE PRT_ParseQueryConditions(v_OutputTableName VARCHAR(20),
v_QueryConditions VARCHAR(8000),
v_QCType VARCHAR(1) ,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_IdSeparator CHAR(1);
   DECLARE v_QueryCondition VARCHAR(128);
   DECLARE v_sIndex INT;
   DECLARE v_ReturnValue INT;
	DECLARE SWV_ExecDyn VARCHAR(5000);
   IF v_QCType is null then
      set v_QCType = 'I';
   END IF;
   SET v_IdSeparator = ',';
   SET v_sIndex = LOCATE(v_IdSeparator,v_QueryConditions);
   IF v_sIndex = 0 then

      IF v_QCType = 'I' then

         SET SWV_ExecDyn = CONCAT('INSERT INTO ',v_OutputTableName,' VALUES( ',v_QueryConditions,' )');
         SET @SWV_Stmt = SWV_ExecDyn;
         PREPARE SWT_Stmt FROM @SWV_Stmt;
         EXECUTE SWT_Stmt;
         DEALLOCATE PREPARE SWT_Stmt;
      ELSE
         SET SWV_ExecDyn = CONCAT('INSERT INTO ',v_OutputTableName,' VALUES(''',v_QueryConditions,''')');
         SET @SWV_Stmt = SWV_ExecDyn;
         PREPARE SWT_Stmt FROM @SWV_Stmt;
         EXECUTE SWT_Stmt;
         DEALLOCATE PREPARE SWT_Stmt;
      end if;
   end if;
   WHILE v_sIndex > 0 DO
      SET v_sIndex = LOCATE(v_IdSeparator,v_QueryConditions);
      IF v_sIndex = 0 then

         SET v_QueryCondition = v_QueryConditions;
         SET v_QueryConditions = '';
      ELSE
         SET v_QueryCondition = SUBSTRING(v_QueryConditions,1,v_sIndex -1);
         SET v_QueryConditions = right(v_QueryConditions,LENGTH(v_QueryConditions) -v_sIndex);
      end if;
      IF v_QCType = 'I' then

         SET SWV_ExecDyn = CONCAT('INSERT INTO ',v_OutputTableName,' VALUES( ',v_QueryCondition,' )');
         SET @SWV_Stmt = SWV_ExecDyn;
         PREPARE SWT_Stmt FROM @SWV_Stmt;
         EXECUTE SWT_Stmt;
         DEALLOCATE PREPARE SWT_Stmt;
      ELSE
         SET SWV_ExecDyn = CONCAT('INSERT INTO ',v_OutputTableName,' VALUES(''',v_QueryCondition,''')');
         SET @SWV_Stmt = SWV_ExecDyn;
         PREPARE SWT_Stmt FROM @SWV_Stmt;
         EXECUTE SWT_Stmt;
         DEALLOCATE PREPARE SWT_Stmt;
      end if;
   END WHILE;

   SET SWP_Ret_Value = 0;
END;




/*           用户事件权限


Author              Date             Comment       CODE[YYYYMMDD]
-------------------------------------------------------------------------------------------------------------
l96186              2008-01-14       Created
2009-10-28       优化性能
*************************************************************************************************************/



DROP PROCEDURE IF EXISTS PRT_UserControlPrivilege;

CREATE PROCEDURE PRT_UserControlPrivilege(v_CenterId           NATIONAL VARCHAR(4000)  ,
v_GroupId            NATIONAL VARCHAR(4000)  ,
v_StationCategory    NATIONAL VARCHAR(4000)  ,
v_StationId          NATIONAL VARCHAR(4000)  ,
v_EquipmentCategory  NATIONAL VARCHAR(4000)  ,
v_EquipmentId        NATIONAL VARCHAR(4000)  ,
v_EquipmentName      NATIONAL VARCHAR(4000)  ,
v_CommandType        NATIONAL VARCHAR(4000)  ,
v_ControlSeverity    NATIONAL VARCHAR(4000)  ,
v_QueryUserId        NATIONAL VARCHAR(20) ,
v_ReturnCount        NATIONAL VARCHAR(20) ,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_index INT;
   DECLARE v_RowCount INT;
   DECLARE v_RoleId INT;
   DECLARE v_WhereStrCenterId NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrStructureGroupId NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrStationCategory NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrStationId NATIONAL VARCHAR(4000);				
   DECLARE v_WhereStrUserId NATIONAL VARCHAR(255);                
   DECLARE v_WhereStrEquipCategory NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrEquipmentId NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrCommandType NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrControlSeverity NATIONAL VARCHAR(4000);
   DECLARE v_JoinStationString NATIONAL VARCHAR(500);
	DECLARE SWV_ExecDyn VARCHAR(5000);
-- 查询结果条数
   IF v_CenterId is null then
      set v_CenterId = '-1';
   END IF;
   IF v_GroupId is null then
      set v_GroupId = '-1';
   END IF;
   IF v_StationCategory is null then
      set v_StationCategory = '-1';
   END IF;
   IF v_StationId is null then
      set v_StationId = '-1';
   END IF;
   IF v_EquipmentCategory is null then
      set v_EquipmentCategory = '-1';
   END IF;
   IF v_EquipmentId is null then
      set v_EquipmentId = '-1';
   END IF;
   IF v_EquipmentName is null then
      set v_EquipmentName = '-1';
   END IF;
   IF v_CommandType is null then
      set v_CommandType = '-1';
   END IF;
   IF v_ControlSeverity is null then
      set v_ControlSeverity = '-1';
   END IF;
   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SET v_RowCount = cast(v_ReturnCount as SIGNED INTEGER);

-- 中心
   SET v_WhereStrCenterId = '';
   IF IFNULL(v_CenterId,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_CenterId);
      IF v_index = 0 then
         SET v_WhereStrCenterId = CONCAT('SQLWAYS_EVAL# = ',v_CenterId);
      ELSE
         SET v_WhereStrCenterId = CONCAT('SQLWAYS_EVAL# IN (',v_CenterId,')');
      end if;
   end if;

-- 分组
   SET v_WhereStrStructureGroupId = '';
   IF IFNULL(v_GroupId,'-1') <> '-1' then

      IF LOCATE(',',v_GroupId) = 0 then

         SET v_WhereStrStructureGroupId = CONCAT('SQLWAYS_EVAL# = ',v_GroupId);
      ELSE
         SET v_WhereStrStructureGroupId = CONCAT('SQLWAYS_EVAL# IN (',v_GroupId,')');
      end if;
   end if;

-- 用户
   SET v_WhereStrUserId = '';
   IF  IFNULL(v_QueryUserId,'-1') <> '-1' then

      SET v_WhereStrUserId = CONCAT('SQLWAYS_EVAL# = ',v_QueryUserId);
   end if;

-- 局站分类
   SET v_WhereStrStationCategory = ' AND  1 = 1 ';
   IF IFNULL(v_StationCategory,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_StationCategory);
      IF v_index = 0 then
         SET v_WhereStrStationCategory = CONCAT('SQLWAYS_EVAL# =  ',v_StationCategory);
      ELSE
         SET v_WhereStrStationCategory = CONCAT('SQLWAYS_EVAL# IN (',v_StationCategory,')');
      end if;
   end if;

-- 局站ID
   SET v_WhereStrStationId = ' AND  1 = 1 ';
   IF IFNULL(v_StationId,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_StationId);
      IF v_index = 0 then
         SET v_WhereStrStationId = CONCAT('SQLWAYS_EVAL# =  ',v_StationId);
      ELSE
         SET v_WhereStrStationId = CONCAT('SQLWAYS_EVAL# IN (',v_StationId,')');
      end if;
   end if;    


   CREATE TEMPORARY TABLE tt_TempStation
   (
      StationId INT
   );
   CREATE INDEX TempStation_IDX ON tt_TempStation
   (StationId);

   select   b.RoleId INTO v_RoleId FROM TBL_UserRoleMap a
   INNER JOIN TBL_UserRoleRight b ON a.RoleId = b.RoleId WHERE a.UserId = cast(v_QueryUserId as SIGNED INTEGER) AND b.OperationType = 2 AND b.OperationId = -1; 

   IF (v_RoleId IS NULL) then

      SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL# TBL_Station su
INNER JOIN TBL_StationStructureMap sp ON su.StationId =  sp.StationId
INNER JOIN TBL_AreaMap am ON am.StationId = su.StationId
INNER JOIN TBL_Area a ON a.AreaId = am.AreaId
INNER JOIN TBL_UserRoleRight urr ON urr.OperationId = a.AreaId AND urr.OperationType = 2
INNER JOIN TBL_UserRoleMap mp ON mp.RoleId = urr.RoleId
WHERE 1 = 1 ',v_WhereStrCenterId,v_WhereStrStructureGroupId,v_WhereStrStationCategory,
      v_WhereStrStationId,v_WhereStrUserId,'SQLWAYS_EVAL# ');
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
   ELSE
      SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL#  TBL_Station su
INNER JOIN TBL_StationStructureMap sp ON su.StationId = sp.StationId
WHERE 1 = 1 ',v_WhereStrCenterId,
      v_WhereStrStructureGroupId,v_WhereStrStationCategory,v_WhereStrStationId,
      'SQLWAYS_EVAL# ');
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
   end if;

-- 设备类型
   SET v_WhereStrEquipCategory = ' AND  1 = 1 ';
   IF  IFNULL(v_EquipmentCategory,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_EquipmentCategory);
      IF v_index = 0 then
         SET v_WhereStrEquipCategory = CONCAT('SQLWAYS_EVAL# =  ',v_EquipmentCategory);
      ELSE
         SET v_WhereStrEquipCategory = CONCAT('SQLWAYS_EVAL# IN (',v_EquipmentCategory,')');
      end if;
   end if;

-- 设备
   SET v_WhereStrEquipmentId = '';
   IF IFNULL(v_EquipmentId,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_EquipmentId);
      IF v_index = 0 then
         SET v_WhereStrEquipmentId = CONCAT('SQLWAYS_EVAL# =  ',v_EquipmentId);
      ELSE
         SET v_WhereStrEquipmentId = CONCAT('SQLWAYS_EVAL# IN (',v_EquipmentId,')');
      end if;
   ELSE
      IF v_EquipmentName <> '-1' then

-- 附加引号
         CALL PRT_AttachQuotationMark(v_EquipmentName,v_EquipmentName);
         SET v_index = LOCATE(',',v_EquipmentName);
         IF v_index = 0 then
            SET v_WhereStrEquipmentId = CONCAT('SQLWAYS_EVAL# =  ',v_EquipmentName);
         ELSE
            SET v_WhereStrEquipmentId = CONCAT('SQLWAYS_EVAL# IN (',v_EquipmentName,')');
         end if;
      end if;
   end if;    

-- 设备
   CREATE TEMPORARY TABLE tt_TempEquipment
   (
      StationId INT, 
      EquipmentId INT, 
      EquipmentTemplateId INT
   );
   CREATE INDEX TempEquipment_IDX ON tt_TempEquipment
   (StationId, 
   EquipmentId, 
   EquipmentTemplateId);

-- 是否包含所有专业权限
   SET v_RoleId = NULL;
   select   b.RoleId INTO v_RoleId FROM TBL_UserRoleMap a
   INNER JOIN TBL_UserRoleRight b ON a.RoleId = b.RoleId WHERE a.UserId = cast(v_QueryUserId as SIGNED INTEGER) AND b.OperationType = 3 AND b.OperationId = -1;   

   IF (v_RoleId IS NULL) then

      SET SWV_ExecDyn = 'INSERT INTO tt_TempEquipment
      SELECT
      e.StationId,
e.EquipmentId,
e.EquipmentTemplateId
      FROM TBL_Equipment e
      INNER JOIN TBL_SpecialtyGroupMap sg ON e.EquipmentCategory = sg.EntryItemId
      INNER JOIN TBL_UserRoleRight urr ON urr.OperationId = sg.SpecialtyGroupId and urr.OperationType = 3
      INNER JOIN TBL_UserRoleMap mp ON mp.RoleId = urr.RoleId
      INNER JOIN tt_TempStation su ON su.StationId = e.StationId
      WHERE 1 = 1';
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
   ELSE
      SET SWV_ExecDyn = 'INSERT INTO tt_TempEquipment
      SELECT
      e.StationId,
e.EquipmentId,
e.EquipmentTemplateId
      FROM TBL_Equipment e
      INNER JOIN tt_TempStation su ON su.StationId = e.StationId
      WHERE 1 = 1';
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
   end if;

-- 控制类型
   SET v_WhereStrCommandType = '';
   IF  IFNULL(v_CommandType,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_CommandType);
      IF v_index = 0 then
         SET v_WhereStrCommandType = CONCAT('SQLWAYS_EVAL# =  ',v_CommandType);
      ELSE
         SET v_WhereStrCommandType = CONCAT('SQLWAYS_EVAL# IN (',v_CommandType,')');
      end if;
   end if;

-- 控制等级
   SET v_WhereStrControlSeverity = '';
   IF IFNULL(v_ControlSeverity,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_ControlSeverity);
      IF v_index = 0 then
         SET v_WhereStrControlSeverity = CONCAT('SQLWAYS_EVAL# = ',v_ControlSeverity);
      ELSE
         SET v_WhereStrControlSeverity = CONCAT('SQLWAYS_EVAL# IN (',v_ControlSeverity,')');
      end if;
   end if;

-- 执行
-- 查询结果条数
   SET v_RowCount = cast(v_ReturnCount as SIGNED INTEGER);

   SET SQL_SELECT_LIMIT = v_RowCount;

-- 返回结果
   SET SWV_ExecDyn = 'SELECT DISTINCT
   ec.ControlId CommandId,
ec.ControlName CommandName
   FROM tt_TempEquipment e
   INNER JOIN tt_TempStation su  ON su.StationId = e.StationId
   INNER JOIN TBL_Control ec ON e.EquipmentTemplateId = ec.EquipmentTemplateId
   WHERE 1 = 1';
   SET @SWV_Stmt = SWV_ExecDyn;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;

   SET SQL_SELECT_LIMIT = DEFAULT;

   DROP TEMPORARY TABLE IF EXISTS tt_TempStation;
   DROP TEMPORARY TABLE IF EXISTS tt_TempEquipment;

   SET SWP_Ret_Value = 0;
END;

/*     PRT_UserDoorPrivilege

Comments:           用户设备权限


Author              Date             Comment       CODE[YYYYMMDD]
-------------------------------------------------------------------------------------------------------------
l96186              2008-01-14       Created
*************************************************************************************************************/
DROP PROCEDURE IF EXISTS PRT_UserDoorPrivilege;


CREATE PROCEDURE PRT_UserDoorPrivilege(v_CenterId           NATIONAL VARCHAR(4000)    ,
v_GroupId            NATIONAL VARCHAR(4000)    ,
v_StationCategory    NATIONAL VARCHAR(4000)    ,
v_StationId          NATIONAL VARCHAR(4000)    ,
v_QueryUserId        NATIONAL VARCHAR(20)   ,
v_ReturnCount        NATIONAL VARCHAR(20) ,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_index INT;            
   DECLARE v_RowCount INT;            
   DECLARE v_RoleId INT;            
   DECLARE v_WhereStrCenterId NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrGroupId NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrStationCategory NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrStationId NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrUserId NATIONAL VARCHAR(255);
   DECLARE v_IsAdmin INT;
	DECLARE SWV_ExecDyn VARCHAR(5000);
-- 查询结果条数
   IF v_CenterId is null then
      set v_CenterId = '-1';
   END IF;
   IF v_GroupId is null then
      set v_GroupId = '-1';
   END IF;
   IF v_StationCategory is null then
      set v_StationCategory = '-1';
   END IF;
   IF v_StationId is null then
      set v_StationId = '-1';
   END IF;
   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SET v_RowCount = cast(v_ReturnCount as SIGNED INTEGER);

-- 局站
   CREATE TEMPORARY TABLE tt_TEMPStation
   (
      StationId INT,
      StationName NATIONAL VARCHAR(255)
   );

-- 中心
   SET v_WhereStrCenterId = ' AND  1 = 1 ';
   IF IFNULL(v_CenterId,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_CenterId);
      IF v_index = 0 then
         SET v_WhereStrCenterId = CONCAT('SQLWAYS_EVAL# = ',v_CenterId);
      ELSE
         SET v_WhereStrCenterId = CONCAT('SQLWAYS_EVAL# IN (',v_CenterId,')');
      end if;
   end if;

-- 分组
   SET v_WhereStrGroupId = ' AND  1 = 1 ';
   IF IFNULL(v_GroupId,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_GroupId);
      IF v_index = 0 then
         SET v_WhereStrGroupId = CONCAT('SQLWAYS_EVAL# = ',v_GroupId);
      ELSE
         SET v_WhereStrGroupId = CONCAT('SQLWAYS_EVAL# IN (',v_GroupId,')');
      end if;
   end if;

-- 局站分类
   SET v_WhereStrStationCategory = ' AND  1 = 1 ';
   IF  IFNULL(v_StationCategory,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_StationCategory);
      IF v_index = 0 then
         SET v_WhereStrStationCategory = CONCAT('SQLWAYS_EVAL# =  ',v_StationCategory);
      ELSE
         SET v_WhereStrStationCategory = CONCAT('SQLWAYS_EVAL# IN (',v_StationCategory,')');
      end if;
   end if;

-- 局站ID
   SET v_WhereStrStationId = ' AND  1 = 1 ';
   IF  IFNULL(v_StationId,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_StationId);
      IF v_index = 0 then
         SET v_WhereStrStationId = CONCAT('SQLWAYS_EVAL# =  ',v_StationId);
      ELSE
         SET v_WhereStrStationId = CONCAT('SQLWAYS_EVAL# IN (',v_StationId,')');
      end if;
   end if;

-- 用户
   SET v_WhereStrUserId = ' AND  1 = 1 ';
   IF  IFNULL(v_QueryUserId,'-1') <> '-1' then

      SET v_WhereStrUserId = CONCAT('SQLWAYS_EVAL# = ',v_QueryUserId);
   end if;

-- 是否包含所有片区权限
   select   b.RoleId INTO v_RoleId FROM TBL_UserRoleMap a
   INNER JOIN TBL_UserRoleRight b ON a.RoleId = b.RoleId WHERE a.UserId = cast(v_QueryUserId as SIGNED INTEGER) AND b.OperationType = 2 AND b.OperationId = -1; 

   IF  (v_RoleId IS NULL) then

      SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL# TBL_Station su
INNER JOIN TBL_StationStructureMap sp ON su.StationId =  sp.StationId
INNER JOIN TBL_AreaMap am ON am.StationId = su.StationId
INNER JOIN TBL_Area a ON a.AreaId = am.AreaId
INNER JOIN TBL_UserRoleRight urr ON urr.OperationId = a.AreaId AND urr.OperationType = 2
INNER JOIN TBL_UserRoleMap mp ON mp.RoleId = urr.RoleId
WHERE 1 = 1 ',v_WhereStrCenterId,v_WhereStrGroupId,v_WhereStrStationCategory,
      v_WhereStrStationId,v_WhereStrUserId,'SQLWAYS_EVAL# ');
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
   ELSE
      SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL#  TBL_Station su
INNER JOIN TBL_StationStructureMap sp ON su.StationId =  sp.StationId
WHERE 1 = 1 ',v_WhereStrCenterId,
      v_WhereStrGroupId,v_WhereStrStationCategory,v_WhereStrStationId,'SQLWAYS_EVAL#  ');
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
   end if;


   SELECT DISTINCT
   e.DoorName DoorName,
e.DoorId DoorId
   FROM TBL_Door e
   INNER JOIN tt_TEMPStation su ON su.StationId = e.StationId
   ORDER BY DoorName;

   DROP TEMPORARY TABLE IF EXISTS tt_TEMPStation;

   SET SQL_SELECT_LIMIT = DEFAULT;

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# T_UserEquipmentPrivilege]...';

/*SQLWAYS_EVAL#      PRT_UserEquipmentPrivilege

Comments:           用户设备权限


Author              Date             Comment       CODE[YYYYMMDD]
-------------------------------------------------------------------------------------------------------------
l96186              2008-01-14       Created
*************************************************************************************************************/
DROP PROCEDURE IF EXISTS PRT_UserEquipmentPrivilege;


CREATE PROCEDURE PRT_UserEquipmentPrivilege(v_CenterId           NATIONAL VARCHAR(4000)    ,
v_GroupId            NATIONAL VARCHAR(4000)    ,
v_StationCategory    NATIONAL VARCHAR(4000)    ,
v_StationId          NATIONAL VARCHAR(4000)    ,
v_EquipmentCategory  NATIONAL VARCHAR(4000)    ,
v_QueryUserId        NATIONAL VARCHAR(20)   ,
v_ReturnCount        NATIONAL VARCHAR(20) ,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_index INT;            
   DECLARE v_RowCount INT;            
   DECLARE v_RoleId INT;            
   DECLARE v_WhereStrCenterId NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrGroupId NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrStationCategory NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrStationId NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrEquipCategory NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrUserId NATIONAL VARCHAR(255);
   DECLARE v_IsAdmin INT;
	DECLARE SWV_ExecDyn VARCHAR(5000);
-- 查询结果条数
   IF v_CenterId is null then
      set v_CenterId = '-1';
   END IF;
   IF v_GroupId is null then
      set v_GroupId = '-1';
   END IF;
   IF v_StationCategory is null then
      set v_StationCategory = '-1';
   END IF;
   IF v_StationId is null then
      set v_StationId = '-1';
   END IF;
   IF v_EquipmentCategory is null then
      set v_EquipmentCategory = '-1';
   END IF;
   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SET v_RowCount = cast(v_ReturnCount as SIGNED INTEGER);

-- 局站
   CREATE TEMPORARY TABLE tt_TEMPStation
   (
      StationId INT,
      StationName NATIONAL VARCHAR(255)
   );

-- 中心
   SET v_WhereStrCenterId = ' AND  1 = 1 ';
   IF IFNULL(v_CenterId,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_CenterId);
      IF v_index = 0 then
         SET v_WhereStrCenterId = CONCAT('SQLWAYS_EVAL# = ',v_CenterId);
      ELSE
         SET v_WhereStrCenterId = CONCAT('SQLWAYS_EVAL# IN (',v_CenterId,')');
      end if;
   end if;

-- 分组
   SET v_WhereStrGroupId = ' AND  1 = 1 ';
   IF IFNULL(v_GroupId,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_GroupId);
      IF v_index = 0 then
         SET v_WhereStrGroupId = CONCAT('SQLWAYS_EVAL# = ',v_GroupId);
      ELSE
         SET v_WhereStrGroupId = CONCAT('SQLWAYS_EVAL# IN (',v_GroupId,')');
      end if;
   end if;

-- 局站分类
   SET v_WhereStrStationCategory = ' AND  1 = 1 ';
   IF  IFNULL(v_StationCategory,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_StationCategory);
      IF v_index = 0 then
         SET v_WhereStrStationCategory = CONCAT('SQLWAYS_EVAL# =  ',v_StationCategory);
      ELSE
         SET v_WhereStrStationCategory = CONCAT('SQLWAYS_EVAL# IN (',v_StationCategory,')');
      end if;
   end if;

-- 局站ID
   SET v_WhereStrStationId = ' AND  1 = 1 ';
   IF  IFNULL(v_StationId,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_StationId);
      IF v_index = 0 then
         SET v_WhereStrStationId = CONCAT('SQLWAYS_EVAL# =  ',v_StationId);
      ELSE
         SET v_WhereStrStationId = CONCAT('SQLWAYS_EVAL# IN (',v_StationId,')');
      end if;
   end if;

-- 设备类型
   SET v_WhereStrEquipCategory = ' AND  1 = 1 ';
   IF  IFNULL(v_EquipmentCategory,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_EquipmentCategory);
      IF v_index = 0 then
         SET v_WhereStrEquipCategory = CONCAT('SQLWAYS_EVAL# =  ',v_EquipmentCategory);
      ELSE
         SET v_WhereStrEquipCategory = CONCAT('SQLWAYS_EVAL# IN (',v_EquipmentCategory,')');
      end if;
   end if;

-- 用户
   SET v_WhereStrUserId = ' AND  1 = 1 ';
   IF  IFNULL(v_QueryUserId,'-1') <> '-1' then

      SET v_WhereStrUserId = CONCAT('SQLWAYS_EVAL# = ',v_QueryUserId);
   end if;

-- 是否包含所有片区权限
   select   b.RoleId INTO v_RoleId FROM TBL_UserRoleMap a
   INNER JOIN TBL_UserRoleRight b ON a.RoleId = b.RoleId WHERE a.UserId = cast(v_QueryUserId as SIGNED INTEGER) AND b.OperationType = 2 AND b.OperationId = -1; 

   IF  (v_RoleId IS NULL) then

      SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL# TBL_Station su
INNER JOIN TBL_StationStructureMap sp ON su.StationId =  sp.StationId
INNER JOIN TBL_AreaMap am ON am.StationId = su.StationId
INNER JOIN TBL_Area a ON a.AreaId = am.AreaId
INNER JOIN TBL_UserRoleRight urr ON urr.OperationId = a.AreaId AND urr.OperationType = 2
INNER JOIN TBL_UserRoleMap mp ON mp.RoleId = urr.RoleId
WHERE 1 = 1 ',v_WhereStrCenterId,v_WhereStrGroupId,v_WhereStrStationCategory,
      v_WhereStrStationId,v_WhereStrUserId,'SQLWAYS_EVAL# su.StationName ');
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
   ELSE
      SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL#  TBL_Station su
INNER JOIN TBL_StationStructureMap sp ON su.StationId =  sp.StationId
WHERE 1 = 1 ',v_WhereStrCenterId,
      v_WhereStrGroupId,v_WhereStrStationCategory,v_WhereStrStationId,'SQLWAYS_EVAL# su.StationName ');
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
   end if;

-- 是否包含所有专业权限
   SET v_RoleId = NULL;
   select   b.RoleId INTO v_RoleId FROM TBL_UserRoleMap a
   INNER JOIN TBL_UserRoleRight b ON a.RoleId = b.RoleId WHERE a.UserId = cast(v_QueryUserId as SIGNED INTEGER) AND b.OperationType = 3 AND b.OperationId = -1;    	 

-- 返回结果
   SET SQL_SELECT_LIMIT = v_RowCount;    
   IF (v_RoleId IS NULL) then

      SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL# TBL_Equipment e
INNER JOIN TBL_SpecialtyGroupMap sg ON e.EquipmentCategory = sg.EntryItemId
INNER JOIN TBL_UserRoleRight urr ON urr.OperationId = sg.SpecialtyGroupId and urr.OperationType = 3
INNER JOIN TBL_UserRoleMap mp ON mp.RoleId = urr.RoleId
INNER JOIN #TEMPStation su ON su.StationId = e.StationId 
WHERE 1 = 1 ',v_WhereStrEquipCategory,
      v_WhereStrUserId,'SQLWAYS_EVAL# e.EquipmentName');
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
   ELSE
      SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL# TBL_Equipment e
INNER JOIN #TEMPStation su ON su.StationId = e.StationId 
WHERE 1 = 1 ',v_WhereStrEquipCategory,'SQLWAYS_EVAL# e.EquipmentName');
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
   end if;

   DROP TEMPORARY TABLE IF EXISTS tt_TEMPStation;

   SET SQL_SELECT_LIMIT = DEFAULT;

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# T_UserEventPrivilege]...';

/*SQLWAYS_EVAL#           用户事件权限


Author              Date             Comment       CODE[YYYYMMDD]
-------------------------------------------------------------------------------------------------------------
l96186              2008-01-14       Created
2009-10-28       优化性能
*************************************************************************************************************/
DROP PROCEDURE IF EXISTS PRT_UserEventPrivilege;
CREATE PROCEDURE PRT_UserEventPrivilege(v_CenterId           NATIONAL VARCHAR(4000)  ,
v_GroupId            NATIONAL VARCHAR(4000)  ,
v_StationCategory    NATIONAL VARCHAR(4000)  ,
v_StationId          NATIONAL VARCHAR(4000)  ,
v_EquipmentCategory  NATIONAL VARCHAR(4000)  ,
v_EquipmentId        NATIONAL VARCHAR(4000)  ,
v_EquipmentName      NATIONAL VARCHAR(4000)  ,
v_EventCategory      NATIONAL VARCHAR(4000)  ,
v_EventSeverity      NATIONAL VARCHAR(4000)  ,
v_QueryUserId        NATIONAL VARCHAR(20) ,
v_ReturnCount        NATIONAL VARCHAR(20) ,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_index INT;
   DECLARE v_RowCount INT;
   DECLARE v_RoleId INT;
   DECLARE v_WhereStrCenterId NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrStructureGroupId NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrStationCategory NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrStationId NATIONAL VARCHAR(4000);				
   DECLARE v_WhereStrUserId NATIONAL VARCHAR(255);                
   DECLARE v_WhereStrEquipCategory NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrEquipmentId NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrEventCategory NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrEventSeverity NATIONAL VARCHAR(4000);
   DECLARE v_JoinStationString NATIONAL VARCHAR(500);
	DECLARE SWV_ExecDyn VARCHAR(5000);
-- 查询结果条数
   IF v_CenterId is null then
      set v_CenterId = '-1';
   END IF;
   IF v_GroupId is null then
      set v_GroupId = '-1';
   END IF;
   IF v_StationCategory is null then
      set v_StationCategory = '-1';
   END IF;
   IF v_StationId is null then
      set v_StationId = '-1';
   END IF;
   IF v_EquipmentCategory is null then
      set v_EquipmentCategory = '-1';
   END IF;
   IF v_EquipmentId is null then
      set v_EquipmentId = '-1';
   END IF;
   IF v_EquipmentName is null then
      set v_EquipmentName = '-1';
   END IF;
   IF v_EventCategory is null then
      set v_EventCategory = '-1';
   END IF;
   IF v_EventSeverity is null then
      set v_EventSeverity = '-1';
   END IF;
   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SET v_RowCount = cast(v_ReturnCount as SIGNED INTEGER);

-- 中心
   SET v_WhereStrCenterId = '';
   IF IFNULL(v_CenterId,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_CenterId);
      IF v_index = 0 then
         SET v_WhereStrCenterId = CONCAT('SQLWAYS_EVAL# = ',v_CenterId);
      ELSE
         SET v_WhereStrCenterId = CONCAT('SQLWAYS_EVAL# IN (',v_CenterId,')');
      end if;
   end if;

-- 分组
   SET v_WhereStrStructureGroupId = '';
   IF IFNULL(v_GroupId,'-1') <> '-1' then

      IF LOCATE(',',v_GroupId) = 0 then

         SET v_WhereStrStructureGroupId = CONCAT('SQLWAYS_EVAL# = ',v_GroupId);
      ELSE
         SET v_WhereStrStructureGroupId = CONCAT('SQLWAYS_EVAL# IN (',v_GroupId,')');
      end if;
   end if;

-- 用户
   SET v_WhereStrUserId = '';
   IF  IFNULL(v_QueryUserId,'-1') <> '-1' then

      SET v_WhereStrUserId = CONCAT('SQLWAYS_EVAL# = ',v_QueryUserId);
   end if;

-- 局站分类
   SET v_WhereStrStationCategory = ' AND  1 = 1 ';
   IF IFNULL(v_StationCategory,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_StationCategory);
      IF v_index = 0 then
         SET v_WhereStrStationCategory = CONCAT('SQLWAYS_EVAL# =  ',v_StationCategory);
      ELSE
         SET v_WhereStrStationCategory = CONCAT('SQLWAYS_EVAL# IN (',v_StationCategory,')');
      end if;
   end if;

-- 局站ID
   SET v_WhereStrStationId = ' AND  1 = 1 ';
   IF IFNULL(v_StationId,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_StationId);
      IF v_index = 0 then
         SET v_WhereStrStationId = CONCAT('SQLWAYS_EVAL# =  ',v_StationId);
      ELSE
         SET v_WhereStrStationId = CONCAT('SQLWAYS_EVAL# IN (',v_StationId,')');
      end if;
   end if;    


   CREATE TEMPORARY TABLE tt_TempStation
   (
      StationId INT
   );
   CREATE INDEX TempStation_IDX ON tt_TempStation
   (StationId);

   select   b.RoleId INTO v_RoleId FROM TBL_UserRoleMap a
   INNER JOIN TBL_UserRoleRight b ON a.RoleId = b.RoleId WHERE a.UserId = cast(v_QueryUserId as SIGNED INTEGER) AND b.OperationType = 2 AND b.OperationId = -1; 

   IF (v_RoleId IS NULL) then

      SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL# TBL_Station su
INNER JOIN TBL_StationStructureMap sp ON su.StationId =  sp.StationId
INNER JOIN TBL_AreaMap am ON am.StationId = su.StationId
INNER JOIN TBL_Area a ON a.AreaId = am.AreaId
INNER JOIN TBL_UserRoleRight urr ON urr.OperationId = a.AreaId AND urr.OperationType = 2
INNER JOIN TBL_UserRoleMap mp ON mp.RoleId = urr.RoleId
WHERE 1 = 1 ',v_WhereStrCenterId,v_WhereStrStructureGroupId,v_WhereStrStationCategory,
      v_WhereStrStationId,v_WhereStrUserId,'SQLWAYS_EVAL# ');
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
   ELSE
      SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL#  TBL_Station su
INNER JOIN TBL_StationStructureMap sp ON su.StationId = sp.StationId
WHERE 1 = 1 ',v_WhereStrCenterId,
      v_WhereStrStructureGroupId,v_WhereStrStationCategory,v_WhereStrStationId,
      'SQLWAYS_EVAL# ');
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
   end if;

-- 设备类型
   SET v_WhereStrEquipCategory = ' AND  1 = 1 ';
   IF  IFNULL(v_EquipmentCategory,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_EquipmentCategory);
      IF v_index = 0 then
         SET v_WhereStrEquipCategory = CONCAT('SQLWAYS_EVAL# =  ',v_EquipmentCategory);
      ELSE
         SET v_WhereStrEquipCategory = CONCAT('SQLWAYS_EVAL# IN (',v_EquipmentCategory,')');
      end if;
   end if;

-- 设备
   SET v_WhereStrEquipmentId = '';
   IF IFNULL(v_EquipmentId,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_EquipmentId);
      IF v_index = 0 then
         SET v_WhereStrEquipmentId = CONCAT('SQLWAYS_EVAL# =  ',v_EquipmentId);
      ELSE
         SET v_WhereStrEquipmentId = CONCAT('SQLWAYS_EVAL# IN (',v_EquipmentId,')');
      end if;
   ELSE
      IF v_EquipmentName <> '-1' then

-- 附加引号
         CALL PRT_AttachQuotationMark(v_EquipmentName,v_EquipmentName);
         SET v_index = LOCATE(',',v_EquipmentName);
         IF v_index = 0 then
            SET v_WhereStrEquipmentId = CONCAT('SQLWAYS_EVAL# =  ',v_EquipmentName);
         ELSE
            SET v_WhereStrEquipmentId = CONCAT('SQLWAYS_EVAL# IN (',v_EquipmentName,')');
         end if;
      end if;
   end if;    

-- 设备
   CREATE TEMPORARY TABLE tt_TempEquipment
   (
      StationId INT, 
      EquipmentId INT, 
      EquipmentTemplateId INT
   );
   CREATE INDEX TempEquipment_IDX ON tt_TempEquipment
   (StationId, 
   EquipmentId, 
   EquipmentTemplateId);

-- 是否包含所有专业权限
   SET v_RoleId = NULL;
   select   b.RoleId INTO v_RoleId FROM TBL_UserRoleMap a
   INNER JOIN TBL_UserRoleRight b ON a.RoleId = b.RoleId WHERE a.UserId = cast(v_QueryUserId as SIGNED INTEGER) AND b.OperationType = 3 AND b.OperationId = -1;   

   IF (v_RoleId IS NULL) then

      SET SWV_ExecDyn = 'INSERT INTO tt_TempEquipment
      SELECT
      e.StationId,
e.EquipmentId,
e.EquipmentTemplateId
      FROM TBL_Equipment e
      INNER JOIN TBL_SpecialtyGroupMap sg ON e.EquipmentCategory = sg.EntryItemId
      INNER JOIN TBL_UserRoleRight urr ON urr.OperationId = sg.SpecialtyGroupId and urr.OperationType = 3
      INNER JOIN TBL_UserRoleMap mp ON mp.RoleId = urr.RoleId
      INNER JOIN tt_TempStation su ON su.StationId = e.StationId
      WHERE 1 = 1';
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
   ELSE
      SET SWV_ExecDyn = 'INSERT INTO tt_TempEquipment
      SELECT
      e.StationId,
e.EquipmentId,
e.EquipmentTemplateId
      FROM TBL_Equipment e
      INNER JOIN tt_TempStation su ON su.StationId = e.StationId
      WHERE 1 = 1';
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
   end if;

-- 事件类型
   SET v_WhereStrEventCategory = '';
   IF  IFNULL(v_EventCategory,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_EventCategory);
      IF v_index = 0 then
         SET v_WhereStrEventCategory = CONCAT('SQLWAYS_EVAL# =  ',v_EventCategory);
      ELSE
         SET v_WhereStrEventCategory = CONCAT('SQLWAYS_EVAL# IN (',v_EventCategory,')');
      end if;
   end if;

-- 事件等级
   SET v_WhereStrEventSeverity = '';
   IF IFNULL(v_EventSeverity,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_EventSeverity);
      IF v_index = 0 then
         SET v_WhereStrEventSeverity = CONCAT('SQLWAYS_EVAL# = ',v_EventSeverity);
      ELSE
         SET v_WhereStrEventSeverity = CONCAT('SQLWAYS_EVAL# IN (',v_EventSeverity,')');
      end if;
   end if;

-- 执行
-- 查询结果条数
   SET v_RowCount = cast(v_ReturnCount as SIGNED INTEGER);

   SET SQL_SELECT_LIMIT = v_RowCount;

-- 返回结果
   SET SWV_ExecDyn = 'SELECT DISTINCT
   ee.EventId EventId,
ee.EventName EventName
   FROM tt_TempEquipment e
   INNER JOIN tt_TempStation su  ON su.StationId = e.StationId
   INNER JOIN TBL_Event ee ON e.EquipmentTemplateId = ee.EquipmentTemplateId
   INNER JOIN TBL_EventCondition ce ON ee.EquipmentTemplateId = ce.EquipmentTemplateId AND ee.EventId = ce.EventId
   WHERE ee.Enable = 1';
   SET @SWV_Stmt = SWV_ExecDyn;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;

   SET SQL_SELECT_LIMIT = DEFAULT;

   DROP TEMPORARY TABLE IF EXISTS tt_TempStation;
   DROP TEMPORARY TABLE IF EXISTS tt_TempEquipment;

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# T_UserSignalPrivilege]...';

/*SQLWAYS_EVAL#           用户事件权限


Author              Date             Comment       CODE[YYYYMMDD]
-------------------------------------------------------------------------------------------------------------
l96186              2008-01-14       Created
2009-10-28       优化性能
*************************************************************************************************************/
DROP PROCEDURE IF EXISTS PRT_UserSignalPrivilege;

CREATE PROCEDURE PRT_UserSignalPrivilege(v_CenterId           NATIONAL VARCHAR(4000)  ,
v_GroupId            NATIONAL VARCHAR(4000)  ,
v_StationCategory    NATIONAL VARCHAR(4000)  ,
v_StationId          NATIONAL VARCHAR(4000)  ,
v_EquipmentCategory  NATIONAL VARCHAR(4000)  ,
v_EquipmentId        NATIONAL VARCHAR(4000)  ,
v_EquipmentName      NATIONAL VARCHAR(4000)  ,
v_SignalCategory     NATIONAL VARCHAR(4000)  ,
v_SignalProperty     NATIONAL VARCHAR(4000)  ,
v_QueryUserId        NATIONAL VARCHAR(20) ,
v_ReturnCount        NATIONAL VARCHAR(20) ,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_index INT;
   DECLARE v_RowCount INT;
   DECLARE v_RoleId INT;
   DECLARE v_WhereStrCenterId NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrStructureGroupId NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrStationCategory NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrStationId NATIONAL VARCHAR(4000);				
   DECLARE v_WhereStrUserId NATIONAL VARCHAR(255);                
   DECLARE v_WhereStrEquipCategory NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrEquipmentId NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrSignalCategory NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrSignalProperty NATIONAL VARCHAR(4000);
   DECLARE v_JoinStationString NATIONAL VARCHAR(500);
	DECLARE SWV_ExecDyn VARCHAR(5000);
-- 查询结果条数
   IF v_CenterId is null then
      set v_CenterId = '-1';
   END IF;
   IF v_GroupId is null then
      set v_GroupId = '-1';
   END IF;
   IF v_StationCategory is null then
      set v_StationCategory = '-1';
   END IF;
   IF v_StationId is null then
      set v_StationId = '-1';
   END IF;
   IF v_EquipmentCategory is null then
      set v_EquipmentCategory = '-1';
   END IF;
   IF v_EquipmentId is null then
      set v_EquipmentId = '-1';
   END IF;
   IF v_EquipmentName is null then
      set v_EquipmentName = '-1';
   END IF;
   IF v_SignalCategory is null then
      set v_SignalCategory = '-1';
   END IF;
   IF v_SignalProperty is null then
      set v_SignalProperty = '-1';
   END IF;
   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SET v_RowCount = cast(v_ReturnCount as SIGNED INTEGER);

-- 中心
   SET v_WhereStrCenterId = '';
   IF IFNULL(v_CenterId,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_CenterId);
      IF v_index = 0 then
         SET v_WhereStrCenterId = CONCAT('SQLWAYS_EVAL# = ',v_CenterId);
      ELSE
         SET v_WhereStrCenterId = CONCAT('SQLWAYS_EVAL# IN (',v_CenterId,')');
      end if;
   end if;

-- 分组
   SET v_WhereStrStructureGroupId = '';
   IF IFNULL(v_GroupId,'-1') <> '-1' then

      IF LOCATE(',',v_GroupId) = 0 then

         SET v_WhereStrStructureGroupId = CONCAT('SQLWAYS_EVAL# = ',v_GroupId);
      ELSE
         SET v_WhereStrStructureGroupId = CONCAT('SQLWAYS_EVAL# IN (',v_GroupId,')');
      end if;
   end if;

-- 用户
   SET v_WhereStrUserId = '';
   IF  IFNULL(v_QueryUserId,'-1') <> '-1' then

      SET v_WhereStrUserId = CONCAT('SQLWAYS_EVAL# = ',v_QueryUserId);
   end if;

-- 局站分类
   SET v_WhereStrStationCategory = ' AND  1 = 1 ';
   IF IFNULL(v_StationCategory,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_StationCategory);
      IF v_index = 0 then
         SET v_WhereStrStationCategory = CONCAT('SQLWAYS_EVAL# =  ',v_StationCategory);
      ELSE
         SET v_WhereStrStationCategory = CONCAT('SQLWAYS_EVAL# IN (',v_StationCategory,')');
      end if;
   end if;

-- 局站ID
   SET v_WhereStrStationId = ' AND  1 = 1 ';
   IF IFNULL(v_StationId,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_StationId);
      IF v_index = 0 then
         SET v_WhereStrStationId = CONCAT('SQLWAYS_EVAL# =  ',v_StationId);
      ELSE
         SET v_WhereStrStationId = CONCAT('SQLWAYS_EVAL# IN (',v_StationId,')');
      end if;
   end if;    


   CREATE TEMPORARY TABLE tt_TempStation
   (
      StationId INT
   );
   CREATE INDEX TempStation_IDX ON tt_TempStation
   (StationId);

   select   b.RoleId INTO v_RoleId FROM TBL_UserRoleMap a
   INNER JOIN TBL_UserRoleRight b ON a.RoleId = b.RoleId WHERE a.UserId = cast(v_QueryUserId as SIGNED INTEGER) AND b.OperationType = 2 AND b.OperationId = -1; 

   IF (v_RoleId IS NULL) then

      SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL# TBL_Station su
INNER JOIN TBL_StationStructureMap sp ON su.StationId =  sp.StationId
INNER JOIN TBL_AreaMap am ON am.StationId = su.StationId
INNER JOIN TBL_Area a ON a.AreaId = am.AreaId
INNER JOIN TBL_UserRoleRight urr ON urr.OperationId = a.AreaId AND urr.OperationType = 2
INNER JOIN TBL_UserRoleMap mp ON mp.RoleId = urr.RoleId
WHERE 1 = 1 ',v_WhereStrCenterId,v_WhereStrStructureGroupId,v_WhereStrStationCategory,
      v_WhereStrStationId,v_WhereStrUserId,'SQLWAYS_EVAL# ');
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
   ELSE
      SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL#  TBL_Station su
INNER JOIN TBL_StationStructureMap sp ON su.StationId = sp.StationId
WHERE 1 = 1 ',v_WhereStrCenterId,
      v_WhereStrStructureGroupId,v_WhereStrStationCategory,v_WhereStrStationId,
      'SQLWAYS_EVAL# ');
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
   end if;

-- 设备类型
   SET v_WhereStrEquipCategory = ' AND  1 = 1 ';
   IF  IFNULL(v_EquipmentCategory,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_EquipmentCategory);
      IF v_index = 0 then
         SET v_WhereStrEquipCategory = CONCAT('SQLWAYS_EVAL# =  ',v_EquipmentCategory);
      ELSE
         SET v_WhereStrEquipCategory = CONCAT('SQLWAYS_EVAL# IN (',v_EquipmentCategory,')');
      end if;
   end if;

-- 设备
   SET v_WhereStrEquipmentId = '';
   IF IFNULL(v_EquipmentId,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_EquipmentId);
      IF v_index = 0 then
         SET v_WhereStrEquipmentId = CONCAT('SQLWAYS_EVAL# =  ',v_EquipmentId);
      ELSE
         SET v_WhereStrEquipmentId = CONCAT('SQLWAYS_EVAL# IN (',v_EquipmentId,')');
      end if;
   ELSE
      IF v_EquipmentName <> '-1' then

-- 附加引号
         CALL PRT_AttachQuotationMark(v_EquipmentName,v_EquipmentName);
         SET v_index = LOCATE(',',v_EquipmentName);
         IF v_index = 0 then
            SET v_WhereStrEquipmentId = CONCAT('SQLWAYS_EVAL# =  ',v_EquipmentName);
         ELSE
            SET v_WhereStrEquipmentId = CONCAT('SQLWAYS_EVAL# IN (',v_EquipmentName,')');
         end if;
      end if;
   end if;    

-- 设备
   CREATE TEMPORARY TABLE tt_TempEquipment
   (
      StationId INT, 
      EquipmentId INT, 
      EquipmentTemplateId INT
   );
   CREATE INDEX TempEquipment_IDX ON tt_TempEquipment
   (StationId, 
   EquipmentId, 
   EquipmentTemplateId);

-- 是否包含所有专业权限
   SET v_RoleId = NULL;
   select   b.RoleId INTO v_RoleId FROM TBL_UserRoleMap a
   INNER JOIN TBL_UserRoleRight b ON a.RoleId = b.RoleId WHERE a.UserId = cast(v_QueryUserId as SIGNED INTEGER) AND b.OperationType = 3 AND b.OperationId = -1;   

   IF (v_RoleId IS NULL) then

      SET SWV_ExecDyn = 'INSERT INTO tt_TempEquipment
      SELECT
      e.StationId,
e.EquipmentId,
e.EquipmentTemplateId
      FROM TBL_Equipment e
      INNER JOIN TBL_SpecialtyGroupMap sg ON e.EquipmentCategory = sg.EntryItemId
      INNER JOIN TBL_UserRoleRight urr ON urr.OperationId = sg.SpecialtyGroupId and urr.OperationType = 3
      INNER JOIN TBL_UserRoleMap mp ON mp.RoleId = urr.RoleId
      INNER JOIN tt_TempStation su ON su.StationId = e.StationId
      WHERE 1 = 1';
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
   ELSE
      SET SWV_ExecDyn = 'INSERT INTO tt_TempEquipment
      SELECT
      e.StationId,
e.EquipmentId,
e.EquipmentTemplateId
      FROM TBL_Equipment e
      INNER JOIN tt_TempStation su ON su.StationId = e.StationId
      WHERE 1 = 1';
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
   end if;

-- 信号类型
   SET v_WhereStrSignalCategory = '';
   IF  IFNULL(v_SignalCategory,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_SignalCategory);
      IF v_index = 0 then
         SET v_WhereStrSignalCategory = CONCAT('SQLWAYS_EVAL# =  ',v_SignalCategory);
      ELSE
         SET v_WhereStrSignalCategory = CONCAT('SQLWAYS_EVAL# IN (',v_SignalCategory,')');
      end if;
   end if;

-- 事件等级
   SET v_WhereStrSignalProperty = '';
   IF IFNULL(v_SignalProperty,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_SignalProperty);
      IF v_index = 0 then
         SET v_WhereStrSignalProperty = CONCAT('SQLWAYS_EVAL# = ',v_SignalProperty);
      ELSE
         SET v_WhereStrSignalProperty = CONCAT('SQLWAYS_EVAL# IN (',v_SignalProperty,')');
      end if;
   end if;

-- 执行
-- 查询结果条数
   SET v_RowCount = cast(v_ReturnCount as SIGNED INTEGER);

   SET SQL_SELECT_LIMIT = v_RowCount;

-- 返回结果
   SET SWV_ExecDyn = 'SELECT DISTINCT
   es.SignalId SignalId,
es.SignalName SignalName
   FROM tt_TempEquipment e
   INNER JOIN TBL_Signal es ON e.EquipmentTemplateId = es.EquipmentTemplateId
   LEFT JOIN TBL_SignalProperty esp ON es.EquipmentTemplateId = esp.EquipmentTemplateId AND es.SignalId = esp.SignalId
   WHERE 1 = 1';
   SET @SWV_Stmt = SWV_ExecDyn;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;

   SET SQL_SELECT_LIMIT = DEFAULT;

   DROP TEMPORARY TABLE IF EXISTS tt_TempStation;
   DROP TEMPORARY TABLE IF EXISTS tt_TempEquipment;

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# T_UserStationPrivilege]...';

/*SQLWAYS_EVAL#      PRT_UserStationPrivilege

Comments:           用户局站权限


Author              Date             Comment       CODE[YYYYMMDD]
-------------------------------------------------------------------------------------------------------------
l96186              2008-01-14       Created
*************************************************************************************************************/

DROP PROCEDURE IF EXISTS PRT_UserStationPrivilege;


CREATE PROCEDURE PRT_UserStationPrivilege(v_CenterId           NATIONAL VARCHAR(4000)    ,
v_GroupId            NATIONAL VARCHAR(4000)    ,
v_StationCategory    NATIONAL VARCHAR(4000)    ,
v_QueryUserId        NATIONAL VARCHAR(20)   ,
v_ReturnCount        NATIONAL VARCHAR(20) ,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_index INT;            
   DECLARE v_RowCount INT;            
   DECLARE v_RoleId INT;            
   DECLARE v_WhereStrCenterId NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrGroupId NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrStationCategory NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrStationId NATIONAL VARCHAR(4000);
   DECLARE v_WhereStrUserId NATIONAL VARCHAR(255);
	DECLARE SWV_ExecDyn VARCHAR(5000);
-- 查询结果条数
   IF v_CenterId is null then
      set v_CenterId = '-1';
   END IF;
   IF v_GroupId is null then
      set v_GroupId = '-1';
   END IF;
   IF v_StationCategory is null then
      set v_StationCategory = '-1';
   END IF;
   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SET v_RowCount = cast(v_ReturnCount as SIGNED INTEGER);

-- 中心
   SET v_WhereStrCenterId = ' AND  1 = 1 ';
   IF IFNULL(v_CenterId,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_CenterId);
      IF v_index = 0 then
         SET v_WhereStrCenterId = CONCAT('SQLWAYS_EVAL# = ',v_CenterId);
      ELSE
         SET v_WhereStrCenterId = CONCAT('SQLWAYS_EVAL# IN (',v_CenterId,')');
      end if;
   end if;

-- 分组
   SET v_WhereStrGroupId = ' AND  1 = 1 ';
   IF IFNULL(v_GroupId,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_GroupId);
      IF v_index = 0 then
         SET v_WhereStrGroupId = CONCAT('SQLWAYS_EVAL# = ',v_GroupId);
      ELSE
         SET v_WhereStrGroupId = CONCAT('SQLWAYS_EVAL# IN (',v_GroupId,')');
      end if;
   end if;

-- 局站分类
   SET v_WhereStrStationCategory = ' AND  1 = 1 ';
   IF  IFNULL(v_StationCategory,'-1') <> '-1' then

      SET v_index = LOCATE(',',v_StationCategory);
      IF v_index = 0 then
         SET v_WhereStrStationCategory = CONCAT('SQLWAYS_EVAL# =  ',v_StationCategory);
      ELSE
         SET v_WhereStrStationCategory = CONCAT('SQLWAYS_EVAL# IN (',v_StationCategory,')');
      end if;
   end if;

-- 用户
   SET v_WhereStrUserId = '';
   IF  IFNULL(v_QueryUserId,'-1') <> '-1' then

      SET v_WhereStrUserId = CONCAT('SQLWAYS_EVAL# = ',v_QueryUserId);
   end if;

   select   b.RoleId INTO v_RoleId FROM TBL_UserRoleMap a
   INNER JOIN TBL_UserRoleRight b ON a.RoleId = b.RoleId WHERE a.UserId = cast(v_QueryUserId as SIGNED INTEGER) AND b.OperationType = 2 AND b.OperationId = -1;

-- 执行
   SET SQL_SELECT_LIMIT = v_RowCount;

   IF (v_RoleId IS NULL) then

-- 返回结果
      SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL# TBL_Station su
INNER JOIN TBL_StationStructureMap sp ON su.StationId =  sp.StationId
INNER JOIN TBL_AreaMap am ON am.StationId = su.StationId
INNER JOIN TBL_Area a ON a.AreaId = am.AreaId
INNER JOIN TBL_UserRoleRight urr ON urr.OperationId = a.AreaId AND urr.OperationType = 2
INNER JOIN TBL_UserRoleMap mp ON mp.RoleId = urr.RoleId
WHERE 1 = 1 ',v_WhereStrCenterId,v_WhereStrGroupId,v_WhereStrStationCategory,
      v_WhereStrUserId,'SQLWAYS_EVAL# ORDER BY StationName ');
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
   ELSE
-- 返回结果
      SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL#  TBL_Station su
INNER JOIN TBL_StationStructureMap sp ON su.StationId =  sp.StationId
WHERE 1 = 1 ',v_WhereStrCenterId,
      v_WhereStrGroupId,v_WhereStrStationCategory,'SQLWAYS_EVAL# ORDER BY StationName ');
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
   end if;

   SET SQL_SELECT_LIMIT = DEFAULT;

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# _GetGlobalUniqueIdentity]...';





DROP PROCEDURE IF EXISTS SP_GetGlobalUniqueIdentity;

CREATE PROCEDURE SP_GetGlobalUniqueIdentity(v_TableName       VARCHAR(30)        ,
v_PostalCode      INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL# 及监控中心区号生成数据表全局唯一键值.
*/
-- 声明局部变量
   DECLARE v_IdentityValue INT;     
   DECLARE v_TableId INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 参数检验
/* liangyj
   IF v_PostalCode is null then
      set v_PostalCode = 0;
   END IF;
*/
   SET @SWV_Error = 0;
   IF v_TableName    IS NULL then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

-- SQLWAYS_EVAL# 主键全局唯一性.
   IF (v_PostalCode  = 0) AND EXISTS(SELECT 'X' FROM TBL_DataItem WHERE EntryId = 62) then
      select   cast(ItemId as SIGNED INTEGER) INTO v_PostalCode FROM TBL_DataItem WHERE EntryId = 62;
   end if;

   SET v_PostalCode = IFNULL(v_PostalCode,0);


   IF NOT EXISTS(SELECT 'X' FROM TBL_PrimaryKeyIdentity WHERE TableName = v_TableName) then

      SET SWP_Ret_Value = -2;
      LEAVE SWL_return;
   end if;

-- 获取表ID
   select   TableId INTO v_TableId FROM  TBL_PrimaryKeyIdentity m WHERE  m.TableName  = v_TableName;


   IF v_TableId = 61 then
      SET v_PostalCode = 0;
   end if;

-- 判断是否存在时序记录
   START TRANSACTION;
   SET @SWV_Error = 0;
   IF NOT EXISTS(SELECT   'X'
   FROM     TBL_PrimaryKeyValue
   WHERE    TableId     =  v_TableId
   AND      PostalCode  =  v_PostalCode) then

  INSERT INTO TBL_PrimaryKeyValue(TableId        ,
PostalCode     ,
MinValue       ,
CurrentValue)
VALUES(v_TableId       ,
v_PostalCode    ,
1              ,
1);
   ELSE
      UPDATE  TBL_PrimaryKeyValue
      SET     CurrentValue    = IFNULL(CurrentValue,0)+1
      WHERE   TableId         = v_TableId
      AND     PostalCode      = v_PostalCode;
   end if;
   IF @SWV_Error <> 0 then

      ROLLBACK;
      SET SWP_Ret_Value = -3;
      LEAVE SWL_return;
   end if;

   SELECT  v_PostalCode*1000000+CurrentValue GlobalIdentity
   FROM    TBL_PrimaryKeyValue
   WHERE   TableId         = v_TableId
   AND     PostalCode      = v_PostalCode;

-- SQLWAYS_EVAL# serializable

   COMMIT;

   SET SWP_Ret_Value = 0;
END;




-- SELECT N'SQLWAYS_EVAL# M_ChangeStationState]...';





DROP PROCEDURE IF EXISTS PAM_ChangeStationState;

CREATE PROCEDURE PAM_ChangeStationState(v_UserId				INT,
v_StationId			INT,
v_StationState		INT,
v_Description		NATIONAL VARCHAR(255),INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN

-- 处理：
-- 1 修改局站状态和描述

-- 返回结果
-- -1 不可知错误
--  0 成功
--  1 参数为0或空
--  2 配置不存在或超过一个
--  3 没有权限

   DECLARE v_Return INT;
   DECLARE v_GetDate DATETIME;
   DECLARE v_PrivilegeId INT;
   DECLARE v_Total INT;
   DECLARE v_SStation NATIONAL VARCHAR(20);
   DECLARE v_SUserId NATIONAL VARCHAR(20);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 是否有局站工程状态设置权限
   SET v_PrivilegeId = 65;
   SET v_Return = PAM_OperationPrivilege(v_PrivilegeId,v_UserId);
   IF v_Return <> 1 then

      SET SWP_Ret_Value = 3;
      LEAVE SWL_return;
   end if;

-- 参数检查
   IF v_StationId IS NULL OR v_StationState IS NULL OR v_StationId = 0 then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

-- 处理权限后的局站
   SET v_SStation = CAST(v_StationId AS CHAR(30));
   SET v_SUserId = CAST(v_UserId AS CHAR(30));
   CREATE TEMPORARY TABLE tt_TempStation
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      StationId INT,
      StationName VARCHAR(128),
      StationState INT,
      StationCategory INT,
      StationGrade INT
   );
   CALL PAM_FilterStation('-1','-1','-1','-1',v_SStation,'-1','-1',v_SUserId,'#TempStation');

-- 是否有权限查看该局站
   select   COUNT(StationId) INTO v_Total FROM tt_TempStation WHERE StationId = v_StationId;
   IF (v_Total <> 1) then

      SET SWP_Ret_Value = 3;
      LEAVE SWL_return;
   end if;

-- 局站配置是否存在
   SELECT StationId FROM tt_TempStation WHERE StationId = v_StationId;
   IF (ROW_COUNT() <> 1) then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;

-- 局站状态是否存在
   SELECT ItemId FROM TBL_DataItem WHERE EntryId = 5 AND ItemId = v_StationState;
   IF (ROW_COUNT() <> 1) then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;

-- 当前时间
   SET v_GetDate = CURRENT_TIMESTAMP;

-- 更新局站状态和描述
   UPDATE TBL_Station
   SET StationState = v_StationState,Description = v_Description,UpdateTime = v_GetDate
   WHERE StationId = v_StationId;

   SET @SWV_Error = 0;
   DROP TEMPORARY TABLE IF EXISTS tt_TempStation;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;                                                                       

   SET SWP_Ret_Value = v_Return;
END;


-- SELECT N'SQLWAYS_EVAL# M_OnWatchStructureEvent]...';



DROP PROCEDURE IF EXISTS PAM_OnWatchStructureEvent;

CREATE PROCEDURE PAM_OnWatchStructureEvent(v_QueryUserId        NATIONAL VARCHAR(20)   ,INOUT SWP_Ret_Value INT)
BEGIN
-- 	监控值班
-- 	返回分组告警信息
-- 0  成功

   DECLARE v_Return INT;
   DECLARE v_CenterId INT;
   DECLARE v_CurrentTime DATETIME;

-- 当前时间
   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   SET v_CurrentTime = CURRENT_TIMESTAMP;

-- 获取分组
   CREATE TEMPORARY TABLE tt_TempStructure
   (
      StructureId INT,
      StructureGroupId INT,
      ParentStructureId INT,
      StructureName VARCHAR(128),
      IsUngroup BOOLEAN NOT NULL,
      StructureType INT,
      MapZoom FLOAT,
      Longitude NUMERIC(20,17),
      Latitude NUMERIC(20,17),
      Description NATIONAL VARCHAR(255),
      LevelPath NATIONAL VARCHAR(200),
      Enable BOOLEAN NOT NULL
   );
   CALL PAM_SelectChildStructure(0,1,1,0,'#TempStructure');

-- 处理权限后的局站
   CREATE TEMPORARY TABLE tt_TempStation
   (
      CenterId INT,
      CenterName NATIONAL VARCHAR(128),
      GroupId INT,
      GroupName NATIONAL VARCHAR(128),
      StationId INT,
      StationName NATIONAL VARCHAR(128),
      StationState INT,
      StationCategory INT,
      StationGrade INT
   );
   CALL PAM_FilterStation('-1','-1','-1','-1','-1','-1','-1',v_QueryUserId,'#TempStation');

-- 处理权限后的设备
   CREATE TEMPORARY TABLE tt_TempEquipment
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      StationId INT,
      StationName VARCHAR(128),
      StationState INT,
      StationCategory INT,
      EquipmentId INT,
      EquipmentName VARCHAR(128),
      EquipmentTemplateId INT,
      EquipmentCategory INT
   );
   CALL PAM_FilterEquipmentCategory('-1','-1','-1','-1',v_QueryUserId,'#TempStation','#TempEquipment');

-- 统计数据临时表
   CREATE TEMPORARY TABLE tt_Statistics
   (
      StructureId INT,
      StatisticsValue INT,
      StatisticsType INT
   );

-- 计数局站总数
   INSERT	tt_Statistics(StructureId, StatisticsValue, StatisticsType)
   SELECT ts.StructureId, COUNT(st.StationId), 1
   FROM tt_TempStructure ts
   INNER JOIN TBL_StationStructureMap sm ON ts.StructureId = sm.StructureId
   INNER JOIN tt_TempStation st ON st.StationId = sm.StationId
   GROUP BY ts.StructureId;

-- 计数中断局站总数
   INSERT	tt_Statistics(StructureId, StatisticsValue, StatisticsType)
   SELECT ts.StructureId, COUNT(st.StationId), 2
   FROM tt_TempStructure ts
   INNER JOIN TBL_StationStructureMap sm ON ts.StructureId = sm.StructureId
   INNER JOIN tt_TempStation st ON st.StationId = sm.StationId
   INNER JOIN TBL_Station ss ON st.StationId = ss.StationId AND ss.ConnectState = 0
   GROUP BY ts.StructureId;

-- 计数工程局站总数
   INSERT	tt_Statistics(StructureId, StatisticsValue, StatisticsType)
   SELECT ts.StructureId, COUNT(st.StationId), 3
   FROM tt_TempStructure ts
   INNER JOIN TBL_StationStructureMap sm ON ts.StructureId = sm.StructureId
   INNER JOIN tt_TempStation st ON st.StationId = sm.StationId
   INNER JOIN TBL_Station ss ON st.StationId = ss.StationId
   AND ss.StartTime IS NOT NULL AND ss.EndTime IS NOT NULL
   AND v_CurrentTime > ss.StartTime AND v_CurrentTime < ss.EndTime
   GROUP BY ts.StructureId;

-- 统计告警数据临时表
   CREATE TEMPORARY TABLE tt_EventStatistics
   (
      StructureId INT,
      StationId INT,
      EventCategoryId INT
   );

-- SQLWAYS_EVAL# 高温34)
   INSERT	tt_EventStatistics(StructureId, EventCategoryId, StationId)
   SELECT DISTINCT ts.StructureId, ae.EventCategoryId, ae.StationId
   FROM tt_TempStructure ts
   INNER JOIN TBL_StationStructureMap sm ON ts.StructureId = sm.StructureId
   INNER JOIN tt_TempStation st ON st.StationId = sm.StationId
   INNER JOIN tt_TempEquipment ee ON st.StationId = ee.StationId
   INNER JOIN TBL_ActiveEvent ae ON st.StationId = ae.StationId AND ee.EquipmentId = ae.EquipmentId AND ae.EndTime IS NULL AND ae.EventCategoryId IN(10,34)
   GROUP BY ts.StructureId,ae.EventCategoryId;

-- 返回统计数据
   SELECT	ts.StructureId AS ObjectId,
ts.StructureId AS UniqueId,
ts.StructureName AS SWI,
IFNULL((SELECT StatisticsValue FROM tt_Statistics ss WHERE ss.StructureId = ts.StructureId AND ss.StatisticsType = 1),0) AS SWI2,
IFNULL((SELECT StatisticsValue FROM tt_Statistics ss WHERE ss.StructureId = ts.StructureId AND ss.StatisticsType = 2),0) AS SWI3,
IFNULL((SELECT StatisticsValue FROM tt_Statistics ss WHERE ss.StructureId = ts.StructureId AND ss.StatisticsType = 3),0) AS SWI4,
IFNULL((SELECT COUNT(StationId) FROM tt_EventStatistics es WHERE es.StructureId = ts.StructureId AND es.EventCategoryId = 10),0) AS SWI5,
IFNULL((SELECT COUNT(StationId) FROM tt_EventStatistics es WHERE es.StructureId = ts.StructureId AND es.EventCategoryId = 34),0) AS SWI6
   FROM tt_TempStructure ts;

   DROP TEMPORARY TABLE IF EXISTS tt_TempEquipment;
   DROP TEMPORARY TABLE IF EXISTS tt_TempStation;
   DROP TEMPORARY TABLE IF EXISTS tt_TempStructure;
   DROP TEMPORARY TABLE IF EXISTS tt_Statistics;
   DROP TEMPORARY TABLE IF EXISTS tt_EventStatistics;

   SET SWP_Ret_Value = 0;
END;

-- SELECT N'SQLWAYS_EVAL# L_BackupHistoryAll]...';





DROP PROCEDURE IF EXISTS PBL_BackupHistoryAll;

CREATE PROCEDURE PBL_BackupHistoryAll(v_StartTime DATETIME,
v_EndTime DATETIME,
v_BusinessCategory INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL#      PBL_BackupHistoryAll
Parameters:         @StartTime             datetime  开始时间
@EndTime               datetime  结束时间
@BusinessCategory      int       备份数据类型ID
0.全部数据
1.历史事件
2.控制命令
3.历史信号
4.蓄电池
5.信号统计
6.刷卡记录
7.操作记录
8.通知服务记录
9.历史告警屏蔽记录
10.人员登录信息
11.关联信号数据
12.历史电表数据
Comments:           按业务类型准备备份历史数据(1.历史事件,2.控制命令,3.历史信号,4.蓄电池,5.信号统计,6.刷卡记录,7.操作记录,8.通知服务记录,9.历史告警屏蔽记录,10.人员登录信息,11.关联信号数据,12.历史电表数据)
Return:             0       成功
1       备份历史出错
2       备份控制命令出错
3       备份历史信号出错
4       备份蓄电池出错
5       备份信号统计出错
6       备份刷卡记录出错
7       备份操作记录出错
8		备份通知服务记录出错
9		备份历史告警屏蔽记录出错
10		备份人员登录信息出错
11		备份关联信号数据出错
12		备份历史电表数据出错		
*/

-- 声明变量
   DECLARE v_RowCount INT;
   DECLARE v_ReturnCode INT;
   IF v_BusinessCategory = 1 or v_BusinessCategory = 0 then

      SET v_ReturnCode = PBL_BackupHistoryEvent(v_StartTime,v_EndTime,v_RowCount);
      IF v_ReturnCode <> 0 then

         SET SWP_Ret_Value = 1;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_BusinessCategory = 2 or v_BusinessCategory = 0 then

      SET v_ReturnCode = PBL_BackupHistoryControl(v_StartTime,v_EndTime,v_RowCount);
      IF v_ReturnCode <> 0 then

         SET SWP_Ret_Value = 2;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_BusinessCategory = 3 or v_BusinessCategory = 0 then

      SET v_ReturnCode = PBL_BackupHistorySignal(v_StartTime,v_EndTime,v_RowCount);
      IF v_ReturnCode <> 0 then

         SET SWP_Ret_Value = 3;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_BusinessCategory = 4 or v_BusinessCategory = 0 then

      SET v_ReturnCode = PBL_BackupHistoryBattery(v_StartTime,v_EndTime,v_RowCount);
      IF v_ReturnCode <> 0 then

         SET SWP_Ret_Value = 4;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_BusinessCategory = 5 or v_BusinessCategory = 0 then

      SET v_ReturnCode = PBL_BackupSignalStatistics(v_StartTime,v_EndTime,v_RowCount);
      IF v_ReturnCode <> 0 then

         SET SWP_Ret_Value = 5;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_BusinessCategory = 6 or v_BusinessCategory = 0 then

      SET v_ReturnCode = PBL_BackupSwapCardRecord(v_StartTime,v_EndTime,v_RowCount);
      IF v_ReturnCode <> 0 then

         SET SWP_Ret_Value = 6;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_BusinessCategory = 7 or v_BusinessCategory = 0 then

      SET v_ReturnCode = PBL_BackupOperationRecord(v_StartTime,v_EndTime,v_RowCount);
      IF v_ReturnCode = 0 then 
         SET v_ReturnCode = PBL_BackupOperationDetail(v_StartTime,v_EndTime,v_RowCount);
      end if;
      IF v_ReturnCode <> 0 then

         SET SWP_Ret_Value = 7;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_BusinessCategory = 8 or v_BusinessCategory = 0 then

      SET v_ReturnCode = PBL_BackupNotificationLog(v_StartTime,v_EndTime,v_RowCount);
      IF v_ReturnCode <> 0 then

         SET SWP_Ret_Value = 8;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_BusinessCategory = 9 or v_BusinessCategory = 0 then

      SET v_ReturnCode = PBL_BackupHistoryEventMask(v_StartTime,v_EndTime,v_RowCount);
      IF v_ReturnCode <> 0 then

         SET SWP_Ret_Value = 9;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_BusinessCategory = 10 or v_BusinessCategory = 0 then

      SET v_ReturnCode = PBL_BackupLoginInfo(v_StartTime,v_EndTime,v_RowCount);
      IF v_ReturnCode <> 0 then

         SET SWP_Ret_Value = 10;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_BusinessCategory = 11 or v_BusinessCategory = 0 then

      SET v_ReturnCode = PBL_BackupRelatingSignal(v_StartTime,v_EndTime,v_RowCount);
      IF v_ReturnCode <> 0 then

         SET SWP_Ret_Value = 11;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_BusinessCategory = 12 or v_BusinessCategory = 0 then

      SET v_ReturnCode = PBL_BackupHistoryAmeter(v_StartTime,v_EndTime,v_RowCount);
      IF v_ReturnCode <> 0 then

         SET SWP_Ret_Value = 12;
         LEAVE SWL_return;
      end if;
   end if;

   SELECT v_RowCount;
   SET SWP_Ret_Value = 0;
END;






-- SELECT N'SQLWAYS_EVAL# L_Del_HistoryDataAll]...';





DROP PROCEDURE IF EXISTS PBL_Del_HistoryDataAll;

CREATE PROCEDURE PBL_Del_HistoryDataAll(v_DataCategory       INT         ,
v_StartTime          DATETIME    ,
v_EndTime            DATETIME    ,
v_StationId          INT    ,
v_EquipmentId        INT    ,
v_EquipmentState     INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL#       @HistoryCategory int         -- 数据种类     必须输入
0.全部数据
1.历史事件
2.控制命令
3.历史信号
4.蓄电池数据
5.信号统计
6.刷卡记录
7.操作记录
8.通知服务记录
9.历史告警屏蔽记录
10.人员登录信息
11.关联信号数据
12.历史电表数据
@StartTime       datetime    -- 开始时间
@EndTime         datetime    -- 结束时间
@StationId       int         -- 局站ID
@EquipmentId     int         -- 设备ID
@EquipmentState  int         -- 设备状态ID

Comments:           删除历史信号数据
Return:             0           成功
-1          参数存在空值代码
-2          开始时间不能大于结束时间
1..12       相关数据种类执行语法出错代码
*/
-- 声明变量
   DECLARE v_ErrorCode INT;

-- 参数验证
   IF v_DataCategory IS NULL then /*SQLWAYS_EVAL# IS NULL OR @EndTime IS NULL */

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;


-- 开始时间不能大于结束时间
   IF v_StartTime > v_EndTime then

      SET SWP_Ret_Value = -2;
      LEAVE SWL_return;
   end if;


   IF v_DataCategory = 1 or v_DataCategory = 0 then

      SET v_ErrorCode = PBL_Del_HistoryEvent(v_StartTime,v_EndTime,v_StationId,v_EquipmentId);
      IF v_ErrorCode <> 0 then

         SET SWP_Ret_Value = 1;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_DataCategory = 2 or v_DataCategory = 0 then

      SET v_ErrorCode = PBL_Del_HistoryControl(v_StartTime,v_EndTime,v_StationId,v_EquipmentId);
      IF v_ErrorCode <> 0 then

         SET SWP_Ret_Value = 2;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_DataCategory = 3 or v_DataCategory = 0 then

      SET v_ErrorCode = PBL_Del_HistorySignal(v_StartTime,v_EndTime,v_StationId,v_EquipmentId);
      IF v_ErrorCode <> 0 then

         SET SWP_Ret_Value = 3;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_DataCategory = 4 or v_DataCategory = 0 then

      SET v_ErrorCode = PBL_Del_HistoryBattery(v_StartTime,v_EndTime,v_StationId,v_EquipmentId,v_EquipmentState);
      IF v_ErrorCode <> 0 then

         SET SWP_Ret_Value = 4;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_DataCategory = 5 or v_DataCategory = 0 then

      SET v_ErrorCode = PBL_Del_SignalStatistics(v_StartTime,v_EndTime,v_StationId,v_EquipmentId);
      IF v_ErrorCode <> 0 then

         SET SWP_Ret_Value = 5;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_DataCategory = 6 or v_DataCategory = 0 then

      SET v_ErrorCode = PBL_Del_SwapCardRecord(v_StartTime,v_EndTime);
      IF v_ErrorCode <> 0 then

         SET SWP_Ret_Value = 6;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_DataCategory = 7 or v_DataCategory = 0 then

      SET v_ErrorCode = PBL_Del_OperationRecord(v_StartTime,v_EndTime);
      IF v_ErrorCode = 0 then 
         SET v_ErrorCode = PBL_Del_OperationDetail(v_StartTime,v_EndTime);
      end if;
      IF v_ErrorCode <> 0 then

         SET SWP_Ret_Value = 7;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_DataCategory = 8 or v_DataCategory = 0 then

      SET v_ErrorCode = PBL_Del_NotificationLog(v_StartTime,v_EndTime);
      IF v_ErrorCode <> 0 then

         SET SWP_Ret_Value = 8;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_DataCategory = 9 or v_DataCategory = 0 then

      SET v_ErrorCode = PBL_Del_HistoryEventMask(v_StartTime,v_EndTime);
      IF v_ErrorCode <> 0 then

         SET SWP_Ret_Value = 9;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_DataCategory = 10 or v_DataCategory = 0 then

      SET v_ErrorCode = PBL_Del_LoginInfo(v_StartTime,v_EndTime);
      IF v_ErrorCode <> 0 then

         SET SWP_Ret_Value = 10;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_DataCategory = 11 or v_DataCategory = 0 then

      SET v_ErrorCode = PBL_Del_RelatingSignal(v_StartTime,v_EndTime);
      IF v_ErrorCode <> 0 then

         SET SWP_Ret_Value = 11;
         LEAVE SWL_return;
      end if;
   end if;
   IF v_DataCategory = 12 or v_DataCategory = 0 then

      SET v_ErrorCode = PBL_Del_HistoryAmeter(v_StartTime,v_EndTime);
      IF v_ErrorCode <> 0 then

         SET SWP_Ret_Value = 12;
         LEAVE SWL_return;
      end if;
   end if;

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_DeleteHistoryAll]...';





DROP PROCEDURE IF EXISTS PBL_DeleteHistoryAll;

CREATE PROCEDURE PBL_DeleteHistoryAll(v_BusinessCategory    INT,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL#       @BusinessCategory      int       备份数据类型ID
1.历史事件
2.控制命令
3.历史信号
4.蓄电池
5.信号统计
6.刷卡记录
7.操作记录
Comments:           按业务类型准备备份历史数据(1.历史事件,2.控制命令,3.历史信号,4.蓄电池,5.信号统计,6.刷卡记录,7.操作记录)
Return:             0       成功
1       备份历史出错
2       备份控制命令出错
3       备份历史信号出错
4       备份蓄电池出错
5       备份信号统计出错
6       备份刷卡记录出错
7       备份操作记录出错
*/
-- 声明变量
   DECLARE v_RowCount INT;    
   DECLARE v_ReturnCode INT;
   IF v_BusinessCategory = 1 then

      SET v_ReturnCode = PBL_TruncateTable('SQLWAYS_EVAL# nt');
      IF v_ReturnCode <> 0 then

         SELECT 1;
         LEAVE SWL_return;
      end if;
   ELSE 
      IF v_BusinessCategory = 2 then

         SET v_ReturnCode = PBL_TruncateTable('SQLWAYS_EVAL# trol');
         IF v_ReturnCode <> 0 then

            SELECT 2;
            LEAVE SWL_return;
         end if;
      ELSE 
         IF v_BusinessCategory = 3 then

            SET v_ReturnCode = PBL_TruncateTable('SQLWAYS_EVAL# nal1');
            SET v_ReturnCode = PBL_TruncateTable('SQLWAYS_EVAL# nal2');
            SET v_ReturnCode = PBL_TruncateTable('SQLWAYS_EVAL# nal3');
            SET v_ReturnCode = PBL_TruncateTable('SQLWAYS_EVAL# nal4');
            SET v_ReturnCode = PBL_TruncateTable('SQLWAYS_EVAL# nal5');
            SET v_ReturnCode = PBL_TruncateTable('SQLWAYS_EVAL# nal6');
            SET v_ReturnCode = PBL_TruncateTable('SQLWAYS_EVAL# nal7');
            SET v_ReturnCode = PBL_TruncateTable('SQLWAYS_EVAL# nal8');
            SET v_ReturnCode = PBL_TruncateTable('SQLWAYS_EVAL# nal9');
            SET v_ReturnCode = PBL_TruncateTable('SQLWAYS_EVAL# nal10');
            SET v_ReturnCode = PBL_TruncateTable('SQLWAYS_EVAL# nal11');
            SET v_ReturnCode = PBL_TruncateTable('SQLWAYS_EVAL# nal12');
            IF v_ReturnCode <> 0 then

               SELECT 3;
               LEAVE SWL_return;
            end if;
         ELSE 
            IF v_BusinessCategory = 4 then

               SET v_ReturnCode = PBL_TruncateTable('SQLWAYS_EVAL# tery1');
               SET v_ReturnCode = PBL_TruncateTable('SQLWAYS_EVAL# tery2');
               SET v_ReturnCode = PBL_TruncateTable('SQLWAYS_EVAL# tery3');
               SET v_ReturnCode = PBL_TruncateTable('SQLWAYS_EVAL# tery4');
               SET v_ReturnCode = PBL_TruncateTable('SQLWAYS_EVAL# tery5');
               SET v_ReturnCode = PBL_TruncateTable('SQLWAYS_EVAL# tery6');
               SET v_ReturnCode = PBL_TruncateTable('SQLWAYS_EVAL# tery7');
               SET v_ReturnCode = PBL_TruncateTable('SQLWAYS_EVAL# tery8');
               SET v_ReturnCode = PBL_TruncateTable('SQLWAYS_EVAL# tery9');
               SET v_ReturnCode = PBL_TruncateTable('SQLWAYS_EVAL# tery10');
               SET v_ReturnCode = PBL_TruncateTable('SQLWAYS_EVAL# tery11');
               SET v_ReturnCode = PBL_TruncateTable('SQLWAYS_EVAL# tery12');
               IF v_ReturnCode <> 0 then

                  SELECT 4;
                  LEAVE SWL_return;
               end if;
            ELSE 
               IF v_BusinessCategory = 5 then

                  SET v_ReturnCode = PBL_TruncateTable('SQLWAYS_EVAL# istics');
                  IF v_ReturnCode <> 0 then

                     SELECT 5;
                     LEAVE SWL_return;
                  end if;
               ELSE 
                  IF v_BusinessCategory = 6 then

                     SET v_ReturnCode = PBL_TruncateTable('SQLWAYS_EVAL# cord');
                     IF v_ReturnCode <> 0 then

                        SELECT 6;
                        LEAVE SWL_return;
                     end if;
                  ELSE 
                     IF v_BusinessCategory = 7 then

                        SET v_ReturnCode = PBL_TruncateTable('SQLWAYS_EVAL# ecord');
                        IF v_ReturnCode <> 0 then

                           SELECT 7;
                           LEAVE SWL_return;
                        end if;
                     end if;
                  end if;
               end if;
            end if;
         end if;
      end if;
   end if;

   SELECT v_RowCount;

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# L_SARGetSecondary]...';





DROP PROCEDURE IF EXISTS PBL_SARGetSecondary;
CREATE PROCEDURE PBL_SARGetSecondary(v_PrimaryStationId          	INT    ,
v_PrimaryEquipmentId        	INT    ,
v_PrimaryEventId            	INT    ,
v_PrimaryConditionId			INT    ,
v_PrimaryStartTime		  	DATETIME,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE v_PrimaryStandardId INT;			
   DECLARE v_ProcessDelay INT;
   DECLARE v_MinIndex INT;
   DECLARE v_MaxIndex INT;
   DECLARE v_SecStationId INT;			
   DECLARE v_SecEquipmentId INT;			
   DECLARE v_SecEventId INT;			
   DECLARE v_SecEventConditionId INT;			
   DECLARE v_SecSequenceId NATIONAL VARCHAR(128);	
   DECLARE v_SecStartTime DATETIME;		
   DECLARE v_SecEndTime DATETIME;		
   DECLARE v_SecOverturn INT;			
   DECLARE v_SecMeanings NATIONAL VARCHAR(255);	
   DECLARE v_SecEventValue FLOAT; 			
   DECLARE v_SecBaseTypeId NUMERIC(10,0);
   DECLARE v_CurrentTime DATETIME;
   DECLARE v_StationState INT;
   DECLARE v_CenterId INT;
   DECLARE v_CenterName NATIONAL VARCHAR(255);
   DECLARE v_StructureId INT;
   DECLARE v_StructureName NATIONAL VARCHAR(255);
   DECLARE v_MonitorUnitName NATIONAL VARCHAR(255);
   DECLARE v_EquipmentCategoryName NATIONAL VARCHAR(255);
   DECLARE v_BaseTypeName NATIONAL VARCHAR(255);
   DECLARE v_StandardMeaning NATIONAL VARCHAR(255);
   DECLARE v_Vender NATIONAL VARCHAR(255);
   DECLARE v_EventSeverityId INT;
   DECLARE v_EventSeverity NATIONAL VARCHAR(255);
   DECLARE v_StandardAlarmNameId INT;
   DECLARE v_StandardAlarmName NATIONAL VARCHAR(256);
   DECLARE v_StandardVer INT;

-- 当前时间
   SET v_CurrentTime = CURRENT_TIMESTAMP;

-- SQLWAYS_EVAL# ，设备，信号名，基类ID，及常用事件属性形成ActiveEvent，加快界面和告警通知速度
   SET v_StationState = PNL_GetStationState(v_PrimaryStationId,v_PrimaryStartTime);

   select   StructureId, StructureName INTO v_CenterId,v_CenterName FROM TBL_StationStructure WHERE ParentStructureId = 0;

   select   structure.StructureId, structure.StructureName INTO v_StructureId,v_StructureName FROM TBL_StationStructureMap map, TBL_StationStructure structure WHERE map.StationId = v_PrimaryStationId
   AND map.StructureId = structure.StructureId
   AND structure.StructureGroupId = 1;

-- 主告警信息
   select   StandardId INTO v_PrimaryStandardId FROM TBL_SARAlarmActiveRecord WHERE RelationType = 1 AND StationId  = v_PrimaryStationId
   AND EquipmentId = v_PrimaryEquipmentId AND EventId = v_PrimaryEventId
   AND EventConditionId = v_PrimaryConditionId AND StartTime = v_PrimaryStartTime   LIMIT 1;

   select   ProcessDelay INTO v_ProcessDelay FROM TBL_SARPrimaryAlarmRule WHERE PrimaryId = v_PrimaryStandardId;

-- 关联次告警
   CREATE TEMPORARY TABLE tt_SecondaryTemp
   (
      Idx INT   AUTO_INCREMENT PRIMARY KEY,
      SequenceId NATIONAL VARCHAR(128),
      StationId INT,
      EquipmentId INT,
      EventId INT,
      EventConditionId INT,
      StartTime DATETIME,
      StandardId INT,
      EndTime DATETIME,
      Overturn INT,
      Meanings NATIONAL VARCHAR(255),
      EventValue FLOAT,
      BaseTypeId NUMERIC(10,0)
   );

   INSERT INTO tt_SecondaryTemp(SequenceId			,
StationId			,
EquipmentId			,
EventId				,
EventConditionId	,
StartTime			,
StandardId          ,
EndTime				,
Overturn			,
Meanings			,
EventValue			,
BaseTypeId)
   SELECT
   SequenceId			,
StationId			,
EquipmentId			,
EventId				,
EventConditionId	,
StartTime			,
StandardId			,
EndTime				,
Overturn			,
Meanings			,
EventValue			,
BaseTypeId
   FROM TBL_SARAlarmActiveRecord
   WHERE RelationType = 2 AND ABS(TIMESTAMPDIFF(SECOND,v_PrimaryStartTime,StartTime)) <= v_ProcessDelay;


-- 装配次告警
   CREATE TEMPORARY TABLE tt_CompleteSecondaryTemp
   (
      SequenceId NATIONAL VARCHAR(128),
      StationId INT,
      StationName NATIONAL VARCHAR(255),
      EquipmentId INT,
      EquipmentName NATIONAL VARCHAR(128),
      EventId INT,
      EventName NATIONAL VARCHAR(128),
      EventConditionId INT,
      EventSeverityId INT,
      EventSeverity NATIONAL VARCHAR(128),
      StartTime DATETIME,
      EndTime DATETIME,
      CancelTime DATETIME,
      CancelUserId INT,
      CancelUserName NATIONAL VARCHAR(128),
      ConfirmTime DATETIME,
      ConfirmerId INT,
      ConfirmerName NATIONAL VARCHAR(128),
      EventValue FLOAT,
      ReversalNum INT,
      Meanings NATIONAL VARCHAR(255),
      EventFilePath NATIONAL VARCHAR(255),
      Description NATIONAL VARCHAR(255),
      SourceHostId INT,
      InstructionId NATIONAL VARCHAR(255),
      InstructionStatus INT,
      StandardAlarmNameId INT,
      StandardAlarmName NATIONAL VARCHAR(128),
      BaseTypeId NUMERIC(10,0),
      BaseTypeName NATIONAL VARCHAR(128),
      EquipmentCategory INT,
      EquipmentCategoryName NATIONAL VARCHAR(128),
      MaintainState BOOLEAN  NOT NULL  DEFAULT 0,
      SignalId INT,
      RelateSequenceId NATIONAL VARCHAR(128),
      EventCategoryId INT,
      EventStateId INT,
      CenterId INT,
      CenterName NATIONAL VARCHAR(128),
      StructureName NATIONAL VARCHAR(128),
      MonitorUnitName NATIONAL VARCHAR(128),
      StructureId INT,
      StationCategoryId INT,
      EquipmentVendor NATIONAL VARCHAR(128)
   );

   select   Min(Idx), Max(Idx) INTO v_MinIndex,v_MaxIndex FROM tt_SecondaryTemp;
   WHILE(v_MinIndex <= v_MaxIndex) DO
-- 获取次告警
      select   StationId, EquipmentId, EventId, EventConditionId, SequenceId, StartTime, EndTime, Overturn, Meanings, EventValue, BaseTypeId INTO v_SecStationId,v_SecEquipmentId,v_SecEventId,v_SecEventConditionId,v_SecSequenceId,
      v_SecStartTime,v_SecEndTime,v_SecOverturn,v_SecMeanings,v_SecEventValue,
      v_SecBaseTypeId FROM tt_SecondaryTemp WHERE Idx = v_MinIndex;
      select   MonitorUnitName, dataItem.ItemValue INTO v_MonitorUnitName,v_EquipmentCategoryName FROM TSL_MonitorUnit monitorUnit, TBL_Equipment equipment, TBL_DataItem dataItem WHERE monitorUnit.MonitorUnitId = equipment.MonitorUnitId
      AND equipment.EquipmentId = v_SecEquipmentId
      AND equipment.StationId = v_SecStationId
      AND dataItem.EntryId = 7
      AND equipment.EquipmentCategory = dataItem.ItemId;
      select   EventSeverity, Meanings, A.BaseTypeId INTO v_EventSeverityId,v_StandardMeaning,v_SecBaseTypeId FROM TBL_EventCondition A, TBL_Equipment B WHERE B.StationId = v_SecStationId AND B.EquipmentId = v_SecEquipmentId
      AND A.EquipmentTemplateId = B.EquipmentTemplateId
      AND A.EventId = v_SecEventId AND A.EventConditionId = v_SecEventConditionId;
      select   BaseTypeName INTO v_BaseTypeName FROM TBL_EventBaseDic WHERE BaseTypeId = v_SecBaseTypeId;

/*SQLWAYS_EVAL# = srule.StandardDicId  
FROM TBL_Event configEvent, TBL_StandardTemplateMap map, TBL_StandardRule srule, TBL_Station station,TBL_Equipment equipment
WHERE equipment.EquipmentTemplateId = map.EquipmentTemplateId
AND configEvent.EquipmentTemplateId = equipment.EquipmentTemplateId
AND map.StandardTemplateId = srule.StandardTemplateId
AND configEvent.EventName = srule.EventName
AND station.StationCategory = map.StationCategory
AND configEvent.EventId = @SecEventId
AND station.StationId = @SecStationId
AND equipment.StationId = @SecStationId
AND equipment.EquipmentId = @SecEquipmentId
AND srule.Meanings = @StandardMeaning
*/

      IF v_SecBaseTypeId IS NOT NULL then

         SET v_StandardVer = PAM_GetStandardVer();
         select   A.StandardDicId, replace(D.EventStandardName,'XX',CAST(v_SecBaseTypeId -floor(v_SecBaseTypeId/1000)*1000 AS CHAR(10))) INTO v_StandardAlarmNameId,v_StandardAlarmName FROM TBL_EventBaseMap A
         INNER JOIN TBL_StationBaseMap B ON A.StationBaseType = B.StationBaseType AND B.StandardType = v_StandardVer
         INNER JOIN TBL_Station C ON C.StationCategory = B.StationCategory
         INNER JOIN TBL_StandardDicEvent D ON D.StandardDicId = A.StandardDicId
         AND (D.StationCategory = B.StationBaseType OR D.StationCategory = 0)
         AND D.StandardType = v_StandardVer WHERE A.BaseTypeId = floor(v_SecBaseTypeId/1000)*1000+1
         AND C.StationId = v_SecStationId;
      end if;
      select   ItemValue INTO v_EventSeverity FROM TBL_DataItem WHERE EntryId = 23 AND ItemId = v_EventSeverityId;

/*SQLWAYS_EVAL# = StandardName
FROM TBL_StandardDic
WHERE StandardDicId = @StandardAlarmNameId    
*/

      select   Vendor INTO v_Vender FROM   TBL_Equipment equipment WHERE equipment.EquipmentId = v_SecEquipmentId;
      INSERT INTO tt_CompleteSecondaryTemp(SequenceId,
StationId ,
StationName,
EquipmentId,
EquipmentName ,
EventId,
EventName,
EventConditionId,
EventSeverityId,
EventSeverity,
StartTime,
EndTime,
CancelTime,
CancelUserId,
CancelUserName ,
ConfirmTime,
ConfirmerId,
ConfirmerName,
EventValue ,
ReversalNum,
Meanings ,
EventFilePath ,
Description,
SourceHostId ,
InstructionId ,
InstructionStatus,
StandardAlarmNameId ,
StandardAlarmName,
BaseTypeId,
BaseTypeName ,
EquipmentCategory ,
EquipmentCategoryName,
MaintainState ,
SignalId ,
RelateSequenceId,
EventCategoryId,
EventStateId,
CenterId,
CenterName,
StructureName,
MonitorUnitName,
StructureId,
StationCategoryId,
EquipmentVendor)
      SELECT
      v_SecSequenceId,
v_SecStationId,
st.StationName,
v_SecEquipmentId,
eq.EquipmentName,
v_SecEventId,
ev.EventName,
v_SecEventConditionId,
v_EventSeverityId,
v_EventSeverity,
v_SecStartTime ,
v_SecEndTime ,
NULL AS CancelTime,
NULL AS CancelUserId,
NULL AS CancelUserName,
v_CurrentTime AS ConfirmTime,
-2 AS ConfirmerId,
'系统自动确认' AS ConfirmName,
v_SecEventValue ,
v_SecOverturn AS ReversalNum,
v_SecMeanings ,
NULL AS EventFilePath,
NULL AS Description,
eq.MonitorUnitId,
NULL AS InstructionId,
0 AS InstructionStatus,
v_StandardAlarmNameId,
v_StandardAlarmName ,
v_SecBaseTypeId,
v_BaseTypeName,
eq.EquipmentCategory ,
v_EquipmentCategoryName ,
v_StationState  AS MaintainState,
ev.SignalId ,
NULL AS RelateSequenceId ,
ev.EventCategory,
ev.Enable    ,
v_CenterId       ,
v_CenterName     ,
v_StructureName   ,
v_MonitorUnitName ,
v_StructureId ,
st.StationCategory,
v_Vender
      FROM TBL_EventCondition ec
      INNER JOIN TBL_Equipment eq ON ec.EquipmentTemplateId = eq.EquipmentTemplateId
      INNER JOIN TBL_Event ev ON  ev.EventId = ec.EventId  AND ec.EquipmentTemplateId = ev.EquipmentTemplateId
      INNER JOIN TBL_Station st ON eq.StationId = st.StationId
      WHERE eq.EquipmentId = v_SecEquipmentId
      AND eq.StationId = v_SecStationId
      AND ec.EventId = v_SecEventId
      AND ec.EventConditionId = v_SecEventConditionId;
      SET v_MinIndex = v_MinIndex+1;
   END WHILE;

-- 历史次告警
   INSERT INTO tt_CompleteSecondaryTemp(SequenceId,
StationId ,
StationName,
EquipmentId,
EquipmentName ,
EventId,
EventName,
EventConditionId,
EventSeverityId,
EventSeverity,
StartTime,
EndTime,
CancelTime,
CancelUserId,
CancelUserName ,
ConfirmTime,
ConfirmerId,
ConfirmerName,
EventValue ,
ReversalNum,
Meanings ,
EventFilePath ,
Description,
SourceHostId ,
InstructionId ,
InstructionStatus,
StandardAlarmNameId ,
StandardAlarmName,
BaseTypeId,
BaseTypeName ,
EquipmentCategory ,
EquipmentCategoryName,
MaintainState ,
SignalId ,
RelateSequenceId,
EventCategoryId,
EventStateId,
CenterId,
CenterName,
StructureName,
MonitorUnitName,
StructureId,
StationCategoryId,
EquipmentVendor)
   SELECT
   he.SequenceId,
he.StationId ,
he.StationName,
he.EquipmentId,
he.EquipmentName ,
he.EventId,
he.EventName,
he.EventConditionId,
he.EventSeverityId,
he.EventSeverity,
he.StartTime,
he.EndTime,
he.CancelTime,
he.CancelUserId,
he.CancelUserName ,
he.ConfirmTime,
he.ConfirmerId,
he.ConfirmerName,
he.EventValue ,
he.ReversalNum,
he.Meanings ,
he.EventFilePath ,
he.Description,
he.SourceHostId ,
he.InstructionId ,
he.InstructionStatus,
he.StandardAlarmNameId ,
he.StandardAlarmName,
he.BaseTypeId,
he.BaseTypeName ,
he.EquipmentCategory ,
he.EquipmentCategoryName,
he.MaintainState ,
he.SignalId ,
he.RelateSequenceId,
he.EventCategoryId,
he.EventStateId,
he.CenterId,
he.CenterName,
he.StructureName,
he.MonitorUnitName,
he.StructureId,
he.StationCategoryId,
he.EquipmentVendor
   FROM TBL_HistoryEvent he
   INNER JOIN TBL_SARAlarmRelation ar ON he.StationId = ar.CauseStationId AND he.EquipmentId = ar.CauseEquipmentId
   AND he.EventId = ar.CauseEventId AND he.EventConditionId = ar.CauseEventConditionId
   AND he.StartTime = ar.CauseStartTime AND ar.RelationType = 1
   AND ar.StationId = v_PrimaryStationId AND ar.EquipmentId = v_PrimaryEquipmentId
   AND ar.EventId = v_PrimaryEventId AND ar.EventConditionId = v_PrimaryConditionId
   AND ar.StartTime = v_PrimaryStartTime;

   SELECT DISTINCT ct.* ,sc.* FROM tt_CompleteSecondaryTemp ct
   LEFT JOIN TBL_StandardDic sc ON ct.StandardAlarmNameId = sc.StandardDicId;


-- 删除临时表
   DROP TEMPORARY TABLE IF EXISTS tt_SecondaryTemp;
   DROP TEMPORARY TABLE IF EXISTS tt_CompleteSecondaryTemp;

   SET SWP_Ret_Value = 0;
END;




-- SELECT N'SQLWAYS_EVAL# T_InitDataEntryItem]...';





DROP PROCEDURE IF EXISTS PCT_InitDataEntryItem;

CREATE PROCEDURE PCT_InitDataEntryItem(v_EntryId      INT                   ,
v_ItemId       INT                   ,
v_ParentEntryId INT                  ,
v_ParentItemId  INT                  ,
v_IsSystem     INT                   ,
v_ItemValue    VARCHAR(255)          ,
v_Description  VARCHAR(255)          ,
v_ItemAlias VARCHAR(255))
BEGIN
   CALL PCT_SaveDataItemByEntry(v_EntryId,v_ItemValue,v_ItemAlias,v_Description,NULL,NULL,NULL,NULL,NULL,
   v_ParentEntryId,v_ParentItemId,v_ItemId,1);
END;

-- SELECT N'SQLWAYS_EVAL# L_AutoConfirmEvent]...';









DROP PROCEDURE IF EXISTS PCT_ManageTemplate;

CREATE PROCEDURE PCT_ManageTemplate()
BEGIN
   CREATE TEMPORARY TABLE tt_temp AS SELECT DISTINCT template.EquipmentTemplateId, template.StationCategory 
      FROM TBL_EquipmentTemplate template
      LEFT JOIN TBL_Equipment e ON e.EquipmentTemplateId = template.EquipmentTemplateId
      LEFT JOIN TBL_Station s ON s.StationId = e.StationId;

   CREATE TEMPORARY TABLE tt_templateRefrence AS SELECT EquipmentTemplateId, count(*) AS RefCount 
      FROM TBL_Equipment GROUP BY EquipmentTemplateId;

   SELECT template.EquipmentTemplateId, parent.EquipmentTemplateId AS ParentId,
(CASE parent.EquipmentTemplateName WHEN NULL THEN '根模板' ELSE parent.EquipmentTemplateName END) AS ParentName,
template.EquipmentTemplateName, template.EquipmentCategory,
e.StationCategory, template.Memo, ref.RefCount, template.ProtocolCode,
(CASE WHEN template.EquipmentTemplateName LIKE '%艾默生%' THEN '艾默生'
   WHEN template.EquipmentTemplateName LIKE '%雅达%' THEN '雅达'
   WHEN template.EquipmentTemplateName LIKE '%中兴%' THEN '中兴'
   WHEN template.EquipmentTemplateName LIKE '%中恒%' THEN '中恒'
   WHEN template.EquipmentTemplateName LIKE '%中达%' THEN '中达'
   WHEN template.EquipmentTemplateName LIKE '%晋天%' THEN '晋天'
   ELSE(CASE template.Vendor WHEN NULL THEN '未设置'
      WHEN '' THEN '未设置' ELSE template.Vendor END) END) AS Vendor
   FROM TBL_EquipmentTemplate template
   LEFT JOIN tt_temp e ON e.EquipmentTemplateId = template.EquipmentTemplateId
   LEFT JOIN TBL_EquipmentTemplate parent ON template.ParentTemplateId = parent.EquipmentTemplateId
   LEFT JOIN tt_templateRefrence ref ON ref.EquipmentTemplateId = template.EquipmentTemplateId;

   DROP TEMPORARY TABLE IF EXISTS tt_temp;
   DROP TEMPORARY TABLE IF EXISTS tt_templateRefrence;
END;



DROP PROCEDURE IF EXISTS PAM_SelectSamplerUnit;
CREATE PROCEDURE PAM_SelectSamplerUnit(v_UserId                              INT,
v_StationId                         INT,INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN
-- 处理：
-- 1 获取局站下采集单元信息

-- 返回结果
-- -1 不可知错误
--  0 成功
--  1 参数为0或空
--  2 配置不存在或超过一个
--  3 没有权限

   DECLARE v_Return INT;
   DECLARE v_GetDate DATETIME;
   DECLARE v_PrivilegeId INT;
   DECLARE v_Total INT;
   DECLARE v_SStation NATIONAL VARCHAR(20);
   DECLARE v_SUserId NATIONAL VARCHAR(20);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 参数检查
   SET @SWV_Error = 0;
   IF v_StationId IS NULL OR v_StationId = 0 then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

-- 处理权限后的局站
   SET v_SStation = CAST(v_StationId AS CHAR(30));
   SET v_SUserId = CAST(v_UserId AS CHAR(30));
   CREATE TEMPORARY TABLE tt_TempStation
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      StationId INT,
      StationName VARCHAR(128),
      StationState INT,
      StationCategory INT,
      StationGrade INT
   );
   CALL PAM_FilterStation('-1','-1','-1','-1',v_SStation,'-1','-1',v_SUserId,'#TempStation');

-- 是否有权限查看该局站
   select   COUNT(StationId) INTO v_Total FROM tt_TempStation WHERE StationId = v_StationId;
   IF (v_Total <> 1) then

      SET SWP_Ret_Value = 3;
      LEAVE SWL_return;
   end if;

-- 局站配置是否存在
   select   COUNT(StationId) INTO v_Total FROM tt_TempStation WHERE StationId = v_StationId;
   IF (v_Total <> 1) then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;

-- 采集单元临时表
   CREATE TEMPORARY TABLE tt_TempHost
   (
      StationId INT NOT NULL,
      SamplerUnitId INT NOT NULL,
      PortId INT NOT NULL,
      MonitorUnitId INT NOT NULL,
      SamplerId INT NOT NULL,
      ParentSamplerUnitId INT NOT NULL,
      SamplerType INT NOT NULL,
      SamplerUnitName NATIONAL VARCHAR(128) NOT NULL,
      Address INT NOT NULL,
      SpUnitInterval FLOAT,
      DllPath NATIONAL VARCHAR(128),
      ConnectState INT NOT NULL,
      UpdateTime DATETIME NOT NULL,
      PhoneNumber NATIONAL VARCHAR(20),
      Description NATIONAL VARCHAR(255),
      PortNo INT NOT NULL,
      PortName NATIONAL VARCHAR(128) NOT NULL,
      PortType INT NOT NULL,
      Setting NATIONAL VARCHAR(255) NOT NULL
   );

-- MU
   INSERT INTO tt_TempHost(StationId                              ,
SamplerUnitId                    ,
PortId                                            ,
MonitorUnitId                    ,
SamplerId                                     ,
ParentSamplerUnitId                ,
SamplerType                                ,
SamplerUnitName                     ,
Address                                         ,
SpUnitInterval                    ,
DllPath                                          ,
ConnectState                     ,
UpdateTime                                 ,
PhoneNumber                             ,
Description                                  ,
PortNo                                           ,
PortName                                     ,
PortType                              ,
Setting)
   SELECT
   su.StationId                                 ,
ss.SamplerUnitId                        ,
ss.PortId                                       ,
ss.MonitorUnitId                        ,
ss.SamplerId                                ,
ss.ParentSamplerUnitId           ,
ss.SamplerType                                    ,
ss.SamplerUnitName                         ,
ss.Address                                             ,
ss.SpUnitInterval                        ,
ss.DllPath                                              ,
ss.ConnectState                                  ,
ss.UpdateTime                                     ,
ss.PhoneNumber                                 ,
ss.Description                             ,
pt.PortNo                                               ,
pt.PortName                      ,
pt.PortType                        ,
pt.Setting
   FROM TSL_SamplerUnit ss
   INNER JOIN TSL_MonitorUnit mu ON mu.MonitorUnitId = ss.MonitorUnitId
   INNER JOIN TSL_Port pt ON ss.PortId = pt.PortId AND ss.MonitorUnitId = pt.MonitorUnitId
   INNER JOIN tt_TempStation su ON mu.StationId = su.StationId
   WHERE su.StationId = v_StationId;

-- 返回结果

-- SQLWAYS_EVAL# has expanded all '*' elements in the following statement
   SELECT tt_TempHost.StationId, tt_TempHost.SamplerUnitId, tt_TempHost.PortId, tt_TempHost.MonitorUnitId, tt_TempHost.SamplerId, tt_TempHost.ParentSamplerUnitId, tt_TempHost.SamplerType, tt_TempHost.SamplerUnitName, tt_TempHost.Address, tt_TempHost.SpUnitInterval, tt_TempHost.DllPath, tt_TempHost.ConnectState, tt_TempHost.UpdateTime, tt_TempHost.PhoneNumber, tt_TempHost.Description, tt_TempHost.PortNo, tt_TempHost.PortName, tt_TempHost.PortType, tt_TempHost.Setting FROM tt_TempHost;

   DROP TEMPORARY TABLE IF EXISTS tt_TempHost;
   SET @SWV_Error = 0;
   DROP TEMPORARY TABLE IF EXISTS tt_TempStation;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;                                                                       

   SET SWP_Ret_Value = 0;
END;


DROP PROCEDURE IF EXISTS PCT_UpdateEquipmentCategory;

CREATE PROCEDURE PCT_UpdateEquipmentCategory(v_EquipmentTemplateId INT,
v_EquipmentCategory INT)
BEGIN
   DECLARE v_count INT;

   CREATE TEMPORARY TABLE tt_Template1
   (
      EquipmentTemplateId INT
   );

   CREATE TEMPORARY TABLE tt_Template2
   (
      EquipmentTemplateId INT
   );
   CREATE TEMPORARY TABLE tt_Template3
   (
      EquipmentTemplateId INT
   );


   INSERT tt_Template1 VALUES(v_EquipmentTemplateId);


   SET v_count = 1;

   SWL_Label9:
   WHILE v_count < 10 DO
      DELETE FROM tt_Template2;
      INSERT tt_Template2 SELECT EquipmentTemplateId FROM tt_Template1;
      INSERT tt_Template3 SELECT EquipmentTemplateId FROM tt_Template1;
      DELETE FROM tt_Template1;
      INSERT tt_Template1 SELECT EquipmentTemplateId FROM TBL_EquipmentTemplate
      WHERE ParentTemplateId IN(SELECT EquipmentTemplateId FROM tt_Template2);
      IF ROW_COUNT() = 0 then

         LEAVE SWL_Label9;
      end if;
      SET v_count = v_count+1;
   END WHILE;

   UPDATE TBL_EquipmentTemplate A
   INNER JOIN tt_Template3 B ON A.EquipmentTemplateId = B.EquipmentTemplateId SET A.EquipmentCategory = v_EquipmentCategory
   WHERE A.EquipmentCategory <> v_EquipmentCategory;

   DROP TEMPORARY TABLE IF EXISTS tt_Template1;
   DROP TEMPORARY TABLE IF EXISTS tt_Template2;
   DROP TEMPORARY TABLE IF EXISTS tt_Template3;

END;

 
DROP PROCEDURE IF EXISTS PAM_QueryHistoryAlarm;


CREATE PROCEDURE PAM_QueryHistoryAlarm(v_StationId          INT ,
v_EquipmentId        INT ,
v_EventId            INT ,
v_StartTime          DATETIME ,
v_EndTime            DATETIME)
BEGIN
   DECLARE v_startMonth INT;
   DECLARE v_endMonth INT;
   DECLARE v_StandardVer INT;


   SET v_startMonth = EXTRACT(MONTH FROM v_StartTime); 
   SET v_endMonth = EXTRACT(MONTH FROM v_EndTime); 

   SET v_StandardVer = PAM_GetStandardVer();

   SELECT A.SequenceId,
A.StationId,
A.StationName,
A.EquipmentId,
A.EquipmentName,
A.EventId,
A.EventName,
A.EventConditionId,
A.EventSeverityId,
A.EventSeverity,
A.StartTime,
A.EndTime,
A.CancelTime,
A.CancelUserId,
A.CancelUserName,
A.ConfirmTime,
A.ConfirmerId,
A.ConfirmerName,
A.EventValue,
A.ReversalNum,
A.Meanings,
A.EventFilePath,
A.Description,
A.SourceHostId,
A.InstructionId,
A.InstructionStatus,
A.StandardAlarmNameId,
A.StandardAlarmName,
A.BaseTypeId,
A.BaseTypeName,
A.EquipmentCategory,
A.EquipmentCategoryName,
A.MaintainState,
A.SignalId,
A.RelateSequenceId,
A.EventCategoryId,
A.EventStateId,
A.CenterId,
A.CenterName,
A.StructureName,
A.MonitorUnitName,
A.StructureId,
A.StationCategoryId,
A.EquipmentVendor,
B.StandardDicId,
B.StandardType,
B.EquipmentLogicClassId,
B.EquipmentLogicClass,
B.EventLogicClassId,
B.EventLogicClass,
B.EventClass,
A.StandardAlarmName StandardName,
B.NetManageId,
B.EventSeverity,
B.CompareValue,
B.StartDelay,
B.Meanings,
B.EquipmentAffect,
B.BusinessAffect,
B.Description  StdDescription,
B.ExtendFiled1,
B.ExtendFiled2,
CASE
   WHEN v_StandardVer = 0 THEN A.BaseTypeId
   ELSE A.StandardAlarmNameId
   END AS StandardTypeId,
CASE
   WHEN v_StandardVer = 0 THEN floor(A.BaseTypeId/1000)
   WHEN v_StandardVer = 1 THEN A.StandardAlarmNameId
   ELSE floor((A.StandardAlarmNameId%100000000)/1000)
   END AS StandardTypeEntryId,
CASE
   WHEN v_StandardVer = 0 THEN A.BaseTypeName
   ELSE A.StandardAlarmName
   END AS StandardTypeName,
B.ExtendFiled1 StdSignalDescription,
B.Meanings StdSignalMeanings,
B.ExtendFiled2 StdNote
   FROM TBL_HistoryEvent A
   LEFT JOIN TBL_StandardDicEvent B ON  A.StandardAlarmNameId = B.StandardDicId AND B.StandardType = v_StandardVer
   LEFT JOIN TBL_StationBaseMap C ON B.StationCategory = C.StationBaseType AND C.StationCategory = A.StationCategoryId
   WHERE A.StationId = v_StationId AND A.EquipmentId = v_EquipmentId AND A.EventId = v_EventId
   AND A.StartTime <= v_EndTime AND A.StartTime >= v_StartTime
   UNION
   SELECT A.SequenceId,
A.StationId,
A.StationName,
A.EquipmentId,
A.EquipmentName,
A.EventId,
A.EventName,
A.EventConditionId,
A.EventSeverityId,
A.EventSeverity,
A.StartTime,
A.EndTime,
A.CancelTime,
A.CancelUserId,
A.CancelUserName,
A.ConfirmTime,
A.ConfirmerId,
A.ConfirmerName,
A.EventValue,
A.ReversalNum,
A.Meanings,
A.EventFilePath,
A.Description,
A.SourceHostId,
A.InstructionId,
A.InstructionStatus,
A.StandardAlarmNameId,
A.StandardAlarmName,
A.BaseTypeId,
A.BaseTypeName,
A.EquipmentCategory,
A.EquipmentCategoryName,
A.MaintainState,
A.SignalId,
A.RelateSequenceId,
A.EventCategoryId,
A.EventStateId,
A.CenterId,
A.CenterName,
A.StructureName,
A.MonitorUnitName,
A.StructureId,
A.StationCategoryId,
A.EquipmentVendor,
B.StandardDicId,
B.StandardType,
B.EquipmentLogicClassId,
B.EquipmentLogicClass,
B.EventLogicClassId,
B.EventLogicClass,
B.EventClass,
A.StandardAlarmName StandardName,
B.NetManageId,
B.EventSeverity,
B.CompareValue,
B.StartDelay,
B.Meanings,
B.EquipmentAffect,
B.BusinessAffect,
B.Description  StdDescription,
B.ExtendFiled1,
B.ExtendFiled2,
CASE
   WHEN v_StandardVer = 0 THEN A.BaseTypeId
   ELSE A.StandardAlarmNameId
   END AS StandardTypeId,
CASE
   WHEN v_StandardVer = 0 THEN floor(A.BaseTypeId/1000)
   WHEN v_StandardVer = 1 THEN A.StandardAlarmNameId
   ELSE floor((A.StandardAlarmNameId%100000000)/1000)
   END AS StandardTypeEntryId,
CASE
   WHEN v_StandardVer = 0 THEN A.BaseTypeName
   ELSE A.StandardAlarmName
   END AS StandardTypeName,
B.ExtendFiled1 StdSignalDescription,
B.Meanings StdSignalMeanings,
B.ExtendFiled2 StdNote
   FROM TBL_ActiveEvent A
   LEFT JOIN TBL_StandardDicEvent B ON  A.StandardAlarmNameId = B.StandardDicId AND B.StandardType = v_StandardVer
   LEFT JOIN TBL_StationBaseMap C ON B.StationCategory = C.StationBaseType AND C.StationCategory = A.StationCategoryId
   WHERE A.StationId = v_StationId AND A.EquipmentId = v_EquipmentId AND A.EventId = v_EventId
   AND A.StartTime <= v_EndTime AND A.StartTime >= v_StartTime
   ORDER BY /*SQLWAYS_EVAL# tTime*/ 11 DESC;

END;


-- SELECT N'SQLWAYS_EVAL# etAlarmChange...';

DROP PROCEDURE IF EXISTS PAM_GetAlarmChange;

CREATE PROCEDURE PAM_GetAlarmChange(v_SerialNo NUMERIC(12,0))
BEGIN

   DECLARE v_StandardVer INT;
   SET v_StandardVer = PAM_GetStandardVer();

   SELECT 
   A.*,
B.StandardDicId,
B.EquipmentLogicClass,
A.StandardAlarmName StandardName,
B.EventLogicClass,
B.EventClass,
B.NetManageId,
B.EquipmentAffect,
B.BusinessAffect,
B.Description StdDescription,
CASE
   WHEN v_StandardVer = 0 THEN A.BaseTypeId
   ELSE A.StandardAlarmNameId
   END AS StandardTypeId,
CASE
   WHEN v_StandardVer = 0 THEN floor(A.BaseTypeId/1000)
   WHEN v_StandardVer = 1 THEN A.StandardAlarmNameId
   ELSE floor((A.StandardAlarmNameId%100000000)/1000)
   END AS StandardTypeEntryId,
CASE
   WHEN v_StandardVer = 0 THEN A.BaseTypeName
   ELSE A.StandardAlarmName
   END AS StandardTypeName,
B.ExtendFiled1 StdSignalDescription,
B.Meanings StdSignalMeanings,
B.ExtendFiled2 StdNote
   FROM TBL_AlarmChange A
   LEFT JOIN TBL_StandardDicEvent B ON A.StandardAlarmNameId = B.StandardDicId AND B.StandardType = v_StandardVer
   LEFT JOIN TBL_StationBaseMap C ON B.StationCategory = C.StationBaseType AND C.StationCategory = A.StationCategoryId
   WHERE A.SerialNo > v_SerialNo
   ORDER BY A.SerialNo ASC LIMIT 200;
END;


-- SELECT N'SQLWAYS_EVAL# etAllAlarm...';

DROP PROCEDURE IF EXISTS PAM_GetAllAlarm;

CREATE PROCEDURE PAM_GetAllAlarm()
BEGIN
   DECLARE v_StandardVer INT;
   SET v_StandardVer = PAM_GetStandardVer();

   SELECT A.*,
B.StandardDicId,
B.EquipmentLogicClass,
A.StandardAlarmName StandardName,
B.EventLogicClass,
B.EventClass,
B.NetManageId,
B.EquipmentAffect,
B.BusinessAffect,
B.Description StdDescription,
CASE
   WHEN v_StandardVer = 0 THEN A.BaseTypeId
   ELSE A.StandardAlarmNameId
   END AS StandardTypeId,
CASE
   WHEN v_StandardVer = 0 THEN floor(A.BaseTypeId/1000)
   WHEN v_StandardVer = 1 THEN A.StandardAlarmNameId
   ELSE floor((A.StandardAlarmNameId%100000000)/1000)
   END AS StandardTypeEntryId,
CASE
   WHEN v_StandardVer = 0 THEN A.BaseTypeName
   ELSE A.StandardAlarmName
   END AS StandardTypeName,
B.ExtendFiled1 StdSignalDescription,
B.Meanings StdSignalMeanings,
B.ExtendFiled2 StdNote
   FROM TBL_ActiveEvent A
   LEFT JOIN TBL_StandardDicEvent B ON A.StandardAlarmNameId = B.StandardDicId AND B.StandardType = v_StandardVer
   LEFT JOIN TBL_StationBaseMap C ON B.StationCategory = C.StationBaseType AND C.StationCategory = A.StationCategoryId
   ORDER BY A.StartTime ASC;
END;


DROP TABLE IF EXISTS TBL_EquipmentMaintain; 


CREATE TABLE TBL_EquipmentMaintain
(
   StationId INT NOT NULL,
   EquipmentId INT NOT NULL,
   EquipmentState INT,        -- SQLWAYS_EVAL# 联网状态
   StartTime DATETIME,        -- 工程状态开始时间
   EndTime DATETIME,          -- 工程状态结束时间
   UserId INT,     			 -- 工程状态设置人
   Description NATIONAL VARCHAR(255), -- 说明
   ExtendFiled1 NATIONAL VARCHAR(255),
   CONSTRAINT PK_TBL_EquipmentMaintain_ID PRIMARY KEY(StationId,EquipmentId)
);


DROP PROCEDURE IF EXISTS PBL_GetProjectEquipments;

CREATE PROCEDURE PBL_GetProjectEquipments()
BEGIN
   DECLARE v_CenterName NATIONAL VARCHAR(256);
   DECLARE v_NOW DATETIME;
   select   StructureName INTO v_CenterName FROM TBL_StationStructure WHERE StructureGroupId = 0;
   SET v_NOW = CURRENT_TIMESTAMP;

   UPDATE TBL_EquipmentMaintain SET EquipmentState = 3
   WHERE EquipmentState = 1 AND StartTime < v_NOW AND EndTime > v_NOW;

   UPDATE TBL_EquipmentMaintain SET EquipmentState = 1
   WHERE EquipmentState = 3 AND (StartTime > v_NOW OR EndTime < v_NOW);

   SELECT v_CenterName AS CenterName, equipment.EquipmentId as TimeGroupId, maitain.Description as Reason,
maitain.StartTime,maitain.EndTime,
account.UserId, account.UserName, equipment.StationId,
equipment.EquipmentId, equipment.EquipmentName, equipment.EquipmentCategory,
equipmentCategoryitem.ItemValue AS EquipmentCategoryName,
station.CenterId, station.StationName, dataItem.ItemValue AS StationCategory, item.ItemValue AS StationGrade
   FROM TBL_EquipmentMaintain maitain
   INNER JOIN TBL_Equipment equipment ON maitain.StationId = equipment.StationId AND maitain.EquipmentId = equipment.EquipmentId
   INNER JOIN TBL_Station station ON equipment.StationId = station.StationId
   LEFT JOIN TBL_Account account on maitain.UserId = account.UserId
   LEFT JOIN TBL_DataItem dataItem ON station.StationCategory = dataItem.ItemId
   LEFT JOIN TBL_DataItem item ON station.StationGrade = item.ItemId
   LEFT JOIN TBL_DataItem equipmentCategoryitem ON equipment.EquipmentCategory = equipmentCategoryitem.ItemId
-- SQLWAYS_EVAL# = 3 AND dataItem.EntryId = 71
   WHERE dataItem.EntryId = 71 AND maitain.EndTime IS NOT NULL
   and item.EntryId = 2 AND equipmentCategoryitem.EntryId = 7;
END;



DROP PROCEDURE IF EXISTS PBL_GetActiveEvent;

CREATE PROCEDURE `PBL_GetActiveEvent`()
BEGIN

	DECLARE v_StructureId	int;
	DECLARE v_StructureName VARCHAR(255);
	DECLARE v_MaxSerialNo	LONG;
	
	
	SELECT MAX(SerialNo) INTO v_MaxSerialNo FROM tbl_alarmchange;

	SELECT StructureId, StructureName INTO v_StructureId, v_StructureName
	FROM tbl_stationstructure
	WHERE StructureGroupId = 1 AND IsUngroup = 1 LIMIT 0,1;

	SELECT 
		IFNULL(ac.StructureId, v_StructureId) AS GroupId,
		IFNULL(ac.StructureName, v_StructureName) AS GroupName,
		et.HouseId,
		et.EquipmentTemplateId,
		ac.SequenceId								,
		ac.StationId             					,
		ac.StationName           					,
		ac.EquipmentId           					,
		ac.EquipmentName         					,
		ac.EventId               					,
		ac.EventName             					,
		ac.EventConditionId      					,
		ac.EventSeverityId       					,
		ac.EventSeverity         					,
		ac.StartTime             					,
		ac.EndTime               					,
		ac.CancelTime            					,
		ac.CancelUserId          					,
		ac.CancelUserName        					,
		ac.ConfirmTime           					,
		ac.ConfirmerId           					,
		ac.ConfirmerName         					,
		ac.EventValue            					,
		ac.ReversalNum           					,
		ac.Meanings              					,
		ac.EventFilePath         					,
		ac.Description           					,
		ac.SourceHostId          					,
		ac.InstructionId         					,
		ac.InstructionStatus     					,
		ac.StandardAlarmNameId						,
		ac.StandardAlarmName     					,
		ac.BaseTypeId            					,
		ac.BaseTypeName          					,
		ac.EquipmentCategory AS EquipmentCategoryId	,
		ac.EquipmentCategoryName 					,
		ac.MaintainState         					,
		ac.SignalId              					,
		ac.RelateSequenceId      					,
		ac.EventCategoryId       					,
		ac.EventStateId          					,
		ac.CenterId              					,
		ac.CenterName            					,
		ac.StructureName         					,
		ac.MonitorUnitName       					,
		ac.StructureId           					,
		ac.StationCategoryId     					,
		ac.EquipmentVendor     				
	FROM TBL_ActiveEvent ac
	INNER JOIN TBL_Equipment et ON ac.StationId = et.StationId AND ac.EquipmentId = et.EquipmentId
	ORDER BY ac.StartTime ASC;

	SELECT v_MaxSerialNo;

	SELECT CURRENT_TIMESTAMP;

END;


DROP PROCEDURE IF EXISTS PBL_QueryConfigEvent;

CREATE PROCEDURE PBL_QueryConfigEvent(v_CenterId           NATIONAL VARCHAR(4000)    ,
v_GroupId            NATIONAL VARCHAR(4000)    ,
v_StationState       NATIONAL VARCHAR(4000)    ,
v_StationCategory    NATIONAL VARCHAR(4000)    ,
v_StationId			NATIONAL VARCHAR(4000)    ,
v_StationId2         NATIONAL VARCHAR(4000)    ,
v_StationId3         NATIONAL VARCHAR(4000)    ,
v_EquipmentCategory  NATIONAL VARCHAR(4000)    ,
v_EquipmentId        NATIONAL VARCHAR(4000)    ,
v_EquipmentId2       NATIONAL VARCHAR(4000)    ,
v_EquipmentId3       NATIONAL VARCHAR(4000)    ,
v_EventCategory		NATIONAL VARCHAR(4000)    ,
v_EventId	        NATIONAL VARCHAR(4000)    ,
v_EventId2	        NATIONAL VARCHAR(4000)    ,
v_EventId3	        NATIONAL VARCHAR(4000)    ,
v_EventName			NATIONAL VARCHAR(4000)    ,
v_QueryUserId        NATIONAL VARCHAR(20)      ,
v_ReturnCount        NATIONAL VARCHAR(20)   ,INOUT SWP_Ret_Value INT)
BEGIN
-- 返回结果
-- -1 不可知错误
--  0 成功
--  1 参数为0或空

   DECLARE v_RowCount INT; 
   DECLARE v_Index INT;
   DECLARE v_TotalRowCount INT;
   DECLARE v_ViewControl INT;
   DECLARE v_UserId INT;
   DECLARE v_Return INT;
   DECLARE v_WhereEventId1 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereEventId2 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereEventId3 NATIONAL VARCHAR(4000);  
   DECLARE v_WhereEventCategory NATIONAL VARCHAR(4000);  
   DECLARE v_WhereEventName NATIONAL VARCHAR(4000);  
   DECLARE v_WhereModule NATIONAL VARCHAR(4000);  
   DECLARE v_BaseTypeJoinString NATIONAL VARCHAR(4000);  
   DECLARE v_JoinString NATIONAL VARCHAR(4000);  
   DECLARE v_JoinStringTemplate NATIONAL VARCHAR(4000);  
   DECLARE v_SQL NATIONAL VARCHAR(4000);
   DECLARE SWV_ExecDyn VARCHAR(5000);   

-- 处理权限后的局站
   IF v_CenterId is null then
      set v_CenterId = '-1';
   END IF;
   IF v_GroupId is null then
      set v_GroupId = '-1';
   END IF;
   IF v_StationState is null then
      set v_StationState = '-1';
   END IF;
   IF v_StationCategory is null then
      set v_StationCategory = '-1';
   END IF;
   IF v_StationId is null then
      set v_StationId = '-1';
   END IF;
   IF v_StationId2 is null then
      set v_StationId2 = '-1';
   END IF;
   IF v_StationId3 is null then
      set v_StationId3 = '-1';
   END IF;
   IF v_EquipmentCategory is null then
      set v_EquipmentCategory = '-1';
   END IF;
   IF v_EquipmentId is null then
      set v_EquipmentId = '-1';
   END IF;
   IF v_EquipmentId2 is null then
      set v_EquipmentId2 = '-1';
   END IF;
   IF v_EquipmentId3 is null then
      set v_EquipmentId3 = '-1';
   END IF;
   IF v_EventCategory is null then
      set v_EventCategory = '-1';
   END IF;
   IF v_EventId is null then
      set v_EventId = '-1';
   END IF;
   IF v_EventId2 is null then
      set v_EventId2 = '-1';
   END IF;
   IF v_EventId3 is null then
      set v_EventId3 = '-1';
   END IF;
   IF v_EventName is null then
      set v_EventName = '-1';
   END IF;
   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   CREATE TEMPORARY TABLE tt_TempStation
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      StationId INT,
      StationName VARCHAR(128),
      StationState INT,
      StationCategory INT,
      StationGrade INT
   );
   CALL PAM_FilterStation(v_CenterId,v_GroupId,v_StationState,v_StationCategory,v_StationId,v_StationId2,
   v_StationId3,v_QueryUserId,'#TempStation');

-- 处理权限后的设备
   CREATE TEMPORARY TABLE tt_TempEquipment
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      StationId INT,
      StationName VARCHAR(128),
      StationState INT,
      StationCategory INT,
      EquipmentId INT,
      EquipmentName VARCHAR(128),
      EquipmentTemplateId INT,
      EquipmentCategory INT
   );
   CALL PAM_FilterEquipmentCategory(v_EquipmentCategory,v_EquipmentId,v_EquipmentId2,v_EquipmentId3,v_QueryUserId,
   '#TempStation','#TempEquipment');


-- 事件ID
   SET v_WhereEventId1 = '  ';
   IF IFNULL(v_EventId,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_EventId);
      IF v_Index = 0 then
         SET v_WhereEventId1 = CONCAT('SQLWAYS_EVAL# = ',v_EventId);
      ELSE
         SET v_WhereEventId1 = CONCAT('SQLWAYS_EVAL# IN (',v_EventId,')');
      end if;
   end if;
-- 事件ID2
   SET v_WhereEventId2 = '  ';
   IF IFNULL(v_EventId2,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_EventId2);
      IF v_Index = 0 then
         SET v_WhereEventId2 = CONCAT('SQLWAYS_EVAL# = ',v_EventId2);
      ELSE
         SET v_WhereEventId2 = CONCAT('SQLWAYS_EVAL# IN (',v_EventId2,')');
      end if;
   end if;

-- 事件ID3
   SET v_WhereEventId3 = '  ';
   IF IFNULL(v_EventId3,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_EventId3);
      IF v_Index = 0 then
         SET v_WhereEventId3 = CONCAT('SQLWAYS_EVAL# = ',v_EventId3);
      ELSE
         SET v_WhereEventId3 = CONCAT('SQLWAYS_EVAL# IN (',v_EventId3,')');
      end if;
   end if;

-- 事件种类ID
   SET v_WhereEventCategory = '  ';
   IF IFNULL(v_EventCategory,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_EventCategory);
      IF v_Index = 0 then
         SET v_WhereEventCategory = CONCAT('SQLWAYS_EVAL# = ',v_EventCategory);
      ELSE
         SET v_WhereEventCategory = CONCAT('SQLWAYS_EVAL# IN (',v_EventCategory,')');
      end if;
   end if;

-- 事件名称
   SET v_WhereEventName = '  ';
   IF IFNULL(v_EventName,'-1') <> '-1' then

      SET v_Index = LOCATE(',',v_EventName);
      IF v_Index = 0 then

         SET v_WhereEventName = CONCAT('SQLWAYS_EVAL# LIKE ''%',v_EventName,'%''');
      ELSE
         SET v_WhereEventName = ' AND (( ';
         WHILE(v_Index != 0) DO
            SET v_WhereEventName = CONCAT(v_WhereEventName,'SQLWAYS_EVAL# ''%',SUBSTRING(v_EventName,1,v_Index -1),
            '%'' ');
            SET v_EventName = rtrim(ltrim(INSERT(v_EventName,1,v_Index,' ')));
            SET v_Index = LOCATE(',',v_EventName);
            IF(v_Index != 0) then

               SET v_WhereEventName = CONCAT(v_WhereEventName,' ) OR ( ');
            ELSE
               SET v_WhereEventName = CONCAT(v_WhereEventName,' )) ');
            end if;
         END WHILE;
      end if;
   end if;

-- 模块条件
   SET v_WhereModule = 'SQLWAYS_EVAL# = 0
OR ett.InstalledModule = ''0'' 
OR ett.InstalledModule = ''''  
OR CHARINDEX('','' + rtrim(ltrim(CONVERT(NVARCHAR, es.ModuleNo))) + '','', '','' + rtrim(ltrim(ett.InstalledModule)) + '','') > 0 
)  ';

-- 满足条件事件
   CREATE TEMPORARY TABLE tt_EventTotal
   (
      CenterId INT,
      CenterName VARCHAR(128),
      GroupId INT,
      GroupName VARCHAR(128),
      EquipmentTemplateId INT,
      StationId INT,
      StationName VARCHAR(128),
      HouseId INT,
      HouseName VARCHAR(128),
      EquipmentId INT,
      EquipmentName VARCHAR(128),
      EquipmentCategoryId INT,
      EquipmentBaseTypeId INT,
      EquipmentVendor VARCHAR(255),
      EventId INT,
      EventName VARCHAR(128),
      StartType INT,
      EndType INT,
      StartExpression NATIONAL VARCHAR(1024),
      SuppressExpression NATIONAL VARCHAR(1024),
      EventCategory INT,
      SignalId INT,
      Enable BOOLEAN NOT	null,
      Visible BOOLEAN NOT	null,
      Description NATIONAL VARCHAR(255),
      DisplayIndex INT,
      ModuleNo INT
   );

-- 查询结果条数
   SET v_RowCount = cast(v_ReturnCount as SIGNED INTEGER);
   SET SQL_SELECT_LIMIT = v_RowCount;  

-- 满足条件事件
   SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL# 				,
HouseId						,
HouseName 					,
EquipmentId					,
EquipmentName				,
EquipmentCategoryId			,
EquipmentBaseTypeId			,
EquipmentVendor				,
EventId						,
EventName					,
StartType					,
EndType						,
StartExpression				,
SuppressExpression			,
EventCategory				,
SignalId					,
Enable						,
Visible						,
Description					,
DisplayIndex				,
ModuleNo					
)
SELECT 
su.CenterId,
su.CenterName,
su.GroupId,
su.GroupName,
es.EquipmentTemplateId, 
su.StationId,
su.StationName,
hs.HouseId,
hs.HouseName,
e.EquipmentId,
e.EquipmentName,
e.EquipmentCategory AS EquipmentCategoryId, 
ete.EquipmentBaseType AS EquipmentBaseTypeId,
ete.Vendor AS EquipmentVendor,
es.EventId						,
es.EventName					,
es.StartType					,
es.EndType						,
es.StartExpression				,
es.SuppressExpression			,
es.EventCategory				,
es.SignalId						,
es.Enable						,
es.Visible						,
es.Description					,
es.DisplayIndex					,
es.ModuleNo					
FROM #TempEquipment e
INNER JOIN #TempStation su ON e.StationId = su.StationId
INNER JOIN TBL_Equipment ett ON e.StationId = ett.StationId AND e.EquipmentId = ett.EquipmentId
INNER JOIN TBL_EquipmentTemplate ete ON ett.EquipmentTemplateId = ete.EquipmentTemplateId
INNER JOIN TBL_House hs ON e.StationId = hs.StationId AND ett.HouseId = hs.HouseId
INNER JOIN TBL_Event es ON e.EquipmentTemplateId = es.EquipmentTemplateId AND es.Enable = 1  AND es.Visible=1 ',
   v_JoinStringTemplate,v_BaseTypeJoinString,' WHERE 1=1 ',v_WhereModule,
   v_WhereEventId1,v_WhereEventId2,v_WhereEventId3,v_WhereEventCategory,
   v_WhereEventName);
   SET @SWV_Stmt = SWV_ExecDyn;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;

   SELECT
   st.CenterId						,
st.CenterName					,
st.GroupId						,
st.GroupName					,
st.EquipmentTemplateId			,
st.StationId					,
st.StationName 					,
st.HouseId						,
st.HouseName 					,
st.EquipmentId					,
st.EquipmentName				,
st.EquipmentCategoryId			,
st.EquipmentBaseTypeId			,
st.EquipmentVendor				,
st.EventId						,
st.EventName					,
st.StartType					,
st.EndType						,
st.StartExpression				,
st.SuppressExpression			,
st.EventCategory				,
st.SignalId						,
st.Enable						,
st.Visible						,
st.Description					,
st.DisplayIndex					,
st.ModuleNo						,
di.ItemValue AS EquipmentCategoryName,
sm.StartTime AS SStartTime,
sm.EndTime AS SEndTime,
em.StartTime AS EStartTime,
em.EndTime AS EEndTime,
eem.StartTime AS EEMStartTime,
eem.EndTime AS EEMEndTime
   FROM tt_EventTotal st
   INNER JOIN TBL_DataItem di ON di.EntryId = 7 AND st.EquipmentCategoryId = di.ItemId
   LEFT JOIN TBL_StationMask sm ON st.StationId = sm.StationId
   LEFT JOIN TBL_EquipmentMask em ON st.StationId = em.StationId AND st.EquipmentId = em.EquipmentId
   LEFT JOIN TBL_EventMask eem ON st.StationId = eem.StationId AND st.EquipmentId = eem.EquipmentId AND st.EventId = eem.EventId
   ORDER BY StationId,EquipmentId,EventId;

   SET SQL_SELECT_LIMIT = DEFAULT;

   DROP TEMPORARY TABLE IF EXISTS tt_EventTotal;
   DROP TEMPORARY TABLE IF EXISTS tt_TempEquipment;
   DROP TEMPORARY TABLE IF EXISTS tt_TempStation;

   SET SWP_Ret_Value = 0;
END;


-- SELECT N'SQLWAYS_EVAL# M_GetStdSignalFilterDic]...';


DROP PROCEDURE IF EXISTS PAM_GetStdSignalFilterDic;


CREATE PROCEDURE PAM_GetStdSignalFilterDic(v_StdEquipmentType NATIONAL VARCHAR(4000))
BEGIN
   DECLARE v_StandardVer INT;
   DECLARE v_WhereStdEquimentType NATIONAL VARCHAR(4000);
	DECLARE SWV_ExecDyn VARCHAR(5000);
   IF v_StdEquipmentType is null then
      set v_StdEquipmentType = '-1';
   END IF;
   SET v_StandardVer = PAM_GetStandardVer();

   IF v_StandardVer = 0 OR v_StandardVer = 1 OR v_StandardVer = 3 then
-- SQLWAYS_EVAL# 标准

      SET v_WhereStdEquimentType = '  ';
      IF IFNULL(v_StdEquipmentType,'-1') <> '-1' then

         SET v_WhereStdEquimentType = CONCAT('SQLWAYS_EVAL# IN (',v_StdEquipmentType,')');
      end if;
      SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL# SignalStandardId,
B.BaseEquipmentName + ''_'' + A.BaseTypeName SignalStandardName,
A.Description 
FROM TBL_SignalBaseDic A
INNER JOIN TBL_EquipmentBaseType B ON A.BaseEquipmentId = B.BaseEquipmentId
WHERE A.BaseTypeId - floor(A.BaseTypeId / 1000) * 1000 = 1 ',
      v_WhereStdEquimentType,'SQLWAYS_EVAL# A.BaseTypeName');
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
   ELSE
      SET v_WhereStdEquimentType = '  ';
      IF IFNULL(v_StdEquipmentType,'-1') <> '-1' then

         SET v_WhereStdEquimentType = CONCAT('SQLWAYS_EVAL# IN (',v_StdEquipmentType,')');
      end if;
      SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL# SignalStandardId, 
EquipmentLogicClass + ''_'' + SignalStandardName SignalStandardName,
Description 
FROM TBL_StandardDicSig 		
WHERE  StandardDicId % 1000 = 1 
AND (StandardDicId / 100000000 = 1 OR StandardDicId / 100000000 = 9)
AND StandardType = 2 ',v_WhereStdEquimentType,
      'SQLWAYS_EVAL# SignalStandardName');
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
   end if;
END;



-- SELECT N'SQLWAYS_EVAL# M_GetStdEventFilterDic]...';


DROP PROCEDURE IF EXISTS PAM_GetStdEventFilterDic;


CREATE PROCEDURE PAM_GetStdEventFilterDic(v_StdEquipmentType NATIONAL VARCHAR(4000))
BEGIN
   DECLARE v_StandardVer INT;
   DECLARE v_WhereStdEquimentType NATIONAL VARCHAR(4000);
   DECLARE v_SQL NATIONAL VARCHAR(4000);
	DECLARE SWV_ExecDyn VARCHAR(5000);
   IF v_StdEquipmentType is null then
      set v_StdEquipmentType = '-1';
   END IF;
   SET v_StandardVer = PAM_GetStandardVer();

   IF v_StandardVer = 0 OR v_StandardVer = 3 then
-- SQLWAYS_EVAL# 需求还不明确用艾默生基类标准

      SET v_WhereStdEquimentType = '  ';
      IF IFNULL(v_StdEquipmentType,'-1') <> '-1' then

         SET v_WhereStdEquimentType = CONCAT('SQLWAYS_EVAL# IN (',v_StdEquipmentType,')');
      end if;
      SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL# EventStandardId,
B.BaseEquipmentName + ''_'' + A.BaseTypeName EventStandardName,
A.Description 
FROM TBL_EventBaseDic A
INNER JOIN TBL_EquipmentBaseType B ON A.BaseEquipmentId = B.BaseEquipmentId
WHERE A.BaseTypeId - floor(A.BaseTypeId / 1000) * 1000 = 1',v_WhereStdEquimentType,
      'SQLWAYS_EVAL# A.BaseTypeName');
      SET @SWV_Stmt = SWV_ExecDyn;
      PREPARE SWT_Stmt FROM @SWV_Stmt;
      EXECUTE SWT_Stmt;
      DEALLOCATE PREPARE SWT_Stmt;
   ELSE 
      IF  v_StandardVer = 1 then
-- 移动

         SET v_WhereStdEquimentType = '  ';
         IF IFNULL(v_StdEquipmentType,'-1') <> '-1' then

            SET v_WhereStdEquimentType = CONCAT('SQLWAYS_EVAL# IN (',v_StdEquipmentType,')');
         end if;
         SET SWV_ExecDyn = CONCAT('SQLWAYS_EVAL# convert(NUMERIC(10,0),StandardDicId) EventStandardId, 
EquipmentLogicClass + ''_'' + EventStandardName + ''_'' + NetManageId EventStandardName,
Description 
FROM TBL_StandardDicEvent 		
WHERE StandardType = 1 ',v_WhereStdEquimentType,'SQLWAYS_EVAL# tStandardName');
         SET @SWV_Stmt = SWV_ExecDyn;
         PREPARE SWT_Stmt FROM @SWV_Stmt;
         EXECUTE SWT_Stmt;
         DEALLOCATE PREPARE SWT_Stmt;
      ELSE
         SET v_WhereStdEquimentType = '  ';
         IF IFNULL(v_StdEquipmentType,'-1') <> '-1' then

            SET v_WhereStdEquimentType = CONCAT('SQLWAYS_EVAL# IN (',v_StdEquipmentType,')');
         end if;
         SET v_SQL = CONCAT('SQLWAYS_EVAL# EventStandardId,  
EquipmentLogicClass + ''_'' + EventStandardName + (CASE WHEN Description LIKE ''有告警'' THEN '''' ELSE ''_'' + Description END) EventStandardName,
Description 
FROM TBL_StandardDicEvent 
WHERE StandardDicId % 1000 = 1 
AND (StandardDicId / 100000000 = 1 OR StandardDicId / 100000000 = 9)
AND StandardType = ',CAST(v_StandardVer AS CHAR(10)),
         v_WhereStdEquimentType,'SQLWAYS_EVAL# EventStandardName');
         SET @SWV_Stmt = v_SQL;
         PREPARE SWT_Stmt FROM @SWV_Stmt;
         EXECUTE SWT_Stmt;
         DEALLOCATE PREPARE SWT_Stmt;
      end if;
   end if;

END;


DROP PROCEDURE IF EXISTS PAM_GetEventStandardDic;


CREATE PROCEDURE PAM_GetEventStandardDic(v_StandardType INT)
BEGIN
   IF v_StandardType is null then
      set v_StandardType = 1;
   END IF;
   SELECT
   StandardDicId,
StandardType,
EquipmentLogicClassId,
EquipmentLogicClass,
EventLogicClassId,
EventLogicClass,
EventClass,
EventStandardName StandardName,
NetManageId,
EventSeverity,
CompareValue,
StartDelay,
Meanings,
EquipmentAffect,
BusinessAffect,
Description StdDescription,
ExtendFiled1,
ExtendFiled2
   FROM TBL_StandardDicEvent
   WHERE StandardType = v_StandardType;
END;



DROP PROCEDURE IF EXISTS PNL_SaveSignalTemplate;

CREATE PROCEDURE PNL_SaveSignalTemplate(v_EquipmentId				 INT,
v_SourceTemplateId 		 INT,
v_DestTemplateId 		     INT,
v_SignalId          	     INT,
v_SignalName        NATIONAL VARCHAR(255),		
v_Expression        NATIONAL VARCHAR(255),
v_ShowPrecision     NATIONAL VARCHAR(255),
v_StoreInterval           FLOAT,
v_AbsValueThreshold		FLOAT,
v_PercentThreshold	    FLOAT,
v_StaticsPeriod           INT)
BEGIN
   DECLARE v_ExpressionEquipmentId NATIONAL VARCHAR(40);
   DECLARE v_MonitorUnitId INT;
   DECLARE v_StationId INT;
   DECLARE v_count INT;
   DECLARE v_ReferanceSamplerUnitId INT;
   DECLARE v_ReferanceChannelId INT;
   IF EXISTS(SELECT 'X' FROM TBL_EquipmentTemplate WHERE EquipmentTemplateId = v_SourceTemplateId AND Memo = '动态配置') then

      UPDATE TBL_Signal a SET a.SignalName = v_SignalName,a.Expression = v_Expression,a.ShowPrecision = v_ShowPrecision,
      a.StoreInterval = v_StoreInterval,a.AbsValueThreshold = v_AbsValueThreshold, 
      a.PercentThreshold = v_PercentThreshold,a.StaticsPeriod = v_StaticsPeriod
      WHERE a.EquipmentTemplateId = v_SourceTemplateId
      AND a.SignalId = v_SignalId;
      SET v_ExpressionEquipmentId = SUBSTRING(v_Expression,2,2);
      IF v_ExpressionEquipmentId = '-1' OR v_ExpressionEquipmentId IS NULL OR v_ExpressionEquipmentId = '' then

         UPDATE TBL_Signal a SET a.Expression = v_Expression
         WHERE a.EquipmentTemplateId = v_SourceTemplateId
         AND a.SignalId = v_SignalId;
         select   count(*) INTO v_count FROM TSL_MonitorUnitSignal WHERE EquipmentId = v_EquipmentId AND SignalId = v_SignalId;
         IF v_count > 0 then
            DELETE FROM TSL_MonitorUnitSignal WHERE EquipmentId = v_EquipmentId AND SignalId = v_SignalId;
         end if;
      ELSE
         select   count(*) INTO v_count FROM TSL_MonitorUnitSignal WHERE EquipmentId = v_EquipmentId AND SignalId = v_SignalId;
         IF v_count > 0 then
            UPDATE TSL_MonitorUnitSignal SET Expression = v_Expression
            WHERE EquipmentId = v_EquipmentId AND SignalId = v_SignalId;
         ELSE
            select   StationId, MonitorUnitId, SamplerUnitId INTO v_StationId,v_MonitorUnitId,v_ReferanceSamplerUnitId FROM TBL_Equipment WHERE EquipmentId = v_EquipmentId;
            select   ChannelNo INTO v_ReferanceChannelId FROM TBL_Signal WHERE EquipmentTemplateId = v_SourceTemplateId AND SignalId = v_SignalId;
            INSERT INTO TSL_MonitorUnitSignal VALUES(v_StationId,  v_MonitorUnitId, v_EquipmentId,v_SignalId,v_ReferanceSamplerUnitId,v_ReferanceChannelId, v_Expression, 2);
         end if;
      end if;
      SELECT 0;
   ELSE

-- SQLWAYS_EVAL# Template
 INSERT INTO TBL_EquipmentTemplate(EquipmentTemplateId,EquipmentTemplateName,ParentTemplateId,
Memo,ProtocolCode,EquipmentCategory,EquipmentType,Property,
Description,EquipmentStyle,Unit,Vendor,EquipmentBaseType,StationCategory)
      SELECT v_DestTemplateId,EquipmentTemplateName,EquipmentTemplateId,
'动态配置',a.ProtocolCode,a.EquipmentCategory,a.EquipmentType,a.Property,
a.Description,a.EquipmentStyle,a.Unit,a.Vendor,a.EquipmentBaseType,a.StationCategory
      FROM TBL_EquipmentTemplate a WHERE a.EquipmentTemplateId = v_SourceTemplateId;

-- TBL_Signal
      INSERT INTO TBL_Signal(EquipmentTemplateId, SignalId, Enable, Visible, Description, SignalName,
SignalCategory, SignalType, ChannelNo, ChannelType, Expression, DataType,
ShowPrecision, Unit, StoreInterval, AbsValueThreshold, PercentThreshold,
StaticsPeriod, BaseTypeId, ChargeStoreInterVal, ChargeAbsValue, DisplayIndex, ModuleNo)
      SELECT v_DestTemplateId, a.SignalId, a.Enable, a.Visible, a.Description, a.SignalName,
a.SignalCategory, a.SignalType, a.ChannelNo, a.ChannelType, a.Expression, a.DataType,
a.ShowPrecision, a.Unit, a.StoreInterval, a.AbsValueThreshold, a.PercentThreshold,
a.StaticsPeriod, a.BaseTypeId, a.ChargeStoreInterVal, a.ChargeAbsValue, a.DisplayIndex,a.ModuleNo
      FROM TBL_Signal a WHERE a.EquipmentTemplateId = v_SourceTemplateId;
      UPDATE TBL_Signal a SET a.SignalName = v_SignalName,a.ShowPrecision = v_ShowPrecision,a.StoreInterval = v_StoreInterval,
      a.AbsValueThreshold = v_AbsValueThreshold,a.PercentThreshold = v_PercentThreshold,
      a.StaticsPeriod = v_StaticsPeriod
      WHERE a.EquipmentTemplateId = v_DestTemplateId
      AND a.SignalId = v_SignalId;
      SET v_ExpressionEquipmentId = SUBSTRING(v_Expression,2,2);
      IF v_ExpressionEquipmentId = '-1' OR v_ExpressionEquipmentId IS NULL OR v_ExpressionEquipmentId = '' then

         UPDATE TBL_Signal a SET a.Expression = v_Expression
         WHERE a.EquipmentTemplateId = v_DestTemplateId
         AND a.SignalId = v_SignalId;
         select   count(*) INTO v_count FROM TSL_MonitorUnitSignal WHERE EquipmentId = v_EquipmentId AND SignalId = v_SignalId;
         IF v_count > 0 then
            DELETE FROM TSL_MonitorUnitSignal WHERE EquipmentId = v_EquipmentId AND SignalId = v_SignalId;
         end if;
      ELSE
         select   count(*) INTO v_count FROM TSL_MonitorUnitSignal WHERE EquipmentId = v_EquipmentId AND SignalId = v_SignalId;
         IF v_count > 0 then
            UPDATE TSL_MonitorUnitSignal SET Expression = v_Expression
            WHERE EquipmentId = v_EquipmentId AND SignalId = v_SignalId;
         ELSE
            select   StationId, MonitorUnitId, SamplerUnitId INTO v_StationId,v_MonitorUnitId,v_ReferanceSamplerUnitId FROM TBL_Equipment WHERE EquipmentId = v_EquipmentId;
            select   ChannelNo INTO v_ReferanceChannelId FROM TBL_Signal WHERE EquipmentTemplateId = v_SourceTemplateId AND SignalId = v_SignalId;
            INSERT INTO TSL_MonitorUnitSignal VALUES(v_StationId,  v_MonitorUnitId, v_EquipmentId,v_SignalId,v_ReferanceSamplerUnitId,v_ReferanceChannelId, v_Expression, 2);
         end if;
      end if;


-- SQLWAYS_EVAL# nings
      INSERT INTO TBL_SignalMeanings(EquipmentTemplateId, SignalId, StateValue, Meanings,BaseCondId)
      SELECT v_DestTemplateId, a.SignalId, a.StateValue, a.Meanings,a.BaseCondId
      FROM TBL_SignalMeanings a WHERE a.EquipmentTemplateId = v_SourceTemplateId;

-- SQLWAYS_EVAL# perty
      INSERT INTO TBL_SignalProperty(EquipmentTemplateId, SignalId, SignalPropertyId)
      SELECT v_DestTemplateId, a.SignalId, a.SignalPropertyId
      FROM TBL_SignalProperty a WHERE a.EquipmentTemplateId = v_SourceTemplateId;


-- TBL_Event
      INSERT INTO TBL_Event(EquipmentTemplateId, EventId, EventName, StartType, EndType, StartExpression,
SuppressExpression, EventCategory, SignalId, Enable, Visible, Description, DisplayIndex, ModuleNo)
      SELECT v_DestTemplateId, a.EventId, a.EventName, a.StartType, a.EndType, a.StartExpression,
a.SuppressExpression, a.EventCategory, a.SignalId, a.Enable, a.Visible, a.Description, a.DisplayIndex, a.ModuleNo
      FROM TBL_Event a WHERE a.EquipmentTemplateId = v_SourceTemplateId;

-- SQLWAYS_EVAL# ition
      INSERT INTO TBL_EventCondition(EventConditionId, EquipmentTemplateId, EventId, StartOperation, StartCompareValue,
StartDelay, EndOperation, EndCompareValue, EndDelay, Frequency,
FrequencyThreshold, Meanings, EquipmentState, BaseTypeId, EventSeverity, StandardName)
      SELECT a.EventConditionId, v_DestTemplateId, a.EventId, a.StartOperation, a.StartCompareValue,
a.StartDelay, a.EndOperation, a.EndCompareValue, a.EndDelay, a.Frequency,
a.FrequencyThreshold, a.Meanings, a.EquipmentState, a.BaseTypeId, a.EventSeverity, a.StandardName
      FROM TBL_EventCondition a WHERE a.EquipmentTemplateId = v_SourceTemplateId;

-- TBL_Control
      INSERT INTO TBL_Control(EquipmentTemplateId, ControlId, ControlName, ControlCategory, CmdToken,
BaseTypeId, ControlSeverity, SignalId, TimeOut, Retry, Description, Enable, Visible,
DisplayIndex, CommandType, ControlType, DataType, MaxValue, MinValue, DefaultValue, ModuleNo)
      SELECT v_DestTemplateId, a.ControlId, a.ControlName, a.ControlCategory, a.CmdToken,
a.BaseTypeId, a.ControlSeverity, a.SignalId, a.TimeOut, a.Retry, a.Description, a.Enable, a.Visible,
a.DisplayIndex, a.CommandType, a.ControlType, a.DataType, a.MaxValue, a.MinValue, a.DefaultValue, a.ModuleNo
      FROM TBL_Control a WHERE a.EquipmentTemplateId = v_SourceTemplateId;

-- SQLWAYS_EVAL# anings
      INSERT INTO TBL_ControlMeanings(EquipmentTemplateId, ControlId, ParameterValue, Meanings,BaseCondId)
      SELECT v_DestTemplateId, a.ControlId, a.ParameterValue, a.Meanings,a.BaseCondId
      FROM TBL_ControlMeanings a WHERE a.EquipmentTemplateId = v_SourceTemplateId;
      UPDATE TBL_Equipment SET EquipmentTemplateId = v_DestTemplateId
      WHERE EquipmentId = v_EquipmentId;
      SELECT 1;
   end if;
END;





DROP PROCEDURE IF EXISTS PNL_SaveEventTemplate;

CREATE PROCEDURE PNL_SaveEventTemplate(v_EquipmentId 		 INT,
v_EventId 		     INT,
v_SourceTemplateId 	 INT,
v_DestTemplateId 		 INT,
v_StartType 		 INT,
v_EndType  		INT,
v_EventName  NATIONAL VARCHAR(255),
v_StartExpression NATIONAL VARCHAR(255),
v_SuppressExpression NATIONAL VARCHAR(255),
v_EventCategory  INT,
v_DisplayIndex  INT)
BEGIN
   DECLARE v_StartExpressionEquipmentId NATIONAL VARCHAR(40);
   DECLARE v_SuppressExpressionEquipmentId NATIONAL VARCHAR(40);
   DECLARE v_MonitorUnitId INT;
   DECLARE v_StationId INT;
   DECLARE v_count INT;
   IF EXISTS(SELECT 'X' FROM TBL_EquipmentTemplate WHERE EquipmentTemplateId = v_SourceTemplateId AND Memo = '动态配置') then

      UPDATE TBL_Event a SET a.EventName = v_EventName,a.StartType = v_StartType,a.EndType = v_EndType,
      a.EventCategory = v_EventCategory,a.DisplayIndex = v_DisplayIndex
      WHERE a.EquipmentTemplateId = v_SourceTemplateId
      AND a.EventId = v_EventId;
      SET v_StartExpressionEquipmentId = SUBSTRING(v_StartExpression,2,2);
      SET v_SuppressExpressionEquipmentId = SUBSTRING(v_SuppressExpression,2,2);
      select   StationId, MonitorUnitId INTO v_StationId,v_MonitorUnitId FROM TBL_Equipment WHERE EquipmentId = v_EquipmentId;
      IF (v_StartExpressionEquipmentId = '-1'  OR  v_StartExpressionEquipmentId IS NULL OR v_StartExpressionEquipmentId = '')
      AND  (v_SuppressExpressionEquipmentId IS NULL  OR  v_SuppressExpressionEquipmentId = '-1' OR v_SuppressExpressionEquipmentId = '') then

         UPDATE TBL_Event a SET a.StartExpression = v_StartExpression,a.SuppressExpression = v_SuppressExpression
         WHERE a.EquipmentTemplateId = v_SourceTemplateId
         AND a.EventId = v_EventId;
         select   count(*) INTO v_count FROM TSL_MonitorUnitEvent WHERE EquipmentId = v_EquipmentId AND EventId = v_EventId;
         IF v_count > 0 then
            UPDATE TSL_MonitorUnitEvent SET StartExpression = v_StartExpression,SuppressExpression = v_SuppressExpression
            WHERE EquipmentId = v_EquipmentId AND EventId = v_EventId;
         end if;
      ELSE
         select   count(*) INTO v_count FROM TSL_MonitorUnitEvent WHERE EquipmentId = v_EquipmentId AND EventId = v_EventId;
         IF v_count > 0 then
            UPDATE TSL_MonitorUnitEvent SET StartExpression = v_StartExpression,SuppressExpression = v_SuppressExpression
            WHERE EquipmentId = v_EquipmentId AND EventId = v_EventId;
         ELSE
INSERT INTO TSL_MonitorUnitEvent VALUES(v_StationId,  v_MonitorUnitId, v_EquipmentId,v_EventId, v_StartExpression, v_SuppressExpression);
         end if;
      end if;
      SELECT 0;
   ELSE
-- SQLWAYS_EVAL# Template
 INSERT INTO TBL_EquipmentTemplate(EquipmentTemplateId,EquipmentTemplateName,ParentTemplateId,
Memo,ProtocolCode,EquipmentCategory,EquipmentType,Property,
Description,EquipmentStyle,Unit,Vendor,EquipmentBaseType)
      SELECT v_DestTemplateId,EquipmentTemplateName,EquipmentTemplateId,
'动态配置',a.ProtocolCode,a.EquipmentCategory,a.EquipmentType,a.Property,
a.Description,a.EquipmentStyle,a.Unit,a.Vendor,a.EquipmentBaseType
      FROM TBL_EquipmentTemplate a WHERE a.EquipmentTemplateId = v_SourceTemplateId;

-- TBL_Signal
      INSERT INTO TBL_Signal(EquipmentTemplateId, SignalId, Enable, Visible, Description, SignalName,
SignalCategory, SignalType, ChannelNo, ChannelType, Expression, DataType,
ShowPrecision, Unit, StoreInterval, AbsValueThreshold, PercentThreshold,
StaticsPeriod, BaseTypeId, ChargeStoreInterVal, ChargeAbsValue, DisplayIndex, ModuleNo)
      SELECT v_DestTemplateId, a.SignalId, a.Enable, a.Visible, a.Description, a.SignalName,
a.SignalCategory, a.SignalType, a.ChannelNo, a.ChannelType, a.Expression, a.DataType,
a.ShowPrecision, a.Unit, a.StoreInterval, a.AbsValueThreshold, a.PercentThreshold,
a.StaticsPeriod, a.BaseTypeId, a.ChargeStoreInterVal, a.ChargeAbsValue, a.DisplayIndex,a.ModuleNo
      FROM TBL_Signal a WHERE a.EquipmentTemplateId = v_SourceTemplateId; 

-- SQLWAYS_EVAL# nings
      INSERT INTO TBL_SignalMeanings(EquipmentTemplateId, SignalId, StateValue, Meanings)
      SELECT v_DestTemplateId, a.SignalId, a.StateValue, a.Meanings
      FROM TBL_SignalMeanings a WHERE a.EquipmentTemplateId = v_SourceTemplateId;

-- SQLWAYS_EVAL# perty
      INSERT INTO TBL_SignalProperty(EquipmentTemplateId, SignalId, SignalPropertyId)
      SELECT v_DestTemplateId, a.SignalId, a.SignalPropertyId
      FROM TBL_SignalProperty a WHERE a.EquipmentTemplateId = v_SourceTemplateId;


-- TBL_Event
      INSERT INTO TBL_Event(EquipmentTemplateId, EventId, EventName, StartType, EndType, StartExpression,
SuppressExpression, EventCategory, SignalId, Enable, Visible, Description, DisplayIndex, ModuleNo)
      SELECT v_DestTemplateId, a.EventId, a.EventName, a.StartType, a.EndType, a.StartExpression,
a.SuppressExpression, a.EventCategory, a.SignalId, a.Enable, a.Visible, a.Description, a.DisplayIndex, a.ModuleNo
      FROM TBL_Event a WHERE a.EquipmentTemplateId = v_SourceTemplateId;
      UPDATE TBL_Event a SET a.EventName = v_EventName,a.StartType = v_StartType,a.EndType = v_EndType,
      a.EventCategory = v_EventCategory,a.DisplayIndex = v_DisplayIndex
      WHERE a.EquipmentTemplateId = v_DestTemplateId
      AND a.EventId = v_EventId;
      SET v_StartExpressionEquipmentId = SUBSTRING(v_StartExpression,2,2);
      SET v_SuppressExpressionEquipmentId = SUBSTRING(v_SuppressExpression,2,2);
      IF (v_StartExpressionEquipmentId = '-1'  OR  v_StartExpressionEquipmentId IS NULL OR v_StartExpressionEquipmentId = '')
      AND  (v_SuppressExpressionEquipmentId IS NULL  OR  v_SuppressExpressionEquipmentId = '-1' OR v_SuppressExpressionEquipmentId = '') then

         UPDATE TBL_Event a SET a.StartExpression = v_StartExpression,a.SuppressExpression = v_SuppressExpression
         WHERE a.EquipmentTemplateId = v_DestTemplateId
         AND a.EventId = v_EventId;
         select   count(*) INTO v_count FROM TSL_MonitorUnitEvent WHERE EquipmentId = v_EquipmentId AND EventId = v_EventId;
         IF v_count > 0 then
            UPDATE TSL_MonitorUnitEvent SET StartExpression = v_StartExpression,SuppressExpression = v_SuppressExpression
            WHERE EquipmentId = v_EquipmentId AND EventId = v_EventId;
         end if;
      ELSE
         select   count(*) INTO v_count FROM TSL_MonitorUnitEvent WHERE EquipmentId = v_EquipmentId AND EventId = v_EventId;
         IF v_count > 0 then
            UPDATE TSL_MonitorUnitEvent SET StartExpression = v_StartExpression,SuppressExpression = v_SuppressExpression
            WHERE EquipmentId = v_EquipmentId AND EventId = v_EventId;
         ELSE
INSERT INTO TSL_MonitorUnitEvent VALUES(v_StationId,  v_MonitorUnitId, v_EquipmentId,v_EventId, v_StartExpression, v_SuppressExpression);
         end if;
      end if;


-- SQLWAYS_EVAL# ition
      INSERT INTO TBL_EventCondition(EventConditionId, EquipmentTemplateId, EventId, StartOperation, StartCompareValue,
StartDelay, EndOperation, EndCompareValue, EndDelay, Frequency,
FrequencyThreshold, Meanings, EquipmentState, BaseTypeId, EventSeverity, StandardName)
      SELECT a.EventConditionId, v_DestTemplateId, a.EventId, a.StartOperation, a.StartCompareValue,
a.StartDelay, a.EndOperation, a.EndCompareValue, a.EndDelay, a.Frequency,
a.FrequencyThreshold, a.Meanings, a.EquipmentState, a.BaseTypeId, a.EventSeverity, a.StandardName
      FROM TBL_EventCondition a WHERE a.EquipmentTemplateId = v_SourceTemplateId;

-- TBL_Control
      INSERT INTO TBL_Control(EquipmentTemplateId, ControlId, ControlName, ControlCategory, CmdToken,
BaseTypeId, ControlSeverity, SignalId, TimeOut, Retry, Description, Enable, Visible,
DisplayIndex, CommandType, ControlType, DataType, MaxValue, MinValue, DefaultValue, ModuleNo)
      SELECT v_DestTemplateId, a.ControlId, a.ControlName, a.ControlCategory, a.CmdToken,
a.BaseTypeId, a.ControlSeverity, a.SignalId, a.TimeOut, a.Retry, a.Description, a.Enable, a.Visible,
a.DisplayIndex, a.CommandType, a.ControlType, a.DataType, a.MaxValue, a.MinValue, a.DefaultValue, a.ModuleNo
      FROM TBL_Control a WHERE a.EquipmentTemplateId = v_SourceTemplateId;

-- SQLWAYS_EVAL# anings
      INSERT INTO TBL_ControlMeanings(EquipmentTemplateId, ControlId, ParameterValue, Meanings)
      SELECT v_DestTemplateId, a.ControlId, a.ParameterValue, a.Meanings
      FROM TBL_ControlMeanings a WHERE a.EquipmentTemplateId = v_SourceTemplateId;
      UPDATE TBL_Equipment SET EquipmentTemplateId = v_DestTemplateId
      WHERE EquipmentId = v_EquipmentId;
      SELECT 1;
   end if;
END;



-- 升级工具用存储过程
-- SELECT N'SQLWAYS_EVAL# .[PCT_ClearStation]...';

DROP PROCEDURE IF EXISTS PCT_ClearStation;


CREATE PROCEDURE PCT_ClearStation(v_StationId INT)
BEGIN
   CALL PCT_DeleteStation(v_StationId);	
END;


-- SELECT N'SQLWAYS_EVAL# .[PCT_SetTableMaxId]...';

DROP PROCEDURE IF EXISTS PCT_SetTableMaxId;

CREATE PROCEDURE PCT_SetTableMaxId(v_TableName NATIONAL VARCHAR(128))
SWL_return:
BEGIN
   DECLARE v_TableId INT;
   DECLARE v_CurrentMaxId INT;
   select   TableId INTO v_TableId FROM TBL_PrimaryKeyIdentity WHERE TableName LIKE v_TableName;
   IF ROW_COUNT() = 0 then
      LEAVE SWL_return;
   end if;

   IF v_TableName LIKE 'TSL_Sampler' then

      select   Max(SamplerId%1000000) INTO v_CurrentMaxId FROM TBL_PrimaryKeyValue A, TSL_Sampler B WHERE SamplerId/1000000 = A.PostalCode  AND A.TableId = v_TableId;
   ELSE 
      IF v_TableName LIKE 'SQLWAYS_EVAL# ucture' then

         select   Max(StructureId%1000000) INTO v_CurrentMaxId FROM TBL_PrimaryKeyValue A, TBL_StationStructure B WHERE StructureId/1000000 = A.PostalCode  AND A.TableId = v_TableId;
      ELSE 
         IF v_TableName LIKE 'TBL_Station' then

            select   Max(StationId%1000000) INTO v_CurrentMaxId FROM TBL_PrimaryKeyValue A, TBL_Station B WHERE StationId/1000000 = A.PostalCode  AND A.TableId = v_TableId;
         ELSE 
            IF v_TableName LIKE 'TBL_Equipment' then

               select   Max(EquipmentId%1000000) INTO v_CurrentMaxId FROM TBL_PrimaryKeyValue A, TBL_Equipment B WHERE EquipmentId/1000000 = A.PostalCode  AND A.TableId = v_TableId;
            ELSE 
               IF v_TableName LIKE 'SQLWAYS_EVAL# emplate' then

                  select   Max(EquipmentTemplateId%1000000) INTO v_CurrentMaxId FROM TBL_PrimaryKeyValue A, TBL_EquipmentTemplate B WHERE EquipmentTemplateId/1000000 = A.PostalCode  AND A.TableId = v_TableId;
               ELSE 
                  IF v_TableName LIKE 'TSL_SamplerUnit' then

                     select   Max(SamplerUnitId%1000000) INTO v_CurrentMaxId FROM TBL_PrimaryKeyValue A, TSL_SamplerUnit B WHERE SamplerUnitId/1000000 = A.PostalCode  AND A.TableId = v_TableId;
                  ELSE 
                     IF v_TableName LIKE 'TSL_MonitorUnit' then

                        select   Max(MonitorUnitId%1000000) INTO v_CurrentMaxId FROM TBL_PrimaryKeyValue A, TSL_MonitorUnit B WHERE MonitorUnitId/1000000 = A.PostalCode  AND A.TableId = v_TableId;
                     ELSE 
                        IF v_TableName LIKE 'TSL_Port' then

                           select   Max(PortId%1000000) INTO v_CurrentMaxId FROM TBL_PrimaryKeyValue A, TSL_Port B WHERE PortId/1000000 = A.PostalCode  AND A.TableId = v_TableId;
                        ELSE 
                           IF v_TableName LIKE 'TBL_Event' then

                              select   Max(EventId%1000000) INTO v_CurrentMaxId FROM TBL_PrimaryKeyValue A, TBL_Event B WHERE EventId/1000000 = A.PostalCode  AND A.TableId = v_TableId;
                           ELSE 
                              IF v_TableName LIKE 'TBL_Signal' then

                                 select   Max(SignalId%1000000) INTO v_CurrentMaxId FROM TBL_PrimaryKeyValue A, TBL_Signal B WHERE SignalId/1000000 = A.PostalCode  AND A.TableId = v_TableId;
                              ELSE 
                                 IF v_TableName LIKE 'TBL_Control' then

                                    select   Max(ControlId%1000000) INTO v_CurrentMaxId FROM TBL_PrimaryKeyValue A, TBL_Control B WHERE ControlId/1000000 = A.PostalCode  AND A.TableId = v_TableId;
                                 ELSE 
                                    IF v_TableName LIKE 'TBL_WorkStation' then

                                       select   Max(WorkStationId%1000000) INTO v_CurrentMaxId FROM TBL_PrimaryKeyValue A, TBL_WorkStation B WHERE WorkStationId/1000000 = A.PostalCode  AND A.TableId = v_TableId;
                                    ELSE 
                                       IF v_TableName LIKE 'TBL_DataItem' then

                                          select   Max(EntryItemId%1000000) INTO v_CurrentMaxId FROM TBL_PrimaryKeyValue A, TBL_DataItem B WHERE EntryItemId/1000000 = A.PostalCode  AND A.TableId = v_TableId;
                                       end if;
                                    end if;
                                 end if;
                              end if;
                           end if;
                        end if;
                     end if;
                  end if;
               end if;
            end if;
         end if;
      end if;
   end if;		

   UPDATE TBL_PrimaryKeyValue SET CurrentValue = v_CurrentMaxId
   WHERE TableId = v_TableId AND CurrentValue < v_CurrentMaxId;

END;

-- SELECT N'SQLWAYS_EVAL# .[PCT_ResetMaxId]...';

DROP PROCEDURE IF EXISTS PCT_ResetMaxId;


CREATE PROCEDURE PCT_ResetMaxId()
BEGIN
   CALL PCT_SetTableMaxId('TSL_Sampler');
   CALL PCT_SetTableMaxId('SQLWAYS_EVAL# ucture');
   CALL PCT_SetTableMaxId('TBL_Station');
   CALL PCT_SetTableMaxId('TSL_MonitorUnit');
   CALL PCT_SetTableMaxId('TSL_Port');
   CALL PCT_SetTableMaxId('TSL_SamplerUnit');
   CALL PCT_SetTableMaxId('SQLWAYS_EVAL# emplate');
   CALL PCT_SetTableMaxId('TBL_Equipment');
   CALL PCT_SetTableMaxId('TBL_Event');
   CALL PCT_SetTableMaxId('TBL_Signal');
   CALL PCT_SetTableMaxId('TBL_Control');
   CALL PCT_SetTableMaxId('TBL_WorkStation');
   CALL PCT_SetTableMaxId('TBL_DataItem');
END;



-- SELECT N'SQLWAYS_EVAL# .[PCT_ResetIdMap]...';

DROP PROCEDURE IF EXISTS PCT_ResetIdMap;


CREATE PROCEDURE PCT_ResetIdMap()
BEGIN

   DELETE FROM TBL_StationIdMap WHERE KoloStationId NOT IN(SELECT DISTINCT StationId FROM TBL_Station);

   DELETE FROM TBL_EquipmentIdMap WHERE KoloStationId NOT IN(SELECT DISTINCT StationId FROM TBL_Station);

   DELETE FROM TBL_EquipmentTemplateIdMap WHERE KoloEquipmentTemplateId NOT IN(SELECT DISTINCT EquipmentTemplateId FROM TBL_EquipmentTemplate); 

   DELETE FROM TBL_SamplerIdMap WHERE KoloSamplerId NOT IN(SELECT DISTINCT SamplerId FROM TSL_Sampler);

END;


-- SELECT N'SQLWAYS_EVAL# .[PAM_GetStandardFactoryDic]...';

DROP PROCEDURE IF EXISTS PAM_GetStandardFactoryDic;

CREATE PROCEDURE PAM_GetStandardFactoryDic(v_QueryUserId NATIONAL VARCHAR(1) ,
v_ReturnCount NATIONAL VARCHAR(1))
BEGIN

   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SELECT
   ItemId VendorId,
ItemValue VendorName,
Description
   FROM TBL_DataItem
   WHERE EntryId = 14
   ORDER BY VendorName;

END;




-- SELECT N'SQLWAYS_EVAL# .[PAM_GetStandardFactoryDic]...';

DROP PROCEDURE IF EXISTS PCT_UpdateEquipmentInfo;


CREATE PROCEDURE PCT_UpdateEquipmentInfo(v_UserId INT,		-- 用户Id
v_StationId INT,
v_EquipmentId INT,
v_UsedDate DATETIME,	-- 启用时间
v_Vendor NATIONAL VARCHAR(255),	-- 设备厂商
v_Parameter NATIONAL VARCHAR(1024) ,	-- 其他参数，预留
v_QueryUserId NATIONAL VARCHAR(1) ,
v_ReturnCount NATIONAL VARCHAR(1) ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
-- SQLWAYS_EVAL# 息，并记录日志和设备变化表，吉林移动添加
   DECLARE v_OldUsedDate DATETIME;
   DECLARE v_OldVendor NATIONAL VARCHAR(255);
   DECLARE v_CurrentTime DATETIME;
   DECLARE v_RecordCount INT DEFAULT 0;          -- SQLWAYS_EVAL# 增加@RecordCount,原因是@@ROWCOUNT起不到判断是)

   IF v_Parameter is null then
      set v_Parameter = '';
   END IF;
   IF v_QueryUserId is null then
      set v_QueryUserId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SET v_CurrentTime = CURRENT_TIMESTAMP;

 -- SQLWAYS_EVAL# 增加@RecordCount,原因是@@ROWCOUNT起不到判断是否查询到数据的作用
   select   IFNULL(UsedDate,TIMESTAMPADD(DAY,-1,v_UsedDate)), Vendor, 1 INTO v_OldUsedDate,v_OldVendor,v_RecordCount FROM TBL_Equipment WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId;

-- SQLWAYS_EVAL# <> 1
   IF v_RecordCount <> 1 then  -- SQLWAYS_EVAL# 将@@ROWCOUNT替换为@RecordCount,原因是@@ROWCOUNT起不到判断是否查询到数据的作用	
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if; -- 找不到设备

   IF DATE_FORMAT(v_UsedDate,'%Y.%m.%d') <> DATE_FORMAT(v_OldUsedDate,'%Y.%m.%d') then

      UPDATE TBL_Equipment
      SET UsedDate = v_UsedDate,UpdateTime = v_CurrentTime
      WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId;
      INSERT INTO TBL_OperationDetail(UserId, ObjectId, ObjectType, PropertyName, OperationTime, OperationType, OldValue, NewValue)
VALUES(v_UserId, CAST(v_EquipmentId AS CHAR(128)), 11, '投用日期', v_CurrentTime, '修改', DATE_FORMAT(v_OldUsedDate, '%Y.%m.%d'), DATE_FORMAT(v_UsedDate, '%Y.%m.%d'));

      INSERT INTO TBL_ReplicateLogs(LogStr, InsertTime)
VALUES(CONCAT('SQLWAYS_EVAL# SET UsedDate = ''',DATE_FORMAT(v_UsedDate, '%Y.%m.%d'),''',','SQLWAYS_EVAL# ''',DATE_FORMAT(v_CurrentTime, '%Y.%m.%d'),' ',DATE_FORMAT(v_UsedDate, '%h:%i:%s'),'''','SQLWAYS_EVAL# = ',CAST(v_EquipmentId AS CHAR(40)),'SQLWAYS_EVAL# = ', CAST(v_StationId AS CHAR(40))),
v_CurrentTime);
   end if;

   IF  v_OldVendor <> v_Vendor then

      UPDATE TBL_Equipment
      SET Vendor = v_Vendor,UpdateTime = v_CurrentTime
      WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId;
      INSERT INTO TBL_OperationDetail(UserId, ObjectId, ObjectType, PropertyName, OperationTime, OperationType, OldValue, NewValue)
VALUES(v_UserId, CAST(v_EquipmentId AS CHAR(128)), 11, '设备厂商', v_CurrentTime, '修改', v_OldVendor, v_Vendor);

      INSERT INTO TBL_ReplicateLogs(LogStr, InsertTime)
VALUES(CONCAT('SQLWAYS_EVAL# SET Vendor = ''',v_Vendor,''',','SQLWAYS_EVAL# ''',DATE_FORMAT(v_CurrentTime, '%Y.%m.%d'),' ',DATE_FORMAT(v_UsedDate, '%h:%i:%s'),'''','SQLWAYS_EVAL# = ',CAST(v_EquipmentId AS CHAR(40)),'SQLWAYS_EVAL# = ', CAST(v_StationId AS CHAR(40))),
v_CurrentTime);
   end if;		

   SET SWP_Ret_Value = 1; -- 修改成功

END;

DROP PROCEDURE IF EXISTS PNL_GetSummarySignal;
CREATE PROCEDURE PNL_GetSummarySignal(v_DoType INT,
v_CategoryOrBaseType INT)
BEGIN
   IF v_DoType = 0 then

      IF v_CategoryOrBaseType = -1 then

         select t.EquipmentCategory as CategoryOrBaseType,(select d.ItemValue from TBL_DataItem d where d.EntryId = 7 and d.ItemId = t.EquipmentCategory) as CategoryOrBaseTypeName,t.SignalName,t.Meanings,t.SignalNumber
         from(select e.EquipmentCategory,s.SignalName,c.Meanings,count(1) as SignalNumber
            from TBL_EquipmentTemplate e inner join TBL_Signal s on e.EquipmentTemplateId = s.EquipmentTemplateId left outer join TBL_SignalMeanings c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.SignalId = c.SignalId
            group by e.EquipmentCategory,s.SignalName,c.Meanings) t
         order by t.EquipmentCategory,t.SignalName,t.Meanings;
      else 
         if v_CategoryOrBaseType = -2 then

            select t.EquipmentCategory as CategoryOrBaseType,(select d.ItemValue from TBL_DataItem d where d.EntryId = 7 and d.ItemId = t.EquipmentCategory) as CategoryOrBaseTypeName,t.SignalName,t.Meanings,t.SignalNumber
            from(select e.EquipmentCategory,s.SignalName,c.Meanings,count(1) as SignalNumber
               from TBL_EquipmentTemplate e inner join TBL_Signal s on e.EquipmentTemplateId = s.EquipmentTemplateId left outer join TBL_SignalMeanings c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.SignalId = c.SignalId
               where e.EquipmentBaseType is null
               group by e.EquipmentCategory,s.SignalName,c.Meanings) t
            order by t.EquipmentCategory,t.SignalName,t.Meanings;
         else
            select t.EquipmentCategory as CategoryOrBaseType,(select d.ItemValue from TBL_DataItem d where d.EntryId = 7 and d.ItemId = t.EquipmentCategory) as CategoryOrBaseTypeName,t.SignalName,t.Meanings,t.SignalNumber
            from(select e.EquipmentCategory,s.SignalName,c.Meanings,count(1) as SignalNumber
               from TBL_EquipmentTemplate e inner join TBL_Signal s on e.EquipmentTemplateId = s.EquipmentTemplateId left outer join TBL_SignalMeanings c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.SignalId = c.SignalId
               group by e.EquipmentCategory,s.SignalName,c.Meanings) t
            where t.EquipmentCategory = v_CategoryOrBaseType  order by t.EquipmentCategory,t.SignalName,t.Meanings;
         end if;
      end if;
   else
      IF v_CategoryOrBaseType = -1 then

         select t.EquipmentBaseType as CategoryOrBaseType,(select BaseEquipmentName from TBL_EquipmentBaseType where BaseEquipmentId = t.EquipmentBaseType) as CategoryOrBaseTypeName,t.SignalName,t.Meanings,t.SignalNumber
         from(select e.EquipmentBaseType,s.SignalName,c.Meanings,count(1) as SignalNumber
            from TBL_EquipmentTemplate e inner join TBL_Signal s on e.EquipmentTemplateId = s.EquipmentTemplateId left outer join TBL_SignalMeanings c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.SignalId = c.SignalId
            group by e.EquipmentBaseType,s.SignalName,c.Meanings) t
         where t.EquipmentBaseType is not null  order by t.EquipmentBaseType,t.SignalName,t.Meanings;
      else
         select t.EquipmentBaseType as CategoryOrBaseType,(select BaseEquipmentName from TBL_EquipmentBaseType where BaseEquipmentId = t.EquipmentBaseType) as CategoryOrBaseTypeName,t.SignalName,t.Meanings,t.SignalNumber
         from(select e.EquipmentBaseType,s.SignalName,c.Meanings,count(1) as SignalNumber
            from TBL_EquipmentTemplate e inner join TBL_Signal s on e.EquipmentTemplateId = s.EquipmentTemplateId left outer join TBL_SignalMeanings c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.SignalId = c.SignalId
            group by e.EquipmentBaseType,s.SignalName,c.Meanings) t
         where t.EquipmentBaseType = v_CategoryOrBaseType  order by t.EquipmentBaseType,t.SignalName,t.Meanings;
      end if;
   end if;
END;




DROP PROCEDURE IF EXISTS PNL_GetAllDetailSignal;
CREATE PROCEDURE PNL_GetAllDetailSignal(v_DoType INT,
v_CategoryOrBaseType INT)
BEGIN
   IF v_DoType = 0 then

      IF v_CategoryOrBaseType = -1 then

         select s.EquipmentTemplateId,e.EquipmentTemplateName,e.ParentTemplateId,(select EquipmentTemplateName from TBL_EquipmentTemplate where EquipmentTemplateId = e.ParentTemplateId) as ParentTemplateName,e.ProtocolCode,
s.SignalId,s.SignalName,c.Meanings,s.SignalCategory,
(select ItemValue from TBL_DataItem where EntryId = 17 and ItemId = s.SignalCategory) as SignalCategoryName ,
s.SignalType, (select ItemValue from TBL_DataItem where EntryId = 18 and ItemId = s.SignalType) as SignalTypeName ,
s.ChannelNo,s.Unit,s.BaseTypeId,(select BaseTypeName from TBL_SignalBaseDic where BaseTypeId = s.BaseTypeId) as BaseTypeName,
c.BaseCondId, (select y.Meaning from TBL_SignalBaseDic x right outer join TBL_StatusBaseDic y on x.BaseStatusId = y.BaseStatusId where x.BaseTypeId = s.BaseTypeId and y.BaseCondId = c.BaseCondId) as BaseMeaning,
e.EquipmentCategory as CategoryOrBaseType, e.EquipmentBaseType,c.StateValue,(select BaseEquipmentName from TBL_EquipmentBaseType where BaseEquipmentId = e.EquipmentBaseType) as EquipmentBaseTypeName  ,
(case when c.StateValue is not null then(select SubState from TBL_SignalBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and SignalId = s.SignalId and StateValue = c.StateValue) else(select SubState from TBL_SignalBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and SignalId = s.SignalId and StateValue is NULL) end) as SubState
         from TBL_EquipmentTemplate e inner join TBL_Signal s on e.EquipmentTemplateId = s.EquipmentTemplateId left outer join TBL_SignalMeanings c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.SignalId = c.SignalId
         order by e.EquipmentCategory,s.SignalName,c.Meanings;
      else 
         if v_CategoryOrBaseType = -2 then

            select s.EquipmentTemplateId,e.EquipmentTemplateName,e.ParentTemplateId,(select EquipmentTemplateName from TBL_EquipmentTemplate where EquipmentTemplateId = e.ParentTemplateId) as ParentTemplateName,e.ProtocolCode,
s.SignalId,s.SignalName,c.Meanings,s.SignalCategory,
(select ItemValue from TBL_DataItem where EntryId = 17 and ItemId = s.SignalCategory) as SignalCategoryName ,
s.SignalType, (select ItemValue from TBL_DataItem where EntryId = 18 and ItemId = s.SignalType) as SignalTypeName ,
s.ChannelNo,s.Unit,s.BaseTypeId,(select BaseTypeName from TBL_SignalBaseDic where BaseTypeId = s.BaseTypeId) as BaseTypeName,
c.BaseCondId, (select y.Meaning from TBL_SignalBaseDic x right outer join TBL_StatusBaseDic y on x.BaseStatusId = y.BaseStatusId where x.BaseTypeId = s.BaseTypeId and y.BaseCondId = c.BaseCondId) as BaseMeaning,
e.EquipmentCategory as CategoryOrBaseType, e.EquipmentBaseType,c.StateValue,(select BaseEquipmentName from TBL_EquipmentBaseType where BaseEquipmentId = e.EquipmentBaseType) as EquipmentBaseTypeName  ,
(case when c.StateValue is not null then(select SubState from TBL_SignalBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and SignalId = s.SignalId and StateValue = c.StateValue) else(select SubState from TBL_SignalBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and SignalId = s.SignalId and StateValue is NULL) end) as SubState
            from TBL_EquipmentTemplate e inner join TBL_Signal s on e.EquipmentTemplateId = s.EquipmentTemplateId left outer join TBL_SignalMeanings c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.SignalId = c.SignalId
            where e.EquipmentBaseType is null order by e.EquipmentCategory,s.SignalName,c.Meanings;
         else
            select s.EquipmentTemplateId,e.EquipmentTemplateName,e.ParentTemplateId,(select EquipmentTemplateName from TBL_EquipmentTemplate where EquipmentTemplateId = e.ParentTemplateId) as ParentTemplateName,e.ProtocolCode,
s.SignalId,s.SignalName,c.Meanings,s.SignalCategory,
(select ItemValue from TBL_DataItem where EntryId = 17 and ItemId = s.SignalCategory) as SignalCategoryName ,
s.SignalType, (select ItemValue from TBL_DataItem where EntryId = 18 and ItemId = s.SignalType) as SignalTypeName ,
s.ChannelNo,s.Unit,s.BaseTypeId,(select BaseTypeName from TBL_SignalBaseDic where BaseTypeId = s.BaseTypeId) as BaseTypeName,
c.BaseCondId, (select y.Meaning from TBL_SignalBaseDic x right outer join TBL_StatusBaseDic y on x.BaseStatusId = y.BaseStatusId where x.BaseTypeId = s.BaseTypeId and y.BaseCondId = c.BaseCondId) as BaseMeaning,
e.EquipmentCategory as CategoryOrBaseType, e.EquipmentBaseType,c.StateValue,(select BaseEquipmentName from TBL_EquipmentBaseType where BaseEquipmentId = e.EquipmentBaseType) as EquipmentBaseTypeName  ,
(case when c.StateValue is not null then(select SubState from TBL_SignalBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and SignalId = s.SignalId and StateValue = c.StateValue) else(select SubState from TBL_SignalBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and SignalId = s.SignalId and StateValue is NULL) end) as SubState
            from TBL_EquipmentTemplate e inner join TBL_Signal s on e.EquipmentTemplateId = s.EquipmentTemplateId left outer join TBL_SignalMeanings c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.SignalId = c.SignalId
            where e.EquipmentCategory = v_CategoryOrBaseType order by e.EquipmentCategory,s.SignalName,c.Meanings;
         end if;
      end if;
   else 
      if v_DoType = 1 then

         IF v_CategoryOrBaseType = -1 then

            select s.EquipmentTemplateId,e.EquipmentTemplateName,e.ParentTemplateId,(select EquipmentTemplateName from TBL_EquipmentTemplate where EquipmentTemplateId = e.ParentTemplateId) as ParentTemplateName,e.ProtocolCode,
s.SignalId,s.SignalName,c.Meanings,s.SignalCategory,
(select ItemValue from TBL_DataItem where EntryId = 17 and ItemId = s.SignalCategory) as SignalCategoryName ,
s.SignalType, (select ItemValue from TBL_DataItem where EntryId = 18 and ItemId = s.SignalType) as SignalTypeName ,
s.ChannelNo,s.Unit,s.BaseTypeId,(select BaseTypeName from TBL_SignalBaseDic where BaseTypeId = s.BaseTypeId) as BaseTypeName,
c.BaseCondId, (select y.Meaning from TBL_SignalBaseDic x right outer join TBL_StatusBaseDic y on x.BaseStatusId = y.BaseStatusId where x.BaseTypeId = s.BaseTypeId and y.BaseCondId = c.BaseCondId) as BaseMeaning,
e.EquipmentBaseType as CategoryOrBaseType,e.EquipmentBaseType,c.StateValue,(select BaseEquipmentName from TBL_EquipmentBaseType where BaseEquipmentId = e.EquipmentBaseType) as EquipmentBaseTypeName ,
(case when c.StateValue is not null then(select SubState from TBL_SignalBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and SignalId = s.SignalId and StateValue = c.StateValue) else(select SubState from TBL_SignalBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and SignalId = s.SignalId and StateValue is NULL) end) as SubState
            from TBL_EquipmentTemplate e inner join TBL_Signal s on e.EquipmentTemplateId = s.EquipmentTemplateId left outer join TBL_SignalMeanings c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.SignalId = c.SignalId
            where e.EquipmentBaseType is not null order by e.EquipmentBaseType,s.SignalName,c.Meanings;
         else
            select s.EquipmentTemplateId,e.EquipmentTemplateName,e.ParentTemplateId,(select EquipmentTemplateName from TBL_EquipmentTemplate where EquipmentTemplateId = e.ParentTemplateId) as ParentTemplateName,e.ProtocolCode,
s.SignalId,s.SignalName,c.Meanings,s.SignalCategory,
(select ItemValue from TBL_DataItem where EntryId = 17 and ItemId = s.SignalCategory) as SignalCategoryName ,
s.SignalType, (select ItemValue from TBL_DataItem where EntryId = 18 and ItemId = s.SignalType) as SignalTypeName ,
s.ChannelNo,s.Unit,s.BaseTypeId,(select BaseTypeName from TBL_SignalBaseDic where BaseTypeId = s.BaseTypeId) as BaseTypeName,
c.BaseCondId, (select y.Meaning from TBL_SignalBaseDic x right outer join TBL_StatusBaseDic y on x.BaseStatusId = y.BaseStatusId where x.BaseTypeId = s.BaseTypeId and y.BaseCondId = c.BaseCondId) as BaseMeaning,
e.EquipmentBaseType as CategoryOrBaseType,e.EquipmentBaseType,c.StateValue,(select BaseEquipmentName from TBL_EquipmentBaseType where BaseEquipmentId = e.EquipmentBaseType) as EquipmentBaseTypeName ,
(case when c.StateValue is not null then(select SubState from TBL_SignalBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and SignalId = s.SignalId and StateValue = c.StateValue) else(select SubState from TBL_SignalBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and SignalId = s.SignalId and StateValue is NULL) end) as SubState
            from TBL_EquipmentTemplate e inner join TBL_Signal s on e.EquipmentTemplateId = s.EquipmentTemplateId left outer join TBL_SignalMeanings c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.SignalId = c.SignalId
            where e.EquipmentBaseType = v_CategoryOrBaseType order by e.EquipmentBaseType,s.SignalName,c.Meanings;
         end if;
      else
         select s.EquipmentTemplateId,e.EquipmentTemplateName,e.ParentTemplateId,(select EquipmentTemplateName from TBL_EquipmentTemplate where EquipmentTemplateId = e.ParentTemplateId) as ParentTemplateName,e.ProtocolCode,
s.SignalId,s.SignalName,c.Meanings,s.SignalCategory,
(select ItemValue from TBL_DataItem where EntryId = 17 and ItemId = s.SignalCategory) as SignalCategoryName ,
s.SignalType, (select ItemValue from TBL_DataItem where EntryId = 18 and ItemId = s.SignalType) as SignalTypeName ,
s.ChannelNo,s.Unit,s.BaseTypeId,(select BaseTypeName from TBL_SignalBaseDic where BaseTypeId = s.BaseTypeId) as BaseTypeName,
c.BaseCondId, (select y.Meaning from TBL_SignalBaseDic x right outer join TBL_StatusBaseDic y on x.BaseStatusId = y.BaseStatusId where x.BaseTypeId = s.BaseTypeId and y.BaseCondId = c.BaseCondId) as BaseMeaning,
e.EquipmentCategory as CategoryOrBaseType, e.EquipmentBaseType,c.StateValue,(select BaseEquipmentName from TBL_EquipmentBaseType where BaseEquipmentId = e.EquipmentBaseType) as EquipmentBaseTypeName  ,
(case when c.StateValue is not null then(select SubState from TBL_SignalBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and SignalId = s.SignalId and StateValue = c.StateValue) else(select SubState from TBL_SignalBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and SignalId = s.SignalId and StateValue is NULL) end) as SubState
         from TBL_EquipmentTemplate e inner join TBL_Signal s on e.EquipmentTemplateId = s.EquipmentTemplateId left outer join TBL_SignalMeanings c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.SignalId = c.SignalId
         where s.EquipmentTemplateId = v_CategoryOrBaseType order by e.EquipmentCategory,s.SignalName,c.Meanings;
      end if;
   end if;
END;

DROP PROCEDURE IF EXISTS PNL_GetSignalForETCount;
CREATE PROCEDURE PNL_GetSignalForETCount()
BEGIN
   select s.EquipmentTemplateId,s.SignalCategory,s.BaseTypeId,c.BaseCondId,c.StateValue,
(case when c.StateValue is not null then(select SubState from TBL_SignalBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and SignalId = s.SignalId and StateValue = c.StateValue) else(select SubState from TBL_SignalBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and SignalId = s.SignalId and StateValue is NULL) end) as SubState
   from TBL_Signal s left outer join TBL_SignalMeanings c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.SignalId = c.SignalId
   order by s.EquipmentTemplateId;
END;





DROP PROCEDURE IF EXISTS PNL_GetSummaryControl;CREATE PROCEDURE PNL_GetSummaryControl(v_DoType INT,
v_CategoryOrBaseType INT)
BEGIN
   IF v_DoType = 0 then

      IF v_CategoryOrBaseType = -1 then

         select t.EquipmentCategory as CategoryOrBaseType,(select d.ItemValue from TBL_DataItem d where d.EntryId = 7 and d.ItemId = t.EquipmentCategory) as CategoryOrBaseTypeName,t.ControlName,t.Meanings,t.ControlNumber
         from(select e.EquipmentCategory,s.ControlName,c.Meanings,count(1) as ControlNumber
            from TBL_EquipmentTemplate e inner join TBL_Control s on e.EquipmentTemplateId = s.EquipmentTemplateId left outer join TBL_ControlMeanings c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.ControlId = c.ControlId
            group by e.EquipmentCategory,s.ControlName,c.Meanings) t
         order by t.EquipmentCategory,t.ControlName,t.Meanings;
      else 
         if v_CategoryOrBaseType = -2 then

            select t.EquipmentCategory as CategoryOrBaseType,(select d.ItemValue from TBL_DataItem d where d.EntryId = 7 and d.ItemId = t.EquipmentCategory) as CategoryOrBaseTypeName,t.ControlName,t.Meanings,t.ControlNumber
            from(select e.EquipmentCategory,s.ControlName,c.Meanings,count(1) as ControlNumber
               from TBL_EquipmentTemplate e inner join TBL_Control s on e.EquipmentTemplateId = s.EquipmentTemplateId left outer join TBL_ControlMeanings c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.ControlId = c.ControlId
               where e.EquipmentBaseType is null
               group by e.EquipmentCategory,s.ControlName,c.Meanings) t
            order by t.EquipmentCategory,t.ControlName,t.Meanings;
         else
            select t.EquipmentCategory as CategoryOrBaseType,(select d.ItemValue from TBL_DataItem d where d.EntryId = 7 and d.ItemId = t.EquipmentCategory) as CategoryOrBaseTypeName,t.ControlName,t.Meanings,t.ControlNumber
            from(select e.EquipmentCategory,s.ControlName,c.Meanings,count(1) as ControlNumber
               from TBL_EquipmentTemplate e inner join TBL_Control s on e.EquipmentTemplateId = s.EquipmentTemplateId left outer join TBL_ControlMeanings c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.ControlId = c.ControlId
               group by e.EquipmentCategory,s.ControlName,c.Meanings) t
            where t.EquipmentCategory = v_CategoryOrBaseType order by t.EquipmentCategory,t.ControlName,t.Meanings;
         end if;
      end if;
   else
      IF v_CategoryOrBaseType = -1 then

         select t.EquipmentBaseType as CategoryOrBaseType,(select BaseEquipmentName from TBL_EquipmentBaseType where BaseEquipmentId = t.EquipmentBaseType) as CategoryOrBaseTypeName,t.ControlName,t.Meanings,t.ControlNumber
         from(select e.EquipmentBaseType,s.ControlName,c.Meanings,count(1) as ControlNumber
            from TBL_EquipmentTemplate e inner join TBL_Control s on e.EquipmentTemplateId = s.EquipmentTemplateId left outer join TBL_ControlMeanings c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.ControlId = c.ControlId
            group by e.EquipmentBaseType,s.ControlName,c.Meanings) t
         where t.EquipmentBaseType is not null order by t.EquipmentBaseType,t.ControlName,t.Meanings;
      else
         select t.EquipmentBaseType as CategoryOrBaseType,(select BaseEquipmentName from TBL_EquipmentBaseType where BaseEquipmentId = t.EquipmentBaseType) as CategoryOrBaseTypeName,t.ControlName,t.Meanings,t.ControlNumber
         from(select e.EquipmentBaseType,s.ControlName,c.Meanings,count(1) as ControlNumber
            from TBL_EquipmentTemplate e inner join TBL_Control s on e.EquipmentTemplateId = s.EquipmentTemplateId left outer join TBL_ControlMeanings c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.ControlId = c.ControlId
            group by e.EquipmentBaseType,s.ControlName,c.Meanings) t
         where t.EquipmentBaseType = v_CategoryOrBaseType  order by t.EquipmentBaseType,t.ControlName,t.Meanings;
      end if;
   end if;
END;


DROP PROCEDURE IF EXISTS PNL_GetAllDetailControl;
CREATE PROCEDURE PNL_GetAllDetailControl(v_DoType INT,
v_CategoryOrBaseType INT)
BEGIN
   IF v_DoType = 0 then

      IF v_CategoryOrBaseType = -1 then

         select s.EquipmentTemplateId,e.EquipmentTemplateName,e.ParentTemplateId,(select EquipmentTemplateName from TBL_EquipmentTemplate where EquipmentTemplateId = e.ParentTemplateId) as ParentTemplateName, e.ProtocolCode,
s.ControlId,s.ControlName,c.Meanings,s.ControlCategory,
(select ItemValue from TBL_DataItem where EntryId = 31 and ItemId = s.ControlCategory) as ControlCategoryName ,
s.CommandType, (select ItemValue from TBL_DataItem where EntryId = 32 and ItemId = s.CommandType) as CommandTypeName ,
s.CmdToken,(select ItemValue from TBL_DataItem where EntryId = 70 and ItemId = s.DataType) as DataType,
s.BaseTypeId,(select BaseTypeName from TBL_CommandBaseDic where BaseTypeId = s.BaseTypeId) as BaseTypeName,
c.BaseCondId, (select y.Meaning from TBL_CommandBaseDic x right outer join TBL_StatusBaseDic y on x.BaseStatusId = y.BaseStatusId where x.BaseTypeId = s.BaseTypeId and y.BaseCondId = c.BaseCondId) as BaseMeaning,
e.EquipmentCategory as CategoryOrBaseType,e.EquipmentBaseType,c.ParameterValue,(select BaseEquipmentName from TBL_EquipmentBaseType where BaseEquipmentId = e.EquipmentBaseType) as EquipmentBaseTypeName ,
(case when c.ParameterValue is not null then(select SubState from TBL_ControlBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and ControlId = s.ControlId and ParameterValue = c.ParameterValue) else(select SubState from TBL_ControlBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and ControlId = s.ControlId and ParameterValue is NULL) end) as SubState
         from TBL_EquipmentTemplate e inner join TBL_Control s on e.EquipmentTemplateId = s.EquipmentTemplateId left outer join TBL_ControlMeanings c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.ControlId = c.ControlId
         order by e.EquipmentCategory,s.ControlName,c.Meanings;
      else 
         if v_CategoryOrBaseType = -2 then

            select s.EquipmentTemplateId,e.EquipmentTemplateName,e.ParentTemplateId,(select EquipmentTemplateName from TBL_EquipmentTemplate where EquipmentTemplateId = e.ParentTemplateId) as ParentTemplateName, e.ProtocolCode,
s.ControlId,s.ControlName,c.Meanings,s.ControlCategory,
(select ItemValue from TBL_DataItem where EntryId = 31 and ItemId = s.ControlCategory) as ControlCategoryName ,
s.CommandType, (select ItemValue from TBL_DataItem where EntryId = 32 and ItemId = s.CommandType) as CommandTypeName ,
s.CmdToken,(select ItemValue from TBL_DataItem where EntryId = 70 and ItemId = s.DataType) as DataType,
s.BaseTypeId,(select BaseTypeName from TBL_CommandBaseDic where BaseTypeId = s.BaseTypeId) as BaseTypeName,
c.BaseCondId, (select y.Meaning from TBL_CommandBaseDic x right outer join TBL_StatusBaseDic y on x.BaseStatusId = y.BaseStatusId where x.BaseTypeId = s.BaseTypeId and y.BaseCondId = c.BaseCondId) as BaseMeaning,
e.EquipmentCategory as CategoryOrBaseType,e.EquipmentBaseType,c.ParameterValue,(select BaseEquipmentName from TBL_EquipmentBaseType where BaseEquipmentId = e.EquipmentBaseType) as EquipmentBaseTypeName ,
(case when c.ParameterValue is not null then(select SubState from TBL_ControlBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and ControlId = s.ControlId and ParameterValue = c.ParameterValue) else(select SubState from TBL_ControlBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and ControlId = s.ControlId and ParameterValue is NULL) end) as SubState
            from TBL_EquipmentTemplate e inner join TBL_Control s on e.EquipmentTemplateId = s.EquipmentTemplateId left outer join TBL_ControlMeanings c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.ControlId = c.ControlId
            where e.EquipmentBaseType is null order by e.EquipmentCategory,s.ControlName,c.Meanings;
         else
            select s.EquipmentTemplateId,e.EquipmentTemplateName,e.ParentTemplateId,(select EquipmentTemplateName from TBL_EquipmentTemplate where EquipmentTemplateId = e.ParentTemplateId) as ParentTemplateName, e.ProtocolCode,
s.ControlId,s.ControlName,c.Meanings,s.ControlCategory,
(select ItemValue from TBL_DataItem where EntryId = 31 and ItemId = s.ControlCategory) as ControlCategoryName ,
s.CommandType, (select ItemValue from TBL_DataItem where EntryId = 32 and ItemId = s.CommandType) as CommandTypeName ,
s.CmdToken,(select ItemValue from TBL_DataItem where EntryId = 70 and ItemId = s.DataType) as DataType,
s.BaseTypeId,(select BaseTypeName from TBL_CommandBaseDic where BaseTypeId = s.BaseTypeId) as BaseTypeName,
c.BaseCondId, (select y.Meaning from TBL_CommandBaseDic x right outer join TBL_StatusBaseDic y on x.BaseStatusId = y.BaseStatusId where x.BaseTypeId = s.BaseTypeId and y.BaseCondId = c.BaseCondId) as BaseMeaning,
e.EquipmentCategory as CategoryOrBaseType,e.EquipmentBaseType,c.ParameterValue,(select BaseEquipmentName from TBL_EquipmentBaseType where BaseEquipmentId = e.EquipmentBaseType) as EquipmentBaseTypeName ,
(case when c.ParameterValue is not null then(select SubState from TBL_ControlBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and ControlId = s.ControlId and ParameterValue = c.ParameterValue) else(select SubState from TBL_ControlBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and ControlId = s.ControlId and ParameterValue is NULL) end) as SubState
            from TBL_EquipmentTemplate e inner join TBL_Control s on e.EquipmentTemplateId = s.EquipmentTemplateId left outer join TBL_ControlMeanings c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.ControlId = c.ControlId
            where e.EquipmentCategory = v_CategoryOrBaseType order by e.EquipmentCategory,s.ControlName,c.Meanings;
         end if;
      end if;
   else 
      IF v_DoType = 1 then

         IF v_CategoryOrBaseType = -1 then

            select s.EquipmentTemplateId,e.EquipmentTemplateName,e.ParentTemplateId,(select EquipmentTemplateName from TBL_EquipmentTemplate where EquipmentTemplateId = e.ParentTemplateId) as ParentTemplateName, e.ProtocolCode,
s.ControlId,s.ControlName,c.Meanings,s.ControlCategory,
(select ItemValue from TBL_DataItem where EntryId = 31 and ItemId = s.ControlCategory) as ControlCategoryName ,
s.CommandType, (select ItemValue from TBL_DataItem where EntryId = 32 and ItemId = s.CommandType) as CommandTypeName ,
s.CmdToken,(select ItemValue from TBL_DataItem where EntryId = 70 and ItemId = s.DataType) as DataType,
s.BaseTypeId,(select BaseTypeName from TBL_CommandBaseDic where BaseTypeId = s.BaseTypeId) as BaseTypeName,
c.BaseCondId, (select y.Meaning from TBL_CommandBaseDic x right outer join TBL_StatusBaseDic y on x.BaseStatusId = y.BaseStatusId where x.BaseTypeId = s.BaseTypeId and y.BaseCondId = c.BaseCondId) as BaseMeaning,
e.EquipmentBaseType as CategoryOrBaseType,e.EquipmentBaseType,c.ParameterValue,(select BaseEquipmentName from TBL_EquipmentBaseType where BaseEquipmentId = e.EquipmentBaseType) as EquipmentBaseTypeName ,
(case when c.ParameterValue is not null then(select SubState from TBL_ControlBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and ControlId = s.ControlId and ParameterValue = c.ParameterValue) else(select SubState from TBL_ControlBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and ControlId = s.ControlId and ParameterValue is NULL) end) as SubState
            from TBL_EquipmentTemplate e inner join TBL_Control s on e.EquipmentTemplateId = s.EquipmentTemplateId left outer join TBL_ControlMeanings c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.ControlId = c.ControlId
            where e.EquipmentBaseType is not null order by e.EquipmentBaseType,s.ControlName,c.Meanings;
         else
            select s.EquipmentTemplateId,e.EquipmentTemplateName,e.ParentTemplateId,(select EquipmentTemplateName from TBL_EquipmentTemplate where EquipmentTemplateId = e.ParentTemplateId) as ParentTemplateName, e.ProtocolCode,
s.ControlId,s.ControlName,c.Meanings,s.ControlCategory,
(select ItemValue from TBL_DataItem where EntryId = 31 and ItemId = s.ControlCategory) as ControlCategoryName ,
s.CommandType, (select ItemValue from TBL_DataItem where EntryId = 32 and ItemId = s.CommandType) as CommandTypeName ,
s.CmdToken,(select ItemValue from TBL_DataItem where EntryId = 70 and ItemId = s.DataType) as DataType,
s.BaseTypeId,(select BaseTypeName from TBL_CommandBaseDic where BaseTypeId = s.BaseTypeId) as BaseTypeName,
c.BaseCondId, (select y.Meaning from TBL_CommandBaseDic x right outer join TBL_StatusBaseDic y on x.BaseStatusId = y.BaseStatusId where x.BaseTypeId = s.BaseTypeId and y.BaseCondId = c.BaseCondId) as BaseMeaning,
e.EquipmentBaseType as CategoryOrBaseType,e.EquipmentBaseType,c.ParameterValue,(select BaseEquipmentName from TBL_EquipmentBaseType where BaseEquipmentId = e.EquipmentBaseType) as EquipmentBaseTypeName ,
(case when c.ParameterValue is not null then(select SubState from TBL_ControlBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and ControlId = s.ControlId and ParameterValue = c.ParameterValue) else(select SubState from TBL_ControlBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and ControlId = s.ControlId and ParameterValue is NULL) end) as SubState
            from TBL_EquipmentTemplate e inner join TBL_Control s on e.EquipmentTemplateId = s.EquipmentTemplateId left outer join TBL_ControlMeanings c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.ControlId = c.ControlId
            where e.EquipmentBaseType = v_CategoryOrBaseType order by e.EquipmentBaseType,s.ControlName,c.Meanings;
         end if;
      else
         select s.EquipmentTemplateId,e.EquipmentTemplateName,e.ParentTemplateId,(select EquipmentTemplateName from TBL_EquipmentTemplate where EquipmentTemplateId = e.ParentTemplateId) as ParentTemplateName, e.ProtocolCode,
s.ControlId,s.ControlName,c.Meanings,s.ControlCategory,
(select ItemValue from TBL_DataItem where EntryId = 31 and ItemId = s.ControlCategory) as ControlCategoryName ,
s.CommandType, (select ItemValue from TBL_DataItem where EntryId = 32 and ItemId = s.CommandType) as CommandTypeName ,
s.CmdToken,(select ItemValue from TBL_DataItem where EntryId = 70 and ItemId = s.DataType) as DataType,
s.BaseTypeId,(select BaseTypeName from TBL_CommandBaseDic where BaseTypeId = s.BaseTypeId) as BaseTypeName,
c.BaseCondId, (select y.Meaning from TBL_CommandBaseDic x right outer join TBL_StatusBaseDic y on x.BaseStatusId = y.BaseStatusId where x.BaseTypeId = s.BaseTypeId and y.BaseCondId = c.BaseCondId) as BaseMeaning,
e.EquipmentCategory as CategoryOrBaseType,e.EquipmentBaseType,c.ParameterValue,(select BaseEquipmentName from TBL_EquipmentBaseType where BaseEquipmentId = e.EquipmentBaseType) as EquipmentBaseTypeName ,
(case when c.ParameterValue is not null then(select SubState from TBL_ControlBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and ControlId = s.ControlId and ParameterValue = c.ParameterValue) else(select SubState from TBL_ControlBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and ControlId = s.ControlId and ParameterValue is NULL) end) as SubState
         from TBL_EquipmentTemplate e inner join TBL_Control s on e.EquipmentTemplateId = s.EquipmentTemplateId left outer join TBL_ControlMeanings c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.ControlId = c.ControlId
         where s.EquipmentTemplateId = v_CategoryOrBaseType order by e.EquipmentCategory,s.ControlName,c.Meanings;
      end if;
   end if;
END;

DROP PROCEDURE IF EXISTS PNL_GetControlForETCount;

CREATE PROCEDURE PNL_GetControlForETCount()
BEGIN
   select s.EquipmentTemplateId,s.CommandType,s.BaseTypeId,c.BaseCondId,c.ParameterValue,
(case when c.ParameterValue is not null then(select SubState from TBL_ControlBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and ControlId = s.ControlId and ParameterValue = c.ParameterValue) else(select SubState from TBL_ControlBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and ControlId = s.ControlId and ParameterValue is NULL) end) as SubState
   from TBL_Control s left outer join TBL_ControlMeanings c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.ControlId = c.ControlId
   order by s.EquipmentTemplateId;
END;





DROP PROCEDURE IF EXISTS PNL_GetSummaryEvent;
CREATE PROCEDURE PNL_GetSummaryEvent(v_DoType INT,
v_CategoryOrBaseType INT)
BEGIN
   IF v_DoType = 0 then

      IF v_CategoryOrBaseType = -1 then

         select t.EquipmentCategory as CategoryOrBaseType,(select d.ItemValue from TBL_DataItem d where d.EntryId = 7 and d.ItemId = t.EquipmentCategory) as CategoryOrBaseTypeName,t.EventName,t.Meanings,t.EventConditionNumber
         from(select e.EquipmentCategory,s.EventName,c.Meanings,count(1) as EventConditionNumber
            from TBL_EquipmentTemplate e inner join TBL_Event s on e.EquipmentTemplateId = s.EquipmentTemplateId inner join TBL_EventCondition c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.EventId = c.EventId
            group by e.EquipmentCategory,s.EventName,c.Meanings) t
         order by t.EquipmentCategory,t.EventName,t.Meanings;
      else 
         if v_CategoryOrBaseType = -2 then

            select t.EquipmentCategory as CategoryOrBaseType,(select d.ItemValue from TBL_DataItem d where d.EntryId = 7 and d.ItemId = t.EquipmentCategory) as CategoryOrBaseTypeName,t.EventName,t.Meanings,t.EventConditionNumber
            from(select e.EquipmentCategory,s.EventName,c.Meanings,count(1) as EventConditionNumber
               from TBL_EquipmentTemplate e inner join TBL_Event s on e.EquipmentTemplateId = s.EquipmentTemplateId inner join TBL_EventCondition c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.EventId = c.EventId
               where e.EquipmentBaseType is null
               group by e.EquipmentCategory,s.EventName,c.Meanings) t
            order by t.EquipmentCategory,t.EventName,t.Meanings;
         else
            select t.EquipmentCategory as CategoryOrBaseType,(select d.ItemValue from TBL_DataItem d where d.EntryId = 7 and d.ItemId = t.EquipmentCategory) as CategoryOrBaseTypeName,t.EventName,t.Meanings,t.EventConditionNumber
            from(select e.EquipmentCategory,s.EventName,c.Meanings,count(1) as EventConditionNumber
               from TBL_EquipmentTemplate e inner join TBL_Event s on e.EquipmentTemplateId = s.EquipmentTemplateId inner join TBL_EventCondition c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.EventId = c.EventId
               group by e.EquipmentCategory,s.EventName,c.Meanings) t
            where t.EquipmentCategory = v_CategoryOrBaseType order by t.EquipmentCategory,t.EventName,t.Meanings;
         end if;
      end if;
   else
      IF v_CategoryOrBaseType = -1 then

         select t.EquipmentBaseType as CategoryOrBaseType,(select BaseEquipmentName from TBL_EquipmentBaseType where BaseEquipmentId = t.EquipmentBaseType) as CategoryOrBaseTypeName,t.EventName,t.Meanings,t.EventConditionNumber
         from(select e.EquipmentBaseType,s.EventName,c.Meanings,count(1) as EventConditionNumber
            from TBL_EquipmentTemplate e inner join TBL_Event s on e.EquipmentTemplateId = s.EquipmentTemplateId inner join TBL_EventCondition c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.EventId = c.EventId
            group by e.EquipmentBaseType,s.EventName,c.Meanings) t
         where t.EquipmentBaseType is not null order by t.EquipmentBaseType,t.EventName,t.Meanings;
      else
         select t.EquipmentBaseType as CategoryOrBaseType,(select BaseEquipmentName from TBL_EquipmentBaseType where BaseEquipmentId = t.EquipmentBaseType) as CategoryOrBaseTypeName,t.EventName,t.Meanings,t.EventConditionNumber
         from(select e.EquipmentBaseType,s.EventName,c.Meanings,count(1) as EventConditionNumber
            from TBL_EquipmentTemplate e inner join TBL_Event s on e.EquipmentTemplateId = s.EquipmentTemplateId inner join TBL_EventCondition c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.EventId = c.EventId
            group by e.EquipmentBaseType,s.EventName,c.Meanings) t
         where t.EquipmentBaseType = v_CategoryOrBaseType order by t.EquipmentBaseType,t.EventName,t.Meanings;
      end if;
   end if;
END;


DROP PROCEDURE IF EXISTS PNL_GetAllDetailEvent;
CREATE PROCEDURE PNL_GetAllDetailEvent(v_DoType INT,
v_CategoryOrBaseType INT)
BEGIN
   IF v_DoType = 0 then

      IF v_CategoryOrBaseType = -1 then

         select s.EquipmentTemplateId,e.EquipmentTemplateName,e.ParentTemplateId,(select EquipmentTemplateName from TBL_EquipmentTemplate where EquipmentTemplateId = e.ParentTemplateId) as ParentTemplateName,e.ProtocolCode,
s.EventId,s.EventName,s.EventCategory,
(select ItemValue from TBL_DataItem where EntryId = 24 and ItemId = s.EventCategory) as EventCategoryName,
c.EventConditionId,c.Meanings,(select ItemValue from TBL_DataItem where EntryId = 23 and ItemId = c.EventSeverity) as EventSeverity,c.BaseTypeId,(select BaseTypeName from TBL_EventBaseDic where BaseTypeId = c.BaseTypeId) as BaseTypeName,
e.EquipmentCategory as CategoryOrBaseType,e.EquipmentBaseType,(select BaseEquipmentName from TBL_EquipmentBaseType where BaseEquipmentId = e.EquipmentBaseType) as EquipmentBaseTypeName ,
(select SubState from TBL_EventBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and EventId = s.EventId and EventConditionId = c.EventConditionId) as SubState
         from TBL_EquipmentTemplate e inner join TBL_Event s on e.EquipmentTemplateId = s.EquipmentTemplateId inner join TBL_EventCondition c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.EventId = c.EventId
         order by e.EquipmentCategory,s.EventName,c.Meanings;
      else 
         if v_CategoryOrBaseType = -2 then

            select s.EquipmentTemplateId,e.EquipmentTemplateName,e.ParentTemplateId,(select EquipmentTemplateName from TBL_EquipmentTemplate where EquipmentTemplateId = e.ParentTemplateId) as ParentTemplateName,e.ProtocolCode,
s.EventId,s.EventName,s.EventCategory,
(select ItemValue from TBL_DataItem where EntryId = 24 and ItemId = s.EventCategory) as EventCategoryName,
c.EventConditionId,c.Meanings,(select ItemValue from TBL_DataItem where EntryId = 23 and ItemId = c.EventSeverity) as EventSeverity,c.BaseTypeId,(select BaseTypeName from TBL_EventBaseDic where BaseTypeId = c.BaseTypeId) as BaseTypeName,
e.EquipmentCategory as CategoryOrBaseType,e.EquipmentBaseType,(select BaseEquipmentName from TBL_EquipmentBaseType where BaseEquipmentId = e.EquipmentBaseType) as EquipmentBaseTypeName ,
(select SubState from TBL_EventBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and EventId = s.EventId and EventConditionId = c.EventConditionId) as SubState
            from TBL_EquipmentTemplate e inner join TBL_Event s on e.EquipmentTemplateId = s.EquipmentTemplateId inner join TBL_EventCondition c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.EventId = c.EventId
            where e.EquipmentBaseType is null order by e.EquipmentCategory,s.EventName,c.Meanings;
         else
            select s.EquipmentTemplateId,e.EquipmentTemplateName,e.ParentTemplateId,(select EquipmentTemplateName from TBL_EquipmentTemplate where EquipmentTemplateId = e.ParentTemplateId) as ParentTemplateName,e.ProtocolCode,
s.EventId,s.EventName,s.EventCategory,
(select ItemValue from TBL_DataItem where EntryId = 24 and ItemId = s.EventCategory) as EventCategoryName,
c.EventConditionId,c.Meanings,(select ItemValue from TBL_DataItem where EntryId = 23 and ItemId = c.EventSeverity) as EventSeverity,c.BaseTypeId,(select BaseTypeName from TBL_EventBaseDic where BaseTypeId = c.BaseTypeId) as BaseTypeName,
e.EquipmentCategory as CategoryOrBaseType,e.EquipmentBaseType,(select BaseEquipmentName from TBL_EquipmentBaseType where BaseEquipmentId = e.EquipmentBaseType) as EquipmentBaseTypeName ,
(select SubState from TBL_EventBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and EventId = s.EventId and EventConditionId = c.EventConditionId) as SubState
            from TBL_EquipmentTemplate e inner join TBL_Event s on e.EquipmentTemplateId = s.EquipmentTemplateId inner join TBL_EventCondition c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.EventId = c.EventId
            where e.EquipmentCategory = v_CategoryOrBaseType order by e.EquipmentCategory,s.EventName,c.Meanings;
         end if;
      end if;
   else 
      IF v_DoType = 1 then

         IF v_CategoryOrBaseType = -1 then

            select s.EquipmentTemplateId,e.EquipmentTemplateName,e.ParentTemplateId,(select EquipmentTemplateName from TBL_EquipmentTemplate where EquipmentTemplateId = e.ParentTemplateId) as ParentTemplateName,e.ProtocolCode,
s.EventId,s.EventName,s.EventCategory,
(select ItemValue from TBL_DataItem where EntryId = 24 and ItemId = s.EventCategory) as EventCategoryName,
c.EventConditionId,c.Meanings,(select ItemValue from TBL_DataItem where EntryId = 23 and ItemId = c.EventSeverity) as EventSeverity,c.BaseTypeId,(select BaseTypeName from TBL_EventBaseDic where BaseTypeId = c.BaseTypeId) as BaseTypeName,
e.EquipmentBaseType as CategoryOrBaseType,e.EquipmentBaseType,(select BaseEquipmentName from TBL_EquipmentBaseType where BaseEquipmentId = e.EquipmentBaseType) as EquipmentBaseTypeName ,
(select SubState from TBL_EventBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and EventId = s.EventId and EventConditionId = c.EventConditionId) as SubState
            from TBL_EquipmentTemplate e inner join TBL_Event s on e.EquipmentTemplateId = s.EquipmentTemplateId inner join TBL_EventCondition c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.EventId = c.EventId
            where e.EquipmentBaseType is not null order by e.EquipmentBaseType,s.EventName,c.Meanings;
         else
            select s.EquipmentTemplateId,e.EquipmentTemplateName,e.ParentTemplateId,(select EquipmentTemplateName from TBL_EquipmentTemplate where EquipmentTemplateId = e.ParentTemplateId) as ParentTemplateName,e.ProtocolCode,
s.EventId,s.EventName,s.EventCategory,
(select ItemValue from TBL_DataItem where EntryId = 24 and ItemId = s.EventCategory) as EventCategoryName,
c.EventConditionId,c.Meanings,(select ItemValue from TBL_DataItem where EntryId = 23 and ItemId = c.EventSeverity) as EventSeverity,c.BaseTypeId,(select BaseTypeName from TBL_EventBaseDic where BaseTypeId = c.BaseTypeId) as BaseTypeName,
e.EquipmentBaseType as CategoryOrBaseType,e.EquipmentBaseType,(select BaseEquipmentName from TBL_EquipmentBaseType where BaseEquipmentId = e.EquipmentBaseType) as EquipmentBaseTypeName ,
(select SubState from TBL_EventBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and EventId = s.EventId and EventConditionId = c.EventConditionId) as SubState
            from TBL_EquipmentTemplate e inner join TBL_Event s on e.EquipmentTemplateId = s.EquipmentTemplateId inner join TBL_EventCondition c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.EventId = c.EventId
            where e.EquipmentBaseType = v_CategoryOrBaseType order by e.EquipmentBaseType,s.EventName,c.Meanings;
         end if;
      else
         select s.EquipmentTemplateId,e.EquipmentTemplateName,e.ParentTemplateId,(select EquipmentTemplateName from TBL_EquipmentTemplate where EquipmentTemplateId = e.ParentTemplateId) as ParentTemplateName,e.ProtocolCode,
s.EventId,s.EventName,s.EventCategory,
(select ItemValue from TBL_DataItem where EntryId = 24 and ItemId = s.EventCategory) as EventCategoryName,
c.EventConditionId,c.Meanings,(select ItemValue from TBL_DataItem where EntryId = 23 and ItemId = c.EventSeverity) as EventSeverity,c.BaseTypeId,(select BaseTypeName from TBL_EventBaseDic where BaseTypeId = c.BaseTypeId) as BaseTypeName,
e.EquipmentCategory as CategoryOrBaseType,e.EquipmentBaseType,(select BaseEquipmentName from TBL_EquipmentBaseType where BaseEquipmentId = e.EquipmentBaseType) as EquipmentBaseTypeName ,
(select SubState from TBL_EventBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and EventId = s.EventId and EventConditionId = c.EventConditionId) as SubState
         from TBL_EquipmentTemplate e inner join TBL_Event s on e.EquipmentTemplateId = s.EquipmentTemplateId inner join TBL_EventCondition c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.EventId = c.EventId
         where s.EquipmentTemplateId = v_CategoryOrBaseType order by e.EquipmentCategory,s.EventName,c.Meanings;
      end if;
   end if;
END;



DROP PROCEDURE IF EXISTS PNL_GetEventForETCount;

CREATE PROCEDURE PNL_GetEventForETCount()
BEGIN
   select s.EquipmentTemplateId,c.BaseTypeId,
(select SubState from TBL_EventBaseConfirm where EquipmentTemplateId = s.EquipmentTemplateId and EventId = s.EventId and EventConditionId = c.EventConditionId) as SubState
   from TBL_Event s inner join TBL_EventCondition c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.EventId = c.EventId
   order by s.EquipmentTemplateId;
END;



DROP PROCEDURE IF EXISTS PNL_GetETAndBaseSignal;
CREATE PROCEDURE PNL_GetETAndBaseSignal(v_EquipmentBaseType INT,
v_BaseTypeId INT)
BEGIN
   select s.EquipmentTemplateId,e.EquipmentTemplateName,e.ParentTemplateId,(select EquipmentTemplateName from TBL_EquipmentTemplate where EquipmentTemplateId = e.ParentTemplateId) as ParentTemplateName,e.ProtocolCode,
s.SignalId,s.SignalName,c.Meanings,s.SignalCategory,
(select ItemValue from TBL_DataItem where EntryId = 17 and ItemId = s.SignalCategory) as SignalCategoryName ,
s.SignalType, (select ItemValue from TBL_DataItem where EntryId = 18 and ItemId = s.SignalType) as SignalTypeName ,
s.ChannelNo,s.Unit,s.BaseTypeId,(select BaseTypeName from TBL_SignalBaseDic where BaseTypeId = s.BaseTypeId) as BaseTypeName,
c.BaseCondId, (select y.Meaning from TBL_SignalBaseDic x right outer join TBL_StatusBaseDic y on x.BaseStatusId = y.BaseStatusId where x.BaseTypeId = s.BaseTypeId and y.BaseCondId = c.BaseCondId) as BaseMeaning,
e.EquipmentCategory as CategoryOrBaseType, e.EquipmentBaseType,c.StateValue,(select CONCAT(BaseEquipmentName,'[',cast(BaseEquipmentId as CHAR(10)),']') from TBL_EquipmentBaseType where BaseEquipmentId = e.EquipmentBaseType) as EquipmentBaseTypeName  from TBL_EquipmentTemplate e left outer join TBL_Signal s on e.EquipmentTemplateId = s.EquipmentTemplateId left join TBL_SignalMeanings c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.SignalId = c.SignalId
   where e.EquipmentBaseType = v_EquipmentBaseType AND s.BaseTypeId = v_BaseTypeId order by s.EquipmentTemplateId,s.SignalName,c.Meanings;



   select e.EquipmentTemplateId,e.EquipmentTemplateName,e.ParentTemplateId,(select EquipmentTemplateName from TBL_EquipmentTemplate where EquipmentTemplateId = e.ParentTemplateId) as ParentTemplateName,e.ProtocolCode,
NULL AS SignalId,NULL AS SignalName,NULL AS Meanings,NULL AS SignalCategory,
NULL AS  SignalCategoryName,
NULL AS SignalType, NULL AS SignalTypeName ,
NULL AS ChannelNo,NULL AS Unit,NULL AS BaseTypeId,NULL AS BaseTypeName,
NULL AS BaseCondId,NULL AS BaseMeaning,
e.EquipmentCategory as CategoryOrBaseType, e.EquipmentBaseType,NULL AS StateValue, (select CONCAT(BaseEquipmentName,'[',cast(BaseEquipmentId as CHAR(10)),']') from TBL_EquipmentBaseType where BaseEquipmentId = e.EquipmentBaseType) as EquipmentBaseTypeName  from TBL_EquipmentTemplate e
   WHERE e.EquipmentBaseType = v_EquipmentBaseType and e.EquipmentTemplateId NOT IN(select DISTINCT s.EquipmentTemplateId from TBL_EquipmentTemplate e left outer join TBL_Signal s on e.EquipmentTemplateId = s.EquipmentTemplateId left join TBL_SignalMeanings c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.SignalId = c.SignalId
      where e.EquipmentBaseType = v_EquipmentBaseType AND s.BaseTypeId = v_BaseTypeId) order by e.EquipmentTemplateId,SignalName,Meanings;
END;




DROP PROCEDURE IF EXISTS PNL_GetETAndBaseControl;
CREATE PROCEDURE PNL_GetETAndBaseControl(v_EquipmentBaseType INT,
v_BaseTypeId INT)
BEGIN
   select s.EquipmentTemplateId,e.EquipmentTemplateName,e.ParentTemplateId,(select EquipmentTemplateName from TBL_EquipmentTemplate where EquipmentTemplateId = e.ParentTemplateId) as ParentTemplateName, e.ProtocolCode,
s.ControlId,s.ControlName,c.Meanings,s.ControlCategory,
(select ItemValue from TBL_DataItem where EntryId = 31 and ItemId = s.ControlCategory) as ControlCategoryName ,
s.CommandType, (select ItemValue from TBL_DataItem where EntryId = 32 and ItemId = s.CommandType) as CommandTypeName ,
s.CmdToken,(select ItemValue from TBL_DataItem where EntryId = 70 and ItemId = s.DataType) as DataType,
s.BaseTypeId,(select BaseTypeName from TBL_CommandBaseDic where BaseTypeId = s.BaseTypeId) as BaseTypeName,
c.BaseCondId, (select y.Meaning from TBL_CommandBaseDic x right outer join TBL_StatusBaseDic y on x.BaseStatusId = y.BaseStatusId where x.BaseTypeId = s.BaseTypeId and y.BaseCondId = c.BaseCondId) as BaseMeaning,
e.EquipmentCategory as CategoryOrBaseType,e.EquipmentBaseType,c.ParameterValue,(select CONCAT(BaseEquipmentName,'[',cast(BaseEquipmentId as CHAR(10)),']') from TBL_EquipmentBaseType where BaseEquipmentId = e.EquipmentBaseType) as EquipmentBaseTypeName from TBL_EquipmentTemplate e inner join TBL_Control s on e.EquipmentTemplateId = s.EquipmentTemplateId left outer join TBL_ControlMeanings c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.ControlId = c.ControlId
   where e.EquipmentBaseType = v_EquipmentBaseType AND s.BaseTypeId = v_BaseTypeId  order by s.EquipmentTemplateId,s.ControlName,c.Meanings;


   select e.EquipmentTemplateId,e.EquipmentTemplateName,e.ParentTemplateId,(select EquipmentTemplateName from TBL_EquipmentTemplate where EquipmentTemplateId = e.ParentTemplateId) as ParentTemplateName,e.ProtocolCode ,
NULL AS ControlId,NULL AS ControlName,NULL AS Meanings,NULL AS ControlCategory,
NULL AS  ControlCategoryName ,
NULL AS CommandType, NULL AS CommandTypeName ,
NULL AS CmdToken,NULL AS DataType,
NULL AS BaseTypeId,NULL AS BaseTypeName,
NULL AS BaseCondId, NULL AS BaseMeaning,
e.EquipmentCategory as CategoryOrBaseType,e.EquipmentBaseType,NULL AS ParameterValue,(select CONCAT(BaseEquipmentName,'[',cast(BaseEquipmentId as CHAR(10)),']') from TBL_EquipmentBaseType where BaseEquipmentId = e.EquipmentBaseType) as EquipmentBaseTypeName from TBL_EquipmentTemplate e
   where e.EquipmentBaseType = v_EquipmentBaseType and e.EquipmentTemplateId NOT IN(select DISTINCT s.EquipmentTemplateId from TBL_EquipmentTemplate e inner join TBL_Control s on e.EquipmentTemplateId = s.EquipmentTemplateId left outer join TBL_ControlMeanings c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.ControlId = c.ControlId
      where e.EquipmentBaseType = v_EquipmentBaseType AND s.BaseTypeId = v_BaseTypeId) order by e.EquipmentTemplateId,ControlName,Meanings;
END;






DROP PROCEDURE IF EXISTS PNL_GetETAndBaseEvent;
CREATE PROCEDURE PNL_GetETAndBaseEvent(v_EquipmentBaseType INT,
v_BaseTypeId INT)
BEGIN
   select s.EquipmentTemplateId,e.EquipmentTemplateName,e.ParentTemplateId,(select EquipmentTemplateName from TBL_EquipmentTemplate where EquipmentTemplateId = e.ParentTemplateId) as ParentTemplateName,e.ProtocolCode,
s.EventId,s.EventName,s.EventCategory,
(select ItemValue from TBL_DataItem where EntryId = 24 and ItemId = s.EventCategory) as EventCategoryName,
c.EventConditionId,c.Meanings,(select ItemValue from TBL_DataItem where EntryId = 23 and ItemId = c.EventSeverity) as EventSeverity,c.BaseTypeId,(select BaseTypeName from TBL_EventBaseDic where BaseTypeId = c.BaseTypeId) as BaseTypeName,
e.EquipmentCategory as CategoryOrBaseType,e.EquipmentBaseType,(select CONCAT(BaseEquipmentName,'[',cast(BaseEquipmentId as CHAR(10)),']') from TBL_EquipmentBaseType where BaseEquipmentId = e.EquipmentBaseType) as EquipmentBaseTypeName from TBL_EquipmentTemplate e inner join TBL_Event s on e.EquipmentTemplateId = s.EquipmentTemplateId inner join TBL_EventCondition c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.EventId = c.EventId
   where e.EquipmentBaseType = v_EquipmentBaseType AND c.BaseTypeId = v_BaseTypeId order by s.EquipmentTemplateId,s.EventName,c.Meanings;

   select e.EquipmentTemplateId,e.EquipmentTemplateName,e.ParentTemplateId,(select EquipmentTemplateName from TBL_EquipmentTemplate where EquipmentTemplateId = e.ParentTemplateId) as ParentTemplateName,e.ProtocolCode,
NULL AS EventId,NULL AS EventName,NULL AS EventCategory,
NULL AS  EventCategoryName,
NULL AS EventConditionId,NULL AS Meanings,NULL AS EventSeverity,NULL AS BaseTypeId,NULL AS BaseTypeName,
e.EquipmentCategory as CategoryOrBaseType,e.EquipmentBaseType,(select CONCAT(BaseEquipmentName,'[',cast(BaseEquipmentId as CHAR(10)),']') from TBL_EquipmentBaseType where BaseEquipmentId = e.EquipmentBaseType) as EquipmentBaseTypeName from TBL_EquipmentTemplate e
   where e.EquipmentBaseType = v_EquipmentBaseType and e.EquipmentTemplateId NOT IN(SELECT distinct s.EquipmentTemplateId from TBL_EquipmentTemplate e inner join TBL_Event s on e.EquipmentTemplateId = s.EquipmentTemplateId inner join TBL_EventCondition c on s.EquipmentTemplateId = c.EquipmentTemplateId and s.EventId = c.EventId
      where e.EquipmentBaseType = v_EquipmentBaseType AND c.BaseTypeId = v_BaseTypeId)  order by e.EquipmentTemplateId,EventName,Meanings;
END;


DROP PROCEDURE IF EXISTS PNL_GetEquipmentTemplate;
CREATE PROCEDURE PNL_GetEquipmentTemplate()
BEGIN
   select t.EquipmentTemplateId,t.EquipmentTemplateName,
(select EquipmentTemplateName from TBL_EquipmentTemplate where EquipmentTemplateId = t.ParentTemplateId) as ParentTemplateName,
cast(t.ProtocolCode as CHAR(32)) as ProtocolCode,t.EquipmentCategory,(select CONCAT(cast(ItemValue as CHAR(32)),'[',cast(t.EquipmentCategory as CHAR(32)),
      ']') from TBL_DataItem where EntryId = 7 and ItemId = t.EquipmentCategory) as EquipmentCategoryName,
t.EquipmentBaseType,(select CONCAT(BaseEquipmentName,'[',cast(t.EquipmentBaseType as CHAR(32)),']') from TBL_EquipmentBaseType where BaseEquipmentId = t.EquipmentBaseType) as EquipmentBaseTypeName,
case when t.EquipmentBaseType is null then NULL else(select count(1) from TBL_SignalBaseDic where BaseEquipmentId = t.EquipmentBaseType) end as MustBaseSignalNum,
(select count(1) from TBL_Signal where EquipmentTemplateId = t.EquipmentTemplateId and BaseTypeId is not NULL)  as  OkBaseSignalNum,
case when t.EquipmentBaseType is null then NULL else(select count(1) from TBL_EventBaseDic where BaseEquipmentId = t.EquipmentBaseType) end as MustBaseEventConditionNum,
(select count(1) from TBL_EventCondition where EquipmentTemplateId = t.EquipmentTemplateId and BaseTypeId is not NULL)  as  OkBaseEventConditionNum,
case when t.EquipmentBaseType is null then NULL else(select count(1) from TBL_CommandBaseDic where BaseEquipmentId = t.EquipmentBaseType) end as MustBaseControlNum,
(select count(1) from TBL_Control where EquipmentTemplateId = t.EquipmentTemplateId and BaseTypeId is not NULL)  as  OkBaseControlNum,
(select count(1) from TBL_EquipTemplateBaseConfirm where EquipmentTemplateId = t.EquipmentTemplateId) as IsConfirm
   from TBL_EquipmentTemplate t order by t.EquipmentCategory ASC,ProtocolCode ASC;
END;






DROP PROCEDURE IF EXISTS PNL_AutoSetEquipmentBaseType;

Create Procedure PNL_AutoSetEquipmentBaseType()
BEGIN
   DECLARE v_EquipmentTemplateIdS NATIONAL VARCHAR(255);
   DECLARE v_EquipmentTemplateId INT;
   DECLARE v_BaseEquipmentID INT;
   DECLARE NO_DATA INT DEFAULT 0;
   declare AutoSetBaseTypecur cursor for
   select t.EquipmentTemplateId,m.BaseEquipmentID from TBL_EquipmentTemplate t,TBL_BaseEquipmentCategoryMap m 
   where t.EquipmentCategory = m.EquipmentCategory and m.EquipmentCategory in(select EquipmentCategory from TBL_BaseEquipmentCategoryMap group by EquipmentCategory having(count(1) = 1))  and t.EquipmentBaseType is NULL;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET NO_DATA = -2;
   END;
   DECLARE CONTINUE HANDLER FOR NOT FOUND SET NO_DATA = -1;
   open AutoSetBaseTypecur;
   SET NO_DATA = 0;
   fetch AutoSetBaseTypecur into v_EquipmentTemplateId,v_BaseEquipmentID;
   while NO_DATA = 0 DO
      Update TBL_EquipmentTemplate set EquipmentBaseType = v_BaseEquipmentID where EquipmentTemplateId = v_EquipmentTemplateId;
      SET v_EquipmentTemplateIdS = CAST(v_EquipmentTemplateId AS CHAR(255));
      CALL PBL_ConfigChangeLog(v_EquipmentTemplateIdS,6,2);
      SET NO_DATA = 0;
      fetch AutoSetBaseTypecur into v_EquipmentTemplateId,v_BaseEquipmentID;
   END WHILE;
   close AutoSetBaseTypecur;
END; 






DROP PROCEDURE IF EXISTS PNL_UpgradeToDianXinCategory;

Create Procedure PNL_UpgradeToDianXinCategory()
BEGIN
   DELETE FROM TBL_BaseEquipmentCategoryMap;
   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(101,11);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(102,11);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(201,12);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(203,12);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(204,12);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(205,12);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(301,13);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(301,65);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(301,66);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(401,21);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(401,35);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(401,22);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(401,73);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(401,23);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(501,31);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(701,45);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(702,43);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(703,44);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(705,42);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(801,67);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(801,68);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(801,69);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(801,74);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(801,86);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(901,62);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1001,82);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1004,51);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1101,24);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1101,36);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1101,75);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1101,76);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1102,24);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1102,36);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1102,75);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1102,76);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1201,90);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1202,90);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1203,90);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1204,90);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1205,90);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1501,85);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1502,85);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1601,11);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(2105,72);
END;





DROP PROCEDURE IF EXISTS PNL_ReturnToOriginCategory;

Create Procedure PNL_ReturnToOriginCategory()
BEGIN
   DELETE FROM TBL_BaseEquipmentCategoryMap;
   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(101,11);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(101,14);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(101,16);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(101,25);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(102,17);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(201,12);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(201,15);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(201,26);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(201,29);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(203,12);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(204,27);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(205,28);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(301,13);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(401,21);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(401,22);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(401,23);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(501,31);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(701,45);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(702,43);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(703,44);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(705,42);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(801,86);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(901,62);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1001,82);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1004,51);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1004,52);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1004,53);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1004,54);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1004,55);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1004,83);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1101,24);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1102,24);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1201,90);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1202,90);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1203,90);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1204,90);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1205,90);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1301,81);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1302,81);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1501,85);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1502,85);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(1601,18);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(2101,57);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(2103,84);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(2104,71);

   INSERT INTO TBL_BaseEquipmentCategoryMap(BaseEquipmentID,EquipmentCategory) VALUES(2105,72);
END;




























/*SQLWAYS_EVAL# Name: PCT_SaveEquipmentTemplateMap
Comment: 存储模板局站类型关联
Return: 无
Author              Date            Comment       CODE[YYYYMMDD]
-----------------------------------------------------------------------------------------------
w93718				2014-03-21      Create
**********************************************************************************************/
DROP PROCEDURE IF EXISTS PCT_SaveEquipmentTemplateMap;


CREATE PROCEDURE  PCT_SaveEquipmentTemplateMap(v_EquipmentTemplateId	INT,	-- 模板Id
v_StationCategory	INT,INOUT SWP_Ret_Value INT)	-- 标准化局站类型
   SWL_return:
BEGIN
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   UPDATE TBL_EquipmentTemplate
   SET StationCategory = v_StationCategory
   WHERE EquipmentTemplateId = v_EquipmentTemplateId;

   IF @SWV_Error <> 0 then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

   SET SWP_Ret_Value = 0;
END;



/*SQLWAYS_EVAL# Name: PCT_SaveSignalBaseMap
Comment: 存储信号基类标准化关联
Return: 无
Author              Date            Comment       CODE[YYYYMMDD]
-----------------------------------------------------------------------------------------------
w93718				2014-03-08      Create
**********************************************************************************************/
DROP PROCEDURE IF EXISTS PCT_SaveSignalBaseMap;


CREATE PROCEDURE  PCT_SaveSignalBaseMap(v_StandardDicId	INT,	-- 标准化Id
v_StandardType	INT,	-- 标准化客户类型
v_StationBaseType	INT,	-- 局站基类
v_BaseTypeId	NUMERIC(10,0),INOUT SWP_Ret_Value INT)	-- 基类Id
   SWL_return:
BEGIN
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   INSERT INTO TBL_SignalBaseMap(StandardDicId, StandardType, StationBaseType, BaseTypeId)
VALUES(v_StandardDicId, v_StandardType, v_StationBaseType, v_BaseTypeId);



   IF @SWV_Error <> 0 then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

   SET SWP_Ret_Value = 0;
END;





/*SQLWAYS_EVAL# Name: PCT_SaveEventBaseMap
Comment: 存储事件基类标准化关联
Return: 无
Author              Date            Comment       CODE[YYYYMMDD]
-----------------------------------------------------------------------------------------------
w93718				2013-01-10      Create
**********************************************************************************************/
DROP PROCEDURE IF EXISTS PCT_SaveEventBaseMap;


CREATE PROCEDURE  PCT_SaveEventBaseMap(v_StandardDicId	INT,	-- 标准化Id
v_StandardType	INT,	-- 标准化客户类型
v_StationBaseType	INT,	-- 局站基类
v_BaseTypeId	NUMERIC(10,0),INOUT SWP_Ret_Value INT)	-- 基类Id
   SWL_return:
BEGIN
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   INSERT INTO TBL_EventBaseMap(StandardDicId, StandardType, StationBaseType, BaseTypeId)
VALUES(v_StandardDicId, v_StandardType, v_StationBaseType, v_BaseTypeId);



   IF @SWV_Error <> 0 then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

   SET SWP_Ret_Value = 0;
END;



/*SQLWAYS_EVAL# Name: PCT_SaveCommandBaseMap
Comment: 存储控制基类标准化关联
Return: 无
Author              Date            Comment       CODE[YYYYMMDD]
-----------------------------------------------------------------------------------------------
w93718				2014-03-08      Create
**********************************************************************************************/
DROP PROCEDURE IF EXISTS PCT_SaveCommandBaseMap;


CREATE PROCEDURE  PCT_SaveCommandBaseMap(v_StandardDicId	INT,	-- 标准化Id
v_StandardType	INT,	-- 标准化客户类型
v_StationBaseType	INT,	-- 局站基类
v_BaseTypeId	NUMERIC(10,0),INOUT SWP_Ret_Value INT)	-- 基类Id
   SWL_return:
BEGIN
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   INSERT INTO TBL_CommandBaseMap(StandardDicId, StandardType, StationBaseType, BaseTypeId)
VALUES(v_StandardDicId, v_StandardType, v_StationBaseType, v_BaseTypeId);



   IF @SWV_Error <> 0 then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

   SET SWP_Ret_Value = 0;
END;



/*SQLWAYS_EVAL# Name: PCT_ApplySignalStandard
Comment: 存储控制应用信号标准化
Return: 无
Author              Date            Comment       CODE[YYYYMMDD]
-----------------------------------------------------------------------------------------------
w93718				2014-03-20      Create
**********************************************************************************************/
DROP PROCEDURE IF EXISTS PCT_ApplySignalStandard;


CREATE PROCEDURE  PCT_ApplySignalStandard(v_StandardDicId	INT,					-- SQLWAYS_EVAL# 则表示所有
v_StandardType INT,						-- 标准化类型
v_BaseTypeId	NUMERIC(10,0),			-- 基类Id
v_StationBaseType	INT,				-- 基类局站类型
INOUT v_Output INT ,INOUT SWP_Ret_Value INT)	
   SWL_return:
BEGIN
-- 获取模板的基类局站类型
/* liangyj
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   IF v_StandardDicId = -1 then	

      select   Count(*) INTO v_Output FROM TBL_Signal signal
      INNER JOIN TBL_EquipmentTemplate template ON template.EquipmentTemplateId = signal.EquipmentTemplateId
      INNER JOIN TBL_SignalBaseMap map ON FLOOR(map.BaseTypeId/1000) = FLOOR(signal.BaseTypeId/1000)
      INNER JOIN TBL_StandardDicSig dic ON dic.StandardDicId = map.StandardDicId AND dic.StationCategory = map.StationBaseType AND dic.StandardType = map.StandardType WHERE dic.StationCategory = template.StationCategory AND dic.StandardType = v_StandardType;
      UPDATE TBL_Signal signal
      INNER JOIN TBL_EquipmentTemplate template ON template.EquipmentTemplateId = signal.EquipmentTemplateId
      INNER JOIN TBL_SignalBaseMap map ON FLOOR(map.BaseTypeId/1000) = FLOOR(signal.BaseTypeId/1000)
      INNER JOIN TBL_StandardDicSig dic ON dic.StandardDicId = map.StandardDicId AND dic.StationCategory = map.StationBaseType AND dic.StandardType = map.StandardType
      SET signal.SignalName = IFNULL(CASE WHEN(SELECT wbe.Enable FROM TBL_WriteBackEntry wbe WHERE wbe.EntryId = 1) = 1 THEN replace(dic.SignalStandardName,'XX',CAST(signal.BaseTypeId -floor(signal.BaseTypeId/1000)*1000 AS CHAR(10))) ELSE NULL END,signal.SignalName), 	-- 信号名称
signal.StoreInterval = IFNULL(CASE WHEN(SELECT wbe.Enable FROM TBL_WriteBackEntry wbe WHERE wbe.EntryId = 2) = 1 THEN dic.StoreInterval ELSE NULL END,signal.StoreInterval),	-- 存储周期
      signal.AbsValueThreshold = IFNULL(CASE WHEN(SELECT wbe.Enable FROM TBL_WriteBackEntry wbe WHERE wbe.EntryId = 3) = 1 THEN dic.AbsValueThreshold ELSE NULL END,signal.AbsValueThreshold),  	-- 绝对阀值	
signal.PercentThreshold = IFNULL(CASE WHEN(SELECT wbe.Enable FROM TBL_WriteBackEntry wbe WHERE wbe.EntryId = 4) = 1 THEN dic.PercentThreshold ELSE NULL END,signal.PercentThreshold)		-- 百分比阀值
      WHERE dic.StationCategory = template.StationCategory AND dic.StandardType = v_StandardType;
   ELSE
      select   Count(*) INTO v_Output FROM TBL_Signal signal
      INNER JOIN TBL_SignalBaseMap map ON  FLOOR(map.BaseTypeId/1000) = FLOOR(signal.BaseTypeId/1000) AND map.StationBaseType = v_StationBaseType
      INNER JOIN TBL_StandardDicSig dic ON dic.StandardDicId = map.StandardDicId AND dic.StandardDicId = v_StandardDicId AND dic.StationCategory = map.StationBaseType AND dic.StandardType = map.StandardType WHERE signal.BaseTypeId = v_BaseTypeId AND map.StandardType = v_StandardType;
      UPDATE TBL_Signal signal
      INNER JOIN TBL_SignalBaseMap map ON  FLOOR(map.BaseTypeId/1000) = FLOOR(signal.BaseTypeId/1000) AND map.StationBaseType = v_StationBaseType
      INNER JOIN TBL_StandardDicSig dic ON dic.StandardDicId = map.StandardDicId AND dic.StandardDicId = v_StandardDicId AND dic.StationCategory = map.StationBaseType AND dic.StandardType = map.StandardType
      SET signal.SignalName = IFNULL(CASE WHEN(SELECT wbe.Enable FROM TBL_WriteBackEntry wbe WHERE wbe.EntryId = 1) = 1 THEN replace(dic.SignalStandardName,'XX',CAST(signal.BaseTypeId -floor(signal.BaseTypeId/1000)*1000 AS CHAR(10))) ELSE NULL END,signal.SignalName), 	-- 信号名称
signal.StoreInterval = IFNULL(CASE WHEN(SELECT wbe.Enable FROM TBL_WriteBackEntry wbe WHERE wbe.EntryId = 2) = 1 THEN dic.StoreInterval ELSE NULL END,signal.StoreInterval),	-- 存储周期
      signal.AbsValueThreshold = IFNULL(CASE WHEN(SELECT wbe.Enable FROM TBL_WriteBackEntry wbe WHERE wbe.EntryId = 3) = 1 THEN dic.AbsValueThreshold ELSE NULL END,signal.AbsValueThreshold),  	-- 绝对阀值	
signal.PercentThreshold = IFNULL(CASE WHEN(SELECT wbe.Enable FROM TBL_WriteBackEntry wbe WHERE wbe.EntryId = 4) = 1 THEN dic.PercentThreshold ELSE NULL END,signal.PercentThreshold)		-- 百分比阀值
      WHERE signal.BaseTypeId = v_BaseTypeId AND map.StandardType = v_StandardType;
   end if;

   IF @SWV_Error <> 0 then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;
*/
   SET SWP_Ret_Value = 0;
END;





/*SQLWAYS_EVAL# Name: PCT_ApplyEventStandard
Comment: 存储控制应用事件标准化
Return: 无
Author              Date            Comment       CODE[YYYYMMDD]
-----------------------------------------------------------------------------------------------
w93718				2014-03-20      Create
**********************************************************************************************/
DROP PROCEDURE IF EXISTS PCT_ApplyEventStandard;

CREATE PROCEDURE PCT_ApplyEventStandard(v_StandardDicId	INT,					-- SQLWAYS_EVAL# 则表示所有
v_StandardType INT,						-- 标准化类型
v_BaseTypeId	NUMERIC(10,0),			-- 基类Id
v_StationBaseType	INT,				-- 基类局站类型
INOUT v_Output INT ,INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN
-- 获取模板的基类局站类型
/* liangyj
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   IF v_StandardDicId = -1 then

      select   Count(*) INTO v_Output FROM TBL_EventCondition cond
      INNER JOIN TBL_EquipmentTemplate template ON template.EquipmentTemplateId = cond.EquipmentTemplateId
      INNER JOIN TBL_EventBaseMap map ON FLOOR(map.BaseTypeId/1000) = FLOOR(cond.BaseTypeId/1000)
      INNER JOIN TBL_StandardDicEvent dic ON dic.StandardDicId = map.StandardDicId AND dic.StationCategory = map.StationBaseType AND dic.StandardType = map.StandardType WHERE dic.StationCategory = template.StationCategory AND dic.StandardType = v_StandardType;
      UPDATE TBL_EventCondition cond
      INNER JOIN TBL_EquipmentTemplate template ON template.EquipmentTemplateId = cond.EquipmentTemplateId
      INNER JOIN TBL_EventBaseMap map ON FLOOR(map.BaseTypeId/1000) = FLOOR(cond.BaseTypeId/1000)
      INNER JOIN TBL_StandardDicEvent dic ON dic.StandardDicId = map.StandardDicId AND dic.StationCategory = map.StationBaseType AND dic.StandardType = map.StandardType
      LEFT JOIN TBL_Event evt ON cond.EventId = evt.EventId AND template.EquipmentTemplateId = evt.EquipmentTemplateId
      LEFT JOIN TBL_Signal signal ON signal.SignalId = evt.SignalId AND signal.EquipmentTemplateId = template.EquipmentTemplateId
      SET cond.StandardName = dic.StandardDicId,cond.EventSeverity = IFNULL(CASE WHEN(SELECT wbe.Enable FROM TBL_WriteBackEntry wbe WHERE wbe.EntryId = 6) = 1 THEN dic.EventSeverity ELSE NULL END,cond.EventSeverity), 	-- 事件名称
cond.StartDelay = IFNULL(cast(CASE WHEN(SELECT wbe.Enable FROM TBL_WriteBackEntry wbe WHERE wbe.EntryId = 8) = 1 THEN dic.StartDelay ELSE NULL END as SIGNED INTEGER),cond.StartDelay), 	-- 事件名称, 	
      cond.StartCompareValue = IFNULL(cast(CASE WHEN(SELECT wbe.Enable FROM TBL_WriteBackEntry wbe WHERE wbe.EntryId = 7) = 1 THEN(CASE WHEN signal.SignalCategory = 1 THEN dic.CompareValue ELSE NULL END) ELSE NULL END as DECIMAL(15,15)),cond.StartCompareValue),	-- 事件名称
      cond.Meanings = IFNULL(CASE WHEN(SELECT wbe.Enable FROM TBL_WriteBackEntry wbe WHERE wbe.EntryId = 9) = 1 THEN dic.Meanings ELSE NULL END,cond.Meanings) 	-- 信号名称
      WHERE dic.StationCategory = template.StationCategory AND dic.StandardType = v_StandardType;
   ELSE
      select   Count(*) INTO v_Output FROM TBL_EventCondition cond
      INNER JOIN TBL_EventBaseMap map ON FLOOR(map.BaseTypeId/1000) = FLOOR(cond.BaseTypeId/1000) AND map.StationBaseType = v_StationBaseType
      INNER JOIN TBL_StandardDicEvent dic ON dic.StandardDicId = map.StandardDicId AND dic.StandardDicId = v_StandardDicId AND dic.StationCategory = map.StationBaseType AND dic.StandardType = map.StandardType WHERE cond.BaseTypeId = v_BaseTypeId AND map.StandardType = v_StandardType;
      UPDATE TBL_EventCondition cond
      INNER JOIN TBL_EventBaseMap map ON FLOOR(map.BaseTypeId/1000) = FLOOR(cond.BaseTypeId/1000) AND map.StationBaseType = v_StationBaseType
      INNER JOIN TBL_StandardDicEvent dic ON dic.StandardDicId = map.StandardDicId AND dic.StandardDicId = v_StandardDicId AND dic.StationCategory = map.StationBaseType AND dic.StandardType = map.StandardType
      LEFT JOIN TBL_Event evt ON cond.EventId = evt.EventId AND cond.EquipmentTemplateId = evt.EquipmentTemplateId
      LEFT JOIN TBL_Signal signal ON signal.SignalId = evt.SignalId AND signal.EquipmentTemplateId = cond.EquipmentTemplateId
      SET cond.StandardName = dic.StandardDicId,cond.EventSeverity = IFNULL(CASE WHEN(SELECT wbe.Enable FROM TBL_WriteBackEntry wbe WHERE wbe.EntryId = 6) = 1 THEN dic.EventSeverity ELSE NULL END,cond.EventSeverity), 	-- 事件名称
cond.StartDelay = IFNULL(cast(CASE WHEN(SELECT wbe.Enable FROM TBL_WriteBackEntry wbe WHERE wbe.EntryId = 8) = 1 THEN dic.StartDelay ELSE NULL END as SIGNED INTEGER),cond.StartDelay), 	-- 事件名称, 	
      cond.StartCompareValue = IFNULL(cast(CASE WHEN(SELECT wbe.Enable FROM TBL_WriteBackEntry wbe WHERE wbe.EntryId = 7) = 1 THEN(CASE WHEN signal.SignalCategory = 1 THEN dic.CompareValue ELSE NULL END) ELSE NULL END as DECIMAL(15,15)),cond.StartCompareValue),	-- 事件名称
      cond.Meanings = IFNULL(CASE WHEN(SELECT wbe.Enable FROM TBL_WriteBackEntry wbe WHERE wbe.EntryId = 9) = 1 THEN dic.Meanings ELSE NULL END,cond.Meanings) 	-- 信号名称
      WHERE cond.BaseTypeId = v_BaseTypeId AND map.StandardType = v_StandardType;
   end if;

   IF @SWV_Error <> 0 then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;
*/
   SET SWP_Ret_Value = 0;
END;




/*SQLWAYS_EVAL# Name: PCT_ApplyControlStandard
Comment: 存储控制应用控制标准化
Return: 无
Author              Date            Comment       CODE[YYYYMMDD]
-----------------------------------------------------------------------------------------------
w93718				2014-03-20      Create
**********************************************************************************************/
DROP PROCEDURE IF EXISTS PCT_ApplyControlStandard;

CREATE PROCEDURE PCT_ApplyControlStandard(v_StandardDicId	INT,					-- SQLWAYS_EVAL# 则表示所有
v_StandardType INT,						-- 标准化类型
v_BaseTypeId	NUMERIC(10,0),			-- 基类Id
v_StationBaseType	INT,				-- 基类局站类型
INOUT v_Output INT ,INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN
-- 获取模板的基类局站类型

   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   IF v_StandardDicId = -1 then	-- 应用所有标准化

      select   Count(*) INTO v_Output FROM TBL_Control control
      INNER JOIN TBL_EquipmentTemplate template ON template.EquipmentTemplateId = control.EquipmentTemplateId
      INNER JOIN TBL_CommandBaseMap map ON FLOOR(map.BaseTypeId/1000) = FLOOR(control.BaseTypeId/1000)
      INNER JOIN TBL_StandardDicControl dic ON dic.StandardDicId = map.StandardDicId AND dic.StationCategory = map.StationBaseType AND dic.StandardType = map.StandardType WHERE dic.StationCategory = template.StationCategory AND dic.StandardType = v_StandardType;
      UPDATE TBL_Control control
      INNER JOIN TBL_EquipmentTemplate template ON template.EquipmentTemplateId = control.EquipmentTemplateId
      INNER JOIN TBL_CommandBaseMap map ON FLOOR(map.BaseTypeId/1000) = FLOOR(control.BaseTypeId/1000)
      INNER JOIN TBL_StandardDicControl dic ON dic.StandardDicId = map.StandardDicId AND dic.StationCategory = map.StationBaseType AND dic.StandardType = map.StandardType
      SET control.ControlName = IFNULL(CASE WHEN(SELECT wbe.Enable FROM TBL_WriteBackEntry wbe WHERE wbe.EntryId = 10) = 1 THEN replace(dic.ControlStandardName,'XX',CAST(control.BaseTypeId -floor(control.BaseTypeId/1000)*1000 AS CHAR(10))) ELSE NULL END,control.ControlName) 	-- 信号名称
      WHERE dic.StationCategory = template.StationCategory AND dic.StandardType = v_StandardType;
   ELSE
      select   Count(*) INTO v_Output FROM TBL_Control control
      INNER JOIN TBL_CommandBaseMap map ON FLOOR(map.BaseTypeId/1000) = FLOOR(control.BaseTypeId/1000) AND map.StationBaseType = v_StationBaseType
      INNER JOIN TBL_StandardDicControl dic ON dic.StandardDicId = map.StandardDicId AND dic.StandardDicId = v_StandardDicId AND dic.StationCategory = map.StationBaseType AND dic.StandardType = map.StandardType WHERE control.BaseTypeId = v_BaseTypeId AND map.StandardType = v_StandardType;
      UPDATE TBL_Control control
      INNER JOIN TBL_CommandBaseMap map ON FLOOR(map.BaseTypeId/1000) = FLOOR(control.BaseTypeId/1000) AND map.StationBaseType = v_StationBaseType
      INNER JOIN TBL_StandardDicControl dic ON dic.StandardDicId = map.StandardDicId AND dic.StandardDicId = v_StandardDicId AND dic.StationCategory = map.StationBaseType AND dic.StandardType = map.StandardType
      SET control.ControlName = IFNULL(CASE WHEN(SELECT wbe.Enable FROM TBL_WriteBackEntry wbe WHERE wbe.EntryId = 10) = 1 THEN replace(dic.ControlStandardName,'XX',CAST(control.BaseTypeId -floor(control.BaseTypeId/1000)*1000 AS CHAR(10))) ELSE NULL END,control.ControlName) 	-- 信号名称
      WHERE control.BaseTypeId = v_BaseTypeId AND map.StandardType = v_StandardType;
   end if;

   IF @SWV_Error <> 0 then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

   SET SWP_Ret_Value = 0;
END;




/*SQLWAYS_EVAL# Name: PCT_BackupSignalStandard
Comment: 存储控制备份信号标准化
Return: 无
Author              Date            Comment       CODE[YYYYMMDD]
-----------------------------------------------------------------------------------------------
w93718				2014-03-20      Create
**********************************************************************************************/

DROP PROCEDURE IF EXISTS PCT_BackupSignalStandard;


CREATE PROCEDURE  PCT_BackupSignalStandard(v_StandardDicId	INT,					-- SQLWAYS_EVAL# 则表示所有
v_StandardType INT,						-- 标准化类型
v_BaseTypeId	NUMERIC(10,0),			-- 基类Id
v_StationBaseType	INT,INOUT SWP_Ret_Value INT)				-- 基类局站类型
   SWL_return:
BEGIN
-- 获取模板的基类局站类型
/* liangyj

*/
   SET SWP_Ret_Value = 0;
END;





/*Name: PCT_BackupEventStandard
Comment: 存储控制备份事件标准化
Return: 无
Author              Date            Comment       CODE[YYYYMMDD]
-----------------------------------------------------------------------------------------------
w93718				2014-03-20      Create
**********************************************************************************************/
DROP PROCEDURE IF EXISTS PCT_BackupEventStandard;


CREATE PROCEDURE  PCT_BackupEventStandard(v_StandardDicId	INT,					-- SQLWAYS_EVAL# 则表示所有
v_StandardType INT,						-- 标准化类型
v_BaseTypeId	NUMERIC(10,0),			-- 基类Id
v_StationBaseType	INT,INOUT SWP_Ret_Value INT)				-- 基类局站类型
   SWL_return:
BEGIN
/* liangyj
*/

   SET SWP_Ret_Value = 0;
END;





/* PCT_BackupControlStandard
Comment: 存储控制备份控制标准化
Return: 无
Author              Date            Comment       CODE[YYYYMMDD]
-----------------------------------------------------------------------------------------------
w93718				2014-03-20      Create
**********************************************************************************************/
DROP PROCEDURE IF EXISTS PCT_BackupControlStandard;


CREATE PROCEDURE  PCT_BackupControlStandard(v_StandardDicId	INT,					-- SQLWAYS_EVAL# 则表示所有
v_StandardType INT,						-- 标准化类型
v_BaseTypeId	NUMERIC(10,0),			-- 基类Id
v_StationBaseType	INT,INOUT SWP_Ret_Value INT)				-- 基类局站类型
   SWL_return:
BEGIN
/* liangyj
*/

   SET SWP_Ret_Value = 0;
END;





/*Name: PCT_RestoreSignalStandard
Comment: 存储控制还原信号标准化
Return: 无
Author              Date            Comment       CODE[YYYYMMDD]
-----------------------------------------------------------------------------------------------
w93718				2014-03-20      Create
**********************************************************************************************/
DROP PROCEDURE IF EXISTS PCT_RestoreSignalStandard;


CREATE PROCEDURE  PCT_RestoreSignalStandard(v_EntryCategory			INT,			-- SQLWAYS_EVAL# 示所有信号
v_EquipmentTemplateId	INT,		-- 模板Id
v_EntryId				INT,		   		-- 信号Id
v_StationBaseType	INT,				-- 基类局站类型,暂时没有用处
INOUT v_Output INT ,INOUT SWP_Ret_Value INT)	
   SWL_return:
BEGIN
/* liangyj
*/

   SET SWP_Ret_Value = 0;
END;





/*Name: PCT_RestoreEventStandard
Comment: 存储控制还原事件标准化
Return: 无
Author              Date            Comment       CODE[YYYYMMDD]
-----------------------------------------------------------------------------------------------
w93718				2014-03-20      Create
**********************************************************************************************/
DROP PROCEDURE IF EXISTS PCT_RestoreEventStandard;


CREATE PROCEDURE  PCT_RestoreEventStandard(v_EntryCategory			INT,			-- SQLWAYS_EVAL# 表示所有事件
v_EquipmentTemplateId	INT,		-- 模板Id
v_EntryId				INT,					-- 信号Id
v_EventConditionId				INT,
INOUT v_Output INT ,INOUT SWP_Ret_Value INT)   		
   SWL_return:
BEGIN
   /* liangyj
*/

   SET SWP_Ret_Value = 0;
END;





/*Name: PCT_RestoreControlStandard
Comment: 存储控制还原控制标准化
Return: 无
Author              Date            Comment       CODE[YYYYMMDD]
-----------------------------------------------------------------------------------------------
w93718				2014-03-20      Create
**********************************************************************************************/
DROP PROCEDURE IF EXISTS PCT_RestoreControlStandard;


CREATE PROCEDURE  PCT_RestoreControlStandard(v_EntryCategory			INT,			-- SQLWAYS_EVAL# 表示所有控制
v_EquipmentTemplateId	INT,		-- 模板Id
v_EntryId				INT,		   		-- 信号Id
v_StationBaseType	INT,				-- 基类局站类型,暂时没有用处
INOUT v_Output INT ,INOUT SWP_Ret_Value INT)	
   SWL_return:
BEGIN
 /* liangyj
*/

   SET SWP_Ret_Value = 0;
END;





/*Name: PCT_InstanceCheck
Comment: 实例检查存储过程
Return: 无
Author              Date            Comment       CODE[YYYYMMDD]
-----------------------------------------------------------------------------------------------
w93718				2014-11-11      Create
**********************************************************************************************/
DROP PROCEDURE IF EXISTS PCT_InstanceCheck;


CREATE PROCEDURE  PCT_InstanceCheck()
BEGIN
   DECLARE v_minidx INT;
   DECLARE v_maxidx INT;
   DECLARE v_StationId INT;
   DECLARE v_equipid INT;
   DECLARE v_SignalId INT; 
   DECLARE v_EquipmentName NATIONAL VARCHAR(100);
   DECLARE v_SignalName NATIONAL VARCHAR(100);
   DECLARE v_Expression NATIONAL VARCHAR(1000);
   DECLARE v_ExpressionExplain NATIONAL VARCHAR(1000);

   DECLARE v_indexL INT; 
   DECLARE v_indexM INT;
   DECLARE v_indexR INT;
   DECLARE SWV_Expression_Str NATIONAL VARCHAR(1000);
   DROP TABLE IF EXISTS TTL_RealSignalConfig;

   CREATE TABLE TTL_RealSignalConfig
   (
      Idx INT AUTO_INCREMENT UNIQUE
   ) AS SELECT d.StationId, d.StationName, c.EquipmentId, c.EquipmentName, a.SignalId, a.SignalName, c.SamplerUnitId, f.SamplerUnitName, a.ChannelNo, e.ReferenceSamplerUnitId, g.SamplerUnitName AS ReferenceSamplerUnitName, e.ReferenceChannelNo, e.Expression, e.Expression AS ExpressionExplain, map.OldStationId, emap.OldEquipmentId, 0 AS CheckResult, 1 AS CheckType, '' AS OldExpression, '' AS OldExpressionExplain FROM TBL_Signal a
      INNER JOIN TBL_EquipmentTemplate b ON b.EquipmentTemplateId = a.EquipmentTemplateId
      INNER JOIN TBL_Equipment c ON c.EquipmentTemplateId = a.EquipmentTemplateId
      INNER JOIN TBL_Station d ON d.StationId = c.StationId
      INNER JOIN TSL_SamplerUnit f ON f.SamplerUnitId = c.SamplerUnitId AND f.MonitorUnitId = c.MonitorUnitId
      INNER JOIN TSL_MonitorUnitSignal e ON e.StationId = d.StationId AND e.EquipmentId = c.EquipmentId AND e.SignalId = a.SignalId
      INNER JOIN TSL_SamplerUnit g ON e.ReferenceSamplerUnitId = g.SamplerUnitId AND c.MonitorUnitId = g.MonitorUnitId
      INNER JOIN TBL_StationIdMap map ON map.KoloStationId = d.StationId
      INNER JOIN TBL_EquipmentIdMap emap ON emap.KoloStationId = d.StationId AND emap.KoloEquipmentId = c.EquipmentId WHERE 1 = 0;
   INSERT INTO TTL_RealSignalConfig(StationId, StationName, EquipmentId, EquipmentName, SignalId, SignalName, SamplerUnitId, SamplerUnitName, ChannelNo, ReferenceSamplerUnitId, ReferenceSamplerUnitName, ReferenceChannelNo, Expression, ExpressionExplain, OldStationId, OldEquipmentId, CheckResult, CheckType, OldExpression, OldExpressionExplain) SELECT d.StationId, d.StationName, c.EquipmentId, c.EquipmentName, a.SignalId, a.SignalName, c.SamplerUnitId, f.SamplerUnitName, a.ChannelNo, e.ReferenceSamplerUnitId, g.SamplerUnitName AS ReferenceSamplerUnitName, e.ReferenceChannelNo, e.Expression, e.Expression AS ExpressionExplain, map.OldStationId, emap.OldEquipmentId, 0 AS CheckResult, 1 AS CheckType, '' AS OldExpression, '' AS OldExpressionExplain

   FROM TBL_Signal a
   INNER JOIN TBL_EquipmentTemplate b ON b.EquipmentTemplateId = a.EquipmentTemplateId
   INNER JOIN TBL_Equipment c ON c.EquipmentTemplateId = a.EquipmentTemplateId
   INNER JOIN TBL_Station d ON d.StationId = c.StationId
   INNER JOIN TSL_SamplerUnit f ON f.SamplerUnitId = c.SamplerUnitId AND f.MonitorUnitId = c.MonitorUnitId
   INNER JOIN TSL_MonitorUnitSignal e ON e.StationId = d.StationId AND e.EquipmentId = c.EquipmentId AND e.SignalId = a.SignalId
   INNER JOIN TSL_SamplerUnit g ON e.ReferenceSamplerUnitId = g.SamplerUnitId AND c.MonitorUnitId = g.MonitorUnitId
   INNER JOIN TBL_StationIdMap map ON map.KoloStationId = d.StationId
   INNER JOIN TBL_EquipmentIdMap emap ON emap.KoloStationId = d.StationId AND emap.KoloEquipmentId = c.EquipmentId
   ORDER BY d.StationName,c.EquipmentName,a.SignalId; 

   ALTER TABLE TTL_RealSignalConfig
   ADD CONSTRAINT PK_RealSignalConfig_ID PRIMARY KEY(Idx,StationId,EquipmentId,SignalId); 


   select   min(Idx), max(Idx) INTO v_minidx,v_maxidx FROM TTL_RealSignalConfig;
-- SQLWAYS_EVAL# = 2179
   WHILE v_minidx <= v_maxidx DO
      select   StationId, EquipmentId, SignalId, Expression INTO v_StationId,v_equipid,v_SignalId,v_Expression FROM TTL_RealSignalConfig WHERE Idx = v_minidx;
      IF v_Expression IS NOT  NULL then
         BEGIN
            SET v_indexL = LOCATE('[',v_Expression);
            SET v_indexM = LOCATE(',',v_Expression);
            SET v_indexR = LOCATE(']',v_Expression);
            SET v_ExpressionExplain = '';
-- SQLWAYS_EVAL# ssion,@indexL,@indexM,@indexR
            SWL_Label4:
            WHILE  v_indexL > 0 DO
               IF v_indexL > v_indexM OR v_indexM > v_indexR then

                  LEAVE SWL_Label4;
               end if;
               SET v_ExpressionExplain = CONCAT(v_ExpressionExplain,SUBSTRING(v_Expression,1,v_indexL)); 
-- SQLWAYS_EVAL# ssionExplain,@Expression,@indexL,@indexM,@indexR
               SET v_equipid = cast(SUBSTRING(v_Expression,v_indexL+1,v_indexM -v_indexL -1) as SIGNED INTEGER);
-- SQLWAYS_EVAL# ession,@indexM+1,@indexR-@indexM-1
               SET v_SignalId = SUBSTRING(v_Expression,v_indexM+1,v_indexR -v_indexM -1);
               SET v_EquipmentName = NULL;
               SET v_SignalName = NULL;
               select   EquipmentName INTO v_EquipmentName FROM TBL_Equipment WHERE EquipmentId = v_equipid;
               select   SignalName INTO v_SignalName FROM TBL_Signal A,TBL_Equipment B WHERE A.EquipmentTemplateId = B.EquipmentTemplateId AND B.EquipmentId = v_equipid AND A.SignalId = v_SignalId; 
-- SQLWAYS_EVAL# id,@signalid,@EquipmentName,@SignalName
               IF v_EquipmentName IS NULL OR  v_SignalName IS  NULL then

                  SET v_ExpressionExplain = CONCAT(v_ExpressionExplain,IFNULL(v_EquipmentName,CAST(v_equipid AS CHAR(30))),
                  ',',IFNULL(v_SignalName,CAST(v_SignalId AS CHAR(30))),']');
                  SET SWV_Expression_Str = SUBSTRING(v_Expression,v_indexR+1,LENGTH(v_Expression) -v_indexR+1 -1);
                  SET v_Expression = SWV_Expression_Str;
               ELSE
                  SET v_ExpressionExplain = CONCAT(SUBSTRING(v_ExpressionExplain,1,LENGTH(v_ExpressionExplain) -1),
                  '【',IFNULL(v_EquipmentName,CAST(v_equipid AS CHAR(30))),',',IFNULL(v_SignalName,CAST(v_SignalId AS CHAR(30))),
                  '】');
                  SET SWV_Expression_Str = SUBSTRING(v_Expression,v_indexR+1,LENGTH(v_Expression) -v_indexR+1 -1);
                  SET v_Expression = SWV_Expression_Str;
               end if;
               SET v_indexL = LOCATE('[',v_Expression);
               SET v_indexM = LOCATE(',',v_Expression);
               SET v_indexR = LOCATE(']',v_Expression);
            END WHILE;
            SET v_ExpressionExplain = CONCAT(v_ExpressionExplain,v_Expression); 
-- SQLWAYS_EVAL# x,@ExpressionExplain
            UPDATE TTL_RealSignalConfig SET ExpressionExplain =  v_ExpressionExplain WHERE Idx = v_minidx;
         END;
      end if;
      SET v_minidx = v_minidx+1;
   END WHILE;
END;






/*SQLWAYS_EVAL# Name  :       PIL_SaveDictionaryItemByEntry
Parameters      :       @EntryId            int            字典实体ID
@ItemValue          varchar(255)   字典项文本
@ParentEntryItemId  int =0         父字典项ID  默认为 0
@ItemId             int =-1        数据项ID    默认为 -1
@IsSystem           int =0         系统默认项  默认为 0

Comment         :       根据字典实体ID新增数据字典项
Return          :       -1      参数不能为空
-2      执行出错
0       成功  返回新增实体项.

Author              Date            Comment       CODE[YYYYMMDD]
-----------------------------------------------------------------------------------------------
l96186              2007-11-27      Created
**********************************************************************************************/

DROP PROCEDURE IF EXISTS  PIL_SaveDictionaryItemByEntry;


CREATE PROCEDURE  PIL_SaveDictionaryItemByEntry(v_EntryId            INT                ,
v_ItemValue          VARCHAR(255)  ,
v_ItemAlias          VARCHAR(255)  ,
v_Description        VARCHAR(255)  ,
v_ExtendField1       VARCHAR(255)  ,
v_ExtendField2       VARCHAR(255)  ,
v_ExtendField3       VARCHAR(255)  ,
v_ExtendField4       VARCHAR(255)  ,
v_ExtendField5       VARCHAR(255)  ,
v_ParentEntryId      INT              ,
v_ParentItemId       INT              ,
v_ItemId             INT             ,
v_IsSystem           INT ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
/*SQLWAYS_EVAL# D新增数据字典项
*/
   DECLARE v_EntryItemId INT;           
   DECLARE v_Image VARCHAR(255);  
   DECLARE v_MaxEntryItemId INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 参数检验
   IF v_ParentEntryId is null then
      set v_ParentEntryId = 0;
   END IF;
   IF v_ParentItemId is null then
      set v_ParentItemId = 0;
   END IF;
   IF v_ItemId is null then
      set v_ItemId = -1;
   END IF;
   IF v_IsSystem is null then
      set v_IsSystem = 0;
   END IF;
   SET @SWV_Error = 0;
   IF v_EntryId  IS NULL OR v_ItemValue IS NULL then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;


   IF NOT EXISTS(SELECT 'X' FROM TBL_DataEntry WHERE EntryId = v_EntryId) then

      SET SWP_Ret_Value = -2;
      LEAVE SWL_return;
   end if;

   SET v_ParentEntryId = IFNULL(v_ParentEntryId,0);
   SET v_ParentItemId = IFNULL(v_ParentItemId,0);

-- SQLWAYS_EVAL# @EntryItemId output,'TBL_DataItem'

   select   MAX(EntryItemId)+1 INTO v_MaxEntryItemId FROM TBL_DataItem;

   IF v_MaxEntryItemId IS NULL then
      SET v_MaxEntryItemId = 0;
   end if;

-- SQLWAYS_EVAL# > @EntryItemId
-- BEGIN
   SET v_EntryItemId = v_MaxEntryItemId+1;
   UPDATE TBL_PrimaryKeyValue SET CurrentValue = v_MaxEntryItemId+1 WHERE TableId = 61;
-- END

-- 获取最大ItemId
   IF v_ItemId = -1 then

      select   max(ItemId) INTO v_ItemId FROM    TBL_DataItem WHERE   EntryId = v_EntryId;
      SET v_ItemId = IFNULL(v_ItemId,0)+1;
   end if;

-- 新增
   SET @SWV_Error = 0;
   INSERT  INTO TBL_DataItem(EntryItemId          ,
ParentEntryId        ,
ParentItemId         ,
EntryId              ,
ItemId               ,
ItemValue            ,
ItemAlias            ,
IsSystem             ,
Description          ,
ExtendField1         ,
ExtendField2         ,
ExtendField3         ,
ExtendField4         ,
ExtendField5)
VALUES(v_EntryItemId         ,
v_ParentEntryId       ,
v_ParentItemId        ,
v_EntryId             ,
v_ItemId              ,
v_ItemValue           ,
v_ItemAlias           ,
v_IsSystem            ,
v_Description         ,
v_ExtendField1        ,
v_ExtendField2        ,
v_ExtendField3        ,
v_ExtendField4        ,
v_ExtendField5);

   IF @SWV_Error <> 0 then

      SET SWP_Ret_Value = -2;
      LEAVE SWL_return;
   end if;
   SET SWP_Ret_Value = 0;
END;


-- liangyj GRANT EXECUTE ON  PIL_SaveDictionaryItemByEntry TO `PUBLIC`;



DROP PROCEDURE IF EXISTS PIL_InitDictionaryEntryItem;


CREATE PROCEDURE PIL_InitDictionaryEntryItem(v_EntryId      INT                   ,
v_ItemId       INT                   ,
v_ParentEntryId INT                  ,
v_ParentItemId  INT                  ,
v_IsSystem     INT                   ,
v_ItemValue    VARCHAR(255)          ,
v_Description  VARCHAR(255)          ,
v_ItemAlias VARCHAR(255))
BEGIN
	DECLARE	SWP_Ret_Value INT;
   CALL PIL_SaveDictionaryItemByEntry(v_EntryId,v_ItemValue,v_ItemAlias,v_Description,NULL,NULL,NULL,NULL,NULL,
   v_ParentEntryId,v_ParentItemId,v_ItemId,1,SWP_Ret_Value);
END;



DROP PROCEDURE IF EXISTS PIL_InitDictionaryEntryItemEXT;


CREATE PROCEDURE PIL_InitDictionaryEntryItemEXT(v_EntryId      INT                   ,
v_ItemId       INT                   ,
v_ParentEntryId INT                  ,
v_ParentItemId  INT                  ,
v_IsSystem     INT                   ,
v_ItemValue    VARCHAR(255)          ,
v_Description  VARCHAR(255)          ,
v_ItemAlias    VARCHAR(255)          ,
v_ExtendField1 NATIONAL VARCHAR(255)         ,
v_ExtendField2 NATIONAL VARCHAR(255))
BEGIN
   CALL PIL_SaveDictionaryItemByEntry(v_EntryId,v_ItemValue,v_ItemAlias,v_Description,NULL,NULL,NULL,NULL,NULL,
   v_ParentEntryId,v_ParentItemId,v_ItemId,1);
   UPDATE TBL_DataItem SET ExtendField1 = v_ExtendField1,ExtendField2 = v_ExtendField2 where EntryId = v_EntryId and ItemId = v_ItemId;
END;



DROP PROCEDURE IF EXISTS PNL_UpdateToDianXinCategoryDictionary;

Create Procedure PNL_UpdateToDianXinCategoryDictionary()
BEGIN
   IF NOT EXISTS(SELECT * FROM TBL_SysConfig WHERE ConfigKey = 'SQLWAYS_EVAL# ry') then

  Insert into TBL_SysConfig(ConfigKey,ConfigValue) Values('SQLWAYS_EVAL# ry','2');
   end if;

   DELETE FROM TBL_DataItem WHERE EntryId IN(7,71);
   CALL PIL_InitDictionaryEntryItemEXT(71,101,0,0,1,'A级局站','','A Station','SQLWAYS_EVAL# ng','1');
   CALL PIL_InitDictionaryEntryItemEXT(71,102,0,0,1,'B级局站','','B Station',NULL,'2');
   CALL PIL_InitDictionaryEntryItemEXT(71,103,0,0,1,'C级局站','','C Station',NULL,'3');
   CALL PIL_InitDictionaryEntryItemEXT(71,104,0,0,1,'D级局站','','D Station',NULL,'4');
   CALL PIL_InitDictionaryEntryItemEXT(71,105,0,0,1,'J级基站','','CTCC',NULL,'5');
   CALL PIL_InitDictionaryEntryItemEXT(71,106,0,0,1,'L级基站','','WITH CNCC',NULL,'6');
   CALL PIL_InitDictionaryEntryItemEXT(71,107,0,0,1,'Y级基站','','WITH CMCC',NULL,'7');
   CALL PIL_InitDictionaryEntryItemEXT(71,108,0,0,1,'S级基站','','With CNCC&CMCC',NULL,'8');
   CALL PIL_InitDictionaryEntryItemEXT(71,3,0,0,1,'虚拟局站','','Virtual Station',NULL,'9');
   CALL PIL_InitDictionaryEntryItemEXT(7,11,0,0,1,'高压配电','','SQLWAYS_EVAL# istribution','Equipment.png','1');
   CALL PIL_InitDictionaryEntryItemEXT(7,12,0,0,1,'低压配电','','SQLWAYS_EVAL# stribution','Equipment.png','2');
   CALL PIL_InitDictionaryEntryItemEXT(7,13,0,0,1,'柴油发电机组','','SQLWAYS_EVAL# or','Generator.png','5');
   CALL PIL_InitDictionaryEntryItemEXT(7,21,0,0,1,'交流配电屏','','SQLWAYS_EVAL# Board','Equipment.png','3');
   CALL PIL_InitDictionaryEntryItemEXT(7,22,0,0,1,'开关电源','','Rectifier','Equipment.png','6');
   CALL PIL_InitDictionaryEntryItemEXT(7,23,0,0,1,'直流配电屏','','SQLWAYS_EVAL# Board','Equipment.png','4');
   CALL PIL_InitDictionaryEntryItemEXT(7,24,0,0,1,'蓄电池组','','Battery','Battery.png','7');
   CALL PIL_InitDictionaryEntryItemEXT(7,31,0,0,1,'UPS设备','','UPS','Ups.png','8');
   CALL PIL_InitDictionaryEntryItemEXT(7,35,0,0,1,'UPS配电屏','','SQLWAYS_EVAL# Board',NULL,'9');
   CALL PIL_InitDictionaryEntryItemEXT(7,36,0,0,1,'UPS电池','','UPS Battery',NULL,'10');
   CALL PIL_InitDictionaryEntryItemEXT(7,37,0,0,1,'模块化UPS','','Module UPS',NULL,'30');
   CALL PIL_InitDictionaryEntryItemEXT(7,42,0,0,1,'中央空调(水冷)','','SQLWAYS_EVAL# (Water Cooling)','SQLWAYS_EVAL# ng',
   '13');
   CALL PIL_InitDictionaryEntryItemEXT(7,43,0,0,1,'专用空调(风冷)','','SQLWAYS_EVAL# (Wind Cooling)','SQLWAYS_EVAL# ng',
   '12');
   CALL PIL_InitDictionaryEntryItemEXT(7,44,0,0,1,'专用空调(水冷)','','SQLWAYS_EVAL# (Water Cooling)','SQLWAYS_EVAL# ng',
   '14');
   CALL PIL_InitDictionaryEntryItemEXT(7,45,0,0,1,'普通空调','','SQLWAYS_EVAL# ition','SQLWAYS_EVAL# ng','15');
   CALL PIL_InitDictionaryEntryItemEXT(7,51,0,0,1,'机房/基站环境','','SQLWAYS_EVAL# nment','Equipment.png','18');
   CALL PIL_InitDictionaryEntryItemEXT(7,62,0,0,1,'太阳能/风能设备','','SQLWAYS_EVAL# Equipment','Equipment.png','20');
   CALL PIL_InitDictionaryEntryItemEXT(7,65,0,0,1,'燃气轮机发电机组','','SQLWAYS_EVAL# Set',NULL,'21');
   CALL PIL_InitDictionaryEntryItemEXT(7,66,0,0,1,'风力发电设备','','SQLWAYS_EVAL# erator',NULL,'22');
   CALL PIL_InitDictionaryEntryItemEXT(7,67,0,0,1,'新风设备','','SQLWAYS_EVAL# ems',NULL,'24');
   CALL PIL_InitDictionaryEntryItemEXT(7,68,0,0,1,'热交换设备','','SQLWAYS_EVAL# Device',NULL,'25');
   CALL PIL_InitDictionaryEntryItemEXT(7,69,0,0,1,'热管设备','','Heat Pipe',NULL,'26');
   CALL PIL_InitDictionaryEntryItemEXT(7,72,0,0,1,'防雷设备/防雷箱','','SQLWAYS_EVAL# Equipment','Equipment.png','28');
   CALL PIL_InitDictionaryEntryItemEXT(7,73,0,0,1,'240V直流系统','','240V DC',NULL,'11');
   CALL PIL_InitDictionaryEntryItemEXT(7,74,0,0,1,'蓄电池温控柜','','SQLWAYS_EVAL# with Temperature Control System',
   NULL,'27');
   CALL PIL_InitDictionaryEntryItemEXT(7,75,0,0,1,'240V电池','','240V Battery',NULL,'31');
   CALL PIL_InitDictionaryEntryItemEXT(7,76,0,0,1,'燃料电池','','Fuel Cell',NULL,'29');
   CALL PIL_InitDictionaryEntryItemEXT(7,82,0,0,1,'门禁系统','','SQLWAYS_EVAL# ntrol','Door.png','17');
   CALL PIL_InitDictionaryEntryItemEXT(7,81,0,0,1,'监控设备','','240V DC',NULL,'19');
   CALL PIL_InitDictionaryEntryItemEXT(7,85,0,0,1,'智能电表','','Ammeter','ATMKey.png','16');
   CALL PIL_InitDictionaryEntryItemEXT(7,86,0,0,1,'智能通风系统','','Aeration System','ATMKey.png','23');
   CALL PIL_InitDictionaryEntryItemEXT(7,90,0,0,1,'图像设备','','Image Equipment',NULL,'80');
   CALL PIL_InitDictionaryEntryItemEXT(7,99,0,0,1,'自诊断设备','','SelfDiagnostics',NULL,'99');

-- 基类标准化配合修改
   CALL PNL_UpgradeToDianXinCategory();
   Update TBL_EquipmentTemplate SET EquipmentBaseType = NULL;


-- 标准化局站类型映射表
   DELETE FROM TBL_StationBaseMap WHERE StandardType = 2;
   INSERT INTO TBL_StationBaseMap(StationBaseType, StationCategory, StandardType) VALUES(1, 101, 2);

   INSERT INTO TBL_StationBaseMap(StationBaseType, StationCategory, StandardType) VALUES(2, 102, 2);

   INSERT INTO TBL_StationBaseMap(StationBaseType, StationCategory, StandardType) VALUES(3, 103, 2);

   INSERT INTO TBL_StationBaseMap(StationBaseType, StationCategory, StandardType) VALUES(4, 104, 2);

   INSERT INTO TBL_StationBaseMap(StationBaseType, StationCategory, StandardType) VALUES(4, 105, 2);

   INSERT INTO TBL_StationBaseMap(StationBaseType, StationCategory, StandardType) VALUES(4, 106, 2);

   INSERT INTO TBL_StationBaseMap(StationBaseType, StationCategory, StandardType) VALUES(4, 107, 2);

   INSERT INTO TBL_StationBaseMap(StationBaseType, StationCategory, StandardType) VALUES(4, 108, 2);

   INSERT INTO TBL_StationBaseMap(StationBaseType, StationCategory, StandardType) VALUES(1, 3, 2);
END;


-- SQLWAYS_EVAL# 信号数据分流存储到中间表的存储过程
-- SQLWAYS_EVAL# 联信号历史数据上报线程调用，包括的信号范围：
-- SQLWAYS_EVAL# 周期阀值的信号（包括单体电压信号、总电压信号）的数据上报
-- SQLWAYS_EVAL# 值的信号（包括油位等信号）的数据上报
-- SQLWAYS_EVAL# 信号的数据上报（非蓄电池/油机设备）
-- SQLWAYS_EVAL# 升级到了S2V3，则对于包含蓄电池设备或油机设备的基站，下发给MU的配置中将包含业务类型=1和2的配置节，SiteUnit在蓄电池放电时，缺省同时采集所有配置了周期或阀值的信号（包含了单体电压和总电压）数据，并随即启动数据上报，打包数据包时，给BusinessTypeId赋值为1/2，ExpressionId=1

DROP PROCEDURE IF EXISTS PBL_SaveRelatedHistorySignal;

CREATE PROCEDURE PBL_SaveRelatedHistorySignal(v_BusinessTypeId    INT,
v_ExpressionId         INT,
v_SerialId		INT,
v_BusinessState      INT,
v_StateTriggerTime          DATETIME,
v_StationId            INT            ,
v_HostId            INT             ,
v_EquipmentId        INT                ,
v_SignalId             INT           ,
v_SampleTime          DATETIME    ,
v_FloatValue             FLOAT       ,
v_StringValue            NATIONAL VARCHAR(255),
v_DateTimeValue    DATETIME    ,
v_BaseTypeId           NUMERIC(10,0) ,
v_ValueType              INT         ,
v_SignalType             INT         ,
v_EventSeverity       INT,INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN
--  返回结果
-- -1 不可知错误
--  0 成功
--  1 参数为0或空
--  2 配置是否存在
--  3 工程状态数据一律丢弃
--  4 中间表不存在

   DECLARE v_StartIndex INT;
   DECLARE v_EndIndex INT;
   DECLARE v_BusinessTypeName NATIONAL VARCHAR(255);
   DECLARE v_ExpressionName NATIONAL VARCHAR(255);
   DECLARE v_StationName NATIONAL VARCHAR(255);
   DECLARE v_EquipmentName NATIONAL VARCHAR(255);
   DECLARE v_SignalName NATIONAL VARCHAR(255);
   DECLARE v_SignalCategory INT;
   DECLARE v_ShowPrecision NATIONAL VARCHAR(255);
   DECLARE v_Unit NATIONAL VARCHAR(255);
   DECLARE v_BaseTypeName NATIONAL VARCHAR(255);
   DECLARE v_EventSeverityName NATIONAL VARCHAR(255);
   DECLARE v_SQL NATIONAL VARCHAR(2048);
   DECLARE v_MidTableName NATIONAL VARCHAR(200);
   DECLARE v_Meanings NATIONAL VARCHAR(255);
   DECLARE v_EquipmentTemplateId INT;
   DECLARE v_StationState INT;
   DECLARE v_Total INT;
   DECLARE v_GetDate DATETIME;
   DECLARE v_StartTime DATETIME;
   DECLARE v_GroupId INT;  
   DECLARE v_BaseCondId INT;
   DECLARE v_BaseMeaning NATIONAL VARCHAR(255);
   DECLARE v_BusinessWorkState INT;
   DECLARE v_BatteryDisChargeState INT;-- 电池放电状态
   DECLARE v_BatteryChargingState INT;-- 电池均充状态
   DECLARE v_BatteryFloatState INT; -- 电池浮充状态
   DECLARE v_BusinessTypeBattery INT;
   DECLARE v_BusinessTypeEngine INT;
   DECLARE v_tmp NATIONAL VARCHAR(255);
   DECLARE v_OutDateTimeValue NATIONAL VARCHAR(255); 
   DECLARE v_OutSampleTime NATIONAL VARCHAR(255);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
-- 业务类型
   SET v_BusinessTypeBattery = 1;
   SET v_BusinessTypeEngine = 2;
-- SQLWAYS_EVAL#                         
   SET v_BatteryDisChargeState = 2;
   SET v_BatteryChargingState = 3;
   SET v_BatteryFloatState = 1;
   SET v_BusinessState = IFNULL(v_BusinessState,1);

-- SQLWAYS_EVAL# CONVERT(NVARCHAR(100),@StationId)
-- PRINT @tmp
-- SQLWAYS_EVAL# CONVERT(NVARCHAR(100),@EquipmentId)
-- PRINT @tmp
-- SQLWAYS_EVAL# CONVERT(NVARCHAR(100),@SignalId)
-- PRINT @tmp
-- SQLWAYS_EVAL# CONVERT(NVARCHAR(100),@SampleTime)
-- PRINT @tmp
-- SQLWAYS_EVAL# CONVERT(NVARCHAR(100),@StateTriggerTime)
-- PRINT @tmp
-- SQLWAYS_EVAL# CONVERT(NVARCHAR(100),@DateTimeValue)
-- PRINT @tmp
-- 参数检查
   IF v_StationId IS NULL OR v_EquipmentId IS NULL OR v_SignalId IS NULL OR v_SampleTime IS NULL OR v_StateTriggerTime IS NULL OR v_DateTimeValue IS NULL
   OR v_BusinessTypeId IS NULL OR v_ExpressionId IS NULL  OR v_SerialId IS NULL OR v_BusinessState IS NULL
   OR v_StationId = 0 OR v_EquipmentId = 0 OR v_SignalId = 0 then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

-- 配置是否存在
   select   COUNT(*) INTO v_Total FROM TBL_Station WHERE StationId = v_StationId;
   IF (v_Total <> 1) then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;

   select   COUNT(*) INTO v_Total FROM TBL_Equipment WHERE EquipmentId = v_EquipmentId AND StationId = v_StationId;
   IF (v_Total <> 1) then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;

   select   COUNT(*) INTO v_Total FROM TBL_Signal ts
   INNER JOIN TBL_Equipment te ON ts.EquipmentTemplateId = te.EquipmentTemplateId WHERE te.EquipmentId = v_EquipmentId AND te.StationId = v_StationId AND ts.SignalId = v_SignalId;
   IF (v_Total <> 1) then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;

-- 当前时间
   SET v_GetDate = CURRENT_TIMESTAMP;

-- SQLWAYS_EVAL# Name
   select   BusinessTypeName INTO v_BusinessTypeName FROM TBL_BusinessType WHERE BusinessTypeId = v_BusinessTypeId;
   IF v_BusinessTypeName IS NULL then 
      SET v_BusinessTypeName = '----';
   end if;

-- SQLWAYS_EVAL# me
   select   ExpressionName INTO v_ExpressionName FROM TBL_BusinessExpressionCfg WHERE ExpressionId = v_ExpressionId;
   IF v_ExpressionName IS NULL then 
      SET v_ExpressionName = '----';
   end if;

-- Station Name
-- SQLWAYS_EVAL# = StationState
   select   StationName INTO v_StationName FROM TBL_Station WHERE StationId = v_StationId;
   IF v_StationName IS NULL then 
      SET v_StationName = '----';
   end if;
-- SQLWAYS_EVAL# IS NULL SELECT @StationState=0

-- 非联网状态下的数据一律丢弃
   SET v_StationState = PNL_GetStationState(v_StationId,v_GetDate);
   IF v_StationState <> 1 then

      SET SWP_Ret_Value = 3;
      LEAVE SWL_return;
   end if;

-- Equipment Name
   select   EquipmentName, EquipmentTemplateId INTO v_EquipmentName,v_EquipmentTemplateId FROM TBL_Equipment WHERE EquipmentId = v_EquipmentId AND StationId = v_StationId;
   IF v_EquipmentName IS NULL then 
      SET v_EquipmentName = '----';
   end if;
   IF v_EquipmentTemplateId IS NULL then 
      SET v_EquipmentTemplateId = 0;
   end if;

-- Signal
   select   SignalName, SignalCategory, ShowPrecision, Unit, BaseTypeId INTO v_SignalName,v_SignalCategory,v_ShowPrecision,v_Unit,v_BaseTypeId FROM TBL_Signal WHERE EquipmentTemplateId = v_EquipmentTemplateId AND SignalId = v_SignalId;
   IF v_SignalName IS NULL then 
      SET v_SignalName = '----';
   end if;
   IF v_SignalCategory IS NULL then 
      SET v_SignalCategory = 0;
   end if;
   IF v_ShowPrecision IS NULL then 
      SET v_ShowPrecision = '----';
   end if;
   IF v_BaseTypeId IS NULL then 
      SET v_BaseTypeId = 0;
   end if;            					
   IF v_Unit IS NULL then 
      SET v_Unit = '----';
   end if;	

-- SQLWAYS_EVAL# IS NULL SELECT @StringValue='----'						
-- Meanings
   SET v_Meanings = '----';       
-- 开关量信号
   IF v_SignalCategory = 2 then

      IF v_FloatValue >= -32768.0 AND v_FloatValue <= 32767.0 then

         select   Meanings, BaseCondId INTO v_Meanings,v_BaseCondId FROM TBL_SignalMeanings WHERE SignalId = v_SignalId   AND EquipmentTemplateId = v_EquipmentTemplateId AND
         StateValue = cast(v_FloatValue as SIGNED INTEGER);
         IF v_BaseCondId IS NOT NULL AND v_BaseTypeId IS NOT NULL AND v_BaseTypeId <> 0 then

            select   Meaning INTO v_BaseMeaning FROM TBL_StatusBaseDic A
            INNER JOIN TBL_SignalBaseDic B ON A.BaseStatusId = B.BaseStatusId WHERE A.BaseCondId = v_BaseCondId AND B.BaseTypeId = v_BaseTypeId;
         end if;
         IF v_BaseCondId IS NULL then 
            SET v_BaseCondId = 0;
         end if;
         IF v_BaseMeaning IS NULL then 
            SET v_BaseMeaning = '----';
         end if;
      end if;
   ELSE
      SET v_BaseCondId = 0;
      SET v_BaseMeaning = '----';
   end if;

-- SQLWAYS_EVAL#          
   select   BaseTypeName INTO v_BaseTypeName FROM TBL_SignalBaseDic WHERE BaseTypeId = v_BaseTypeId;
   IF v_BaseTypeName IS NULL then 
      SET v_BaseTypeName = '----';
   end if;	

-- 告警等级
   select   CASE WHEN ItemValue IS NOT NULL THEN ItemValue ELSE '' END INTO v_EventSeverityName FROM TBL_DataItem WHERE EntryId = 23 AND ItemId = v_EventSeverity;
   IF v_EventSeverityName IS NULL then 
      SET v_EventSeverityName = '----';
   end if;

-- 记录业务表达式状态  
   select   StartTime, BusinessState, GroupId INTO v_StartTime,v_BusinessWorkState,v_GroupId FROM   TBL_BusinessTypeStatus WHERE  StationId = v_StationId
   AND    BusinessTypeId   = v_BusinessTypeId
   AND    ExpressionId = v_ExpressionId
   AND	SerialId = v_SerialId
   AND    EndTime     IS NULL; 

   SET v_GroupId = IFNULL(v_GroupId,0);
   SET v_BusinessWorkState = IFNULL(v_BusinessWorkState,-1);
-- 业务表达式状态变化时
   IF v_BusinessWorkState <> v_BusinessState then

-- 结束上次的状态
      UPDATE TBL_BusinessTypeStatus SET EndTime = v_SampleTime
      WHERE  StationId = v_StationId
      AND    BusinessTypeId   = v_BusinessTypeId
      AND    ExpressionId = v_ExpressionId
      AND	SerialId = v_SerialId
      AND    StartTime   = v_StartTime;
-- 保存当前状态.
      IF v_BusinessTypeId = v_BusinessTypeBattery then
 
-- SQLWAYS_EVAL#        
         IF v_BusinessState = v_BatteryDisChargeState then
            SET v_GroupId = v_GroupId+1;
         end if;
      ELSE 
-- SQLWAYS_EVAL# （1，0）
         IF v_BusinessState > v_BusinessWorkState then
            SET v_GroupId = v_GroupId+1;
         end if;
      end if;
      INSERT INTO TBL_BusinessTypeStatus(StationId,BusinessTypeId,ExpressionId,SerialId,BusinessState,StartTime,EndTime,GroupId)
VALUES(v_StationId,v_BusinessTypeId,v_ExpressionId,v_SerialId,v_BusinessState,v_SampleTime,null,v_GroupId);
   end if;

-- 蓄电池设备存储到固定分表中
   SET @SWV_Error = 0;
   IF v_BusinessTypeId = v_BusinessTypeBattery then

      SET v_StartIndex = EXTRACT(month FROM v_SampleTime);
      IF v_StartIndex = 1 then

  INSERT INTO TBL_HistoryBattery1(StationId            ,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
FloatValue        ,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings           ,
ThresholdType           ,
EquipmentState)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_FloatValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_BusinessState);
      ELSE 
         IF v_StartIndex  = 2 then

  INSERT INTO TBL_HistoryBattery(StationId            ,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
FloatValue        ,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings           ,
ThresholdType           ,
EquipmentState)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_FloatValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_BusinessState);
         ELSE 
            IF v_StartIndex  = 3 then

  INSERT INTO TBL_HistoryBattery3(StationId            ,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
FloatValue        ,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings           ,
ThresholdType           ,
EquipmentState)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_FloatValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_BusinessState);
            ELSE 
               IF v_StartIndex  = 4 then

  INSERT INTO TBL_HistoryBattery4(StationId            ,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
FloatValue        ,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings           ,
ThresholdType           ,
EquipmentState)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_FloatValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_BusinessState);
               ELSE 
                  IF v_StartIndex  = 5 then

  INSERT INTO TBL_HistoryBattery5(StationId            ,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
FloatValue        ,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings           ,
ThresholdType           ,
EquipmentState)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_FloatValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_BusinessState);
                  ELSE 
                     IF v_StartIndex  = 6 then

  INSERT INTO TBL_HistoryBattery6(StationId            ,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
FloatValue        ,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings           ,
ThresholdType           ,
EquipmentState)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_FloatValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_BusinessState);
                     ELSE 
                        IF v_StartIndex  = 7 then

  INSERT INTO TBL_HistoryBattery7(StationId            ,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
FloatValue        ,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings           ,
ThresholdType           ,
EquipmentState)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_FloatValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_BusinessState);
                        ELSE 
                           IF v_StartIndex  = 8 then

  INSERT INTO TBL_HistoryBattery8(StationId            ,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
FloatValue        ,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings           ,
ThresholdType           ,
EquipmentState)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_FloatValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_BusinessState);
                           ELSE 
                              IF v_StartIndex  = 9 then

  INSERT INTO TBL_HistoryBattery9(StationId            ,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
FloatValue        ,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings           ,
ThresholdType           ,
EquipmentState)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_FloatValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_BusinessState);
                              ELSE 
                                 IF v_StartIndex  = 10 then

  INSERT INTO TBL_HistoryBattery10(StationId            ,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
FloatValue        ,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings           ,
ThresholdType           ,
EquipmentState)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_FloatValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_BusinessState);
                                 ELSE 
                                    IF v_StartIndex  = 11 then

  INSERT INTO TBL_HistoryBattery11(StationId            ,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
FloatValue        ,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings           ,
ThresholdType           ,
EquipmentState)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_FloatValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_BusinessState);
                                    ELSE 
                                       IF v_StartIndex  = 12 then

  INSERT INTO TBL_HistoryBattery1(StationId            ,
StationName       ,
EquipmentId       ,
EquipmentName     ,
SignalId          ,
SignalName        ,
SignalCategory    ,
FloatValue        ,
SampleTime        ,
ShowPrecision     ,
Unit              ,
BaseTypeId        ,
BaseTypeName      ,
EventSeverity     ,
EventSeverityName ,
Meanings           ,
ThresholdType           ,
EquipmentState)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_SignalId,
v_SignalName,
v_SignalCategory,
v_FloatValue,
v_SampleTime,
v_ShowPrecision,
v_Unit,
v_BaseTypeId,
v_BaseTypeName,
v_EventSeverity,
v_EventSeverityName,
v_Meanings,
v_SignalType,
v_BusinessState);
                                       ELSE
                                          SET SWP_Ret_Value = -1;
                                          LEAVE SWL_return;
                                       end if;
                                    end if;
                                 end if;
                              end if;
                           end if;
                        end if;
                     end if;
                  end if;
               end if;
            end if;
         end if;
      end if;
   ELSE 
      IF v_BusinessTypeId = v_BusinessTypeEngine then

  INSERT INTO TBL_HistoryEngine(StationId          	,
StationName       	,
EquipmentId       	,
EquipmentName     	,
SignalId          	,
SignalName        	,
SignalCategory    	,
FloatValue        	,
SampleTime        	,
ShowPrecision     	,
Unit              	,
BaseTypeId        	,
BaseTypeName      	,
EventSeverity     	,
EventSeverityName 	,
Meanings          	,
ThresholdType     	,
EquipmentState	    ,
BaseCondId			,
BaseMeaning)
VALUES(v_StationId		,
v_StationName		,
v_EquipmentId		,
v_EquipmentName	,
v_SignalId		,
v_SignalName		,
v_SignalCategory	,
v_FloatValue		,
v_SampleTime		,
v_ShowPrecision	,
v_Unit			,
v_BaseTypeId		,
v_BaseTypeName		,
v_EventSeverity	,
v_EventSeverityName	,
v_Meanings		,
v_SignalType		,
v_BusinessState	,
v_BaseCondId		,
v_BaseMeaning);
      ELSE
-- SQLWAYS_EVAL# 间表

         select   MiddleTableName INTO v_MidTableName FROM TBL_BusinessType WHERE BusinessTypeId = v_BusinessTypeId;
         SET v_OutDateTimeValue = CONCAT(CAST(EXTRACT(year FROM v_DateTimeValue) AS CHAR(30)),'-',CAST(EXTRACT(month FROM v_DateTimeValue) AS CHAR(30)),
         '-',CAST(EXTRACT(day FROM v_DateTimeValue) AS CHAR(30)),
         ' ',CAST(EXTRACT(hour FROM v_DateTimeValue) AS CHAR(30)),
         ':',CAST(EXTRACT(minute FROM v_DateTimeValue) AS CHAR(30)),':',CAST(EXTRACT(second FROM v_DateTimeValue) AS CHAR(30)));
         SET v_OutSampleTime = CONCAT(CAST(EXTRACT(year FROM v_SampleTime) AS CHAR(30)),'-',CAST(EXTRACT(month FROM v_SampleTime) AS CHAR(30)),
         '-',CAST(EXTRACT(day FROM v_SampleTime) AS CHAR(30)),
         ' ',CAST(EXTRACT(hour FROM v_SampleTime) AS CHAR(30)),':',CAST(EXTRACT(minute FROM v_SampleTime) AS CHAR(30)),
         ':',CAST(EXTRACT(second FROM v_SampleTime) AS CHAR(30)));
         SET v_SQL = CONCAT('INSERT INTO ',v_MidTableName,' (BusinessTypeId,
ExpressionId,
SerialId,
BusinessTypeName,
ExpressionName,
StationId	,
StationName   ,
EquipmentId   ,
EquipmentName ,
SignalId      ,
SignalName    ,
SignalCategory,
DataType      ,
FloatValue	,
StringValue	,
DateTimeValue	,
SampleTime    ,
ShowPrecision ,
Unit          ,
BaseTypeId    ,
BaseTypeName  ,
EventSeverity ,
EventSeverityName ,
Meanings	,
ThresholdType ,
BusinessState,
BaseCondId	,
BaseMeaning)
VALUES( ',CAST(v_BusinessTypeId AS CHAR(100)),' , ',CAST(v_ExpressionId AS CHAR(100)),' , ',CAST(v_SerialId AS CHAR(100)),' ,''',v_BusinessTypeName,''',''',v_ExpressionName,''', ',CAST(v_StationId AS CHAR(100)),' ,''',v_StationName,''', ',CAST(v_EquipmentId AS CHAR(100)),' ,''',v_EquipmentName,''', ',CAST(v_SignalId AS CHAR(100)),' ,''',v_SignalName,''', ',CAST(v_SignalCategory AS CHAR(100)),' , ',CAST(v_ValueType AS CHAR(100)),' , ',CAST(v_FloatValue AS CHAR(100)),' ,''',IFNULL(v_StringValue,'-'),''',''',v_OutDateTimeValue,''',''',v_OutSampleTime,''',''',v_ShowPrecision,''',''',v_Unit,''', ',CAST(v_BaseTypeId AS CHAR(100)),' ,''',v_BaseTypeName,''', ',CAST(v_EventSeverity AS CHAR(100)),' ,''',v_EventSeverityName,''',''',v_Meanings,''', ',CAST(v_SignalType AS CHAR(100)),' , ',CAST(v_BusinessState AS CHAR(100)),' , ',CAST(v_BaseCondId AS CHAR(100)),' ,''',v_BaseMeaning,''')');
-- SELECT @SQL
         SET @SWV_Stmt = v_SQL;
         PREPARE SWT_Stmt FROM @SWV_Stmt;
         EXECUTE SWT_Stmt;
         DEALLOCATE PREPARE SWT_Stmt;
      end if;
   end if;

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;


   SET SWP_Ret_Value = 0;
END;

-- 批量存储关联信号
DROP PROCEDURE IF EXISTS PBL_BatchSaveRelatedHistorySignal;


CREATE PROCEDURE PBL_BatchSaveRelatedHistorySignal(v_StationId            		INT,
v_HostId            		INT,
v_SignalTotal				INT,
v_BBusinessTypeId    		NATIONAL VARCHAR(4000),
v_BExpressionId         	NATIONAL VARCHAR(4000),
v_BSerialId					NATIONAL VARCHAR(4000),
v_BBusinessState      		NATIONAL VARCHAR(4000),
v_BStateTriggerTime         NATIONAL VARCHAR(4000),
v_BEquipmentId        		NATIONAL VARCHAR(4000),
v_BSignalId             	NATIONAL VARCHAR(4000),
v_BSampleTime          		NATIONAL VARCHAR(4000),
v_BFloatValue             	NATIONAL VARCHAR(4000),
v_BStringValue            	NATIONAL VARCHAR(4000),
v_BDateTimeValue    		NATIONAL VARCHAR(4000),
v_BBaseTypeId           	NATIONAL VARCHAR(4000),
v_BValueType              	NATIONAL VARCHAR(4000),
v_BSignalType             	NATIONAL VARCHAR(4000),
v_BEventSeverity       		NATIONAL VARCHAR(4000),INOUT SWP_Ret_Value INT)

   SWL_return:
BEGIN
   DECLARE v_Index INT;
   DECLARE v_MinIndex INT;
   DECLARE v_MaxIndex INT;
   DECLARE v_TempValue NATIONAL VARCHAR(255);
   DECLARE v_SerialId INT;
   DECLARE v_BusinessState INT;
   DECLARE v_StateTriggerTime DATETIME;
   DECLARE v_BusinessTypeId INT;
   DECLARE v_ExpressionId INT;
   DECLARE v_EquipmentId INT;
   DECLARE v_SignalId INT;
   DECLARE v_SampleTime DATETIME;
   DECLARE v_FloatValue FLOAT;
   DECLARE v_StringValue NATIONAL VARCHAR(255);
   DECLARE v_DateTimeValue DATETIME;
   DECLARE v_BaseTypeId NUMERIC(10,0);
   DECLARE v_ValueType INT;
   DECLARE v_SignalType INT;
   DECLARE v_EventSeverity INT;
   DECLARE v_Return INT;			
   DECLARE v_Spliter NATIONAL VARCHAR(255);
   DECLARE SWV_BBusinessTypeId_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BExpressionId_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BSerialId_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BBusinessState_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BStateTriggerTime_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BEquipmentId_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BSignalId_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BSampleTime_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BFloatValue_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BStringValue_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BDateTimeValue_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BBaseTypeId_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BValueType_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BSignalType_Str NATIONAL VARCHAR(4000);
   DECLARE SWV_BEventSeverity_Str NATIONAL VARCHAR(4000);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
-- SQLWAYS_EVAL# 
-- SQLWAYS_EVAL# + ','+ @BSampleTime + ','+ @BFloatValue + ','+ @BBaseTypeId + ','+ @BStatus + ','+ @BSignalType + ','+ @BEventSeverity + ',')

-- 设置分隔符
   SET v_Spliter = ',';

-- 设置个数
   SET v_MinIndex = 1;
   SET v_MaxIndex = v_SignalTotal;

-- 批量保存关联信号
   SET @SWV_Error = 0;
   WHILE(v_MinIndex <= v_MaxIndex) DO
-- SQLWAYS_EVAL# Id
      SET v_Index = LOCATE(v_Spliter,v_BBusinessTypeId);
      IF v_Index = 0 then

         SET v_BusinessTypeId = cast(v_BBusinessTypeId as SIGNED INTEGER);
      ELSE
         SET v_BusinessTypeId = cast(SUBSTRING(v_BBusinessTypeId,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BBusinessTypeId_Str = SUBSTRING(v_BBusinessTypeId,v_Index+1,9999);
         SET v_BBusinessTypeId = SWV_BBusinessTypeId_Str;
      end if;	

-- @ExpressionId
      SET v_Index = LOCATE(v_Spliter,v_BExpressionId);
      IF v_Index = 0 then

         SET v_ExpressionId = cast(v_BExpressionId as SIGNED INTEGER);
      ELSE
         SET v_ExpressionId = cast(SUBSTRING(v_BExpressionId,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BExpressionId_Str = SUBSTRING(v_BExpressionId,v_Index+1,9999);
         SET v_BExpressionId = SWV_BExpressionId_Str;
      end if;	

-- @SerialId
      SET v_Index = LOCATE(v_Spliter,v_BSerialId);
      IF v_Index = 0 then

         SET v_SerialId = cast(v_BSerialId as SIGNED INTEGER);
      ELSE
         SET v_SerialId = cast(SUBSTRING(v_BSerialId,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BSerialId_Str = SUBSTRING(v_BSerialId,v_Index+1,9999);
         SET v_BSerialId = SWV_BSerialId_Str;
      end if;			

-- @BusinessState
      SET v_Index = LOCATE(v_Spliter,v_BBusinessState);
      IF v_Index = 0 then

         SET v_BusinessState = cast(v_BBusinessState as SIGNED INTEGER);
      ELSE
         SET v_BusinessState = cast(SUBSTRING(v_BBusinessState,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BBusinessState_Str = SUBSTRING(v_BBusinessState,v_Index+1,9999);
         SET v_BBusinessState = SWV_BBusinessState_Str;
      end if;

-- SQLWAYS_EVAL# Time
      SET v_Index = LOCATE(v_Spliter,v_BStateTriggerTime);
      IF v_Index = 0 then

         SET v_StateTriggerTime = CAST(v_BStateTriggerTime AS DATETIME);
      ELSE
         SET v_StateTriggerTime = CAST(SUBSTRING(v_BStateTriggerTime,1,v_Index -1) AS DATETIME);
         SET SWV_BStateTriggerTime_Str = SUBSTRING(v_BStateTriggerTime,v_Index+1,9999);
         SET v_BStateTriggerTime = SWV_BStateTriggerTime_Str;
      end if;	


-- @EquipmentId
      SET v_Index = LOCATE(v_Spliter,v_BEquipmentId);
      IF v_Index = 0 then

         SET v_EquipmentId = cast(v_BEquipmentId as SIGNED INTEGER);
      ELSE
         SET v_EquipmentId = cast(SUBSTRING(v_BEquipmentId,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BEquipmentId_Str = SUBSTRING(v_BEquipmentId,v_Index+1,9999);
         SET v_BEquipmentId = SWV_BEquipmentId_Str;
      end if;

-- @SignalId
      SET v_Index = LOCATE(v_Spliter,v_BSignalId);
      IF v_Index = 0 then

         SET v_SignalId = cast(v_BSignalId as SIGNED INTEGER);
      ELSE
         SET v_SignalId = cast(SUBSTRING(v_BSignalId,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BSignalId_Str = SUBSTRING(v_BSignalId,v_Index+1,9999);
         SET v_BSignalId = SWV_BSignalId_Str;
      end if;

-- @SampleTime
      SET v_Index = LOCATE(v_Spliter,v_BSampleTime);
      IF v_Index = 0 then

         SET v_SampleTime = CAST(v_BSampleTime AS DATETIME);
      ELSE
         SET v_SampleTime = CAST(SUBSTRING(v_BSampleTime,1,v_Index -1) AS DATETIME);
         SET SWV_BSampleTime_Str = SUBSTRING(v_BSampleTime,v_Index+1,9999);
         SET v_BSampleTime = SWV_BSampleTime_Str;
      end if;

-- @FloatValue
      SET v_Index = LOCATE(v_Spliter,v_BFloatValue);
      IF v_Index = 0 then

         SET v_FloatValue = cast(v_BFloatValue as DECIMAL(15,15));
      ELSE
         SET v_FloatValue = cast(SUBSTRING(v_BFloatValue,1,v_Index -1) as DECIMAL(15,15));
         SET SWV_BFloatValue_Str = SUBSTRING(v_BFloatValue,v_Index+1,9999);
         SET v_BFloatValue = SWV_BFloatValue_Str;
      end if;

-- @StringValue
      SET v_Index = LOCATE(v_Spliter,v_BStringValue);
      IF v_Index = 0 then

         SET v_StringValue = v_BStringValue;
      ELSE
         SET v_StringValue = SUBSTRING(v_BStringValue,1,v_Index -1);
         SET SWV_BStringValue_Str = SUBSTRING(v_BStringValue,v_Index+1,9999);
         SET v_BStringValue = SWV_BStringValue_Str;
      end if;


-- @DateTimeValue
      SET v_Index = LOCATE(v_Spliter,v_BDateTimeValue);
      IF v_Index = 0 then

         SET v_DateTimeValue = CAST(v_BDateTimeValue AS DATETIME);
      ELSE
         SET v_DateTimeValue = CAST(SUBSTRING(v_BDateTimeValue,1,v_Index -1) AS DATETIME);
         SET SWV_BDateTimeValue_Str = SUBSTRING(v_BDateTimeValue,v_Index+1,9999);
         SET v_BDateTimeValue = SWV_BDateTimeValue_Str;
      end if;

-- @BaseTypeId
      SET v_Index = LOCATE(v_Spliter,v_BBaseTypeId);
      IF v_Index = 0 then

         SET v_BaseTypeId = cast(v_BBaseTypeId as SIGNED INTEGER);
      ELSE
         SET v_BaseTypeId = cast(SUBSTRING(v_BBaseTypeId,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BBaseTypeId_Str = SUBSTRING(v_BBaseTypeId,v_Index+1,9999);
         SET v_BBaseTypeId = SWV_BBaseTypeId_Str;
      end if;

-- @ValueType
      SET v_Index = LOCATE(v_Spliter,v_BValueType);
      IF v_Index = 0 then

         SET v_ValueType = cast(v_BValueType as SIGNED INTEGER);
      ELSE
         SET v_ValueType = cast(SUBSTRING(v_BValueType,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BValueType_Str = SUBSTRING(v_BValueType,v_Index+1,9999);
         SET v_BValueType = SWV_BValueType_Str;
      end if;			

-- @SignalType
      SET v_Index = LOCATE(v_Spliter,v_BSignalType);
      IF v_Index = 0 then

         SET v_SignalType = cast(v_BSignalType as SIGNED INTEGER);
      ELSE
         SET v_SignalType = cast(SUBSTRING(v_BSignalType,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BSignalType_Str = SUBSTRING(v_BSignalType,v_Index+1,9999);
         SET v_BSignalType = SWV_BSignalType_Str;
      end if;

-- @EventSeverity
      SET v_Index = LOCATE(v_Spliter,v_BEventSeverity);
      IF v_Index = 0 then

         SET v_EventSeverity = cast(v_BEventSeverity as SIGNED INTEGER);
      ELSE
         SET v_EventSeverity = cast(SUBSTRING(v_BEventSeverity,1,v_Index -1) as SIGNED INTEGER);
         SET SWV_BEventSeverity_Str = SUBSTRING(v_BEventSeverity,v_Index+1,9999);
         SET v_BEventSeverity = SWV_BEventSeverity_Str;
      end if;
      SET v_Return = PBL_SaveRelatedHistorySignal(v_BusinessTypeId,v_ExpressionId,v_SerialId,v_BusinessState,v_StateTriggerTime,
      v_StationId,v_HostId,v_EquipmentId,v_SignalId,v_SampleTime,v_FloatValue,
      v_StringValue,v_DateTimeValue,v_BaseTypeId,v_ValueType,v_SignalType,
      v_EventSeverity);
      SET v_MinIndex = v_MinIndex+1;
   END WHILE;	

   IF @SWV_Error <> 0 then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;    

   SET SWP_Ret_Value = v_Return;
END;



-- 2、删除业务类型存储过程
DROP PROCEDURE IF EXISTS PCT_DeleteBusinessType;


CREATE PROCEDURE PCT_DeleteBusinessType(v_BusinessTypeId 		 INT)
BEGIN
   DELETE FROM 	TBL_BizExpEquSignalsMap WHERE BusinessTypeId = v_BusinessTypeId;
   DELETE FROM 	TBL_BizExpStationsMap WHERE BusinessTypeId = v_BusinessTypeId;
   DELETE FROM 	TBL_BizExpSignalsCfg WHERE BusinessTypeId = v_BusinessTypeId;
   DELETE FROM 	TBL_BusinessExpressionCfg WHERE BusinessTypeId = v_BusinessTypeId; 
   DELETE FROM 	TBL_BusinessType WHERE BusinessTypeId = v_BusinessTypeId;
END;


-- SQLWAYS_EVAL# 存储过程
DROP PROCEDURE IF EXISTS PCT_DeleteBizExpression;


CREATE PROCEDURE PCT_DeleteBizExpression(v_ExpressionId 		 INT)
BEGIN
   DELETE FROM 	TBL_BizExpEquSignalsMap WHERE ExpressionId = v_ExpressionId;
   DELETE FROM 	TBL_BizExpStationsMap WHERE ExpressionId = v_ExpressionId;
   DELETE FROM 	TBL_BizExpSignalsCfg WHERE ExpressionId = v_ExpressionId;
   DELETE FROM 	TBL_BusinessExpressionCfg WHERE ExpressionId = v_ExpressionId;
END; 


-- SQLWAYS_EVAL# 板关联信号配置存储过程
DROP PROCEDURE IF EXISTS PCT_DeleteBizExpSignals;


CREATE PROCEDURE PCT_DeleteBizExpSignals(v_AssociationId 		 INT)
BEGIN
   DELETE FROM 	TBL_BizExpSignalsCfg WHERE AssociationId = v_AssociationId;
END;


-- SQLWAYS_EVAL# 板局站实例配置存储过程
DROP PROCEDURE IF EXISTS PCT_DeleteBizExpressionStnsMap;


CREATE PROCEDURE PCT_DeleteBizExpressionStnsMap(v_ExpressionId	INT,
v_StationId 	INT,
v_MonitorUnitId 	INT,
v_SerialId	INT)
BEGIN
   if (v_StationId = -999) then

      DELETE FROM 	TBL_BizExpEquSignalsMap  WHERE ExpressionId = v_ExpressionId;
      DELETE FROM 	TBL_BizExpStationsMap WHERE ExpressionId = v_ExpressionId;
   ELSE 
      if (v_SerialId = -999) then

         DELETE FROM 	TBL_BizExpEquSignalsMap  WHERE ExpressionId = v_ExpressionId and StationId = v_StationId and MonitorUnitId = v_MonitorUnitId;
         DELETE FROM 	TBL_BizExpStationsMap WHERE ExpressionId = v_ExpressionId  and StationId = v_StationId and MonitorUnitId = v_MonitorUnitId;
      else
         DELETE FROM 	TBL_BizExpEquSignalsMap  WHERE ExpressionId = v_ExpressionId and StationId = v_StationId and SerialId = v_SerialId and MonitorUnitId = v_MonitorUnitId;
         DELETE FROM 	TBL_BizExpStationsMap WHERE ExpressionId = v_ExpressionId  and StationId = v_StationId and SerialId = v_SerialId and MonitorUnitId = v_MonitorUnitId;
      end if;
   end if;
END;


-- SQLWAYS_EVAL# 板局站实例配置存储过程
DROP PROCEDURE IF EXISTS PCT_DeleteBizExpSignalsStnsMap;


CREATE PROCEDURE PCT_DeleteBizExpSignalsStnsMap(v_BusinessTypeId	INT,
v_ExpressionId	INT,
v_StationId INT,
v_MonitorUnitId INT,
v_AssociationId	INT,
v_EquipmentId INT,
v_SignalId INT,
v_SerialId INT)
BEGIN
   DELETE FROM TBL_BizExpEquSignalsMap WHERE BusinessTypeId = v_BusinessTypeId AND AssociationId = v_AssociationId AND ExpressionId = v_ExpressionId AND StationId = v_StationId AND MonitorUnitId = v_MonitorUnitId AND EquipmentId = v_EquipmentId AND SignalId = v_SignalId AND SerialId = v_SerialId;
END; 


-- 7、动态创建中间表存储过程
--  返回结果
-- -1 不可知错误
--  0 成功
--  1 表中有记录
-- 	2 与已有表重名
DROP PROCEDURE IF EXISTS PCT_AddMidTable;

CREATE PROCEDURE PCT_AddMidTable(v_MidTableName 	  NATIONAL VARCHAR(255),INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
   DECLARE v_SQL VARCHAR(255);
   DECLARE v_cou INT;
   DECLARE v_count INT;-- SQLWAYS_EVAL# (255)
   SET v_count = 0;
-- SQLWAYS_EVAL# from sysobjects where (type = 'U' OR type='S') AND name=@MidTableName
   select   COUNT(name) INTO v_count from sysobjects where name = v_MidTableName;
   if (v_count > 0) then

      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   end if;
-- SQLWAYS_EVAL# d=@MidTableName
-- SQLWAYS_EVAL# 记录存在，则返回1，不重新创建表
-- SQLWAYS_EVAL# IS NOT NULL
-- BEGIN 
-- SQLWAYS_EVAL# #tmp(cnt int)
-- SQLWAYS_EVAL# into #tmp(cnt) select count(*) from '+ @MidTableName
-- 	EXEC (@SQL)
-- SQLWAYS_EVAL# FROM #tmp
-- 	IF @cou>0 
-- 		BEGIN 
-- SQLWAYS_EVAL# #tmp
-- 		RETURN 1
-- 		END
-- 	ELSE	
-- SQLWAYS_EVAL# TABLE '+ @MidTableName)
-- SQLWAYS_EVAL# mp
-- END
-- SQLWAYS_EVAL# 表结构和索引
   SET v_SQL = CONCAT('CREATE TABLE ',v_MidTableName,' AS SELECT * FROM TBL_MiddleTbl WHERE 1 = 2;');
   SET @SWV_Stmt = v_SQL;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;
   SET v_SQL = CONCAT('CREATE UNIQUE INDEX MidTableName_IDX1
   ON ',v_MidTableName,' 
   (SampleTime,
   ExpressionId,
   StationId,
   SerialId,
   EquipmentId,
   SignalId)');
   SET @SWV_Stmt = v_SQL;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;	
   SET v_SQL = CONCAT('CREATE INDEX MidTableName_IDX2
   ON ',v_MidTableName,'  
   (SampleTime,
   BusinessTypeId,
   ExpressionId,
   StationId,
   SerialId,
   EquipmentId,
   SignalId,
   FloatValue)');
   SET @SWV_Stmt = v_SQL;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;
   SET SWP_Ret_Value = 0;
END;


-- 加载无主动态配置设备模板
DROP PROCEDURE IF EXISTS PCT_ManageNullDynamicTemplate;


CREATE PROCEDURE PCT_ManageNullDynamicTemplate()
BEGIN
   CREATE TEMPORARY TABLE tt_temp AS SELECT DISTINCT template.EquipmentTemplateId, s.StationCategory 
      FROM TBL_EquipmentTemplate template
      INNER JOIN TBL_Equipment e ON e.EquipmentTemplateId = template.EquipmentTemplateId
      INNER JOIN TBL_Station s ON s.StationId = e.StationId;

   CREATE TEMPORARY TABLE tt_templateRefrence AS SELECT EquipmentTemplateId, count(*) AS RefCount 
      FROM TBL_Equipment GROUP BY EquipmentTemplateId;

   SELECT DISTINCT template.EquipmentTemplateId, parent.EquipmentTemplateId AS ParentId,
(CASE parent.EquipmentTemplateName WHEN NULL THEN '根模板' ELSE parent.EquipmentTemplateName END) AS ParentName,
template.EquipmentTemplateName, template.EquipmentCategory,
e.StationCategory, template.Memo, ref.RefCount, template.ProtocolCode,
(CASE WHEN template.EquipmentTemplateName LIKE '%艾默生%' THEN '艾默生'
   WHEN template.EquipmentTemplateName LIKE '%雅达%' THEN '雅达'
   WHEN template.EquipmentTemplateName LIKE '%中兴%' THEN '中兴'
   WHEN template.EquipmentTemplateName LIKE '%中恒%' THEN '中恒'
   WHEN template.EquipmentTemplateName LIKE '%中达%' THEN '中达'
   WHEN template.EquipmentTemplateName LIKE '%晋天%' THEN '晋天'
   ELSE(CASE template.Vendor WHEN NULL THEN '未设置'
      WHEN '' THEN '未设置' ELSE template.Vendor END) END) AS Vendor
   FROM TBL_EquipmentTemplate template
   LEFT JOIN tt_temp e ON e.EquipmentTemplateId = template.EquipmentTemplateId
   LEFT JOIN TBL_EquipmentTemplate parent ON template.ParentTemplateId = parent.EquipmentTemplateId
   LEFT JOIN tt_templateRefrence ref ON ref.EquipmentTemplateId = template.EquipmentTemplateId
   WHERE template.Memo = '动态配置' AND template.EquipmentTemplateId NOT IN(SELECT DISTINCT EquipmentTemplateId FROM TBL_Equipment);

   DROP TEMPORARY TABLE IF EXISTS tt_temp;
   DROP TEMPORARY TABLE IF EXISTS tt_templateRefrence;
END;


-- 新增数据库字典项
/* liangyj 重复
DROP PROCEDURE IF EXISTS PIL_InitDictionaryEntryItem;

CREATE PROCEDURE PIL_InitDictionaryEntryItem(v_EntryId      INT                   ,
v_ItemId       INT                   ,
v_ParentEntryId INT                  ,
v_ParentItemId  INT                  ,
v_IsSystem     INT                   ,
v_ItemValue    VARCHAR(255)          ,
v_Description  VARCHAR(255)          ,
v_ItemAlias VARCHAR(255))
BEGIN
   CALL PIL_SaveDictionaryItemByEntry(v_EntryId,v_ItemValue,v_ItemAlias,v_Description,NULL,NULL,NULL,NULL,NULL,
   v_ParentEntryId,v_ParentItemId,v_ItemId,v_IsSystem);
END;
*/

-- 删除局站分组类型及关联数据
DROP PROCEDURE IF EXISTS PIL_DelStationStructureGroupEntryItem;


CREATE PROCEDURE PIL_DelStationStructureGroupEntryItem(v_ItemId 		 INT)
BEGIN
   DELETE FROM TBL_StationStructureMap WHERE StructureId IN(SELECT StructureId FROM TBL_StationStructure WHERE StructureGroupId = v_ItemId);

   DELETE FROM TBL_StationStructure WHERE StructureGroupId = v_ItemId; 

   DELETE FROM TBL_DataItem WHERE EntryId = 1 AND ItemId = v_ItemId;
END;





-- 创建告警统计
DROP PROCEDURE IF EXISTS PAM_AlarmStatistics;


CREATE PROCEDURE PAM_AlarmStatistics(v_BaseTypeId   VARCHAR(2000),
v_ReturnCount        NATIONAL VARCHAR(20))

BEGIN
   DECLARE v_SQL VARCHAR(2500);
   DECLARE v_Index INT;
   IF v_BaseTypeId is null then
      set v_BaseTypeId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SET v_Index = LOCATE(',',v_BaseTypeId);

   Set v_SQL = 'SELECT stru.StructureName,count(events.StructureId) as TotalCount,stru.StructureId FROM TBL_StationStructure AS stru
   LEFT JOIN TBL_ActiveEvent AS events ON events.StructureId = stru.StructureId';

   IF (v_Index > 0) then

      SET v_SQL = CONCAT(replace(v_SQL,';',' '),'SQLWAYS_EVAL# IN (',v_BaseTypeId,')');
   ELSE 
      IF (v_BaseTypeId <> '-1') then

         SET v_SQL = CONCAT(replace(v_SQL,';',' '),'SQLWAYS_EVAL# seTypeId=',v_BaseTypeId);
      end if;
   end if;


   SET v_SQL = CONCAT(replace(v_SQL,';',' '),'SQLWAYS_EVAL# AND events.EndTime IS NULL 
GROUP BY stru.StructureName,events.StructureId,stru.StructureId');


   SET @SWV_Stmt = v_SQL;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;
END;









-- 创建监控可用率
DROP PROCEDURE IF EXISTS PAM_MonitoringStationsRate;


CREATE PROCEDURE PAM_MonitoringStationsRate(v_BaseTypeId   VARCHAR(2000),
v_ReturnCount        NATIONAL VARCHAR(20))
BEGIN


-- 统计区域下断站数	
   IF v_BaseTypeId is null then
      set v_BaseTypeId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   CREATE TEMPORARY TABLE tt_tmpAlarmCount AS SELECT stationStru.StructureName,count(stationFilter.StructureId) as TotalCount,stationStru.StructureId

      FROM TBL_StationStructure AS stationStru
      LEFT JOIN(SELECT map.StructureId,map.StationId,station.StationCategory
         FROM  TBL_StationStructureMap AS map
         LEFT JOIN TBL_StationStructure AS stru ON map.StructureId = stru.StructureId
         LEFT JOIN TBL_Station AS station ON station.StationId = map.StationId
         WHERE  stru.StructureGroupId = 1 AND station.ConnectState != 1) AS stationFilter ON stationStru.StructureId = stationFilter.StructureId
      WHERE stationStru.StructureGroupId = 1
      GROUP BY stationStru.StructureName,stationFilter.StructureId,stationStru.StructureId;

-- 查询所有区域下局站数
   CREATE TEMPORARY TABLE tt_tmpDistCount AS SELECT stru.StructureName,stru.StructureId,count(struMap.StructureId) AS TotalCount

      FROM TBL_StationStructure AS stru
      LEFT JOIN TBL_StationStructureMap AS struMap ON struMap.StructureId = stru.StructureId
      WHERE stru.StructureGroupId = 1
      GROUP BY stru.StructureName,stru.StructureId;


   SELECT type.StructureName,
round((total.TotalCount -type.TotalCount)/cast(total.TotalCount as DECIMAL(15,15))*100,2) AS TotalCount,
type.StructureId
   FROM tt_tmpDistCount AS total
   LEFT JOIN tt_tmpAlarmCount AS type ON type.StructureId = total.StructureId
   WHERE total.TotalCount <> 0;

   DROP TEMPORARY TABLE IF EXISTS tt_tmpDistCount; 
   DROP TEMPORARY TABLE IF EXISTS tt_tmpAlarmCount;
END;



-- 创建局站统计
DROP PROCEDURE IF EXISTS PAM_StatisticsStation;


CREATE PROCEDURE PAM_StatisticsStation(v_ReturnCount        NATIONAL VARCHAR(20))
BEGIN
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   CREATE TEMPORARY TABLE tt_kpiSationTemp AS SELECT map.StructureId,map.StationId,station.StationCategory,stru.ParentStructureId

      FROM  TBL_StationStructureMap AS map
      LEFT JOIN TBL_StationStructure AS stru ON map.StructureId = stru.StructureId
      LEFT JOIN TBL_Station AS station ON station.StationId = map.StationId
      LEFT JOIN TBL_DataItem AS type ON station.StationCategory = type.ItemId
      WHERE type.EntryId = 71 AND stru.StructureGroupId = 1;



   CREATE TEMPORARY TABLE tt_tempArea AS SELECT StructureId,
1 as stationCount,
0 AS StationCategory,StructureName AS Name, 0 AS type

      FROM TBL_StationStructure
      WHERE ParentStructureId =(SELECT  StructureId FROM TBL_StationStructure WHERE StructureGroupId = 0 LIMIT 1)
      AND StructureGroupId = 1
      ORDER BY type;


   CREATE TEMPORARY TABLE tt_tempStatic AS SELECT StructureId,sum(StationCategory) AS stationCount,
StationCategory,ParentStructureId,'' AS Name,2 AS type

      FROM tt_kpiSationTemp
      GROUP BY  StructureId,StationCategory,ParentStructureId;

-- 分类（基站、局站等）统计局站
   SELECT A.StructureId,sum(B.stationCount) AS stationCount,B.StationCategory,'' AS Name, 2 AS type FROM tt_tempArea A
   LEFT JOIN tt_tempStatic B ON A.StructureId = B.StructureId OR A.StructureId = B.ParentStructureId
   GROUP BY A.StructureId,B.StationCategory
   UNION

-- 局站种类
   SELECT -1 AS StructureId,
(SELECT count(1) FROM TBL_Station AS station WHERE station.StationCategory = type.ItemId) stationCount
,ItemId AS StationCategory,ItemValue AS Name,1 AS type
   FROM TBL_DataItem AS type WHERE EntryId = 71 AND ItemId != 3
   UNION
-- 行政区划
   SELECT StructureId,
1 as stationCount,
0 AS StationCategory,StructureName AS Name, 0 AS type FROM TBL_StationStructure
   WHERE ParentStructureId =(SELECT  StructureId FROM TBL_StationStructure WHERE StructureGroupId = 0 LIMIT 1) AND StructureGroupId = 1
   ORDER BY /*original: type*/ 5;


   DROP TEMPORARY TABLE IF EXISTS tt_kpiSationTemp;
   DROP TEMPORARY TABLE IF EXISTS tt_tempStatic;
   DROP TEMPORARY TABLE IF EXISTS tt_tempArea;
END;




-- 创建告警等级统计
DROP PROCEDURE IF EXISTS PAM_AlarmLevelStatistics;


CREATE PROCEDURE PAM_AlarmLevelStatistics(v_ReturnCount        NATIONAL VARCHAR(20))
BEGIN
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SELECT levelType.ItemValue,levelType.ItemId,count(event.EventSeverityId) AS AlarmCount FROM TBL_DataItem AS levelType
   LEFT JOIN TBL_ActiveEvent AS event ON levelType.ItemId = event.EventSeverityId AND event.EndTime IS NULL
   WHERE levelType.EntryId = 23
   GROUP BY levelType.ItemValue,levelType.ItemId,event.EventSeverityId
   UNION ALL
   SELECT '所有告警' AS ItemValue,-1 as EventSeverityId,COUNT(*) AS AlarmCount FROM TBL_ActiveEvent WHERE EndTime IS NULL
   ORDER BY /*SQLWAYS_EVAL# lType.ItemId*/ 2;
END;
 


-- 创建停电区域分布
DROP PROCEDURE IF EXISTS PAM_PowerOffDistribution;


CREATE PROCEDURE PAM_PowerOffDistribution(v_ReturnCount        NATIONAL VARCHAR(20))

BEGIN
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SELECT stru.StructureName,count(events.StructureId) as TotalCount,stru.StructureId
   FROM TBL_StationStructure AS stru
   LEFT JOIN(SELECT DISTINCT StructureId, StationId FROM TBL_ActiveEvent
      WHERE EventCategoryId = 10 AND EndTime IS NULL) AS events ON events.StructureId = stru.StructureId
   WHERE stru.StructureGroupId = 1
   GROUP BY stru.StructureName,events.StructureId,stru.StructureId;
END;




-- 创建温度高站点数区域统计
DROP PROCEDURE IF EXISTS PAM_HighTemperatureDistrict;


CREATE PROCEDURE PAM_HighTemperatureDistrict(v_ReturnCount        NATIONAL VARCHAR(20))

BEGIN
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SELECT stru.StructureName,count(events.StructureId) as TotalCount,stru.StructureId
   FROM TBL_StationStructure AS stru
   LEFT JOIN(SELECT StructureId, StationId, max(BaseTypeId) AS BaseTypeId FROM TBL_ActiveEvent
      WHERE EndTime IS NULL  AND (cast(BaseTypeId/1000 as SIGNED INTEGER) IN(1004001,1004307)  OR BaseTypeId IN(1006001001,1006307001))
      GROUP BY StructureId,StationId) AS events ON events.StructureId = stru.StructureId
   WHERE stru.StructureGroupId = 1
   GROUP BY stru.StructureName,events.StructureId,stru.StructureId;
END;




-- SQLWAYS_EVAL# 断站区域分布
DROP PROCEDURE IF EXISTS PAM_DisconnectedStation;


CREATE PROCEDURE PAM_DisconnectedStation(v_ReturnCount        NATIONAL VARCHAR(20))

BEGIN
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SELECT stationStru.StructureName,count(stationFilter.StructureId) as TotalCount,stationStru.StructureId
   FROM TBL_StationStructure AS stationStru
   LEFT JOIN(SELECT map.StructureId,map.StationId,station.StationCategory
      FROM  TBL_StationStructureMap AS map
      LEFT JOIN TBL_StationStructure AS stru ON map.StructureId = stru.StructureId
      LEFT JOIN TBL_Station AS station ON station.StationId = map.StationId
      WHERE  stru.StructureGroupId = 1 AND station.ConnectState != 1) AS stationFilter ON stationStru.StructureId = stationFilter.StructureId
   WHERE stationStru.StructureGroupId = 1
   GROUP BY stationStru.StructureName,stationFilter.StructureId,stationStru.StructureId;
END;





DROP PROCEDURE IF EXISTS PAM_GetStationEventKPI;

CREATE PROCEDURE PAM_GetStationEventKPI(v_UserId INT ,
v_Filter NATIONAL VARCHAR(2000) ,  -- SQLWAYS_EVAL# IS NULL  AND event.BaseTypeId IN (1101170001,1101171001,1101172001)'
v_ReturnCount        NATIONAL VARCHAR(20))
BEGIN

   DECLARE v_RoleId INT;            
   DECLARE v_SQL NATIONAL VARCHAR(4000);



   IF v_UserId is null then
      set v_UserId = -1;
   END IF;
   IF v_Filter is null then
      set v_Filter = '1=0';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   IF NOT EXISTS(SELECT 1 FROM TBL_Account WHERE UserId = v_UserId) then

-- 用户不存在，返回空结果集
      SET v_SQL = 'SELECT DISTINCT event.StructureId, station.StationId,station.StationName,station.Latitude,
      station.Longitude
      FROM TBL_Station station
      LEFT JOIN TBL_ActiveEvent event ON station.StationId = event.StationId AND station.CenterId = event.CenterId
      WHERE  1 = 0';
   ELSE
      select   b.RoleId INTO v_RoleId FROM TBL_UserRoleMap a
      INNER JOIN TBL_UserRoleRight b ON a.RoleId = b.RoleId WHERE a.UserId = v_UserId AND b.OperationType = 2 AND b.OperationId = -1;
      IF v_RoleId IS NULL then

-- 非所有片区权限
         SET v_SQL = CONCAT('SELECT DISTINCT event.StructureId, station.StationId,station.StationName,station.Latitude,
         station.Longitude
         FROM TBL_Station station
         INNER JOIN TBL_AreaMap areamap ON areamap.StationId = station.StationId
         INNER JOIN TBL_UserRoleMap urm ON urm.UserId = ',CAST(v_UserId AS CHAR(20)),' INNER JOIN TBL_UserRoleRight urr ON urr.OperationId = areamap.AreaId AND urr.OperationType = 2 AND urr.RoleId = urm.RoleId
         LEFT JOIN TBL_ActiveEvent event ON station.StationId = event.StationId AND station.CenterId = event.CenterId
         WHERE ',v_Filter);
      ELSE
-- 所有片区权限
         SET v_SQL = CONCAT('SELECT DISTINCT event.StructureId, station.StationId,station.StationName,station.Latitude,
         station.Longitude
         FROM TBL_Station station
         LEFT JOIN TBL_ActiveEvent event ON station.StationId = event.StationId AND station.CenterId = event.CenterId
         WHERE ',v_Filter);
      end if;
   end if; 

   SET @SWV_Stmt = v_SQL;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;

END;





DROP PROCEDURE IF EXISTS PAM_GetStationStateKPI;

CREATE PROCEDURE PAM_GetStationStateKPI(v_UserId INT ,
v_Filter NATIONAL VARCHAR(2000) ,  -- SQLWAYS_EVAL# AND station.ConnectState!=1'
v_ReturnCount        NATIONAL VARCHAR(20))
BEGIN

   DECLARE v_RoleId INT;            
   DECLARE v_SQL NATIONAL VARCHAR(4000);



   IF v_UserId is null then
      set v_UserId = -1;
   END IF;
   IF v_Filter is null then
      set v_Filter = '1=0';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   IF NOT EXISTS(SELECT 1 FROM TBL_Account WHERE UserId = v_UserId) then

-- 用户不存在，返回空结果集
      SET v_SQL = 'SELECT DISTINCT map.StructureId,map.StationId,station.StationName,station.Latitude,station.Longitude
      FROM  TBL_StationStructureMap AS map
      LEFT JOIN TBL_StationStructure AS stru ON map.StructureId = stru.StructureId
      LEFT JOIN TBL_Station AS station ON station.StationId = map.StationId
      WHERE  1 = 0';
   ELSE
      select   b.RoleId INTO v_RoleId FROM TBL_UserRoleMap a
      INNER JOIN TBL_UserRoleRight b ON a.RoleId = b.RoleId WHERE a.UserId = v_UserId AND b.OperationType = 2 AND b.OperationId = -1;
      IF v_RoleId IS NULL then

-- 非所有片区权限
         SET v_SQL = CONCAT('SELECT DISTINCT map.StructureId,map.StationId,station.StationName,station.Latitude,station.Longitude
         FROM  TBL_StationStructureMap AS map
         INNER JOIN TBL_AreaMap areamap ON areamap.StationId = map.StationId
         INNER JOIN TBL_UserRoleMap urm ON urm.UserId = ',CAST(v_UserId AS CHAR(20)),' INNER JOIN TBL_UserRoleRight urr ON urr.OperationId = areamap.AreaId AND urr.OperationType = 2 AND urr.RoleId = urm.RoleId LEFT JOIN TBL_StationStructure AS stru ON map.StructureId = stru.StructureId
         LEFT JOIN TBL_Station AS station ON station.StationId = map.StationId
         WHERE ',v_Filter);
      ELSE
-- 所有片区权限
         SET v_SQL = CONCAT('SELECT DISTINCT map.StructureId,map.StationId,station.StationName,station.Latitude,station.Longitude
         FROM  TBL_StationStructureMap AS map
         LEFT JOIN TBL_StationStructure AS stru ON map.StructureId = stru.StructureId
         LEFT JOIN TBL_Station AS station ON station.StationId = map.StationId
         WHERE ',v_Filter);
      end if;
   end if; 

   SET @SWV_Stmt = v_SQL;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;

END;





-- 组态中心区域KPI

-- 区域活动告警

DROP PROCEDURE IF EXISTS PAM_StationGAlarmStatistic;
CREATE PROCEDURE PAM_StationGAlarmStatistic(v_stationGroupId           NATIONAL VARCHAR(20)  ,
v_ReturnCount        NATIONAL VARCHAR(20))
BEGIN

   DECLARE v_AllAlarm INT;
   DECLARE v_activeAlarm INT;

   IF v_stationGroupId is null then
      set v_stationGroupId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   CREATE TEMPORARY TABLE tt_TempType AS SELECT ItemValue,ItemId,0 AS AlarmCount  FROM TBL_DataItem WHERE EntryId = 23;

   UPDATE tt_tempType SET AlarmCount =(SELECT count(*) FROM TBL_ActiveEvent WHERE ItemId = EventSeverityId AND EndTime IS NULL AND StructureId = v_stationGroupId);

   select   COUNT(*) INTO v_activeAlarm FROM TBL_ActiveEvent WHERE EndTime IS NULL AND StructureId = v_stationGroupId;
   INSERT INTO tt_tempType VALUES('所有告警',-1,v_activeAlarm);


   SELECT * FROM tt_tempType;

   DROP TEMPORARY TABLE IF EXISTS tt_tempType;

END;



DROP PROCEDURE IF EXISTS PAM_StationGAlarmStatisticByMonth;

CREATE PROCEDURE PAM_StationGAlarmStatisticByMonth(v_stationGroupId           NATIONAL VARCHAR(20)   ,
v_ReturnCount        NATIONAL VARCHAR(20))
BEGIN

   DECLARE v_i INT;
   DECLARE v_currentMonth INT;
   DECLARE v_countAlarm INT;
   IF v_stationGroupId is null then
      set v_stationGroupId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   CREATE TEMPORARY TABLE tt_tempYearEvents AS SELECT StartTime,month(StartTime) AS eventMonth  FROM TBL_HistoryEvent
      WHERE Year(StartTime) = Year(CURRENT_TIMESTAMP) 
      ORDER BY StartTime; 

   CREATE TEMPORARY TABLE tt_tempStaticEvent
   ( 
      Month INT,
      `Count` INT
   );

   SET v_currentMonth = month(CURRENT_TIMESTAMP);

   SET v_i = 1;
   WHILE v_i <= v_currentMonth DO
      select   count(*) INTO v_countAlarm FROM tt_tempYearEvents WHERE eventMonth = v_i;
      INSERT INTO tt_tempStaticEvent values(v_i,v_countAlarm);

      SET v_i = v_i+1;
   END WHILE;

   SELECT * FROM tt_tempStaticEvent;

   DROP TEMPORARY TABLE IF EXISTS tt_tempStaticEvent;
   DROP TEMPORARY TABLE IF EXISTS tt_tempYearEvents;

END;



DROP PROCEDURE IF EXISTS PAM_StationGAlarmStatisticByDay;

CREATE PROCEDURE PAM_StationGAlarmStatisticByDay(v_stationGroupId           NATIONAL VARCHAR(20)  ,
v_ReturnCount        NATIONAL VARCHAR(20))
BEGIN

   DECLARE v_i INT;
   DECLARE v_currentDay VARCHAR(50);
   DECLARE v_countAlarm INT;
   IF v_stationGroupId is null then
      set v_stationGroupId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   CREATE TEMPORARY TABLE tt_tempMonthEvents AS SELECT StartTime,CONCAT(CAST(month(StartTime) AS CHAR(30)),'月',CAST(day(StartTime) AS CHAR(30)),
      '日') AS eventDays  FROM TBL_HistoryEvent
      WHERE StartTime > TIMESTAMPADD(DAY,-30,CURRENT_TIMESTAMP) 
      ORDER BY StartTime; 

   CREATE TEMPORARY TABLE tt_tempStaticEvent
   ( 
      days VARCHAR(50),
      `Count` INT
   );

   set v_i = 1;
   while v_i <= 30 DO
      SET v_currentDay =(CONCAT(CAST(month(TIMESTAMPADD(DAY,-30+v_i,CURRENT_TIMESTAMP)) AS CHAR(30)),
      '月',CAST(day(TIMESTAMPADD(DAY,-30+v_i,CURRENT_TIMESTAMP)) AS CHAR(30)),
      '日'));
      select   count(*) INTO v_countAlarm FROM tt_tempMonthEvents WHERE eventDays = v_currentDay;
      insert into tt_tempStaticEvent(days,`Count`) values(v_currentDay,v_countAlarm);

      set v_i = v_i+1;
   END WHILE;

   SELECT * FROM tt_tempStaticEvent;

   DROP TEMPORARY TABLE IF EXISTS tt_tempMonthEvents;
   DROP TEMPORARY TABLE IF EXISTS tt_tempStaticEvent;

END;

-- 创建局站统计
DROP PROCEDURE IF EXISTS PAM_StatisticsStationSC;


CREATE PROCEDURE PAM_StatisticsStationSC(v_ReturnCount        NATIONAL VARCHAR(20))
BEGIN
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   CREATE TEMPORARY TABLE tt_kpiSationTemp AS SELECT map.StructureId,map.StationId,station.StationCategory

      FROM  TBL_StationStructureMap AS map
      LEFT JOIN TBL_StationStructure AS stru ON map.StructureId = stru.StructureId
      LEFT JOIN TBL_Station AS station ON station.StationId = map.StationId
      LEFT JOIN TBL_DataItem AS type ON station.StationCategory = type.ItemId
      WHERE type.EntryId = 71 AND stru.StructureGroupId = 1;

   SELECT(SELECT StructureId FROM TBL_StationStructure WHERE StructureGroupId = 0) StructureId,
count(*) AS stationCount,StationCategory,'' AS Name,2 AS type FROM tt_kpiSationTemp
   GROUP BY StationCategory
   UNION

-- 局站种类
   SELECT -1 AS StructureId,
(SELECT count(*) FROM TBL_Station AS station WHERE station.StationCategory = type.ItemId) stationCount
,ItemId AS StationCategory,ItemValue AS Name,1 AS type
   FROM TBL_DataItem AS type WHERE EntryId = 71 AND ItemId != 3
   UNION
-- 行政区划
   SELECT StructureId,
1 as stationCount,
0 AS StationCategory,StructureName AS Name, 0 AS type FROM TBL_StationStructure AS stru WHERE StructureGroupId = 0
   ORDER BY /*SQLWAYS_EVAL# ionCategory*/ 3;
   DROP TEMPORARY TABLE IF EXISTS tt_kpiSationTemp;
END;




-- 创建告警等级统计
DROP PROCEDURE IF EXISTS PAM_AlarmLevelStatisticsSC;


CREATE PROCEDURE PAM_AlarmLevelStatisticsSC(v_ReturnCount        NATIONAL VARCHAR(20))
BEGIN
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SELECT levelType.ItemValue,levelType.ItemId,count(event.EventSeverityId) AS AlarmCount FROM TBL_DataItem AS levelType
   LEFT JOIN TBL_ActiveEvent AS event ON levelType.ItemId = event.EventSeverityId AND event.EndTime IS NULL
   WHERE levelType.EntryId = 23
   GROUP BY levelType.ItemValue,levelType.ItemId,event.EventSeverityId
   UNION ALL
   SELECT '所有告警' AS ItemValue,-1 as EventSeverityId,COUNT(*) AS AlarmCount FROM TBL_ActiveEvent WHERE EndTime IS NULL
   ORDER BY /*SQLWAYS_EVAL# lType.ItemId*/ 2;
END;
 


-- 创建告警统计
DROP PROCEDURE IF EXISTS PAM_AlarmStatisticsSC;


CREATE PROCEDURE PAM_AlarmStatisticsSC(v_BaseTypeId   VARCHAR(2000),
v_ReturnCount        NATIONAL VARCHAR(20))

BEGIN
   DECLARE v_SQL VARCHAR(2500);
   DECLARE v_Index INT;
   IF v_BaseTypeId is null then
      set v_BaseTypeId = '-1';
   END IF;
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SET v_Index = LOCATE(',',v_BaseTypeId);

   Set v_SQL = 'SELECT stru.StructureName,count(events.CenterId) as TotalCount,stru.StructureId FROM TBL_StationStructure AS stru
   LEFT JOIN TBL_ActiveEvent AS events ON events.CenterId = stru.StructureId';

   IF (v_Index > 0) then
      SET v_SQL = CONCAT(replace(v_SQL,';',' '),'SQLWAYS_EVAL# IN (',v_BaseTypeId,')');
   ELSE 
      IF (v_BaseTypeId <> '-1') then
         SET v_SQL = CONCAT(replace(v_SQL,';',' '),'SQLWAYS_EVAL# seTypeId=',v_BaseTypeId);
      end if;
   end if;


   IF(v_BaseTypeId <> '-1') then
      SET v_SQL = CONCAT(replace(v_SQL,';',' '),'SQLWAYS_EVAL# AND events.EndTime IS NULL AND  StructureType=2
GROUP BY stru.StructureName,events.CenterId,stru.StructureId');
   ELSE
      SET v_SQL = CONCAT(replace(v_SQL,';',' '),'SQLWAYS_EVAL# AND events.EndTime IS NULL 
GROUP BY stru.StructureName,events.CenterId,stru.StructureId');
   end if;


   SET @SWV_Stmt = v_SQL;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;
END;



-- 创建停电区域分布
DROP PROCEDURE IF EXISTS PAM_PowerOffDistributionSC;


CREATE PROCEDURE PAM_PowerOffDistributionSC(v_ReturnCount        NATIONAL VARCHAR(20))

BEGIN
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SELECT stru.StructureName,count(events.CenterId) as TotalCount,stru.StructureId
   FROM TBL_StationStructure AS stru
   LEFT JOIN(SELECT DISTINCT CenterId, StationId FROM TBL_ActiveEvent
      WHERE EventCategoryId = 10 AND EndTime IS NULL) AS events ON events.CenterId = stru.StructureId
   WHERE stru.StructureGroupId = 0 AND stru.StructureType = 2
   GROUP BY stru.StructureName,events.CenterId,stru.StructureId;
END;




-- 创建温度高站点数区域统计
DROP PROCEDURE IF EXISTS PAM_HighTemperatureDistrictSC;


CREATE PROCEDURE PAM_HighTemperatureDistrictSC(v_ReturnCount        NATIONAL VARCHAR(20))

BEGIN
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SELECT stru.StructureName,count(events.CenterId) as TotalCount,stru.StructureId
   FROM TBL_StationStructure AS stru
   LEFT JOIN(SELECT CenterId, StationId, max(BaseTypeId) AS BaseTypeId FROM TBL_ActiveEvent
      WHERE EndTime IS NULL  AND (cast(BaseTypeId/1000 as SIGNED INTEGER) IN(1004001,1004307)  OR BaseTypeId IN(1006001001,1006307001))
      GROUP BY CenterId,StationId) AS events ON events.CenterId = stru.StructureId
   WHERE stru.StructureGroupId = 0 AND stru.StructureType = 2
   GROUP BY stru.StructureName,events.CenterId,stru.StructureId;
END;



-- SQLWAYS_EVAL# 断站区域分布
DROP PROCEDURE IF EXISTS PAM_DisconnectedStationSC;


CREATE PROCEDURE PAM_DisconnectedStationSC(v_ReturnCount        NATIONAL VARCHAR(20))

BEGIN
   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SELECT StructureName,(SELECT count(*) FROM TBL_Station WHERE ConnectState != 1) AS TotalCount,StructureId
   FROM TBL_StationStructure WHERE StructureGroupId = 0;
END;




-- 创建监控可用率
DROP PROCEDURE IF EXISTS PAM_MonitoringStationsRateSC;



CREATE PROCEDURE PAM_MonitoringStationsRateSC(v_ReturnCount        NATIONAL VARCHAR(20))
BEGIN
   DECLARE v_stationCount FLOAT;
   DECLARE v_connectCount FLOAT;

   IF v_ReturnCount is null then
      set v_ReturnCount = '0';
   END IF;
   SET v_connectCount =(SELECT count(*) FROM TBL_Station WHERE ConnectState = 1);
   SET v_stationCount =(SELECT COUNT(*) FROM TBL_Station);
   SELECT StructureName,round((v_connectCount/v_stationCount)*100,2) AS TotalCount,StructureId FROM TBL_StationStructure WHERE StructureGroupId = 0;
END;

DROP PROCEDURE IF EXISTS PCT_LoadResourceManage;


CREATE PROCEDURE PCT_LoadResourceManage(v_IsLoadStation		INT,					-- 是否加载局站
v_IsLoadHouse 		INT,					-- 是否加载房间
v_IsLoadEquipment	INT,					-- 是否加载设备
v_IsLoadSignal		INT,INOUT SWP_Ret_Value INT)					-- 是否加载信号
   SWL_return:
BEGIN
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   SET @SWV_Error = 0;
   IF v_IsLoadStation = 1 then	-- 是否加载局站
 

-- SQLWAYS_EVAL# -局站信息表同步----------------

-- 更新修改过的数据  
      UPDATE TBL_ResourceStation resource,TBL_Station station
      SET resource.StationName = station.StationName
      WHERE resource.StationId = station.StationId AND (resource.StationName <> station.StationName);  

-- 插入新增的数据
      INSERT TBL_ResourceStation(StationId,StationName)
      SELECT station.StationId,station.StationName FROM TBL_Station station
      WHERE NOT EXISTS(SELECT StationId FROM TBL_ResourceStation WHERE StationId = station.StationId) AND StationId > 0;

-- 删除已经删除的数据
      DELETE resource
      FROM TBL_ResourceStation resource
      WHERE NOT EXISTS(SELECT * FROM TBL_Station where StationId = resource.StationId);
   end if; 

   IF v_IsLoadHouse = 1 then	-- 是否加载房间
 

-- SQLWAYS_EVAL# -房间信息表同步----------------

-- 更新修改过的数据  
      UPDATE TBL_ResourceHouse resource,TBL_House house
      LEFT JOIN TBL_Station station ON station.StationId = house.StationId
      SET resource.StationName = station.StationName,resource.HouseName = house.HouseName
      WHERE resource.StationId = house.StationId AND resource.HouseId = house.HouseId AND
(resource.StationName <> station.StationName OR resource.HouseName <> house.HouseName); 

-- 插入新增的数据
      INSERT TBL_ResourceHouse(StationId,StationName,HouseId,HouseName)
      SELECT house.StationId,station.StationName,house.HouseId,house.HouseName FROM TBL_House house
      LEFT JOIN TBL_Station station ON house.StationId = station.StationId
      WHERE NOT EXISTS(SELECT StationId, HouseId FROM TBL_ResourceHouse WHERE StationId = house.StationId AND HouseId = house.HouseId) AND station.StationId > 0;

-- 删除已经删除的数据
      DELETE resource
      FROM TBL_ResourceHouse resource
      WHERE NOT EXISTS(SELECT * FROM TBL_House where StationId = resource.StationId AND HouseId = resource.HouseId);
   end if;

   IF v_IsLoadEquipment = 1 then	-- 是否加载设备
 

-- SQLWAYS_EVAL# -设备信息表同步----------------

-- 更新修改过的数据  
      UPDATE TBL_ResourceEquipment resource,TBL_Equipment equipment
      LEFT JOIN TBL_Station station ON station.StationId = equipment.StationId
      SET resource.StationName = station.StationName,resource.EquipmentName = equipment.EquipmentName
      WHERE resource.StationId = equipment.StationId AND resource.EquipmentId = equipment.EquipmentId AND
(resource.StationName <> station.StationName OR resource.EquipmentName <> equipment.EquipmentName);  

-- 插入新增的数据
      INSERT TBL_ResourceEquipment(StationId,StationName,EquipmentId,EquipmentName)
      SELECT equipment.StationId,station.StationName,equipment.EquipmentId,equipment.EquipmentName FROM TBL_Equipment equipment
      LEFT JOIN TBL_Station station ON equipment.StationId = station.StationId
      WHERE NOT EXISTS(SELECT StationId, EquipmentId FROM TBL_ResourceEquipment WHERE StationId = equipment.StationId AND EquipmentId = equipment.EquipmentId) AND station.StationId > 0;

-- 删除已经删除的数据
      DELETE resource
      FROM TBL_ResourceEquipment resource
      WHERE NOT EXISTS(SELECT * FROM TBL_Equipment where StationId = resource.StationId AND EquipmentId = resource.EquipmentId);
   end if;

   SET @SWV_Error = 0;
   IF v_IsLoadSignal = 1 then	-- 是否加载信号
 

-- SQLWAYS_EVAL# -信号信息表同步----------------

-- 更新修改过的数据  
      UPDATE TBL_ResourceSignal resource,TBL_Signal signal
      LEFT JOIN TBL_EquipmentTemplate equipmentTemplate ON equipmentTemplate.EquipmentTemplateId = signal.EquipmentTemplateId
      SET resource.EquipmentTemplateName = equipmentTemplate.EquipmentTemplateName,resource.SignalName = signal.SignalName,resource.ChannelNo = signal.ChannelNo
      WHERE resource.EquipmentTemplateId = signal.EquipmentTemplateId AND resource.SignalId = signal.SignalId AND
(resource.EquipmentTemplateName <> equipmentTemplate.EquipmentTemplateName OR resource.SignalName <> signal.SignalName OR resource.ChannelNo <> signal.ChannelNo);  

-- 插入新增的数据
      INSERT TBL_ResourceSignal(EquipmentTemplateId,EquipmentTemplateName,SignalId,SignalName,ChannelNo)
      SELECT signal.EquipmentTemplateId,equipmentTemplate.EquipmentTemplateName,signal.SignalId,signal.SignalName,signal.ChannelNo FROM TBL_Signal signal
      LEFT JOIN TBL_EquipmentTemplate equipmentTemplate ON signal.EquipmentTemplateId = equipmentTemplate.EquipmentTemplateId
      WHERE NOT EXISTS(SELECT EquipmentTemplateId, SignalId FROM TBL_ResourceSignal WHERE EquipmentTemplateId = signal.EquipmentTemplateId AND SignalId = signal.SignalId);

-- 删除已经删除的数据
      DELETE resource
      FROM TBL_ResourceSignal resource
      WHERE NOT EXISTS(SELECT * FROM TBL_Signal where EquipmentTemplateId = resource.EquipmentTemplateId AND SignalId = resource.SignalId);
   end if;

   IF @SWV_Error <> 0 then

      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;

   SET SWP_Ret_Value = NULL;
END;


-- SQLWAYS_EVAL# 2000后空挡插入
DROP PROCEDURE IF EXISTS PBL_GenerateDDSDoorId;


CREATE PROCEDURE PBL_GenerateDDSDoorId(v_PostalCode      INT)
BEGIN
   DECLARE v_maxId INT;
   DECLARE v_cardNo INT;
   DECLARE v_i INT;
   DECLARE v_dCount INT;
   IF v_PostalCode is null then
      set v_PostalCode = 0;
   END IF;
   CREATE TEMPORARY TABLE tt_tempCard
   (
      cardNo INT,
      cardId INT
   );

   INSERT tt_tempCard
   SELECT(CardId%10000) AS cardNo,CardId  FROM
   TBL_Card WHERE CardId >(v_PostalCode*1000000+400000) AND (CardId < v_PostalCode*1000000+500000) ORDER BY CardId;

   select   max(cardNo) INTO v_maxId FROM tt_tempCard;

   -- NOT SUPPORTED PRINT @maxId
IF(v_maxId >= 2000 OR v_maxId IS NULL) then
      BEGIN

         SET v_i = 1;
         SET v_cardNo = 1;
         SWL_Label8:
         WHILE v_i < 2000 DO
            select   count(*) INTO v_dCount FROM tt_tempCard WHERE cardNo = v_i;
            IF(v_dCount = 0) then

               SET v_cardNo = v_i;
               LEAVE SWL_Label8;
            end if;
            SET v_i = v_i+1;
         END WHILE;
      END;
   ELSE
      SET v_cardNo = v_maxId+1;
   end if;


   DROP TEMPORARY TABLE IF EXISTS tt_tempCard;
   SELECT v_PostalCode*1000000+400000+v_cardNo   GlobalIdentity;
END;




-- 根据卡号获取持卡人及电话
DROP PROCEDURE IF EXISTS PAM_GetDoorClerkName;


CREATE PROCEDURE PAM_GetDoorClerkName(v_EquipmentId 	INT		    ,
v_CardCode		 VARCHAR(255))
BEGIN

   DECLARE v_DoorType INT;
   DECLARE v_DoorId INT;
   DECLARE v_cardNo INT;
   DECLARE v_ClerkName VARCHAR(255);

   select   DoorControlId, DoorId INTO v_DoorType,v_DoorId FROM TBL_Door WHERE EquipmentId = v_EquipmentId;

   IF(v_DoorType = 4) then

      SET v_cardNo = HexToINT(RIGHT(v_CardCode,8));
      IF(v_cardNo > 3000) then

         SET v_CardCode = CAST(v_cardNo AS CHAR(10));
 
-- SQLWAYS_EVAL# @CardCode
         select   CONCAT(EmployeeName,':',Mobile) INTO v_ClerkName from TBL_Card a
         inner join TBL_Employee b on a.UserId = b.EmployeeId WHERE a.CardCode = RIGHT(v_CardCode,8);
      ELSE
         select   CONCAT(EmployeeName,':',Mobile), a.CardCode INTO v_ClerkName,v_CardCode from TBL_Card a
         inner join TBL_Employee b on a.UserId = b.EmployeeId
         LEFT JOIN TBL_DDSCardNo c ON a.CardId = c.CardId WHERE c.DoorId = v_DoorId AND c.CardNo = v_cardNo;
      end if;
   ELSE
      select   CONCAT(EmployeeName,':',Mobile) INTO v_ClerkName from TBL_Card a
      inner join TBL_Employee b on a.UserId = b.EmployeeId where a.CardCode = v_CardCode;
   end if; 

   IF (v_ClerkName IS NULL) then

      SELECT v_CardCode;
   ELSE
      SELECT CONCAT(v_CardCode,'(',v_ClerkName,')');
   end if;

END; 





-- 查询获取ControlId
DROP PROCEDURE IF EXISTS PCT_SelectDoorControl;

CREATE PROCEDURE PCT_SelectDoorControl(v_StationName	NATIONAL VARCHAR(255),
v_StartTime		DATETIME,
v_EndTime		DATETIME,
v_ControlResultType	INT,
v_ControlCategory		INT,INOUT SWP_Ret_Value INT)
BEGIN
   SELECT * FROM(SELECT c.StationId, c.StationName, c.EquipmentId, c.EquipmentName, c.ControlId, c.ControlName,
c.SerialNo, c.CmdToken, c.StartTime, c.EndTime, c.ConfirmTime, c.ConfirmerId, c.ControlPhase,
c.ControlResultType, c.ControlResult, c.ControlExecuterId, c.ControlType, c.Retry, c.ParameterValues,
e.EmployeeId, e.EmployeeName ,d.ItemValue AS ControlPhaseName
      FROM TBL_ActiveControl c INNER JOIN TBL_Employee e
      ON c.ControlExecuterId = e.EmployeeId
      INNER JOIN TBL_DataItem d ON c.ControlPhase = d.ItemId AND d.EntryId = 29
      INNER JOIN TBL_Equipment eq ON eq.StationId = c.StationId AND eq.EquipmentId = c.EquipmentId AND eq.EquipmentCategory = 82
      INNER JOIN TBL_Control tc ON c.ControlId = tc.ControlId AND tc.EquipmentTemplateId = eq.EquipmentTemplateId
      WHERE c.StationName LIKE CONCAT('%',v_StationName,'%') AND c.StartTime > v_StartTime AND c.StartTime < v_EndTime
      and c.ControlResultType =  CASE WHEN v_ControlResultType = -1 THEN c.ControlResultType ELSE v_ControlResultType END
      and tc.ControlCategory =  CASE WHEN v_ControlCategory = -1 THEN tc.ControlCategory ELSE v_ControlCategory END
      UNION
      SELECT c.StationId, c.StationName, c.EquipmentId, c.EquipmentName, c.ControlId, c.ControlName,
c.SerialNo, c.CmdToken, c.StartTime, c.EndTime, c.ConfirmTime, c.ConfirmerId, c.ControlPhase,
c.ControlResultType, c.ControlResult, c.ControlExecuterId, c.ControlType, c.Retry, c.ParameterValues,
c.ControlExecuterId AS EmployeeId, c.ControlExecuterIdName AS EmployeeName ,d.ItemValue AS ControlPhaseName
      FROM TBL_HistoryControl c 
-- SQLWAYS_EVAL# e  ON c.ControlExecuterId = e.EmployeeId 
      INNER JOIN TBL_DataItem d ON c.ControlPhase = d.ItemId AND d.EntryId = 29
      INNER JOIN TBL_Equipment eq ON eq.StationId = c.StationId AND eq.EquipmentId = c.EquipmentId AND eq.EquipmentCategory = 82
      INNER JOIN TBL_Control tc ON c.ControlId = tc.ControlId AND tc.EquipmentTemplateId = eq.EquipmentTemplateId
      WHERE c.StationName LIKE CONCAT('%',v_StationName,'%') AND c.StartTime > v_StartTime AND c.StartTime < v_EndTime
      and c.ControlResultType =  CASE WHEN v_ControlResultType = -1 THEN c.ControlResultType ELSE v_ControlResultType END
      and tc.ControlCategory =  CASE WHEN v_ControlCategory = -1 THEN tc.ControlCategory ELSE v_ControlCategory END) a ORDER BY a.StartTime DESC;

   SET SWP_Ret_Value = 0;
END;



DROP PROCEDURE IF EXISTS PCT_SaveDDSDoorControl;

CREATE PROCEDURE PCT_SaveDDSDoorControl(v_StationId       INT,
v_EquipmentId     INT,
v_cmdToken INT,
v_ParameterValue        VARCHAR(255))
   SWL_return:
BEGIN
   DECLARE v_CmdPara1 VARCHAR(50);
   DECLARE v_CmdPara2 VARCHAR(50);
   DECLARE v_CmdPara3 VARCHAR(50);
   DECLARE v_CmdPara4 VARCHAR(50);
   DECLARE v_CardCode VARCHAR(35);
   DECLARE v_cardNo VARCHAR(8);
   DECLARE v_iTemp INT;
   DECLARE v_TempParams VARCHAR(80);
   DECLARE v_DoorId INT;        
   DECLARE v_TimeGroupId INT;        
   DECLARE v_TimeSpanId INT;        
   DECLARE v_CardId INT;
   DECLARE v_poseCode INT;
   DECLARE SWV_ParameterValue_Str VARCHAR(255);
   DECLARE SWV_TempParams_Str VARCHAR(80);
   DECLARE v_Week INT; -- [1-7]
   DECLARE v_StartTime1 VARCHAR(5);            
   DECLARE v_EndTime1 VARCHAR(5);
   DECLARE v_StartTime2 VARCHAR(5);            
   DECLARE v_EndTime2 VARCHAR(5);
   DECLARE v_StartTime3 VARCHAR(5);            
   DECLARE v_EndTime3 VARCHAR(5);
   DECLARE v_GroupChar VARCHAR(168);          
   DECLARE v_GroupCharDay VARCHAR(168);

-- 去掉前2个参数
   SET v_iTemp = LOCATE(',',v_ParameterValue);
   SET SWV_ParameterValue_Str = SUBSTRING(v_ParameterValue,v_iTemp+1,255);
   SET v_ParameterValue = SWV_ParameterValue_Str;

-- 初始化变量
   SET v_CmdPara1 = '';
   SET v_CmdPara2 = '';
   SET v_CmdPara3 = '';
   SET v_CmdPara4 = '';
   SET v_CardCode = '';
   SET v_cardNo = '';

   SET v_TempParams = v_ParameterValue;

-- 析解参数 分隔符为','
   SET v_iTemp = LOCATE(',',v_TempParams);



   IF v_iTemp > 0 then -- 1

      SET v_CmdPara1 = SUBSTRING(v_TempParams,1,v_iTemp -1);     -- First

      SET SWV_TempParams_Str = SUBSTRING(v_TempParams,v_iTemp+1,255);
      SET v_TempParams = SWV_TempParams_Str; -- SQLWAYS_EVAL# rest
      SET v_iTemp = LOCATE(',',v_TempParams);
      IF v_iTemp > 0 then -- 2

         SET v_CmdPara2 = SUBSTRING(v_TempParams,1,v_iTemp -1);
         SET SWV_TempParams_Str = SUBSTRING(v_TempParams,v_iTemp+1,255);
         SET v_TempParams = SWV_TempParams_Str;
         SET v_iTemp = LOCATE(',',v_TempParams);
         IF v_iTemp > 0 then -- 3

            SET v_CmdPara3 = SUBSTRING(v_TempParams,1,v_iTemp -1);
            SET SWV_TempParams_Str = SUBSTRING(v_TempParams,v_iTemp+1,255);
            SET v_TempParams = SWV_TempParams_Str;
            SET v_iTemp = LOCATE(',',v_TempParams);
            IF v_iTemp > 0 then -- 4
               SET v_CmdPara4 = SUBSTRING(v_TempParams,1,v_iTemp -1);
            ELSE
               SET v_CmdPara4 = v_TempParams;
            end if;
         ELSE
            SET v_CmdPara3 = v_TempParams;
         end if;
      ELSE
         SET v_CmdPara2 = v_TempParams;
      end if; -- IF
   ELSE
      SET v_CmdPara1 = v_TempParams;
   end if;
-- END IF

   select   DoorId INTO v_DoorId FROM TBL_Door WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId;

-- 析解参数 分隔符为'+'
   SET v_iTemp = LOCATE('+',v_CmdPara1);
   IF v_iTemp > 0 then

      SET v_cardNo = SUBSTRING(v_CmdPara1,1,v_iTemp -1);
      SET v_CardCode = SUBSTRING(v_CmdPara1,v_iTemp+1,255);
   ELSE
      SET v_CardCode = v_CmdPara1;
   end if;
-- END IF

-- 参数正确性应在程序中保证
   IF v_cmdToken = 12 then  -- 开门超时时间

      -- NOT SUPPORTED PRINT '进入开门超时'
Update TBL_Door Set OpenDelay = cast(v_CmdPara2 as SIGNED INTEGER)
      WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId; -- SQLWAYS_EVAL# n=30
   ELSE 
      IF v_cmdToken = 11 then -- 门工作方式

         Update TBL_Door SET WorkMode = cast(v_CmdPara2 as SIGNED INTEGER)
         WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId; -- IF
      ELSE 
         IF v_cmdToken = 36 then -- 增加门禁卡及权限

            select   CardId INTO v_CardId FROM TBL_DDSCardNo AS A
            LEFT JOIN TBL_Door AS B ON A.DoorId = B.DoorId WHERE EquipmentId = v_EquipmentId AND a.cardNo = v_cardNo   LIMIT 1;
            select   tg.TimeGroupId INTO v_TimeGroupId FROM TBL_TimeGroup tg
            INNER JOIN TBL_DoorTimeGroup mdt ON tg.TimeGroupId = mdt.TimeGroupId
            AND mdt.DoorId = v_DoorId AND mdt.TimeGroupType = 10+cast(v_CmdPara2 as SIGNED INTEGER);
            IF v_CardId IS NOT NULL AND v_TimeGroupId IS NOT NULL AND v_DoorId IS NOT NULL
            AND NOT EXISTS(SELECT 'X' FROM TBL_DoorCard where DoorId = v_DoorId and CardId = v_CardId and TimeGroupId = v_TimeGroupId) then

               DELETE FROM TBL_DoorCard WHERE DoorId = v_DoorId AND CardId = v_CardId;  -- 删除在该门其他时间组上授权
               INSERT INTO TBL_DoorCard(DoorId,CardId,TimeGroupId,StartTime, EndTime,Password) VALUES(v_DoorId, v_CardId, v_TimeGroupId,CURRENT_TIMESTAMP, '2033-12-12 00:00:00', v_CmdPara4);
            end if; -- IF
         ELSE 
            IF v_cmdToken = 37 then -- 删除门禁卡及权限

               select   CardId INTO v_CardId FROM TBL_DDSCardNo WHERE CardNo = v_CmdPara1	and  DoorId = v_DoorId   LIMIT 1;
               DELETE FROM TBL_DoorCard WHERE DoorId = v_DoorId AND CardId = v_CardId; -- SQLWAYS_EVAL# = @TimeGroupId
               DELETE FROM TBL_DDSCardNo WHERE DoorId = v_DoorId AND CardId = v_CardId AND CardNo = v_CmdPara1;
            ELSE 
               IF v_cmdToken = 38 then -- 修改门禁卡权限

                  select   CardId INTO v_CardId FROM TBL_DDSCardNo AS A
                  LEFT JOIN TBL_Door AS B ON A.DoorId = B.DoorId WHERE EquipmentId = v_EquipmentId AND a.cardNo = v_cardNo   LIMIT 1;
                  select   tg.TimeGroupId INTO v_TimeGroupId FROM TBL_TimeGroup tg
                  INNER JOIN TBL_DoorTimeGroup mdt ON tg.TimeGroupId = mdt.TimeGroupId AND mdt.DoorId = v_DoorId;
                  UPDATE   TBL_DoorCard
                  SET      Password = v_CmdPara3,EndTime = v_CmdPara4
                  WHERE DoorId = v_DoorId AND CardId = v_CardId AND TimeGroupId = v_TimeGroupId;
               ELSE 
                  IF v_cmdToken = 31 then  -- 设置门禁时间组


                     select   tg.TimeGroupId INTO v_TimeGroupId FROM TBL_TimeGroup tg
                     INNER JOIN TBL_DoorTimeGroup mdt ON tg.TimeGroupId = mdt.TimeGroupId AND mdt.DoorId = v_DoorId; 

-- 星期
                     SET v_Week = cast(Right(v_ParameterValue,1) as SIGNED INTEGER);



-- 时间段
                     SET v_StartTime1 = CAST(HexToINT(SUBSTRING(v_CmdPara3,1,3)) AS CHAR(30));
                     SET v_StartTime1 = CONCAT(REPEAT('0',4 -CASE v_StartTime1 WHEN NULL THEN NULL WHEN '' THEN 1 ELSE LENGTH(v_StartTime1) END),v_StartTime1);
                     SET v_StartTime1 = CONCAT(SUBSTRING(v_StartTime1,1,2),':',SUBSTRING(v_StartTime1,3,2));
                     SET v_EndTime1 = CAST(HexToINT(SUBSTRING(v_CmdPara3,4,3)) AS CHAR(30));
                     SET v_EndTime1 = CONCAT(REPEAT('0',4 -CASE v_EndTime1 WHEN NULL THEN NULL WHEN '' THEN 1 ELSE LENGTH(v_EndTime1) END),v_EndTime1);
                     SET v_EndTime1 = CONCAT(SUBSTRING(v_EndTime1,1,2),':',SUBSTRING(v_EndTime1,3,2));
                     SET v_StartTime2 = CAST(HexToINT(SUBSTRING(v_CmdPara3,7,3)) AS CHAR(30));
                     SET v_StartTime2 = CONCAT(REPEAT('0',4 -CASE v_StartTime2 WHEN NULL THEN NULL WHEN '' THEN 1 ELSE LENGTH(v_StartTime2) END),v_StartTime2);
                     SET v_StartTime2 = CONCAT(SUBSTRING(v_StartTime2,1,2),':',SUBSTRING(v_StartTime2,3,2));
                     SET v_EndTime2 = CAST(HexToINT(SUBSTRING(v_CmdPara3,10,3)) AS CHAR(30));
                     SET v_EndTime2 = CONCAT(REPEAT('0',4 -CASE v_EndTime2 WHEN NULL THEN NULL WHEN '' THEN 1 ELSE LENGTH(v_EndTime2) END),v_EndTime2);
                     SET v_EndTime2 = CONCAT(SUBSTRING(v_EndTime2,1,2),':',SUBSTRING(v_EndTime2,3,2));
                     SET v_StartTime3 = CAST(HexToINT(SUBSTRING(v_CmdPara3,13,3)) AS CHAR(30));
                     SET v_StartTime3 = CONCAT(REPEAT('0',4 -CASE v_StartTime3 WHEN NULL THEN NULL WHEN '' THEN 1 ELSE LENGTH(v_StartTime3) END),v_StartTime3);
                     SET v_StartTime3 = CONCAT(SUBSTRING(v_StartTime3,1,2),':',SUBSTRING(v_StartTime3,3,2));
                     SET v_EndTime3 = CAST(HexToINT(SUBSTRING(v_CmdPara3,16,3)) AS CHAR(30));
                     SET v_EndTime3 = CONCAT(REPEAT('0',4 -CASE v_EndTime3 WHEN NULL THEN NULL WHEN '' THEN 1 ELSE LENGTH(v_EndTime3) END),v_EndTime3);
                     SET v_EndTime3 = CONCAT(SUBSTRING(v_EndTime3,1,2),':',SUBSTRING(v_EndTime3,3,2));
                     SET v_GroupCharDay = CONCAT(v_StartTime1,'-',v_EndTime1,v_StartTime2,'-',v_EndTime2,v_StartTime3,
                     '-',v_EndTime3); -- IF CmdToken=42
                  ELSE 
                     IF v_cmdToken = 0 then  -- 删除505A门禁所有授权卡

                        DELETE FROM TBL_DoorCard WHERE DoorId = v_DoorId; -- SQLWAYS_EVAL# n=45

                     ELSE 
                        IF v_cmdToken = 19 then -- 修改验证控制密码

                           UPDATE TBL_Door  SET Password = v_CmdPara1
                           WHERE  DoorId = v_DoorId;
                        end if;
                     end if;
                  end if;
               end if;
            end if;
         end if;
      end if;
   end if; -- IF

   LEAVE SWL_return;
END;





-- 添加自定义分组

DROP PROCEDURE IF EXISTS PCT_AddDoorGroup;


CREATE PROCEDURE PCT_AddDoorGroup(v_doorGroupId    INT,
v_DoorGroupName  NATIONAL VARCHAR(128))

BEGIN 
INSERT INTO tbl_doorGroup VALUES(v_doorGroupId,v_DoorGroupName,CURRENT_TIMESTAMP);
END;






-- 查询已分组的门禁
DROP PROCEDURE IF EXISTS PCT_GetDoorsGroup;


CREATE PROCEDURE PCT_GetDoorsGroup(v_doorGroupId        INT  ,
v_StructureId		INT,
v_StationName    		VARCHAR(50),
v_DoorName 			VARCHAR(50)) 
BEGIN

   DECLARE v_SQL VARCHAR(500);

   IF v_StructureId is null then
      set v_StructureId = -1;
   END IF;
   IF v_StationName is null then
      set v_StationName = '';
   END IF;
   IF v_DoorName is null then
      set v_DoorName = '';
   END IF;
   SET v_SQL = 'SQLWAYS_EVAL# A.DoorId,A.DoorNo,A.DoorName,A.StationId,B.StationName,';
   SET v_SQL = CONCAT(replace(v_SQL,';',' '),'SQLWAYS_EVAL# FROM TBL_DoorGroupMap WHERE DoorGroupId=',
   CAST(v_doorGroupId AS CHAR(30)),'SQLWAYS_EVAL# AS IsGroup ');
   SET v_SQL = CONCAT(replace(v_SQL,';',' '),'SQLWAYS_EVAL# ');
   SET v_SQL = CONCAT(replace(v_SQL,';',' '),'SQLWAYS_EVAL# B ON B.StationId=A.StationId ');
   SET v_SQL = CONCAT(replace(v_SQL,';',' '),'SQLWAYS_EVAL# C ON A.StationId=C.StationId ');
   SET v_SQL = CONCAT(replace(v_SQL,';',' '),'SQLWAYS_EVAL# LIKE ''%',v_DoorName,'%''');
   IF v_StructureId <> -1 then

      SET v_SQL = CONCAT(replace(v_SQL,';',' '),'SQLWAYS_EVAL# eId=',CAST(v_StructureId AS CHAR(30)));
   end if;
   IF v_StationName <> '' then

      SET v_SQL = CONCAT(replace(v_SQL,';',' '),'SQLWAYS_EVAL# LIKE ''%',v_StationName,
      '%''');
   end if;
   SET v_SQL = CONCAT(replace(v_SQL,';',' '),'SQLWAYS_EVAL# desc');
   SET @SWV_Stmt = v_SQL;
   PREPARE SWT_Stmt FROM @SWV_Stmt;
   EXECUTE SWT_Stmt;
   DEALLOCATE PREPARE SWT_Stmt;
END;




-- 存储设置的分组
DROP PROCEDURE IF EXISTS PCT_SaveDoorsGroup;


CREATE PROCEDURE PCT_SaveDoorsGroup(v_doorGroupId        INT  ,
v_AddDoorIdList   		VARCHAR(500),
v_DeleteDoorIdList   		VARCHAR(500)) 
BEGIN
   DECLARE v_AddDoorId VARCHAR(50);
   DECLARE v_DeleteDoorId VARCHAR(50);
   DECLARE v_count INT;
   DECLARE SWV_DeleteDoorIdList_Str VARCHAR(500);
   DECLARE SWV_AddDoorIdList_Str VARCHAR(500); 
   START TRANSACTION; 
 
-- 清除原有分组数据
   WHILE (LOCATE(',',v_DeleteDoorIdList) <> 0) DO
      SET v_DeleteDoorId = SUBSTRING(v_DeleteDoorIdList,0,LOCATE(',',v_DeleteDoorIdList));
      SET SWV_DeleteDoorIdList_Str = SUBSTRING(v_DeleteDoorIdList,LOCATE(',',v_DeleteDoorIdList)+1,LENGTH(v_DeleteDoorIdList) -LOCATE(',',v_DeleteDoorIdList));
      SET v_DeleteDoorIdList = SWV_DeleteDoorIdList_Str;
      DELETE FROM TBL_DoorGroupMap WHERE DoorGroupId = v_doorGroupId AND DoorId = v_DeleteDoorId;
   END WHILE;


   WHILE (LOCATE(',',v_AddDoorIdList) <> 0) DO
      SET v_AddDoorId = SUBSTRING(v_AddDoorIdList,0,LOCATE(',',v_AddDoorIdList));
      SET SWV_AddDoorIdList_Str = SUBSTRING(v_AddDoorIdList,LOCATE(',',v_AddDoorIdList)+1,LENGTH(v_AddDoorIdList) -LOCATE(',',v_AddDoorIdList));
      SET v_AddDoorIdList = SWV_AddDoorIdList_Str;
      select   count(*) INTO v_count FROM TBL_DoorGroupMap WHERE DoorGroupId = v_doorGroupId AND DoorId = v_AddDoorId;
      IF v_count = 0 then

  INSERT INTO TBL_DoorGroupMap(DoorGroupId,DoorId,LastTime) VALUES(v_doorGroupId,v_AddDoorId,CURRENT_TIMESTAMP);
      end if;
   END WHILE;
   COMMIT;  
END;





-- -- SELECT N'[PCT_InsertDoorTimeGroupItem]...';


DROP PROCEDURE IF EXISTS PCT_InsertDoorTimeGroupItem;

CREATE PROCEDURE PCT_InsertDoorTimeGroupItem(v_DoorId       INT  ,
v_TimeGroupId    INT,
v_TimeGroupType INT) 
BEGIN 	

   IF EXISTS(SELECT 1 FROM TBL_DoorTimeGroup WHERE DoorId = v_DoorId AND TimeGroupId = v_TimeGroupId) then

      UPDATE TBL_DoorTimeGroup SET TimeGroupType = v_TimeGroupType WHERE DoorId = v_DoorId AND TimeGroupId = v_TimeGroupId;
   ELSE
 INSERT INTO TBL_DoorTimeGroup VALUES(v_DoorId,v_TimeGroupId,v_TimeGroupType);
   end if;

END;


DROP PROCEDURE IF EXISTS queryHisAlarm;

CREATE PROCEDURE `queryHisAlarm`(v_startTime datetime, v_endTime datetime)
BEGIN

		SELECT 
				he.SequenceId				,	
				he.StationId				,	
				he.StationName				,	
				he.EquipmentId				,	
				he.EquipmentName			,	
				he.EventId					,	
				he.EventName				,	
				he.EventConditionId			,
				he.EventSeverityId			,	
				he.EventSeverity			,	
				he.StartTime				,	
				he.EndTime					,	
				he.CancelTime				,	
				he.CancelUserId				,
				he.CancelUserName			,	
				he.ConfirmTime				,	
				he.ConfirmerId				,	
				he.ConfirmerName			,	
				he.EventValue				,	
				he.ReversalNum				,	
				he.Meanings					,
				he.EventFilePath			,	
				he.Description				,	
				he.SourceHostId				,
				he.InstructionId			,	
				he.InstructionStatus		,	
				he.StandardAlarmNameId		,	
				he.StandardAlarmName		,	
				he.BaseTypeId				,	
				he.BaseTypeName				,
				he.EquipmentCategory		,	
				he.EquipmentCategoryName	,	
				he.MaintainState			,	
				he.SignalId					,
				he.RelateSequenceId			,
				he.EventCategoryId			,	
				he.EventStateId				,
				he.CenterId					,
				he.CenterName				,	
				he.StructureName			,	
				he.MonitorUnitName			,	
				he.StructureId				,	
				he.StationCategoryId		,	
				he.EquipmentVendor		
		FROM TBL_HistoryEvent he 
		WHERE he.StartTime >= v_startTime AND he.StartTime <= v_endTime
		ORDER BY he.StationId,he.EquipmentId,he.EventId,he.EndTime DESC
		LIMIT 3000;

END;



/* 初始化MDC机柜表信息 */
DROP PROCEDURE IF EXISTS PRO_InitCabinet;
CREATE PROCEDURE PRO_InitCabinet(
v_CabinetNo			INT,
v_Name				  VARCHAR(50),
v_MDCId				  INT,
v_CabinetType		VARCHAR(50),
v_Side				  VARCHAR(50),
v_PhaseACurrentDeviceId INT,
v_PhaseACurrentSignalId INT,
v_PhaseAVoltageDeviceId INT,
v_PhaseAVoltageSignalId INT,
v_PhaseBCurrentDeviceId INT,
v_PhaseBCurrentSignalId INT,
v_PhaseBVoltageDeviceId INT,
v_PhaseBVoltageSignalId INT,
v_PhaseCCurrentDeviceId INT,
v_PhaseCCurrentSignalId INT,
v_PhaseCVoltageDeviceId INT,
v_PhaseCVoltageSignalId INT,
v_RatedVoltage		  INT,
v_RatedCurrent		  INT,
v_Description		VARCHAR(255)
)
BEGIN
	DECLARE v_CabinetId INT;

	IF v_CabinetNo < 10 THEN
		SELECT Id INTO v_CabinetId FROM Cabinet WHERE MDCId = v_MDCId AND Id LIKE CONCAT('%','0',v_CabinetNo);
	ELSE
		SELECT Id INTO v_CabinetId FROM Cabinet WHERE MDCId = v_MDCId AND Id LIKE CONCAT('%',v_CabinetNo);
	END IF;

	IF (v_CabinetId IS NULL) THEN
		IF v_CabinetNo < 10 THEN
			SELECT CONCAT(1,right(v_MDCId, 4),'00',v_CabinetNo) INTO v_CabinetId;
		ELSE
			SELECT CONCAT(1,right(v_MDCId, 4),'0',v_CabinetNo) INTO v_CabinetId;
		END IF;
		INSERT INTO Cabinet (Id,`Name`,MDCId,CabinetType,Side,PhaseACurrentDeviceId,PhaseACurrentSignalId,PhaseAVoltageDeviceId,PhaseAVoltageSignalId,
				PhaseBCurrentDeviceId,PhaseBCurrentSignalId,PhaseBVoltageDeviceId,PhaseBVoltageSignalId,PhaseCCurrentDeviceId,
				PhaseCCurrentSignalId,PhaseCVoltageDeviceId,PhaseCVoltageSignalId,RatedVoltage,RatedCurrent,Description) 
				VALUES(v_CabinetId,v_Name,v_MDCId,v_CabinetType,v_Side,
			v_PhaseACurrentDeviceId,v_PhaseACurrentSignalId,v_PhaseAVoltageDeviceId,v_PhaseAVoltageSignalId,
			v_PhaseBCurrentDeviceId,v_PhaseBCurrentSignalId,v_PhaseBVoltageDeviceId,v_PhaseBVoltageSignalId,
			v_PhaseCCurrentDeviceId,v_PhaseCCurrentSignalId,v_PhaseCVoltageDeviceId,v_PhaseCVoltageSignalId,
			v_RatedVoltage,v_RatedCurrent,v_Description);
	ELSE
		UPDATE Cabinet 
		SET Name = v_Name,CabinetType = v_CabinetType,Side = v_Side,
			PhaseACurrentDeviceId = v_PhaseACurrentDeviceId,
			PhaseACurrentSignalId = v_PhaseACurrentSignalId,
			PhaseAVoltageDeviceId = v_PhaseAVoltageDeviceId,
			PhaseAVoltageSignalId = v_PhaseAVoltageSignalId,
			PhaseBCurrentDeviceId = v_PhaseBCurrentDeviceId,
			PhaseBCurrentSignalId = v_PhaseBCurrentSignalId,
			PhaseBVoltageDeviceId = v_PhaseBVoltageDeviceId,
			PhaseBVoltageSignalId = v_PhaseBVoltageSignalId,
			PhaseCCurrentDeviceId = v_PhaseCCurrentDeviceId,
			PhaseCCurrentSignalId = v_PhaseCCurrentSignalId,
			PhaseCVoltageDeviceId = v_PhaseCVoltageDeviceId,
			PhaseCVoltageSignalId = v_PhaseCVoltageSignalId,
			RatedVoltage = v_RatedVoltage,
			RatedCurrent = v_RatedCurrent,
			Description = v_Description 
		WHERE MDCId = v_MDCId AND Id = v_CabinetId;
	END IF;
END;

/* 初始化MDC机柜温度表 */
DROP PROCEDURE IF EXISTS PRO_InitThermalSensors;
CREATE PROCEDURE PRO_InitThermalSensors(v_cabinetNum INT,v_type INT)
BEGIN
	DECLARE v_dataSize INT;
	DECLARE v_number INT;
	DECLARE v_rowNumber INT;
	DECLARE i INT;
	DECLARE j INT;
	DECLARE x INT;
	DECLARE v_slideName VARCHAR(255);
        
	SELECT COUNT(*) INTO v_dataSize FROM Thermal_Sensors;

	SET v_number := v_dataSize/3;

	IF (v_number <> v_cabinetNum) THEN
		IF (v_type = 2) THEN
			SET v_rowNumber := v_cabinetNum/2;
		ELSE
			SET v_rowNumber := v_cabinetNum; 
		END IF;

		SET i := 1;
		DELETE FROM Thermal_Sensors;
		while i <= v_cabinetNum do  
			SET j := 1;
			IF (i <= v_rowNumber) THEN
				while j <= 3 do
					IF i < 10 THEN
						SET v_slideName = CONCAT('机柜','0',i,'-',j);
						INSERT INTO Thermal_Sensors (MDCId,CabinetId,SlideName,DeviceId,SignalId,x,y) VALUES(NULL,NULL,v_slideName,NULL,NULL,i*60-30,j*50);
					ELSE
						SET v_slideName = CONCAT('机柜',i,'-',j);
						INSERT INTO Thermal_Sensors (MDCId,CabinetId,SlideName,DeviceId,SignalId,x,y) VALUES(NULL,NULL,v_slideName,NULL,NULL,i*60-30,j*50);
					END IF;
					set j = j + 1; 
				end while;
			ELSE
				SET x = i - v_rowNumber;
				while j <= 3 do
					IF i < 10 THEN
						SET v_slideName = CONCAT('机柜','0',i,'-',j);
						INSERT INTO Thermal_Sensors (MDCId,CabinetId,SlideName,DeviceId,SignalId,x,y) VALUES(NULL,NULL,v_slideName,NULL,NULL,x*60-30,j*50);
					ELSE
						SET v_slideName = CONCAT('机柜',i,'-',j);
						INSERT INTO Thermal_Sensors (MDCId,CabinetId,SlideName,DeviceId,SignalId,x,y) VALUES(NULL,NULL,v_slideName,NULL,NULL,x*60-30,j*50);
					END IF;
					set j = j + 1;
				end while;
			END IF;
			set i = i + 1; 
		end while;
	END IF;
END;

/* 添加或删除机柜温度 */
DROP PROCEDURE IF EXISTS PRO_InitCabinetThermalSensors;
CREATE PROCEDURE PRO_InitCabinetThermalSensors(v_mdcId INT,v_cabinetNo INT,v_deviceId INT,v_signalId INT,v_no INT)
BEGIN
	DECLARE v_cabinetId INT;
	DECLARE v_slideName VARCHAR(255);
        
	IF v_CabinetNo < 10 THEN
		SELECT Id INTO v_cabinetId FROM Cabinet WHERE MDCId = v_MDCId AND Id LIKE CONCAT('%','0',v_CabinetNo);
	ELSE
		SELECT Id INTO v_cabinetId FROM Cabinet WHERE MDCId = v_MDCId AND Id LIKE CONCAT('%',v_CabinetNo);
	END IF;

	IF (v_cabinetId IS NULL) THEN
			IF v_cabinetNo < 10 THEN
				SELECT CONCAT(1,right(v_mdcId, 4),'00',v_cabinetNo) INTO v_cabinetId;
			ELSE
				SELECT CONCAT(1,right(v_mdcId, 4),'0',v_cabinetNo) INTO v_cabinetId;
			END IF;
	END IF;

	IF v_cabinetNo < 10 THEN
		SELECT SlideName INTO v_slideName FROM Thermal_Sensors WHERE SlideName LIKE CONCAT('机柜0',v_cabinetNo,'-',v_no);
		UPDATE Thermal_Sensors SET MDCId = v_mdcId,CabinetId = v_cabinetId,DeviceId = v_deviceId,SignalId = v_signalId WHERE SlideName = v_slideName;
	ELSE
		SELECT SlideName INTO v_slideName FROM Thermal_Sensors WHERE SlideName LIKE CONCAT('机柜',v_cabinetNo,'-',v_no);
		UPDATE Thermal_Sensors SET MDCId = v_mdcId,CabinetId = v_cabinetId,DeviceId = v_deviceId,SignalId = v_signalId WHERE SlideName = v_slideName;
	END IF;
END;


/* 批量生成基类ID */
DROP PROCEDURE IF EXISTS PRO_BatchBaseTypeId;
CREATE PROCEDURE PRO_BatchBaseTypeId(v_EquipmentTemplateId INT)
BEGIN
	/* 根据EquipmentTemplateId给TBL_Signal信号表的BaseTypeId基类编号为空的添加基类编号 */
	DECLARE v_EquipmentBaseType INT;
	DECLARE v_Id VARCHAR(10);
	DECLARE v_BaseTypeId VARCHAR(10);
	DECLARE v_MaxBaseTypeId INT;
	DECLARE v_MaxId INT DEFAULT 0;
	DECLARE v_SignalId VARCHAR(10);
	DECLARE done INT DEFAULT FALSE;
	DECLARE cur_Signal CURSOR FOR (SELECT EquipmentTemplateId,SignalId,BaseTypeId FROM TBL_Signal);

	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
	
	SELECT EquipmentBaseType INTO v_EquipmentBaseType FROM TBL_EquipmentTemplate WHERE EquipmentTemplateId = v_EquipmentTemplateId;

	IF v_EquipmentBaseType IS NOT NULL THEN
		OPEN cur_Signal;

		read_loop: LOOP
        FETCH cur_Signal INTO v_Id,v_SignalId,v_BaseTypeId;
        
				IF done THEN
					LEAVE read_loop;
        END IF;
				
				IF v_Id = v_EquipmentTemplateId THEN
					IF v_BaseTypeId IS NULL THEN
						
						IF v_SignalId = -3 THEN
							SET v_BaseTypeId = CONCAT(v_EquipmentBaseType,'999001');
						ELSE
							IF v_MaxId = 0 THEN
								SELECT MAX(BaseTypeId) INTO v_MaxBaseTypeId FROM TBL_Signal WHERE EquipmentTemplateId = v_EquipmentTemplateId AND SignalId <> -3;

								IF v_MaxBaseTypeId IS NULL THEN
									SET v_MaxId = CONCAT(v_EquipmentBaseType,300);
								ELSE
									SET v_MaxId = convert(v_MaxBaseTypeId/1000, signed);
								END IF;
							END IF;
	
							SET v_MaxId = v_MaxId + 1;
							
							SET v_BaseTypeId = CONCAT(v_MaxId,'001');
						END IF;

						UPDATE TBL_SIgnal SET BaseTypeId = v_BaseTypeId WHERE EquipmentTemplateId = v_EquipmentTemplateId AND SignalId = v_SignalId;

					END IF;
				END IF;
				COMMIT;
    END LOOP;

		CLOSE cur_Signal;
	END IF;
END;

/* *********** 新增告警联动TBL_EventLogAction的存储过程 ************ */
DROP PROCEDURE IF EXISTS PRO_InsertAlarmLinkage;
CREATE PROCEDURE PRO_InsertAlarmLinkage(
v_LogActionId INT,
v_ActionName VARCHAR(50),
v_TriggerType INT,
v_StartExpression VARCHAR(255),
v_Description VARCHAR(50)
)
BEGIN
	DECLARE v_StationId INT;
	DECLARE v_MonitorUnitId INT;
	DECLARE v_ActionId INT;
	
	SELECT StationId INTO v_StationId FROM TBL_Station LIMIT 1;
	SELECT MonitorUnitId INTO v_MonitorUnitId FROM TSL_MonitorUnit LIMIT 1;

	INSERT INTO TBL_EventLogAction VALUES(v_LogActionId,v_ActionName,v_StationId,v_MonitorUnitId,v_TriggerType,v_StartExpression,NULL,NULL,v_Description);
END;

/* *********** 判断TBL_DoorCard是否存在，不存在新增，存在修改；TBL_DoorTimeGroup不存在返回准进时间段 ************ */
DROP PROCEDURE IF EXISTS PRO_InsertDoorCard;
CREATE PROCEDURE PRO_InsertDoorCard(
v_CardId INT,
v_TimeGroupId INT,
v_DoorId INT,
v_EndTime VARCHAR(50),
v_Password VARCHAR(50),
OUT v_TimeSpanChar VARCHAR(24)
)
BEGIN
	DECLARE v_Count INT;
	DECLARE done INT DEFAULT FALSE;

	/* 根据卡编号和门编号判断是否存在，存在则修改最新数据，否则新增 */
	SELECT COUNT(*) INTO v_Count FROM TBL_DoorCard WHERE CardId = v_CardId AND DoorId = v_DoorId;

	IF v_Count > 0 THEN
		UPDATE TBL_DoorCard SET TimeGroupId = v_TimeGroupId,EndTime = v_EndTime,`Password` = v_Password WHERE CardId = v_CardId AND DoorId = v_DoorId;
	ELSE
		INSERT INTO TBL_DoorCard VALUES (v_CardId,v_TimeGroupId,v_DoorId,SYSDATE(),v_EndTime,v_Password);
	END IF;

	/* 根据门编号和时间组编号判断是否存在，不存在则新增 */
	SELECT COUNT(*) INTO v_Count FROM TBL_DoorTimeGroup WHERE DoorId = v_DoorId AND TimeGroupId = v_TimeGroupId;
	
	IF v_Count > 0 THEN
		SET v_TimeSpanChar = '';
	ELSE
		SELECT TimeSpanChar INTO v_TimeSpanChar FROM TBL_TimeGroupSpan WHERE TimeGroupId = v_TimeGroupId AND `Week` = 1;
	END IF;

	SELECT v_TimeSpanChar AS TimeSpanChar;
END;

/* *********** TBL_DoorTimeGroup表是否存在，不存在新增，存在修改 ************ */
DROP PROCEDURE IF EXISTS PRO_InsertDoorTimeGroup;
CREATE PROCEDURE PRO_InsertDoorTimeGroup(
v_TimeGroupId INT,
v_DoorNo VARCHAR(10),
v_EquipmentId INT
)
BEGIN
	DECLARE v_DoorId INT;
	DECLARE v_Count INT;
	DECLARE v_TimeGroupType INT;
	DECLARE done INT DEFAULT FALSE;
	DECLARE cur_DoorId CURSOR FOR (SELECT DoorId FROM TBL_Door WHERE EquipmentId = v_EquipmentId AND DoorNo LIKE v_DoorNo);
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

	SELECT TimeGroupType INTO v_TimeGroupType FROM TBL_TimeGroup WHERE TimeGroupId = v_TimeGroupId;
	OPEN cur_DoorId;

	read_loop: LOOP
		FETCH cur_DoorId INTO v_DoorId;
		
		IF done THEN
			LEAVE read_loop;
		END IF;

		SELECT COUNT(*) INTO v_Count FROM TBL_DoorTimeGroup WHERE DoorId = v_DoorId AND TimeGroupId = v_TimeGroupId;
		IF v_Count <= 0 THEN
			INSERT INTO TBL_DoorTimeGroup (DoorId,TimeGroupId,TimeGroupType)VALUES(v_DoorId,v_TimeGroupId,v_TimeGroupType);
		END IF;
	END LOOP;

	CLOSE cur_DoorId;
END;


-- 新增/修改机柜资产
DROP PROCEDURE IF EXISTS PRO_UpdateCabinetAsset;
CREATE PROCEDURE PRO_UpdateCabinetAsset(
v_AssetId INT,
v_MdcId INT,
v_CabinetId INT,
v_AssetCode VARCHAR(20),
v_Date VARCHAR(20),
v_Vendor VARCHAR(20),
v_Model VARCHAR(20),
v_Responsible VARCHAR(20),
v_EmployeeId INT,
v_Description VARCHAR(255)
)BEGIN
	DECLARE v_Count INT;
	DECLARE v_CabinetNo VARCHAR(11);
	DECLARE v_CId VARCHAR(11);
	

	SELECT COUNT(*) INTO v_Count FROM CabinetAsset WHERE AssetId = v_AssetId;

	IF v_Count > 0 THEN
		UPDATE CabinetAsset SET AssetCode = v_AssetCode,Date = v_Date,Vendor = v_Vendor,Model = v_Model,Responsible = v_Responsible,
			EmployeeId = v_EmployeeId,Description = v_Description WHERE AssetId = v_AssetId;
	ELSE
		IF v_CabinetId < 10 THEN
			SET v_CabinetNo = CONCAT('00',v_CabinetId);
			SELECT CONCAT(1,right(v_MdcId, 4),'00',v_CabinetId) INTO v_CId;
		ELSE
			SET v_CabinetNo = CONCAT('0',v_CabinetId);
			SELECT CONCAT(1,right(v_MdcId, 4),'0',v_CabinetId) INTO v_CId;
		END IF;

		SELECT MAX(AssetId) INTO v_AssetId FROM CabinetAsset;
	
		IF v_AssetId IS NULL THEN
			SET v_AssetId = 100000001;
		ELSE
			SET v_AssetId = v_AssetId + 1;
		END IF;

		INSERT INTO CabinetAsset (AssetId,MDCId,CabinetId,AssetCode,Date,Vendor,Model,Responsible,EmployeeId,Description) VALUES(v_AssetId,v_MdcId,v_CId,v_AssetCode,v_Date,v_Vendor,v_Model,v_Responsible,v_EmployeeId,v_Description);

	END IF;
END;

/* 设置通道温湿度存储过程 */
DROP PROCEDURE IF EXISTS PRO_InitAisleThermalHumidity;
CREATE PROCEDURE PRO_InitAisleThermalHumidity(
	v_MdcId INT(11),
	v_Type VARCHAR(20),
	v_Site INT,
	v_DeviceId INT(11),
	v_SignalId INT(11),
	v_Description VARCHAR(255)
)BEGIN
	DECLARE v_Id INT;

	SELECT Id INTO v_Id FROM MDC_AisleThermalHumidity WHERE MDCId = v_MdcId AND Site = v_Site;

	IF v_Id IS NOT NULL THEN
		IF v_Type = 'Thermal' THEN
			UPDATE MDC_AisleThermalHumidity SET TDeviceId = v_DeviceId , TSignalId = v_SignalId WHERE Id = v_Id;
		ELSE
			UPDATE MDC_AisleThermalHumidity SET HDeviceId = v_DeviceId , HSignalId = v_SignalId WHERE Id = v_Id;
		END IF;
	ELSE
		SELECT MAX(Id) INTO v_Id FROM MDC_AisleThermalHumidity;

		IF v_Id IS NOT NULL THEN
			SET v_Id = v_Id + 1;
		ELSE
			SET v_Id = 100000001;
		END IF;

		IF v_Type = 'Thermal' THEN
			INSERT INTO MDC_AisleThermalHumidity(Id,MDCId,Site,TDeviceId,TSignalId,Description) VALUES(v_Id,v_MdcId,v_Site,v_DeviceId,v_SignalId,v_Description);
		ELSE
			INSERT INTO MDC_AisleThermalHumidity(Id,MDCId,Site,HDeviceId,HSignalId,Description) VALUES(v_Id,v_MdcId,v_Site,v_DeviceId,v_SignalId,v_Description);
		END IF;
	END IF;

	SELECT Id FROM MDC_AisleThermalHumidity WHERE Id = v_Id;
END;

/* 新增组态分类 */
DROP PROCEDURE IF EXISTS PRO_InsertConfigureMold;
CREATE PROCEDURE PRO_InsertConfigureMold(
	v_ParentId INT
)
BEGIN
	DECLARE v_ConfigId INT;
	DECLARE v_MaxConfigId INT;
	DECLARE v_MaxDisplayIndex INT;
	DECLARE v_ConfigName VARCHAR(20);
	
	SELECT ConfigId INTO v_ConfigId FROM TBL_ConfigureMold WHERE ConfigId = v_ParentId;
	SELECT MAX(ConfigId) INTO v_MaxConfigId FROM TBL_ConfigureMold;

	IF v_MaxConfigId IS NOT NULL THEN
		SET v_MaxConfigId = v_MaxConfigId + 1;
	ELSE
		SET v_MaxConfigId = 100000001;
	END IF;

	IF v_ConfigId IS NOT NULL THEN
		SELECT MAX(DisplayIndex) INTO v_MaxDisplayIndex FROM TBL_ConfigureMold WHERE ParentId = v_ParentId;
		SET v_ConfigName = '新子节点';
	ELSE
		SELECT MAX(DisplayIndex) INTO v_MaxDisplayIndex FROM TBL_ConfigureMold;
		SET v_ConfigName = '新父节点';
		SET v_ParentId = NULL;
	END IF;

	IF v_MaxDisplayIndex IS NOT NULL THEN
		SET v_MaxDisplayIndex = v_MaxDisplayIndex + 1;
	ELSE
		SET v_MaxDisplayIndex = 1;
	END IF;

	INSERT INTO TBL_ConfigureMold (ConfigId,ConfigName,FontChart,ConfigUrl,EquipmentId,DisplayIndex,DisplayType,ParentId,Visible,Description) VALUES(v_MaxConfigId,v_ConfigName,NULL,NULL,NULL,v_MaxDisplayIndex,0,v_ParentId,1,NULL);

END;

/* 查询排序的组态类集合 */
DROP PROCEDURE IF EXISTS PRO_SortConfigureMold;
CREATE PROCEDURE PRO_SortConfigureMold(
	v_ConfigId INT(11)
)
BEGIN
	DECLARE v_ParentId INT;

	SELECT ParentId INTO v_ParentId FROM TBL_ConfigureMold WHERE ConfigId = v_ConfigId;

	IF v_ParentId IS NULL THEN
		-- 父节点
		SELECT * FROM TBL_ConfigureMold WHERE ParentId IS NULL GROUP BY DisplayIndex;
	ELSE
		-- 子节点
		SELECT * FROM TBL_ConfigureMold WHERE ParentId = v_ParentId GROUP BY DisplayIndex;
	END IF;
END;

-- 缓存历史数据
DROP PROCEDURE IF EXISTS PRO_CacheHistorySignal;

CREATE PROCEDURE `PRO_CacheHistorySignal`(v_CacheDays	INT)
BEGIN
	DECLARE v_NowDay INT;
	DECLARE v_NowMonth INT;
	DECLARE v_LastMonth INT;
	DECLARE v_Sql Text;
	
	SELECT DATE_FORMAT(NOW(),'%d'),CAST(DATE_FORMAT(NOW(),'%m') AS SIGNED) INTO v_NowDay,v_NowMonth;

	IF v_CacheDays <= v_NowDay THEN
		SET v_Sql = CONCAT('SELECT *,Max(FloatValue) AS MaxFloatValu,Min(FloatValue) AS MinFloatValu,Avg(FloatValue) AS AvgFloatValu FROM TBL_HistorySIgnal',v_NowMonth,' WHERE DATE_SUB(CURDATE(), INTERVAL ',v_CacheDays,' DAY) < SampleTime GROUP BY EquipmentId,SignalId,DATE_FORMAT(SampleTime,\'%Y-%m-%d\')');
	ELSE
		IF v_NowMonth = 1 THEN
			SET v_LastMonth = 12;
		ELSE
			SET v_LastMonth = v_NowMonth - 1;
		END IF;
			
		SET v_Sql = CONCAT('SELECT *,Max(FloatValue) AS MaxFloatValu,Min(FloatValue) AS MinFloatValu,Avg(FloatValue) AS AvgFloatValu FROM TBL_HistorySIgnal',v_LastMonth,' WHERE DATE_SUB(CURDATE(), INTERVAL ',v_CacheDays,' DAY) < SampleTime GROUP BY EquipmentId,SignalId,DATE_FORMAT(SampleTime,\'%Y-%m-%d\') ',
							' UNION ',
							'SELECT *,Max(FloatValue) AS MaxFloatValu,Min(FloatValue) AS MinFloatValu,Avg(FloatValue) AS AvgFloatValu FROM TBL_HistorySIgnal',v_NowMonth,' WHERE DATE_SUB(CURDATE(), INTERVAL ',v_CacheDays,' DAY) < SampleTime GROUP BY EquipmentId,SignalId,DATE_FORMAT(SampleTime,\'%Y-%m-%d\');');
	END IF;

	SET @SWV_Stmt = v_Sql;
	PREPARE SWT_Stmt FROM @SWV_Stmt;
	EXECUTE SWT_Stmt;
	DEALLOCATE PREPARE SWT_Stmt;

	SELECT DATE_FORMAT(collectTime,'%m-%d') AS number,pue,collectTime FROM puerecord WHERE DATE_SUB(CURDATE(), INTERVAL v_CacheDays DAY) < collectTime;

END;


-- 新增/修改/删除Mdc_Environment
DROP PROCEDURE IF EXISTS PRO_InitMdcEnvironment;
CREATE PROCEDURE PRO_InitMdcEnvironment(
v_MDCId				  INT,
v_Type					VARCHAR(50),
v_Site				  INT,
v_EquipmentId 	INT,
v_SignalId 			INT,
v_Description		VARCHAR(255)
)
BEGIN
	DECLARE v_NextId INT;
	DECLARE v_Count INT;
	
	IF v_EquipmentId = 0 AND v_SignalId = 0 THEN
		DELETE FROM Mdc_Environment WHERE MdcId = v_MDCId AND Type = v_Type AND Site = v_Site;
		SELECT -1;
	ELSE
		SELECT COUNT(*) INTO v_Count FROM Mdc_Environment WHERE MdcId = v_MDCId AND Type = v_Type AND Site = v_Site;

		IF v_Count > 0 THEN
			UPDATE Mdc_Environment SET EquipmentId = v_EquipmentId , SignalId = v_SignalId WHERE MdcId = v_MDCId AND Type = v_Type AND Site = v_Site;

			SELECT Id FROM Mdc_Environment WHERE MdcId = v_MDCId AND Type = v_Type AND Site = v_Site;
		ELSE
			SELECT MAX(Id) INTO v_NextId FROM Mdc_Environment;

			IF v_NextId IS NOT NULL THEN
				SET v_NextId = v_NextId + 1;
			ELSE
				SET v_NextId = 100000001;
			END IF;

			INSERT INTO Mdc_Environment (Id,MdcId,Type,Site,EquipmentId,SignalId,Description) VALUES(v_NextId,v_MDCId,v_Type,v_Site,v_EquipmentId,v_SignalId,v_Description);

			SELECT Id FROM Mdc_Environment WHERE Id = v_NextId;
		END IF;
	END IF;
END;

/* 组态页面管理存储过程 */
DROP PROCEDURE IF EXISTS PRO_InitConfigureMold;
CREATE PROCEDURE PRO_InitConfigureMold(
v_EquipmentId			INT,
v_EquipmentName		VARCHAR(50),
v_EquipmentTemplateId INT
)
BEGIN
	DECLARE v_NextConfigId INT;
	DECLARE v_ConfigName VARCHAR(50);
	DECLARE v_FontChart VARCHAR(50);
	DECLARE v_ConfigUrl VARCHAR(50);
	DECLARE v_DisplayIndex INT;
	DECLARE v_ParentId INT;
	DECLARE v_EquipmentTypeId INT;
	DECLARE v_BaseEquipmentId INT;
	DECLARE v_BaseEquipmentName VARCHAR(50);
	
	-- 获取基本信息
	SELECT B.BaseEquipmentId,B.BaseEquipmentName,B.EquipmentTypeId INTO v_BaseEquipmentId,v_BaseEquipmentName,v_EquipmentTypeId 
	FROM TBL_EquipmentTemplate A 
	LEFT JOIN TBL_EquipmentBaseType B ON A.EquipmentBaseType = B.BaseEquipmentId 
	WHERE A.EquipmentTemplateId = v_EquipmentTemplateId;

	-- 设备是否有父级
	SELECT ParentId INTO v_ParentId FROM TBL_ConfigureMold WHERE ConfigUrl LIKE CONCAT('%/',v_BaseEquipmentId,'/%') GROUP BY ConfigId DESC LIMIT 1;
	
	-- 下一个编号
	SELECT MAX(ConfigId) INTO v_NextConfigId FROM TBL_ConfigureMold;
	IF v_NextConfigId IS NULL THEN
		SET v_NextConfigId = 100000001;
	ELSE
		SET v_NextConfigId = v_NextConfigId + 1;
	END IF;

	-- 文本图标
  CASE v_EquipmentTypeId
		WHEN '1'  THEN
			SET v_FontChart = 'fa-bolt';
		WHEN '2'  THEN
			SET v_FontChart = 'fa-bolt';
		WHEN '4'  THEN
			SET v_FontChart = 'fa-bolt';
		WHEN '5'  THEN
			SET v_FontChart = 'fa-hdd-o';
		WHEN '7'  THEN
			SET v_FontChart = 'fa-snowflake-o';
		WHEN '10'  THEN
			SET v_FontChart = 'fa-columns';
			IF v_BaseEquipmentId = '1006' THEN
				SET v_FontChart = 'fa-thermometer-half';
			END IF;
		ELSE 
			SET v_FontChart = 'fa-server';
  END CASE;

	IF v_ParentId IS NULL THEN
		-- 显示顺序
		SELECT MAX(DisplayIndex) INTO v_DisplayIndex FROM TBL_ConfigureMold WHERE ParentId IS NULL;
		IF v_DisplayIndex IS NULL THEN
			SET v_DisplayIndex = 1;
		ELSE
			SET v_DisplayIndex = v_DisplayIndex + 1;
		END IF;

		SELECT ConfigId INTO v_ParentId FROM TBL_ConfigureMold WHERE ConfigName = v_BaseEquipmentName;
		IF v_ParentId IS NULL THEN
			-- 新增父级
			INSERT INTO TBL_ConfigureMold(ConfigId,ConfigName,FontChart,ConfigUrl,EquipmentId,DisplayIndex,DisplayType,ParentId,Visible,Description) 
				VALUES(v_NextConfigId,v_BaseEquipmentName,v_FontChart,NULL,NULL,v_DisplayIndex,0,NULL,1,NULL);
			SET v_ParentId = v_NextConfigId;-- 父级编号
			SET v_NextConfigId = v_NextConfigId +1;
		END IF;
	END IF;
	
	SET v_ConfigUrl = CONCAT('#/device/',v_BaseEquipmentId,'/diagram');

	SELECT MAX(DisplayIndex) INTO v_DisplayIndex FROM TBL_ConfigureMold WHERE ParentId = v_ParentId;
	IF v_DisplayIndex IS NULL THEN
		SET v_DisplayIndex = 1;
	ELSE
		SET v_DisplayIndex = v_DisplayIndex + 1;
	END IF;
	-- 新增子集
	INSERT INTO TBL_ConfigureMold(ConfigId,ConfigName,FontChart,ConfigUrl,EquipmentId,DisplayIndex,DisplayType,ParentId,Visible,Description) 
		VALUES(v_NextConfigId,v_EquipmentName,NULL,v_ConfigUrl,v_EquipmentId,v_DisplayIndex,0,v_ParentId,1,NULL);
END;



-- 修改设备配置信息
DROP PROCEDURE IF EXISTS PRO_UpdateEqupment;

CREATE PROCEDURE `PRO_UpdateEqupment`(
v_EqupmentId	INT,
v_EquipmentName	VARCHAR(128),
v_Vendor	VARCHAR(255),
v_PortNo	INT,
v_PortType	VARCHAR(20),
v_Setting	VARCHAR(25),
v_Address	VARCHAR(255))
BEGIN
	DECLARE v_SamplerUnitId INT;
  DECLARE v_PortName VARCHAR(20);
	DECLARE v_PortId	INT;
	
	SET v_PortName = CONCAT("COM",v_PortNo);
	SELECT SamplerUnitId INTO v_SamplerUnitId FROM TBL_Equipment WHERE EquipmentId = v_EqupmentId;
	SELECT A.PortId INTO v_PortId FROM TSL_Port A 
	LEFT JOIN TSL_SamplerUnit B ON A.PortId = B.PortId 
	WHERE B.SamplerUnitId = v_SamplerUnitId;

	UPDATE TBL_Equipment SET EquipmentName = v_EquipmentName , Vendor = v_Vendor WHERE EquipmentId = v_EqupmentId;

	UPDATE TSL_Port SET PortNo = v_PortNo , PortName = v_PortName , PortType = v_PortType , Setting = v_Setting WHERE PortId = v_PortId;

	UPDATE TSL_SamplerUnit SET Address = v_Address WHERE SamplerUnitId = v_SamplerUnitId;
END;

-- 校验设备的名称与通道的地址
DROP PROCEDURE IF EXISTS PRO_CheckEqupmentConfig;

CREATE PROCEDURE `PRO_CheckEqupmentConfig`(
v_EqupmentId	INT,
v_EquipmentName	VARCHAR(128),
v_PortNo	INT,
v_Address	VARCHAR(255),
OUT v_Result VARCHAR(255)
)
BEGIN
	DECLARE v_Count INT;
	DECLARE v_SamplerUnitId INT;
	DECLARE v_PortId	INT;
  
	SELECT COUNT(*) INTO v_Count FROM TBL_Equipment WHERE EquipmentName = v_EquipmentName AND EquipmentId <> v_EqupmentId;
	
	IF v_Count > 0 THEN
		SET v_Result = 'Name Exists';
	ELSE
		SELECT SamplerUnitId INTO v_SamplerUnitId FROM TBL_Equipment WHERE EquipmentId = v_EqupmentId;
		SELECT PortId INTO v_PortId FROM TSL_Port WHERE PortNo = v_PortNo;
		
		IF v_SamplerUnitId IS NULL THEN
			SELECT COUNT(*) INTO v_Count FROM TSL_Port A 
			LEFT JOIN TSL_SamplerUnit B ON A.PortId = B.PortId 
			WHERE A.PortNo = v_PortNo AND B.SamplerUnitId IS NOT NULL AND B.Address = v_Address;
		ELSE
			SELECT COUNT(*) INTO v_Count FROM TSL_Port A 
			LEFT JOIN TSL_SamplerUnit B ON A.PortId = B.PortId 
			WHERE A.PortNo = v_PortNo AND B.SamplerUnitId <> v_SamplerUnitId AND B.Address = v_Address;
		END IF;

		IF v_Count > 0 THEN
			SET v_Result = 'Address Exists';
		ELSE
			SET v_Result = 'OK';
		END IF;
	END IF;
END;


-- 查询MDC机柜相关的资产信息
DROP PROCEDURE IF EXISTS PRO_SelectCabinetAssets;
CREATE PROCEDURE PRO_SelectCabinetAssets(
	v_MDCId INT,
	v_CabinetId INT
)
BEGIN
	DECLARE v_CabinetNo VARCHAR(10);

	IF v_CabinetId > 10 THEN
		SET v_CabinetNo = v_CabinetId;
	ELSE
		SET v_CabinetNo = CONCAT('0',v_CabinetId);
	END IF;
	
	SELECT C.* FROM (
		SELECT A.CabinetId,B.AssetsCode,A.DeviceName,B.AssetType,B.AssetStyle,B.Vendor,B.UsedDate,B.Responsible,B.Position,B.`Status` 
		FROM MDC_CabinetDeviceMap A 
		LEFT JOIN TBL_AssetsManager B ON A.DeviceName = B.AssetsName AND B.EquipmentId IS NULL 
		WHERE A.DeviceId IS NULL 
		UNION
		SELECT A.CabinetId,B.AssetsCode,B.AssetsName,B.AssetType,B.AssetStyle,B.Vendor,B.UsedDate,B.Responsible,B.Position,B.`Status` 
		FROM MDC_CabinetDeviceMap A 
		LEFT JOIN TBL_AssetsManager B ON A.DeviceId = B.EquipmentId 
		WHERE A.DeviceId IS NOT NULL
	) C 
	LEFT JOIN Cabinet D ON C.CabinetId = D.Id 
	WHERE D.MDCId = v_MDCId AND C.CabinetId LIKE CONCAT('%',v_CabinetNo) ORDER BY C.CabinetId;
END;

-- 资产管理一键生成
DROP PROCEDURE IF EXISTS PRO_BatchAssetsManager;
CREATE PROCEDURE PRO_BatchAssetsManager()
BEGIN
	DECLARE v_CabinetId INT;
	DECLARE v_DeviceName VARCHAR(255);
	DECLARE v_DeviceId INT;
	DECLARE v_UIndex INT;
	DECLARE v_UHeight INT;
	DECLARE v_Count INT;
	DECLARE v_MaxAssetsId INT;
	DECLARE v_CabinetName VARCHAR(255);
	DECLARE v_CabinetType VARCHAR(255);
	DECLARE v_AssetType VARCHAR(50);
	DECLARE v_EquipmentBaseType INT;
	DECLARE v_EquipmentTemplateId INT;
	DECLARE v_Position VARCHAR(255);

	DECLARE done INT DEFAULT FALSE;
	DECLARE cur_CabinetDeviceMap CURSOR FOR (SELECT CabinetId,DeviceName,DeviceId,UIndex,UHeight FROM MDC_CabinetDeviceMap);
	DECLARE cur_Equipment CURSOR FOR (SELECT EquipmentId,EquipmentName FROM TBL_Equipment);

	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

	OPEN cur_CabinetDeviceMap;


	-- 获取最大的资产编号
	SELECT MAX(AssetsId) INTO v_MaxAssetsId FROM TBL_AssetsManager;
	IF v_MaxAssetsId IS NOT NULL THEN
		SET v_MaxAssetsId = v_MaxAssetsId + 1;
	ELSE
		SET v_MaxAssetsId = 100000001;
	END IF;

	read_loop: LOOP
		FETCH cur_CabinetDeviceMap INTO v_CabinetId,v_DeviceName,v_DeviceId,v_UIndex,v_UHeight;
		IF done THEN
			LEAVE read_loop;
		END IF;
		-- 生成资产编码
		SELECT `Name` INTO v_CabinetName FROM Cabinet WHERE Id = v_CabinetId;

		IF v_DeviceId IS NOT NULL THEN
			SELECT substring_index(A.ProtocolCode,'-',1) INTO v_CabinetType FROM TBL_EquipmentTemplate A 
			LEFT JOIN TBL_Equipment B ON A.EquipmentTemplateId = B.EquipmentTemplateId 
			WHERE B.EquipmentId = v_DeviceId;
		ELSE
			SET v_CabinetType = 'RING';
		END IF;

		SELECT MAX(CAST(substring_index(AssetsCode,'-',-1) AS SIGNED)) INTO v_Count FROM TBL_AssetsManager WHERE AssetsCode LIKE CONCAT(v_CabinetType,"-%");
		IF v_Count IS NULL THEN
			SET v_Count = 1;
		ELSE
			SET v_Count = v_Count + 1;
		END IF;

		IF v_Count < 10 THEN
			SET v_CabinetType = CONCAT(v_CabinetType,"-00",v_Count);
		ELSEIF v_Count < 100 THEN
			SET v_CabinetType = CONCAT(v_CabinetType,"-0",v_Count);
		ELSE
			SET v_CabinetType = CONCAT(v_CabinetType,"-",v_Count);
		END IF;
			
		IF v_UHeight > 1 THEN
			SET v_Position = CONCAT(v_CabinetName," U:[",(v_UIndex+1),"-",(v_UIndex+v_UHeight),"]");
		ELSE
			SET v_Position = CONCAT(v_CabinetName," U:[",(v_UIndex+1),"]");
		END IF;
		-- 监控设备，根据设备编号判断；否则非监控设备，根据设备名称判断
		IF v_DeviceId IS NOT NULL THEN
			SELECT COUNT(*) INTO v_Count FROM TBL_AssetsManager WHERE EquipmentId = v_DeviceId;

			IF v_Count = 0 THEN
				-- 获取设备类型
				SELECT A.BaseEquipmentName INTO v_AssetType FROM TBL_EquipmentBaseType A 
				LEFT JOIN TBL_EquipmentTemplate B ON A.BaseEquipmentId = B.EquipmentBaseType 
				LEFT JOIN TBL_Equipment C ON B.EquipmentTemplateId = C.EquipmentTemplateId 
				WHERE C.EquipmentId = v_DeviceId;

				SELECT A.EquipmentBaseType,A.EquipmentTemplateId INTO v_EquipmentBaseType,v_EquipmentTemplateId FROM TBL_EquipmentTemplate A 
				LEFT JOIN TBL_Equipment B ON A.EquipmentTemplateId = B.EquipmentTemplateId
				WHERE B.EquipmentId = v_DeviceId;

				IF v_EquipmentBaseType = 1004 THEN
					CALL PRO_InsertIOAssets(v_DeviceId,v_EquipmentTemplateId,v_CabinetType,v_AssetType,v_Position);
					
					SELECT MAX(AssetsId) INTO v_MaxAssetsId FROM TBL_AssetsManager;
					IF v_MaxAssetsId IS NOT NULL THEN
						SET v_MaxAssetsId = v_MaxAssetsId + 1;
					ELSE
						SET v_MaxAssetsId = 100000001;
					END IF;
				ELSE 
					INSERT INTO TBL_AssetsManager(AssetsId,AssetsCode,CabinetId,AssetsName,AssetType,AssetStyle,EquipmentId,Vendor,UsedDate,Responsible,Position,UIndex,UHeight,`Status`,Description)
					VALUES(v_MaxAssetsId,v_CabinetType,v_CabinetId,v_DeviceName,v_AssetType,NULL,v_DeviceId,NULL,SYSDATE(),NULL,v_Position,v_UIndex,v_UHeight,1,NULL);

					SET v_MaxAssetsId = v_MaxAssetsId + 1;
				END IF;
			END IF;
		ELSE
			SELECT COUNT(*) INTO v_Count FROM TBL_AssetsManager WHERE AssetsName = v_DeviceName;

			IF v_Count = 0 THEN
				INSERT INTO TBL_AssetsManager(AssetsId,AssetsCode,CabinetId,AssetsName,AssetType,AssetStyle,EquipmentId,Vendor,UsedDate,Responsible,Position,UIndex,UHeight,`Status`,Description)
				VALUES(v_MaxAssetsId,v_CabinetType,v_CabinetId,v_DeviceName,'动环设备',NULL,NULL,NULL,SYSDATE(),NULL,v_Position,v_UIndex,v_UHeight,1,NULL);

				SET v_MaxAssetsId = v_MaxAssetsId + 1;
			END IF;
		END IF;

	END LOOP;
	CLOSE cur_CabinetDeviceMap;

	SET done = 0;

	-- 没有配置到MDC的设备
	OPEN cur_Equipment;
	read_loop: LOOP
		FETCH cur_Equipment INTO v_DeviceId,v_DeviceName;
		
		IF done THEN
			LEAVE read_loop;
		END IF;

		-- 生成资产编码
		SELECT substring_index(A.ProtocolCode,'-',1) INTO v_CabinetType FROM TBL_EquipmentTemplate A 
		LEFT JOIN TBL_Equipment B ON A.EquipmentTemplateId = B.EquipmentTemplateId 
		WHERE B.EquipmentId = v_DeviceId;
		SELECT MAX(CAST(substring_index(AssetsCode,'-',-1) AS SIGNED)) INTO v_Count FROM TBL_AssetsManager WHERE AssetsCode LIKE CONCAT(v_CabinetType,"%");
		IF v_Count IS NULL THEN
			SET v_Count = 1;
		ELSE
			SET v_Count = v_Count + 1;
		END IF;
		IF v_Count < 10 THEN
			SET v_CabinetType = CONCAT(v_CabinetType,"-00",v_Count);
		ELSEIF v_Count < 100 THEN
			SET v_CabinetType = CONCAT(v_CabinetType,"-0",v_Count);
		ELSE
			SET v_CabinetType = CONCAT(v_CabinetType,"-",v_Count);
		END IF;


		SELECT COUNT(*) INTO v_Count FROM TBL_AssetsManager WHERE EquipmentId = v_DeviceId;

		IF v_Count = 0 THEN
			-- 获取设备类型
			SELECT A.BaseEquipmentName INTO v_AssetType FROM TBL_EquipmentBaseType A 
			LEFT JOIN TBL_EquipmentTemplate B ON A.BaseEquipmentId = B.EquipmentBaseType 
			LEFT JOIN TBL_Equipment C ON B.EquipmentTemplateId = C.EquipmentTemplateId 
			WHERE C.EquipmentId = v_DeviceId;

			SELECT A.EquipmentBaseType,A.EquipmentTemplateId INTO v_EquipmentBaseType,v_EquipmentTemplateId FROM TBL_EquipmentTemplate A 
			LEFT JOIN TBL_Equipment B ON A.EquipmentTemplateId = B.EquipmentTemplateId
			WHERE B.EquipmentId = v_DeviceId;
			
			IF v_EquipmentBaseType = 1004 THEN
				CALL PRO_InsertIOAssets(v_DeviceId,v_EquipmentTemplateId,v_CabinetType,v_AssetType,NULL);
					
				SELECT MAX(AssetsId) INTO v_MaxAssetsId FROM TBL_AssetsManager;
				IF v_MaxAssetsId IS NOT NULL THEN
					SET v_MaxAssetsId = v_MaxAssetsId + 1;
				ELSE
					SET v_MaxAssetsId = 100000001;
				END IF;
			ELSE 
				INSERT INTO TBL_AssetsManager(AssetsId,AssetsCode,CabinetId,AssetsName,AssetType,AssetStyle,EquipmentId,Vendor,UsedDate,Responsible,Position,UIndex,UHeight,`Status`,Description)
				VALUES(v_MaxAssetsId,v_CabinetType,NULL,v_DeviceName,v_AssetType,NULL,v_DeviceId,NULL,SYSDATE(),NULL,NULL,NULL,NULL,1,NULL);

				SET v_MaxAssetsId = v_MaxAssetsId + 1;
			END IF;
		END IF;
	END LOOP;
	CLOSE cur_Equipment;
END;



DROP PROCEDURE IF EXISTS PRO_InsertIOAssets;
CREATE PROCEDURE PRO_InsertIOAssets(
	v_EquipmentId INT,
	v_EquipmentTemplateId INT,
	v_CabinetType VARCHAR(255),
	v_AssetType VARCHAR(50),
	v_Position VARCHAR(255)
)
BEGIN
	DECLARE v_EquipmentName VARCHAR(50);
	DECLARE v_SignalName VARCHAR(50);
	DECLARE v_Count INT;
	DECLARE v_AssetsName VARCHAR(50);
	DECLARE v_MaxAssetsId INT;
	DECLARE v_Index INT;
	DECLARE v_CodeType VARCHAR(255);
	DECLARE v_AssetsCode VARCHAR(255);
	DECLARE v_CabinetId INT;
	DECLARE v_UIndex INT;
	DECLARE v_UHeight INT;
	DECLARE done INT DEFAULT FALSE;

	DECLARE cur_DeviceList CURSOR FOR (SELECT SignalName FROM TBL_Signal WHERE BaseTypeId IS NOT NULL AND SignalId <> -3 AND EquipmentTemplateId = v_EquipmentTemplateId);
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

	SELECT CabinetId,UIndex,UHeight INTO v_CabinetId,v_UIndex,v_UHeight FROM Mdc_CabinetDeviceMap LIMIT 1;

	SELECT EquipmentName INTO v_EquipmentName 
	FROM TBL_Equipment WHERE EquipmentId = v_EquipmentId;
	-- 获取最大的资产编号
	SELECT MAX(AssetsId) INTO v_MaxAssetsId FROM TBL_AssetsManager;
	IF v_MaxAssetsId IS NOT NULL THEN
		SET v_MaxAssetsId = v_MaxAssetsId + 1;
	ELSE
		SET v_MaxAssetsId = 100000001;
	END IF;

	SET v_CodeType = substring_index(v_CabinetType,'-',1);
	SELECT MAX(CAST(substring_index(AssetsCode,'-',-1) AS SIGNED)) INTO v_Index FROM TBL_AssetsManager WHERE AssetsCode LIKE CONCAT(v_CodeType,'-%');

	-- 采集器的IO设备		IF v_Count IS NULL THEN
	IF v_Index IS NULL THEN
		SET v_Index = 1;
	ELSE
	SET v_Index = v_Index + 1;
	END IF;
	OPEN cur_DeviceList;
	read_loop: LOOP
		FETCH cur_DeviceList INTO v_SignalName;

		IF done THEN
			LEAVE read_loop;
		END IF;

		SET v_AssetsName = CONCAT(v_EquipmentName,'-',v_SignalName);

		SELECT COUNT(*) INTO v_Count FROM TBL_AssetsManager WHERE EquipmentId = v_EquipmentId AND AssetsName = v_AssetsName;
		IF v_Count = 0 THEN
			IF v_Index < 10 THEN
				SET v_AssetsCode = CONCAT(v_CodeType,"-00",v_Index);
			ELSEIF v_Count < 100 THEN
				SET v_AssetsCode = CONCAT(v_CodeType,"-0",v_Index);
			ELSE
				SET v_AssetsCode = CONCAT(v_CodeType,"-",v_Index);
			END IF;

			INSERT INTO TBL_AssetsManager(AssetsId,AssetsCode,CabinetId,AssetsName,AssetType,AssetStyle,EquipmentId,Vendor,UsedDate,Responsible,Position,UIndex,UHeight,`Status`,Description) 
			VALUES(v_MaxAssetsId,v_AssetsCode,v_CabinetId,v_AssetsName,v_AssetType,NULL,v_EquipmentId,NULL,SYSDATE(),
					NULL,v_Position,v_UIndex,v_UHeight,1,NULL);
			
			SET v_MaxAssetsId = v_MaxAssetsId + 1;
			SET v_Index = v_Index + 1;
		END IF;
	END LOOP;
	CLOSE cur_DeviceList;

END;


-- 初始化RTSP分流视频
DROP PROCEDURE IF EXISTS PRO_InitRtspVideo;
CREATE PROCEDURE PRO_InitRtspVideo(
v_Id INT ,
v_VideoName	VARCHAR(50),
v_Path Text
)
BEGIN
	DECLARE v_Count INT;
	DECLARE v_NextId INT;
	
	SELECT COUNT(*) INTO v_Count FROM TBL_RtspVideo WHERE Id = v_Id;
	
	IF v_Count > 0 THEN -- 修改
		UPDATE TBL_RtspVideo SET VideoName = v_VideoName,Path = v_Path WHERE Id = v_Id;
		SET v_NextId = v_Id;
	ELSE -- 新增
		SELECT MAX(Id) INTO v_NextId FROM TBL_RtspVideo;
		IF v_NextId IS NULL THEN
			SET v_NextId = 100000001;
		ELSE
			SET v_NextId = v_NextId + 1;
		END IF;

		INSERT INTO TBL_RtspVideo(id,VideoName,Path) VALUES(v_NextId,v_VideoName,v_Path);
	END IF;
	
	SELECT Id FROM TBL_RtspVideo WHERE Id = v_NextId;
END;

-- 初始化MDC冷通道设备位置表
DROP PROCEDURE IF EXISTS PRO_InitAisleDeviceLocation;
CREATE PROCEDURE PRO_InitAisleDeviceLocation(
v_Id INT,
v_TableId	INT,
v_TableName	VARCHAR(255),
v_DeviceType VARCHAR(50),
v_TableRow INT,
v_TableCol INT
)
BEGIN
	DECLARE v_Count INT;
	DECLARE v_NextId INT;

	IF v_Id > 0 THEN
		UPDATE MDC_AisleDeviceLocation SET TableId = v_TableId,TableName = v_TableName,DeviceType = v_DeviceType WHERE Id = v_Id;
	ELSE
		SELECT MAX(Id) INTO v_NextId FROM MDC_AisleDeviceLocation;
		IF v_NextId IS NULL THEN
			SET v_NextId = 100000001;
		ELSE
			SET v_NextId = v_NextId + 1;
		END IF;

		INSERT INTO MDC_AisleDeviceLocation (Id,TableId,TableName,DeviceType,TableRow,TableCol) VALUES(v_NextId,v_TableId,v_TableName,v_DeviceType,v_TableRow,v_TableCol);
	END IF;
END;

-- 初始化摄像机
DROP PROCEDURE IF EXISTS PRO_InitVideoCamera;
CREATE PROCEDURE PRO_InitVideoCamera(
v_EquipmentId INT,
v_EquipmentName	VARCHAR(50),
v_VideoType INT,
v_IpAddress VARCHAR(255),
v_Port INT,
v_ChanNum INT,
v_UserName VARCHAR(50),
v_UserPwd VARCHAR(50),
v_CameraNum INT
)
BEGIN
	DECLARE v_Count INT;
	DECLARE v_NextId INT;
	DECLARE v_StationId INT;
	DECLARE i INT;
	DECLARE v_NextCameraId INT;
	DECLARE v_CameraName VARCHAR(50);

	SELECT COUNT(*) INTO v_Count FROM TBL_VideoEquipment WHERE EquipmentId = v_EquipmentId;
	SELECT StationId INTO v_StationId FROM TBL_Station LIMIT 0,1;

	IF v_Count > 0 THEN
		SET v_NextId = v_EquipmentId;

		UPDATE TBL_VideoEquipment SET StationId = v_StationId,EquipmentName = v_EquipmentName,VideoType = v_VideoType,
			IpAddress = v_IpAddress,`Port` = v_Port,ChanNum = v_ChanNum,UserName = v_UserName,UserPwd = v_UserPwd 
		WHERE EquipmentId = v_NextId;
	ELSE
		SELECT MAX(EquipmentId) INTO v_NextId FROM TBL_VideoEquipment;
		IF v_NextId IS NULL THEN
			SET v_NextId = 100000001;
		ELSE
			SET v_NextId = v_NextId + 1;
		END IF;
		
		INSERT INTO TBL_VideoEquipment(EquipmentId,StationId,EquipmentName,VideoType,IpAddress,`Port`,ChanNum,UserName,UserPwd,AddTime) VALUES(v_NextId,v_StationId,v_EquipmentName,v_VideoType,v_IpAddress,v_Port,v_ChanNum,v_UserName,v_UserPwd,SYSDATE());
	END IF;

	DELETE FROM TBL_Camera WHERE EquipmentId = v_NextId;

	SELECT MAX(CameraId) INTO v_NextCameraId FROM TBL_Camera;
	SET i = 1;
	WHILE i <= v_CameraNum DO
		SET v_NextCameraId = v_NextCameraId + 1;
		SET v_CameraName = CONCAT("Camera",i);

		INSERT INTO TBL_Camera VALUES(v_NextCameraId,v_NextId,v_CameraName,i,SYSDATE());
		
		SET i = i + 1;
	END WHILE;

	SELECT EquipmentId FROM TBL_VideoEquipment WHERE EquipmentId = v_NextId;
END;


-- 添加门禁控制
DROP PROCEDURE IF EXISTS PBL_SaveDoorControl;
CREATE PROCEDURE PBL_SaveDoorControl(v_StationId   	INT       	,
v_HostId      	INT   	   	,
v_EquipmentId 	INT		    ,
v_ControlId    	INT        	,
v_CmdToken	NATIONAL VARCHAR(500),
v_UserId   		INT        	,
v_ParameterValues NATIONAL VARCHAR(500),
v_Description		NATIONAL VARCHAR(255),
v_DirectInsert	INT ,INOUT SWP_Ret_Value INT)
   SWL_return:
BEGIN
-- 处理：
-- 保存需要下发的控制
-- 1 工程状态不处理
-- 2 重复控制不处理

-- 返回结果
-- -1 不可知错误
--  0 成功
--  1 参数为0或空
--  2 该活动控制已经存在
--  3 工程状态数据一律丢弃
--  4 没有下发控制权限

   DECLARE v_StartIndex INT;
   DECLARE v_EndIndex INT;
   DECLARE v_ControlType INT;
   DECLARE v_ControlSeverity INT;
   DECLARE v_SendControl INT;
   DECLARE v_Return INT;
   DECLARE v_EquipmentCategory INT;
   DECLARE v_ControlCategory INT;
   DECLARE v_StationName NATIONAL VARCHAR(255);
   DECLARE v_EquipmentName NATIONAL VARCHAR(255);
   DECLARE v_ControlName NATIONAL VARCHAR(255);
   DECLARE v_BaseTypeId NUMERIC(10,0);
   DECLARE v_BaseTypeName NATIONAL VARCHAR(255);
   DECLARE v_EquipmentTemplateId INT;
   DECLARE v_CurrentTime DATETIME;
   DECLARE v_StartTime DATETIME;
   DECLARE v_MaxSerialNo INT;
   DECLARE v_StationState INT;
   DECLARE v_ControlResultType INT;
   DECLARE v_ControlPhase INT;
   DECLARE v_GetDate DATETIME;
   DECLARE v_ExecuteName NATIONAL VARCHAR(255);
   DECLARE v_RecordMsg NATIONAL VARCHAR(1000);
   DECLARE v_SGetDate NATIONAL VARCHAR(255);
   DECLARE v_SUserId NATIONAL VARCHAR(255);
   DECLARE v_BaseCondId INT;
   DECLARE v_DoorType INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;

-- 错误处理
/*
   IF v_DirectInsert is null then
      set v_DirectInsert = 0;
   END IF;*/
   SET @SWV_Error = 0;
   IF v_StationId = 0 OR v_EquipmentId = 0 OR v_ControlId = 0
   OR v_StationId IS NULL OR v_EquipmentId  IS NULL OR v_ControlId IS NULL then

      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;

-- 是否有下发控制权限 : 都有下发控制权限
   /*SET v_SendControl = 50;
   CALL PAM_OperationPrivilege(v_SendControl,v_UserId,v_Return);
   IF v_Return <> 1 then

      SET SWP_Ret_Value = 4;
      LEAVE SWL_return;
   end if;*/

-- 控制结果类型(未返回)
   SET v_ControlResultType = 4;
-- 控制执行阶段(待命)
   SET v_ControlPhase = 1;
-- 当前时间
   SET v_GetDate = CURRENT_TIMESTAMP;

-- HostId
   IF v_HostId = -1 then

      select   MonitorUnitId INTO v_HostId FROM TBL_Equipment WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId;
   end if;				

   IF EXISTS(SELECT 'X'
   FROM TBL_ActiveControl
   WHERE StationId = v_StationId AND EquipmentId = v_EquipmentId AND ControlId = v_ControlId
   AND ParameterValues = v_ParameterValues AND CmdToken = v_CmdToken AND ControlExecuterId = v_UserId AND EndTime IS NULL) then

-- 存在
      SET SWP_Ret_Value = 2;
      LEAVE SWL_return;
   ELSE
-- Station Name
      select   StationName INTO v_StationName FROM TBL_Station WHERE StationId = v_StationId;

-- SQLWAYS_EVAL# 局站，无法给设备发送控制命令，36
-- 非联网状态下的数据一律丢弃
-- SQLWAYS_EVAL# = PNL_GetStationState @StationId, @GetDate
-- SQLWAYS_EVAL# <> 1
-- BEGIN
-- 	RETURN 3
-- END

-- Equipment Name
      select   EquipmentName, EquipmentTemplateId, EquipmentCategory INTO v_EquipmentName,v_EquipmentTemplateId,v_EquipmentCategory FROM TBL_Equipment WHERE EquipmentId = v_EquipmentId AND StationId  = v_StationId;

-- Control
      select   tc.ControlName, tc.ControlSeverity, tc.ControlType, cb.BaseTypeId, cb.BaseTypeName, ControlCategory INTO v_ControlName,v_ControlSeverity,v_ControlType,v_BaseTypeId,
      v_BaseTypeName,v_ControlCategory FROM TBL_Control tc
      LEFT JOIN TBL_CommandBaseDic cb ON tc.BaseTypeId = cb.BaseTypeId WHERE ControlId = v_ControlId AND EquipmentTemplateId = v_EquipmentTemplateId;
      IF v_BaseTypeId IS NOT NULL AND v_BaseTypeId <> 0 then

         select   BaseCondId INTO v_BaseCondId FROM TBL_ControlMeanings WHERE EquipmentTemplateId = v_EquipmentTemplateId
         AND ControlId = v_ControlId
         AND CAST(ParameterValue AS CHAR(10)) = ltrim(rtrim(v_ParameterValues));
      end if;

-- UserName
      SET v_ExecuteName = '';
      select   UserName INTO v_ExecuteName FROM TBL_Account WHERE UserId = v_UserId;

-- 当前时间
      SET v_CurrentTime = CURRENT_TIMESTAMP;
      CALL PBL_GetSystemCurrentTime(v_StartTime,v_CurrentTime,SWP_Ret_Value);

-- SQLWAYS_EVAL# BEGIN
      SET v_DoorType = -1;
      IF v_EquipmentCategory = 82 then

         select   A.DoorControlId INTO v_DoorType FROM TBL_Door A
         INNER JOIN TBL_Equipment B ON A.StationId = B.StationId AND A.EquipmentId = B.EquipmentId WHERE B.StationId = v_StationId AND B.EquipmentId = v_EquipmentId;
      end if;
      IF v_DoorType = 4 AND v_CmdToken = '22' then

         SET v_ParameterValues = '0,0.0';
      end if;
      IF v_DoorType = 4 AND v_CmdToken = '23' then

         SET v_ParameterValues = '0,1';
      end if;
		
-- INSERT
  INSERT INTO TBL_ActiveControl(StationId				,
StationName			,
EquipmentId			,
EquipmentName			,
ControlId				,
ControlName			,
ControlSeverity		,
CmdToken				,
ControlPhase			,
StartTime				,
EndTime				,
ConfirmTime			,
ConfirmerId			,
ConfirmerName			,
ControlResultType		,
ControlResult			,
ControlExecuterId		,
ControlExecuterIdName	,
ControlType			,
ActionId				,
Description			,
Retry					,
BaseTypeId			,
BaseTypeName			,
ParameterValues		,
BaseCondId)
VALUES(v_StationId,
v_StationName,
v_EquipmentId,
v_EquipmentName,
v_ControlId,
v_ControlName,
v_ControlSeverity,
v_CmdToken,
v_ControlPhase,
v_StartTime,
NULL,
NULL,
NULL,
NULL,
v_ControlResultType,
NULL,
v_UserId,
v_ExecuteName,
v_ControlType,
NULL,
v_Description,
0,
v_BaseTypeId,
v_BaseTypeName,
v_ParameterValues,
v_BaseCondId);
      IF @SWV_Error <> 0 then
         SET SWP_Ret_Value = -1;
         LEAVE SWL_return;
      end if;
      SET SWP_Ret_Value = 0;
      LEAVE SWL_return;
   end if;
END;

-- 添加时间组过程
DROP PROCEDURE IF EXISTS PRO_InsertTimeGroup;
CREATE PROCEDURE PRO_InsertTimeGroup(
v_TimeGroupName VARCHAR(255)
)
BEGIN
	DECLARE v_MinTimeGroupId INT;
	DECLARE v_MaxTimeGroupId INT;
	DECLARE v_Count INT;
	DECLARE v_Cond INT DEFAULT 99999999;
	DECLARE v_TimeGroupId INT;
	DECLARE v_CurTimeGroupId INT;
	DECLARE v_i INT;
	DECLARE v_TimeSpanId INT;
	DECLARE done INT DEFAULT FALSE;
	DECLARE cur_TimeGroup CURSOR FOR (SELECT TimeGroupId FROM TBL_TimeGroup WHERE TimeGroupId <> v_Cond);
	
	SELECT MIN(TimeGroupID) INTO v_MinTimeGroupId FROM TBL_TimeGroup WHERE TimeGroupId <> v_Cond;
	SELECT MAX(TimeGroupID) INTO v_MaxTimeGroupId FROM TBL_TimeGroup WHERE TimeGroupId <> v_Cond;
	SELECT COUNT(*) INTO v_Count FROM TBL_TimeGroup WHERE TimeGroupId <> v_Cond;
	-- 获取TimeGroupId
	IF v_MaxTimeGroupId <> v_Count THEN
		-- 最大编号不等于总条数；中间有缺省编号
		IF v_MinTimeGroupId > 1 OR v_MinTimeGroupId IS NULL THEN
			SET v_TimeGroupId = 1;
		ELSE
			SET v_i = v_MinTimeGroupId;

			OPEN cur_TimeGroup;
			read_loop: LOOP
				FETCH cur_TimeGroup INTO v_CurTimeGroupId;
				IF done THEN
					LEAVE read_loop;
				END IF;

				IF v_i = v_CurTimeGroupId THEN
					SET v_i = v_i + 1;
				ELSE
					SET v_TimeGroupId = v_i;
					LEAVE read_loop;
				END IF;
			END LOOP;
			CLOSE cur_TimeGroup;
		END IF;
	ELSE
		IF v_MaxTimeGroupId IS NULL THEN
			SET v_TimeGroupId = 1;
		ELSE
			SET v_TimeGroupId = v_MaxTimeGroupId + 1;
		END IF;
	END IF;
	-- 添加时间组
	INSERT INTO TBL_TimeGroup(TimeGroupId,TimeGroupCategory,TimeGroupName,TimeGroupType,TimeGroupException,StartTime,EndTime,LastUpdateDate) 
		VALUES (v_TimeGroupId,1,v_TimeGroupName,10,0,SYSDATE(),'9999-01-01',SYSDATE());
	-- 添加时间范围
	SELECT MAX(TimeSpanId) INTO v_TimeSpanId FROM TBL_TimeGroupSpan;
	SET v_i = 1;
	WHILE v_i < 8 DO
		SET v_TimeSpanId = v_TimeSpanId + 1;
		
		INSERT INTO TBL_TimeGroupSpan(TimeSpanId,TimeGroupId,StartTime,EndTime,`Week`,TimeSpanChar,LastUpdateDate) 
			VALUES (v_TimeSpanId,v_TimeGroupId,SYSDATE(),'9999-01-01',v_i,'111111111111111111111111',SYSDATE());

		SET v_i = v_i+1;
	END WHILE;
END;

-- 用户操作日志存储过程
DROP PROCEDURE IF EXISTS PBL_InsertUserOperationLog;
CREATE PROCEDURE PBL_InsertUserOperationLog(
	v_OperationId INT,
	v_LogonId VARCHAR(128),
	v_IpAddress VARCHAR(50),
	v_EquipmentId INT,
	v_ControlBaseTypeId INT,
	v_ParameterValues VARCHAR(500),
	v_SequenceId VARCHAR(128),
	v_Description VARCHAR(255)
)BEGIN
	DECLARE v_NextId INT;
	DECLARE v_ControlId INT;
	DECLARE v_EventId INT;

	SELECT MAX(Id) INTO v_NextId FROM TBL_UserOperationLog;

	IF v_NextId IS NULL THEN
		SET v_NextId = 1;
	ELSE
		SET v_NextId = v_NextId + 1;
	END IF;

	-- 下发控制
	IF v_OperationId = 50 THEN
		SELECT A.ControlId INTO v_ControlId FROM TBL_Control A 
		LEFT JOIN TBL_Equipment B ON A.EquipmentTemplateId = B.EquipmentTemplateId
		WHERE A.BaseTypeId = v_ControlBaseTypeId AND B.EquipmentId = v_EquipmentId;
	END IF;

	-- 事件确定
	IF v_OperationId = 1 THEN
		SELECT EventId,EquipmentId INTO v_EventId,v_EquipmentId FROM TBL_ActiveEvent WHERE SequenceId = v_SequenceId;
		SELECT v_EventId,v_EquipmentId,v_SequenceId;
	END IF;

	INSERT INTO TBL_UserOperationLog(Id,OperationId,LogonId,IpAddress,EquipmentId,ControlId,ParameterValues,EventId,StartTime,Description) 
		VALUES(v_NextId,v_OperationId,v_LogonId,v_IpAddress,v_EquipmentId,v_ControlId,v_ParameterValues,v_EventId,SYSDATE(),v_Description);
END;



-- 新增/修改/删除Mdc_Environment
DROP PROCEDURE IF EXISTS PRO_DeleteAisleDeviceLocation;
CREATE PROCEDURE PRO_DeleteAisleDeviceLocation(v_Id INT)
BEGIN
	DECLARE v_Status INT;
	DECLARE v_TableId INT;
	DECLARE v_TableName VARCHAR(255);
	DECLARE v_DeviceType VARCHAR(50);
	
	SELECT TableId,TableName,DeviceType INTO v_TableId,v_TableName,v_DeviceType FROM MDC_AisleDeviceLocation WHERE Id = v_Id LIMIT 1;
	IF v_TableId IS NOT NULL THEN
		IF v_DeviceType = 'video' THEN
			-- TableId = EquipmentId
			DELETE FROM TBL_VideoEquipment WHERE EquipmentId = v_TableId;
		ELSEIF v_DeviceType = 'thermalHumidity' THEN
			-- TableId = Id
			DELETE FROM MDC_AisleThermalHumidity WHERE Id = v_TableId;
		ELSEIF v_DeviceType = 'rtspVideo' THEN
			DELETE FROM tbl_rtspvideo WHERE Id = v_TableId;
		ELSE
			-- TableId = Id
			DELETE FROM MDC_Environment WHERE Id = v_TableId;
		END IF;
		DELETE FROM MDC_AisleDeviceLocation WHERE Id = v_Id;
		
		SET v_Status = 1;
	ELSE
		SET v_Status = -1;
	END IF;

	SELECT v_Status;
END;

-- 添加机架的资产信息
DROP PROCEDURE IF EXISTS PRO_InsertRackAssetsManager;
CREATE PROCEDURE PRO_InsertRackAssetsManager(
	v_CabinetId INT,
	v_AssetsCode VARCHAR(255),
	v_DeviceStyle VARCHAR(255),
	v_UIndex INT,
	v_UHeight INT,
	v_Status VARCHAR(50)
)
BEGIN
	DECLARE v_MaxAssetsId INT;
	DECLARE v_DeviceId INT;
	DECLARE v_DeviceName VARCHAR(255);
	DECLARE v_Count INT;
	DECLARE v_DeviceType VARCHAR(255);
	DECLARE v_MaxId INT;
	
	IF v_Status IS NULL THEN
		SET v_Status = '1';
	END IF;
	
	-- 获取下个编号
	SELECT MAX(AssetsId) INTO v_MaxAssetsId FROM TBL_AssetsManager;
	IF v_MaxAssetsId IS NOT NULL THEN
		SET v_MaxAssetsId = v_MaxAssetsId + 1;
	ELSE
		SET v_MaxAssetsId = 100000001;
	END IF;
	
	-- 获取设备名称
	SELECT DeviceId,DeviceName INTO v_DeviceId,v_DeviceName FROM MDC_CabinetDeviceMap WHERE CabinetId = v_CabinetId AND UIndex = v_UIndex AND UHeight = v_UHeight;
	IF v_DeviceName IS NULL THEN
		-- 查询是否已经存在资产信息
		SELECT AssetsName INTO v_DeviceName FROM TBL_AssetsManager WHERE AssetsCode = v_AssetsCode;
		IF v_DeviceName IS NULL THEN
			SELECT COUNT(*) INTO v_Count FROM TBL_AssetsManager WHERE AssetsName LIKE CONCAT(v_DeviceStyle,'-%');
			IF v_Count = 0 THEN
				SET v_DeviceName = CONCAT(v_DeviceStyle,"-1");
			ELSE
				SET v_DeviceName = CONCAT(v_DeviceStyle,"-",v_Count+1);
			END IF;
		END IF;

		-- 添加机柜表不存在的设备
		SELECT MAX(Id) INTO v_MaxId FROM MDC_CabinetDeviceMap;
		IF v_MaxId IS NOT NULL THEN
			SET v_MaxId = v_MaxId + 1;
		ELSE
			SET v_MaxId = 100000001;
		END IF;
		INSERT INTO MDC_CabinetDeviceMap(Id,CabinetId,DeviceName,UIndex,UHeight) VALUES(v_MaxId,v_CabinetId,v_DeviceName,v_UIndex,v_UHeight);

	END IF;
	
	SELECT A.BaseEquipmentName INTO v_DeviceType FROM TBL_EquipmentBaseType A 
	LEFT JOIN TBL_EquipmentTemplate B ON A.BaseEquipmentId = B.EquipmentBaseType 
	LEFT JOIN TBL_Equipment C ON B.EquipmentTemplateId = C.EquipmentTemplateId 
	WHERE C.EquipmentId = v_DeviceId;

	IF v_DeviceType IS NULL THEN
		SET v_DeviceType = v_DeviceStyle;
	END IF;

	SELECT COUNT(*) INTO v_Count FROM TBL_AssetsManager WHERE AssetsCode = v_AssetsCode;
	IF v_Count = 0 THEN
		-- 新增数据
		INSERT INTO TBL_AssetsManager(AssetsId,AssetsCode,CabinetId,AssetsName,AssetType,AssetStyle,EquipmentId,UsedDate,Responsible,UIndex,UHeight,`Status`) 
			VALUES(v_MaxAssetsId,v_AssetsCode,v_CabinetId,v_DeviceName,v_DeviceType,v_DeviceStyle,v_DeviceId,SYSDATE(),'admin',v_UIndex,v_UHeight,v_Status);
	ELSE
		-- 修改数据
		UPDATE TBL_AssetsManager SET CabinetId = v_CabinetId,EquipmentId = v_DeviceId,AssetsName = v_DeviceName,
			AssetType = v_DeviceType,AssetStyle = v_DeviceStyle,UIndex = v_UIndex,UHeight = v_UHeight,`Status` = v_Status 
		WHERE AssetsCode = v_AssetsCode;
	END IF;

	SELECT * FROM TBL_AssetsManager WHERE AssetsCode = v_AssetsCode;
END;


-- 保存资产操作日志
DROP PROCEDURE IF EXISTS PBL_SaveAssetsManagerOperate;
CREATE PROCEDURE PBL_SaveAssetsManagerOperate(
	v_LogonId VARCHAR(128),-- 操作用户
	v_Type INT,-- 操作类型
	v_Mean INT,-- 含义类型
	v_CabinetId INT,-- 机柜编号
	v_AssetsCode VARCHAR(255), -- 资产编码
	v_UIndex INT,
	v_UHeight INT
)BEGIN
	-- v_Type 1:资产下架 | 2:添加机架 | 3:修改机架 | 4:删除机架 | 5:添加资产 | 6:修改资产 | 7:删除资产 | 8:结束告警
	-- v_Mean 1:自动上报 | 2:手动操作
	-- 资产下架，根据CabinetId查询TBL_AssetsManager表，Status列为0的表示下架，添加下架数据
	DECLARE v_OperateId INT;
	DECLARE v_AssetsId INT;
	DECLARE v_Code VARCHAR(255);
	DECLARE v_AssetsName VARCHAR(125);
	DECLARE v_AssetsStyle VARCHAR(125);
	DECLARE v_EquipmentId INT;
	DECLARE v_OperateType VARCHAR(255);
	DECLARE v_Meaning VARCHAR(255);
	DECLARE v_Status VARCHAR(50);

	IF v_Type = 1 THEN
		SET v_OperateType = '资产下架';
	ELSEIF v_Type = 2 THEN
		SET v_OperateType = '添加机架';
	ELSEIF v_Type = 3 THEN
		SET v_OperateType = '修改机架';
	ELSEIF v_Type = 4 THEN
		SET v_OperateType = '删除机架';
	ELSEIF v_Type = 5 THEN
		SET v_OperateType = '添加资产';
	ELSEIF v_Type = 6 THEN
		SET v_OperateType = '修改资产';
	ELSEIF v_Type = 7 THEN
		SET v_OperateType = '删除资产';
	ELSE
		SET v_OperateType = '结束告警';
	END IF;

	IF v_Mean = 1 THEN
		SET v_Meaning = '自动上报';
	ELSE
		SET v_Meaning = '手动操作';
	END IF;

	SELECT MAX(OperateId) INTO v_OperateId FROM TBL_AssetsManagerOperate;
	IF v_OperateId IS NULL THEN
		SET v_OperateId = 1000000001;
	ELSE
		SET v_OperateId = v_OperateId + 1;
	END IF;

	IF v_AssetsCode IS NOT NULL THEN
		SELECT AssetsId,AssetsCode,AssetsName,AssetStyle,EquipmentId,UIndex,UHeight,`Status` INTO
			v_AssetsId,v_Code,v_AssetsName,v_AssetsStyle,v_EquipmentId,v_UIndex,v_UHeight,v_Status FROM TBL_AssetsManager 
		WHERE AssetsCode = v_AssetsCode LIMIT 1;
	ELSE
		SELECT AssetsId,AssetsCode,AssetsName,AssetStyle,EquipmentId,UIndex,UHeight,`Status` INTO
			v_AssetsId,v_Code,v_AssetsName,v_AssetsStyle,v_EquipmentId,v_UIndex,v_UHeight,v_Status FROM TBL_AssetsManager 
		WHERE CabinetId = v_CabinetId AND UIndex = v_UIndex AND UHeight = v_UHeight LIMIT 1;
	END IF;

		INSERT INTO TBL_AssetsManagerOperate(OperateId,LoginId,AssetsId,AssetsCode,AssetsName,AssetsStyle,CabinetId,EquipmentId,UIndex,UHeight,OperateType,`Status`,Meaning,OperateDate) 
		VALUES(v_OperateId,v_LogonId,v_AssetsId,v_Code,v_AssetsName,v_AssetsStyle,v_CabinetId,v_EquipmentId,v_UIndex,v_UHeight,v_OperateType,v_Status,v_Meaning,SYSDATE());
END;


-- 删除资产信息
DROP PROCEDURE IF EXISTS PRO_DeleteRackAssetsManager;
CREATE PROCEDURE PRO_DeleteRackAssetsManager(
	v_CabinetId INT,
	v_AssetsCode VARCHAR(255),
	v_UIndex INT,
	v_UHeight INT
)
BEGIN
	IF v_AssetsCode IS NOT NULL THEN
		SELECT CabinetId,UIndex,UHeight INTO v_CabinetId,v_UIndex,v_UHeight FROM TBL_AssetsManager WHERE AssetsCode = v_AssetsCode;
	END IF;

	DELETE FROM TBL_AssetsManager WHERE CabinetId = v_CabinetId AND UIndex = v_UIndex AND UHeight = v_UHeight;
	DELETE FROM MDC_CabinetDeviceMap WHERE CabinetId = v_CabinetId AND UIndex = v_UIndex AND UHeight = v_UHeight;

	SELECT COUNT(*) FROM TBL_AssetsManager WHERE CabinetId = v_CabinetId AND `Status` = '0';
END;

-- 根据系统配置生成首页路径
DROP PROCEDURE IF EXISTS PRO_UpdateConfigureMoldHome;
CREATE PROCEDURE PRO_UpdateConfigureMoldHome(
	v_Versions VARCHAR(25),
	v_ParentConfigUrl VARCHAR(50),
	v_SubsetConfigUrl VARCHAR(50)
)
BEGIN
	DECLARE v_ConfigId INT;
	DECLARE v_SubConfigId INT;
	DECLARE v_MaxConfigId INT;
	DECLARE v_EquipmentId INT;

	SELECT ConfigId INTO v_ConfigId FROM TBL_ConfigureMold WHERE ParentId IS NULL ORDER BY DisplayIndex,ConfigId LIMIT 1;

	IF v_ConfigId IS NOT NULL THEN
		-- 修改父级路径
		UPDATE TBL_ConfigureMold SET ConfigUrl = v_ParentConfigUrl WHERE ConfigId = v_ConfigId;

		-- 判断子集路径
		IF v_SubsetConfigUrl IS NOT NULL THEN
			SELECT ConfigId INTO v_SubConfigId FROM TBL_ConfigureMold WHERE ParentId = v_ConfigId ORDER BY DisplayIndex,ConfigId LIMIT 1;

			IF v_SubConfigId IS NOT NULL THEN

				IF v_Versions = 'iview' THEN
					UPDATE TBL_ConfigureMold SET ConfigUrl = v_SubsetConfigUrl,Visible = 1,EquipmentId = NULL WHERE ConfigId = v_SubConfigId;
				ELSE
					SELECT EquipmentId INTO v_EquipmentId FROM TBL_Equipment A LEFT JOIN TBL_EquipmentTemplate B ON A.EquipmentTemplateId = B.EquipmentTemplateId WHERE B.EquipmentBaseType = 1004 LIMIT 1;

					UPDATE TBL_ConfigureMold SET ConfigUrl = v_SubsetConfigUrl,Visible = 1,EquipmentId = v_EquipmentId WHERE ConfigId = v_SubConfigId;
				END IF;
			ELSE
				SELECT MAX(ConfigId) INTO v_MaxConfigId FROM TBL_ConfigureMold;

				SET v_MaxConfigId = v_MaxConfigId + 1;

				INSERT INTO TBL_ConfigureMold(ConfigId,ConfigName,ConfigUrl,DisplayIndex,DisplayType,ParentId,Visible)
					VALUES(v_MaxConfigId,'系统概况',v_SubsetConfigUrl,1,0,v_ConfigId,1);
			END IF;
		ELSE
			UPDATE TBL_ConfigureMold SET Visible = 0 WHERE ParentId = v_ConfigId;
		END IF;
	END IF;
END;


-- 删除组态页面配置的空分支
DROP PROCEDURE IF EXISTS PRO_DelConfigureMold;
CREATE PROCEDURE PRO_DelConfigureMold(
v_EquipmentId			INT
)
BEGIN
	DECLARE v_ParentId INT;
	DECLARE v_count INT;
	DECLARE done INT DEFAULT FALSE;
	-- 父级游标
	DECLARE cur_ConfigureMold CURSOR FOR (SELECT ParentId FROM TBL_ConfigureMold WHERE EquipmentId = v_EquipmentId AND ParentId IS NOT NULL GROUP BY ParentId);

	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

	OPEN cur_ConfigureMold;
	read_loop: LOOP
		FETCH cur_ConfigureMold INTO v_ParentId;

		IF done THEN
			LEAVE read_loop;
		END IF;
		-- 父级下是否有其他子集
		SELECT COUNT(*) INTO v_count FROM TBL_ConfigureMold WHERE ParentId = v_ParentId;

		IF v_count = 1 THEN
			-- 如果没有其他子集，删除父级
			DELETE FROM TBL_ConfigureMold WHERE ConfigId = v_ParentId;
		END IF;

	END LOOP;
	CLOSE cur_ConfigureMold;

	-- 删除组态Mold中的设备
	DELETE FROM TBL_ConfigureMold WHERE EquipmentId = v_EquipmentId;
END;

-- ----------------------------
-- 设置MDC控制表
-- ----------------------------
DROP PROCEDURE IF EXISTS PRO_SettingMdcControl;

CREATE PROCEDURE `PRO_SettingMdcControl`(
v_mdcId INT,
v_controlName VARCHAR(50),
v_equipmentId INT,
v_baseTypeId INT,
v_parameterValues VARCHAR(500),
v_password VARCHAR(50))
BEGIN
	DECLARE v_id INT;

	-- 查询ControlName是否存在
	IF v_mdcId IS NULL THEN
		SELECT id INTO v_id FROM MDC_Control WHERE ControlName = v_controlName AND MdcId IS NULL;
	ELSE
		SELECT id INTO v_id FROM MDC_Control WHERE MdcId = v_mdcId AND ControlName = v_controlName;
	END IF;

	-- 新增 、 修改
	IF v_id IS NULL THEN
		SELECT MAX(id) INTO v_id FROM MDC_Control;

		IF v_id IS NULL THEN
			SET v_id = 100000001;
		ELSE
			SET v_id = v_id + 1;
		END IF;

		INSERT INTO MDC_Control(Id,MdcId,ControlName,`Password`,EquipmentId,BaseTypeId,ParameterValues)
			VALUES(v_id,v_mdcId,v_controlName,v_password,v_equipmentId,v_baseTypeId,v_parameterValues);
	ELSE
		UPDATE MDC_Control SET EquipmentId = v_equipmentId,BaseTypeId = v_baseTypeId,ParameterValues = v_parameterValues,`Password` = v_password
			WHERE Id = v_id;
	END IF;
END;

-- ----------------------------
-- 初始化MDC图表信号关系存储过程
-- ----------------------------
DROP PROCEDURE IF EXISTS PRO_InitDeviceChartMap;
CREATE PROCEDURE PRO_InitDeviceChartMap(
	v_ChartMapId INT,
	v_DeviceId INT,
	v_ChartType VARCHAR(50),
	v_Title VARCHAR(50),
	v_Y1Name VARCHAR(50),
	v_Y2Name VARCHAR(50),
	v_XName VARCHAR(50),
	v_Max VARCHAR(50),
	v_Min VARCHAR(50)
)
BEGIN
	DECLARE v_NextMapId INT;

	IF v_ChartMapId = -1 THEN
		SELECT MAX(ChartMapId) INTO v_NextMapId FROM MDC_DeviceChartMap;
		IF v_NextMapId IS NULL THEN
			SET v_NextMapId = 1000000001;
		ELSE
			SET v_NextMapId = v_NextMapId + 1;
		END IF;

		INSERT INTO MDC_DeviceChartMap(ChartMapId,DeviceId,ChartType,Title,Y1Name,Y2Name,XName,`Max`,`Min`)
		VALUES(v_NextMapId,v_DeviceId,v_ChartType,v_Title,v_Y1Name,v_Y2Name,v_XName,v_Max,v_Min);

		SELECT v_NextMapId;
	ELSE
		UPDATE MDC_DeviceChartMap SET DeviceId = v_DeviceId,ChartType = v_ChartType,Title = v_Title,
			Y1Name = v_Y1Name,Y2Name = v_Y2Name,XName = v_XName,`Max` = v_Max,`Min` = v_Min WHERE ChartMapId = v_ChartMapId;

		SELECT v_ChartMapId;
	END IF;
END;

-- ----------------------------
-- 初始化MDC图表信号关系存储过程
-- ----------------------------
DROP PROCEDURE IF EXISTS PRO_InitChartSignalMap;
CREATE PROCEDURE PRO_InitChartSignalMap(
	v_ChartMapId INT,
	v_DeviceId INT,
	v_BaseTypeId INT,
	v_Name VARCHAR(50)
)
BEGIN
	DECLARE v_NextMapId INT;

	SELECT MAX(SignalMapId) INTO v_NextMapId FROM MDC_ChartSignalMap;
	IF v_NextMapId IS NULL THEN
		SET v_NextMapId = 1000000001;
	ELSE
		SET v_NextMapId = v_NextMapId + 1;
	END IF;

	INSERT INTO MDC_ChartSignalMap(SignalMapId,ChartMapId,DeviceId,BaseTypeId,`Name`)
	VALUES(v_NextMapId,v_ChartMapId,v_DeviceId,v_BaseTypeId,v_Name);
END;

-- 设备信息表
DROP PROCEDURE IF EXISTS PRO_InsertDeviceInfo;
CREATE PROCEDURE PRO_InsertDeviceInfo(
	`v_EquipmentId` INT,
	`v_EquipmentModel` VARCHAR(50),
	`v_EquipmentVersion` VARCHAR(50),
	`v_ImagesPath` VARCHAR(50),
	`v_EquipmentSN` VARCHAR(255),
	`v_InstallTime` DATETIME,
	`v_UsedDate` INT,
	`v_WarrantyPeriod` INT,
	`v_MaintenanceTime` DATETIME,
	`v_ConfigSetting` VARCHAR(100),
	`v_PatchName` VARCHAR(50),
	`v_PatchVersion` VARCHAR(50),
	`v_DigitalSignature` VARCHAR(50),
	`v_Location` LONGTEXT,
	`v_Comment` LONGTEXT
)
BEGIN
	DECLARE v_EquipmentInfoId INT;
	DECLARE v_PortName VARCHAR(50);
	DECLARE v_Address VARCHAR(50);
	DECLARE v_Setting VARCHAR(50);

	SELECT EquipmentInfoId INTO v_EquipmentInfoId FROM TBL_EquipmentInfo WHERE EquipmentId = v_EquipmentId;

	IF v_EquipmentInfoId IS NULL THEN
		-- 设备编号不存在
		SELECT MAX(EquipmentInfoId) INTO v_EquipmentInfoId FROM TBL_EquipmentInfo;
		IF v_EquipmentInfoId IS NULL THEN
			SET v_EquipmentInfoId = 100000001;
		ELSE
			SET v_EquipmentInfoId = v_EquipmentInfoId +1;
		END IF;

		SELECT C.PortName,B.Address,C.Setting INTO v_PortName,v_Address,v_Setting FROM TBL_Equipment A
		LEFT JOIN TSL_SamplerUnit B ON A.SamplerUnitId = B.SamplerUnitId
		LEFT JOIN TSL_Port C ON B.PortId = C.PortId
		WHERE A.EquipmentId = v_EquipmentId;

		SET v_ConfigSetting = CONCAT('串口(',v_PortName,') 地址(',v_Address,') 波特率(',v_Setting,')');

		INSERT INTO TBL_EquipmentInfo(EquipmentInfoId,EquipmentId,ConfigSetting)
		VALUES(v_EquipmentInfoId,v_EquipmentId,v_ConfigSetting);
	ELSE
		-- 设备编号存储
		-- 设备信息表
		UPDATE TBL_EquipmentInfo SET EquipmentModel = v_EquipmentModel,EquipmentVersion = v_EquipmentVersion,ImagesPath = v_ImagesPath,
			UsedDate = v_UsedDate,WarrantyPeriod = v_WarrantyPeriod,MaintenanceTime = v_MaintenanceTime,ConfigSetting = v_ConfigSetting,
			PatchName = v_PatchName,PatchVersion = v_PatchVersion,DigitalSignature = v_DigitalSignature,Location = v_Location,`Comment` = v_Comment
		WHERE EquipmentId = v_EquipmentId;
		-- 设备表
		UPDATE TBL_Equipment SET EquipmentSN = v_EquipmentSN,InstallTime = v_InstallTime WHERE EquipmentId = v_EquipmentId;
	END IF;
END;

-- 设备操作表
DROP PROCEDURE IF EXISTS PRO_InsertDeviceRecord;
CREATE PROCEDURE PRO_InsertDeviceRecord(
	`v_EquipmentId` INT,
	`v_UserName` VARCHAR(50),
	`v_IPAddress` VARCHAR(50),
	`v_Operation` VARCHAR(50),
	`v_Comment` LONGTEXT
)
BEGIN
	DECLARE v_EquipmentRecordId INT;

	SELECT MAX(EquipmentRecordId) INTO v_EquipmentRecordId FROM TBL_EquipmentRecord;

	IF v_EquipmentRecordId IS NULL THEN
		SET v_EquipmentRecordId = 100000001;
	ELSE
		SET v_EquipmentRecordId = v_EquipmentRecordId + 1;
	END IF;

	INSERT INTO TBL_EquipmentRecord(EquipmentRecordId,EquipmentId,UserName,IPAddress,Operation,OperationTime,`Comment`)
	VALUES(v_EquipmentRecordId,v_EquipmentId,v_UserName,v_IPAddress,v_Operation,SYSDATE(),v_Comment);
END;

-- 累加设备信息的运行时间
DROP PROCEDURE IF EXISTS PRO_CumulativeDeviceUsedDate;
CREATE PROCEDURE PRO_CumulativeDeviceUsedDate()
BEGIN
	DECLARE v_EquipmentId INT;
	DECLARE v_UsedDate INT;
	DECLARE v_InstallTime VARCHAR(50);
	DECLARE v_nowTime VARCHAR(50);

	DECLARE done INT DEFAULT TRUE;
	DECLARE cur_EquipmentInfo CURSOR FOR (SELECT EquipmentId,UsedDate FROM TBL_EquipmentInfo);
	OPEN cur_EquipmentInfo;

	read_loop: LOOP
		FETCH cur_EquipmentInfo INTO v_EquipmentId,v_UsedDate;
		IF done THEN
			LEAVE read_loop;
		END IF;

		IF v_UsedDate IS NULL OR v_UsedDate = 0 THEN
			SELECT InstallTime INTO v_InstallTime FROM TBL_Equipment WHERE EquipmentId = v_EquipmentId;
			-- 运行时间为空，并安装时间为空
			IF v_InstallTime IS NULL THEN
				SET v_UsedDate = 1;
			ELSE
				SELECT DATE_FORMAT(v_InstallTime, '%Y-%m-%d') INTO v_InstallTime;
				SELECT DATE_FORMAT(SYSDATE(),'%Y-%m-%d') INTO v_nowTime;
				select timestampdiff(day,v_InstallTime,v_nowTime) INTO v_UsedDate;
			END IF;
		ELSE
			SET v_UsedDate = v_UsedDate + 1;
		END IF;

		UPDATE TBL_EquipmentInfo SET UsedDate = v_UsedDate WHERE EquipmentId = v_EquipmentId;
		COMMIT;
	END LOOP;
	CLOSE cur_EquipmentInfo;
END;